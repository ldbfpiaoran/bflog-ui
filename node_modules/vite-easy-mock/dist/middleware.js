"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = __importDefault(require("./config"));
const utils_1 = require("./utils");
function useMiddleWare(opts = {}) {
    const options = {
        ...config_1.default,
        ...opts
    };
    // /^\/api(.+)/
    const pattern = new RegExp(`^${options.pattern}(.+)`);
    const dir = process.cwd() + options.dir;
    const minDelayTime = options.delay[0] || 0;
    const maxDelayTime = options.delay[1] || 0;
    return async (req, res, next) => {
        // 判断是否是ajax请求 或者文件上传
        const isUpload = req.headers['content-type']?.includes('multipart/form-data');
        if (req.url) {
            const match = pattern.exec(req.url);
            const method = req.method?.toLowerCase();
            // 符合mock路由
            if (match) {
                // 避免中文乱码
                if (method === 'post') {
                    if (req.body === undefined && !isUpload) {
                        const body = await utils_1.bodyParse(req);
                        req.body = body;
                    }
                }
                const [mockpath, query = ''] = match[0].split('?');
                // 挂载path、query参数
                if (req.path === undefined) {
                    req.path = mockpath;
                }
                if (req.query == undefined && !isUpload) {
                    req.query = utils_1.parse(query);
                }
                // 真实mock文件地址
                const mock = utils_1.findPath(`${dir}${mockpath}`, options.fileSuffix);
                if (mock) {
                    // 删除缓存
                    delete require.cache[mock.path];
                    let data, delayTime = utils_1.getRandom(minDelayTime, maxDelayTime);
                    if (mock.type == 'js') {
                        let jsRet = await Promise.resolve().then(() => __importStar(require(mock.path)));
                        data = await (jsRet.default)(req);
                        res.writeHead(200, { 'Content-Type': 'application/json;charset=utf-8' });
                    }
                    else {
                        try {
                            data = require(mock.path);
                        }
                        catch (error) {
                            console.log("error when load file", error);
                        }
                    }
                    await utils_1.delay(delayTime);
                    if (mock.type == 'json') {
                        // 如果是json,默认返回utf-8, 避免中文乱码
                        res.writeHead(200, { 'Content-Type': 'application/json;charset=utf-8' });
                    }
                    res.end(JSON.stringify(data));
                }
                else {
                    // 没找到mock数据，继续执行
                    next();
                }
            }
            else {
                next();
            }
        }
        else {
            next();
        }
    };
}
exports.default = useMiddleWare;
