/**
 * amis-core v3.6.3
 * Copyright 2018-2023 fex
 */

import { __assign } from 'tslib';
import { types } from 'mobx-state-tree';
import { parseQuery, isObjectShallowModified } from '../utils/helper.js';
import { ServiceStore } from './service.js';
import '../utils/api.js';
import '../utils/ColorScale.js';
import 'react';
import 'lodash/chunk';
import 'amis-formula';
import 'lodash/isPlainObject';
import { extractObjectChain, createObjectFromChain } from '../utils/object.js';
import '../utils/DataSchema.js';
import '../utils/DataScope.js';
import 'moment';
import '../utils/debug.js';
import 'react-dom';
import '../utils/errors.js';
import '../utils/tpl.js';
import '../utils/filter.js';
import 'lodash/isObject';
import 'lodash/isString';
import 'lodash/isBoolean';
import '../utils/image.js';
import 'lodash/isEqual';
import '../actions/Action.js';
import 'lodash/debounce';
import 'lodash/cloneDeep';
import '../utils/resize-sensor.js';
import 'react-overlays/useRootClose';
import '../utils/SimpleMap.js';
import 'lodash/mapValues';
import 'lodash/camelCase';
import 'lodash/map';
import 'lodash/isEmpty';
import 'lodash/kebabCase';
import 'uncontrollable';
import 'hoist-non-react-statics';
import '../utils/validations.js';
import '../utils/resolveCondition.js';
import 'mobx';
import '../utils/Animation.js';

var RootStore = ServiceStore.named('RootStore')
    .props({
    runtimeError: types.frozen(),
    runtimeErrorStack: types.frozen(),
    query: types.frozen()
})
    .volatile(function (self) {
    return {
        context: {}
    };
})
    .views(function (self) { return ({
    get downStream() {
        var result = self.data;
        if (self.context || self.query) {
            var chain = extractObjectChain(result);
            self.context && chain.unshift(self.context);
            self.query &&
                chain.splice(chain.length - 1, 0, __assign(__assign({}, self.query), { __query: self.query }));
            result = createObjectFromChain(chain);
        }
        return result;
    }
}); })
    .actions(function (self) { return ({
    updateContext: function (context) {
        // 因为 context 不是受控属性，直接共用引用好了
        // 否则还会触发孩子节点的重新渲染
        Object.assign(self.context, context);
    },
    setRuntimeError: function (error, errorStack) {
        self.runtimeError = error;
        self.runtimeErrorStack = errorStack;
    },
    updateLocation: function (location, parseFn) {
        var query = parseFn ? parseFn(location) : parseQuery(location);
        if (isObjectShallowModified(query, self.query, false)) {
            self.query = query;
        }
    }
}); });

export { RootStore };
