/**
 * amis-core v3.6.3
 * Copyright 2018-2023 fex
 */

import { __awaiter, __generator } from 'tslib';
import '../utils/helper.js';
import { registerAction } from './Action.js';
import { createObject } from '../utils/object.js';

/**
 * 组件动作
 *
 * @export
 * @class CmptAction
 * @implements {Action}
 */
var CmptAction = /** @class */ (function () {
    function CmptAction() {
    }
    CmptAction.prototype.run = function (action, renderer, event) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
        return __awaiter(this, void 0, void 0, function () {
            var key, dataMergeMode, path, beforeSetData, res, component, msg, result, e_1;
            var _t, _u;
            return __generator(this, function (_v) {
                switch (_v.label) {
                    case 0:
                        key = action.componentId || action.componentName;
                        dataMergeMode = action.dataMergeMode || 'merge';
                        path = (_a = action.args) === null || _a === void 0 ? void 0 : _a.path;
                        if (!(action.actionType === 'setValue' && path && typeof path === 'string')) return [3 /*break*/, 2];
                        beforeSetData = (_c = (_b = event === null || event === void 0 ? void 0 : event.context) === null || _b === void 0 ? void 0 : _b.env) === null || _c === void 0 ? void 0 : _c.beforeSetData;
                        if (!(beforeSetData && typeof beforeSetData === 'function')) return [3 /*break*/, 2];
                        return [4 /*yield*/, beforeSetData(renderer, action, event)];
                    case 1:
                        res = _v.sent();
                        if (res === false) {
                            return [2 /*return*/];
                        }
                        _v.label = 2;
                    case 2:
                        component = key
                            ? (_d = event.context.scoped) === null || _d === void 0 ? void 0 : _d[action.componentId ? 'getComponentById' : 'getComponentByName'](key)
                            : renderer;
                        // 如果key指定了，但是没找到组件，则报错
                        if (key && !component) {
                            msg = '尝试执行一个不存在的目标组件动作，请检查目标组件非隐藏状态，且正确指定了componentId或componentName';
                            if (action.ignoreError === false) {
                                throw Error(msg);
                            }
                            else {
                                console.warn(msg);
                            }
                        }
                        if (action.actionType === 'setValue') {
                            if (component === null || component === void 0 ? void 0 : component.setData) {
                                return [2 /*return*/, component === null || component === void 0 ? void 0 : component.setData((_e = action.args) === null || _e === void 0 ? void 0 : _e.value, dataMergeMode === 'override', (_f = action.args) === null || _f === void 0 ? void 0 : _f.index, (_g = action.args) === null || _g === void 0 ? void 0 : _g.condition)];
                            }
                            else {
                                return [2 /*return*/, (_j = component === null || component === void 0 ? void 0 : (_h = component.props).onChange) === null || _j === void 0 ? void 0 : _j.call(_h, (_k = action.args) === null || _k === void 0 ? void 0 : _k.value)];
                            }
                        }
                        // 刷新
                        if (action.actionType === 'reload') {
                            return [2 /*return*/, (_l = component === null || component === void 0 ? void 0 : component.reload) === null || _l === void 0 ? void 0 : _l.call(component, undefined, action.data, undefined, undefined, dataMergeMode === 'override', action.args)];
                        }
                        _v.label = 3;
                    case 3:
                        _v.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, ((_m = component === null || component === void 0 ? void 0 : component.doAction) === null || _m === void 0 ? void 0 : _m.call(component, action, action.args, true))];
                    case 4:
                        result = _v.sent();
                        if (['validate', 'submit'].includes(action.actionType)) {
                            event.setData(createObject(event.data, (_t = {},
                                _t[action.outputVar || "".concat(action.actionType, "Result")] = {
                                    error: '',
                                    payload: (_o = result === null || result === void 0 ? void 0 : result.__payload) !== null && _o !== void 0 ? _o : (_q = (_p = component === null || component === void 0 ? void 0 : component.props) === null || _p === void 0 ? void 0 : _p.store) === null || _q === void 0 ? void 0 : _q.data,
                                    responseData: result === null || result === void 0 ? void 0 : result.__response
                                },
                                _t)));
                        }
                        return [2 /*return*/, result];
                    case 5:
                        e_1 = _v.sent();
                        event.setData(createObject(event.data, (_u = {},
                            _u[action.outputVar || "".concat(action.actionType, "Result")] = {
                                error: e_1.message,
                                errors: e_1.name === 'ValidateError' ? e_1.detail : e_1,
                                payload: (_s = (_r = component === null || component === void 0 ? void 0 : component.props) === null || _r === void 0 ? void 0 : _r.store) === null || _s === void 0 ? void 0 : _s.data
                            },
                            _u)));
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    return CmptAction;
}());
registerAction('component', new CmptAction());

export { CmptAction };
