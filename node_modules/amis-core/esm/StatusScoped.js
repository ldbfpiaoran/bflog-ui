/**
 * amis-core v3.6.3
 * Copyright 2018-2023 fex
 */

import { __extends, __assign } from 'tslib';
import React from 'react';
import hoistNonReactStatic from 'hoist-non-react-statics';
import { StatusStore } from './store/status.js';
import { destroy } from 'mobx-state-tree';

function StatusScoped(ComposedComponent) {
    var _a;
    var result = hoistNonReactStatic((_a = /** @class */ (function (_super) {
            __extends(class_1, _super);
            function class_1(props) {
                var _this = _super.call(this, props) || this;
                _this.childRef = _this.childRef.bind(_this);
                _this.getWrappedInstance = _this.getWrappedInstance.bind(_this);
                _this.store = StatusStore.create({});
                return _this;
            }
            class_1.prototype.childRef = function (ref) {
                while (ref && ref.getWrappedInstance) {
                    ref = ref.getWrappedInstance();
                }
                this.ref = ref;
            };
            class_1.prototype.getWrappedInstance = function () {
                return this.ref;
            };
            class_1.prototype.componentWillUnmount = function () {
                this.store && destroy(this.store);
                delete this.store;
            };
            class_1.prototype.render = function () {
                var _a;
                var injectedProps = {
                    statusStore: this.store
                };
                var refConfig = ((_a = ComposedComponent.prototype) === null || _a === void 0 ? void 0 : _a.isReactComponent)
                    ? { ref: this.childRef }
                    : { forwardedRef: this.childRef };
                return (React.createElement(ComposedComponent, __assign({}, this.props, injectedProps, refConfig)));
            };
            return class_1;
        }(React.Component)),
        _a.displayName = "StatusScoped(".concat(ComposedComponent.displayName || ComposedComponent.name, ")"),
        _a.ComposedComponent = ComposedComponent,
        _a), ComposedComponent);
    return result;
}

export { StatusScoped };
