/**
 * amis-core v3.6.3
 * Copyright 2018-2023 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var omit = require('lodash/omit');
require('../utils/helper.js');
var tpl = require('../utils/tpl.js');
require('amis-formula');
require('moment');
var object = require('../utils/object.js');
var dataMapping = require('../utils/dataMapping.js');
require('../utils/filter.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var omit__default = /*#__PURE__*/_interopDefaultLegacy(omit);

// 循环动作执行状态
exports.LoopStatus = void 0;
(function (LoopStatus) {
    LoopStatus[LoopStatus["NORMAL"] = 0] = "NORMAL";
    LoopStatus[LoopStatus["BREAK"] = 1] = "BREAK";
    LoopStatus[LoopStatus["CONTINUE"] = 2] = "CONTINUE";
})(exports.LoopStatus || (exports.LoopStatus = {}));
// 存储 Action 和类型的映射关系，用于后续查找
var ActionTypeMap = {};
// 注册 Action
var registerAction = function (type, action) {
    ActionTypeMap[type] = action;
};
// 通过类型获取 Action 实例
var getActionByType = function (type) {
    return ActionTypeMap[type];
};
// 根据动作类型获取属性排除列表
var getOmitActionProp = function (type) {
    var omitList = [];
    switch (type) {
        case 'toast':
            omitList = [
                'msgType',
                'msg',
                'position',
                'closeButton',
                'showIcon',
                'timeout',
                'title'
            ];
            break;
        case 'alert':
            omitList = ['msg'];
            break;
        case 'confirm':
            omitList = ['msg', 'title'];
            break;
        case 'ajax':
        case 'download':
            omitList = ['api', 'messages', 'options'];
            break;
        case 'setValue':
            omitList = ['value', 'index'];
            break;
        case 'copy':
            omitList = ['content', 'copyFormat'];
            break;
        case 'email':
            omitList = ['to', 'cc', 'bcc', 'subject', 'body'];
            break;
        case 'link':
            omitList = ['link', 'blank', 'params'];
            break;
        case 'url':
            omitList = ['url', 'blank', 'params'];
            break;
        case 'for':
            omitList = ['loopName'];
            break;
        case 'goPage':
            omitList = ['delta'];
            break;
        case 'custom':
            omitList = ['script'];
            break;
        case 'broadcast':
            omitList = ['eventName'];
            break;
        case 'dialog':
            omitList = ['dialog'];
            break;
        case 'drawer':
            omitList = ['drawer'];
            break;
        case 'confirmDialog':
            omitList = ['dialog'];
            break;
        case 'reload':
            omitList = ['resetPage'];
            break;
    }
    return omitList;
};
var runActions = function (actions, renderer, event) { return tslib.__awaiter(void 0, void 0, void 0, function () {
    var actions_1, actions_1_1, actionConfig, actionInstrance, e_1, ignore, e_2_1;
    var e_2, _a;
    var _b;
    return tslib.__generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (!Array.isArray(actions)) {
                    actions = [actions];
                }
                _c.label = 1;
            case 1:
                _c.trys.push([1, 9, 10, 11]);
                actions_1 = tslib.__values(actions), actions_1_1 = actions_1.next();
                _c.label = 2;
            case 2:
                if (!!actions_1_1.done) return [3 /*break*/, 8];
                actionConfig = actions_1_1.value;
                actionInstrance = getActionByType(actionConfig.actionType);
                // 如果存在指定组件ID，说明是组件专有动作
                if (!actionInstrance &&
                    (actionConfig.componentId || actionConfig.componentName)) {
                    actionInstrance = [
                        'static',
                        'nonstatic',
                        'show',
                        'visibility',
                        'hidden',
                        'enabled',
                        'disabled',
                        'usability'
                    ].includes(actionConfig.actionType)
                        ? getActionByType('status')
                        : getActionByType('component');
                }
                else if (['url', 'link', 'jump'].includes(actionConfig.actionType)) {
                    // 打开页面动作
                    actionInstrance = getActionByType('openlink');
                }
                // 找不到就通过组件专有动作完成
                if (!actionInstrance) {
                    actionInstrance = getActionByType('component');
                }
                _c.label = 3;
            case 3:
                _c.trys.push([3, 5, , 6]);
                // 这些节点的子节点运行逻辑由节点内部实现
                return [4 /*yield*/, runAction(actionInstrance, actionConfig, renderer, event)];
            case 4:
                // 这些节点的子节点运行逻辑由节点内部实现
                _c.sent();
                return [3 /*break*/, 6];
            case 5:
                e_1 = _c.sent();
                ignore = (_b = actionConfig.ignoreError) !== null && _b !== void 0 ? _b : false;
                if (!ignore) {
                    throw Error("".concat(actionConfig.actionType, " \u52A8\u4F5C\u6267\u884C\u5931\u8D25\uFF0C\u539F\u56E0\uFF1A").concat(e_1.message || '未知'));
                }
                return [3 /*break*/, 6];
            case 6:
                if (event.stoped) {
                    return [3 /*break*/, 8];
                }
                _c.label = 7;
            case 7:
                actions_1_1 = actions_1.next();
                return [3 /*break*/, 2];
            case 8: return [3 /*break*/, 11];
            case 9:
                e_2_1 = _c.sent();
                e_2 = { error: e_2_1 };
                return [3 /*break*/, 11];
            case 10:
                try {
                    if (actions_1_1 && !actions_1_1.done && (_a = actions_1.return)) _a.call(actions_1);
                }
                finally { if (e_2) throw e_2.error; }
                return [7 /*endfinally*/];
            case 11: return [2 /*return*/];
        }
    });
}); };
// 执行动作，与原有动作处理打通
var runAction = function (actionInstrance, actionConfig, renderer, event) { return tslib.__awaiter(void 0, void 0, void 0, function () {
    var additional, action, mergeData, expression, isStop, preventDefault, key, api, cmptFlag, targetComponent, args, afterMappingData, actionData, data, stopped, actionResult, stopPropagation;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
    return tslib.__generator(this, function (_v) {
        switch (_v.label) {
            case 0:
                additional = {
                    event: event
                };
                action = tslib.__assign({}, actionConfig);
                action.args = tslib.__assign({}, actionConfig.args);
                // __rendererData默认为renderer.props.data，兼容表单项值变化时的data读取
                if (!event.data.__rendererData) {
                    additional = {
                        event: event,
                        __rendererData: renderer.props.data // 部分组件交互后会有更新，如果想要获取那部分数据，可以通过事件数据获取
                    };
                }
                mergeData = object.createObject(object.createObject(renderer.props.data.__super
                    ? object.createObject(renderer.props.data.__super, additional)
                    : additional, renderer.props.data), event.data);
                expression = (_a = action.expression) !== null && _a !== void 0 ? _a : action.execOn;
                isStop = false;
                if (!expression) return [3 /*break*/, 2];
                return [4 /*yield*/, tpl.evalExpressionWithConditionBuilder(expression, mergeData, true)];
            case 1:
                isStop = !(_v.sent());
                _v.label = 2;
            case 2:
                if (isStop) {
                    return [2 /*return*/];
                }
                preventDefault = false;
                if (!action.preventDefault) return [3 /*break*/, 4];
                return [4 /*yield*/, tpl.evalExpressionWithConditionBuilder(action.preventDefault, mergeData, false)];
            case 3:
                preventDefault = _v.sent();
                _v.label = 4;
            case 4:
                key = {
                    componentId: dataMapping.dataMapping(action.componentId, mergeData),
                    componentName: dataMapping.dataMapping(action.componentName, mergeData)
                };
                // 兼容args包裹的用法
                if (action.actionType === 'dialog') {
                    action.dialog = tslib.__assign({}, ((_b = action.dialog) !== null && _b !== void 0 ? _b : (_c = action.args) === null || _c === void 0 ? void 0 : _c.dialog));
                    (_d = action.args) === null || _d === void 0 ? true : delete _d.dialog;
                }
                else if (action.actionType === 'drawer') {
                    action.drawer = tslib.__assign({}, ((_e = action.drawer) !== null && _e !== void 0 ? _e : (_f = action.args) === null || _f === void 0 ? void 0 : _f.drawer));
                    (_g = action.args) === null || _g === void 0 ? true : delete _g.drawer;
                }
                else if (['ajax', 'download'].includes(action.actionType)) {
                    api = (_h = action.api) !== null && _h !== void 0 ? _h : (_j = action.args) === null || _j === void 0 ? void 0 : _j.api;
                    action.api = typeof api === 'string' ? api : tslib.__assign({}, api);
                    action.options = tslib.__assign({}, ((_k = action.options) !== null && _k !== void 0 ? _k : (_l = action.args) === null || _l === void 0 ? void 0 : _l.options));
                    action.messages = tslib.__assign({}, ((_m = action.messages) !== null && _m !== void 0 ? _m : (_o = action.args) === null || _o === void 0 ? void 0 : _o.messages));
                    (_p = action.args) === null || _p === void 0 ? true : delete _p.api;
                    (_q = action.args) === null || _q === void 0 ? true : delete _q.options;
                    (_r = action.args) === null || _r === void 0 ? true : delete _r.messages;
                }
                cmptFlag = key.componentId || key.componentName;
                targetComponent = cmptFlag
                    ? (_s = event.context.scoped) === null || _s === void 0 ? void 0 : _s[action.componentId ? 'getComponentById' : 'getComponentByName'](cmptFlag)
                    : renderer;
                args = dataMapping.dataMapping(action.args, mergeData, function (key) {
                    var _a;
                    var actionIgnoreKey = {
                        ajax: ['adaptor', 'responseAdaptor', 'requestAdaptor', 'responseData']
                    };
                    var cmptIgnoreMap = {
                        'input-table': ['condition']
                    };
                    var curCmptType = (_a = targetComponent === null || targetComponent === void 0 ? void 0 : targetComponent.props) === null || _a === void 0 ? void 0 : _a.type;
                    var curActionType = action.actionType;
                    var ignoreKey = tslib.__spreadArray(tslib.__spreadArray([], tslib.__read((actionIgnoreKey[curActionType] || [])), false), tslib.__read((cmptIgnoreMap[curCmptType] || [])), false);
                    return ignoreKey.includes(key);
                });
                afterMappingData = dataMapping.dataMapping(action.data, mergeData);
                actionData = args && Object.keys(args).length
                    ? omit__default["default"](tslib.__assign(tslib.__assign({}, args), (afterMappingData !== null && afterMappingData !== void 0 ? afterMappingData : {})), getOmitActionProp(action.actionType))
                    : afterMappingData;
                data = actionData !== undefined &&
                    !['ajax', 'download', 'dialog', 'drawer'].includes(action.actionType) // 避免非法配置影响对actionData的判断，导致动作配置中的数据映射失败
                    ? actionData
                    : mergeData;
                (_t = console.group) === null || _t === void 0 ? void 0 : _t.call(console, "run action ".concat(action.actionType));
                console.debug("[".concat(action.actionType, "] action args, data"), args, data);
                stopped = false;
                return [4 /*yield*/, actionInstrance.run(tslib.__assign(tslib.__assign(tslib.__assign({}, action), { args: args, data: action.actionType === 'reload' ? actionData : data }), key), renderer, event, mergeData)];
            case 5:
                actionResult = _v.sent();
                // 二次确认弹窗如果取消，则终止后续动作
                if ((action === null || action === void 0 ? void 0 : action.actionType) === 'confirmDialog' && !actionResult) {
                    stopped = true;
                    preventDefault = true; // 这种对表单项change比较有意义，例如switch切换时弹确认弹窗，如果取消后不能把switch修改了
                }
                stopPropagation = false;
                if (!action.stopPropagation) return [3 /*break*/, 7];
                return [4 /*yield*/, tpl.evalExpressionWithConditionBuilder(action.stopPropagation, mergeData, false)];
            case 6:
                stopPropagation = _v.sent();
                _v.label = 7;
            case 7:
                console.debug("[".concat(action.actionType, "] action end event"), event);
                (_u = console.groupEnd) === null || _u === void 0 ? void 0 : _u.call(console);
                // 阻止原有动作执行
                preventDefault && event.preventDefault();
                // 阻止后续动作执行
                (stopPropagation || stopped) && event.stopPropagation();
                return [2 /*return*/];
        }
    });
}); };

exports.getActionByType = getActionByType;
exports.registerAction = registerAction;
exports.runAction = runAction;
exports.runActions = runActions;
