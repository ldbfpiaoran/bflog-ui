/**
 * amis-core v3.6.3
 * Copyright 2018-2023 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var mobxStateTree = require('mobx-state-tree');
var helper = require('../utils/helper.js');
var service = require('./service.js');
require('../utils/api.js');
require('../utils/ColorScale.js');
require('../utils/columnsSplit.js');
require('amis-formula');
require('lodash/isPlainObject');
var object = require('../utils/object.js');
require('../utils/DataSchema.js');
require('../utils/DataScope.js');
require('moment');
require('../utils/debug.js');
require('../utils/dom.js');
require('../utils/errors.js');
require('../utils/tpl.js');
require('../utils/filter.js');
require('lodash/isObject');
require('lodash/isString');
require('lodash/isBoolean');
require('../utils/highlight.js');
require('../utils/icon.js');
require('../utils/image.js');
require('lodash/isEqual');
require('../actions/Action.js');
require('lodash/debounce');
require('lodash/cloneDeep');
require('../utils/resize-sensor.js');
require('react');
require('react-overlays/useRootClose');
require('react-dom');
require('../utils/SimpleMap.js');
require('lodash/mapValues');
require('lodash/camelCase');
require('lodash/map');
require('lodash/isEmpty');
require('lodash/kebabCase');
require('uncontrollable');
require('hoist-non-react-statics');
require('../utils/validations.js');
require('../utils/resolveCondition.js');
require('mobx');
require('../utils/Animation.js');

var RootStore = service.ServiceStore.named('RootStore')
    .props({
    runtimeError: mobxStateTree.types.frozen(),
    runtimeErrorStack: mobxStateTree.types.frozen(),
    query: mobxStateTree.types.frozen()
})
    .volatile(function (self) {
    return {
        context: {}
    };
})
    .views(function (self) { return ({
    get downStream() {
        var result = self.data;
        if (self.context || self.query) {
            var chain = object.extractObjectChain(result);
            self.context && chain.unshift(self.context);
            self.query &&
                chain.splice(chain.length - 1, 0, tslib.__assign(tslib.__assign({}, self.query), { __query: self.query }));
            result = object.createObjectFromChain(chain);
        }
        return result;
    }
}); })
    .actions(function (self) { return ({
    updateContext: function (context) {
        // 因为 context 不是受控属性，直接共用引用好了
        // 否则还会触发孩子节点的重新渲染
        Object.assign(self.context, context);
    },
    setRuntimeError: function (error, errorStack) {
        self.runtimeError = error;
        self.runtimeErrorStack = errorStack;
    },
    updateLocation: function (location, parseFn) {
        var query = parseFn ? parseFn(location) : helper.parseQuery(location);
        if (helper.isObjectShallowModified(query, self.query, false)) {
            self.query = query;
        }
    }
}); });

exports.RootStore = RootStore;
