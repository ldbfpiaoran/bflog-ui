/**
 * amis-core v3.6.3
 * Copyright 2018-2023 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var helper = require('./helper.js');
var cloneDeep = require('lodash/cloneDeep');
var isObject = require('lodash/isObject');
var map = require('lodash/map');
var isEmpty = require('lodash/isEmpty');
var kebabCase = require('lodash/kebabCase');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var cloneDeep__default = /*#__PURE__*/_interopDefaultLegacy(cloneDeep);
var isObject__default = /*#__PURE__*/_interopDefaultLegacy(isObject);
var map__default = /*#__PURE__*/_interopDefaultLegacy(map);
var isEmpty__default = /*#__PURE__*/_interopDefaultLegacy(isEmpty);
var kebabCase__default = /*#__PURE__*/_interopDefaultLegacy(kebabCase);

var valueMap = {
    'marginTop': 'margin-top',
    'marginRight': 'margin-right',
    'marginBottom': 'margin-bottom',
    'marginLeft': 'margin-left',
    'paddingTop': 'padding-top',
    'paddingRight': 'padding-right',
    'paddingBottom': 'padding-bottom',
    'paddingLeft': 'padding-left',
    'top-border-width': 'border-top-width',
    'right-border-width': 'border-right-width',
    'bottom-border-width': 'border-bottom-width',
    'left-border-width': 'border-left-width',
    'top-border-style': 'border-top-style',
    'right-border-style': 'border-right-style',
    'bottom-border-style': 'border-bottom-style',
    'left-border-style': 'border-left-style',
    'top-border-color': 'border-top-color',
    'right-border-color': 'border-right-color',
    'bottom-border-color': 'border-bottom-color',
    'left-border-color': 'border-left-color',
    'fontSize': 'font-size',
    'fontWeight': 'font-weight',
    'lineHeight': 'line-height'
};
var inheritValueMap = {
    background: 'bg-color',
    radius: 'border'
};
function findOrCreateStyle(id, doc) {
    doc = doc || document;
    var varStyleTag = doc.getElementById(id);
    if (!varStyleTag) {
        varStyleTag = doc.createElement('style');
        varStyleTag.id = id;
        doc.body.appendChild(varStyleTag);
    }
    return varStyleTag;
}
function insertStyle(style, id, doc) {
    var varStyleTag = findOrCreateStyle('amis-' + id, doc);
    // bca-disable-line
    varStyleTag.innerHTML = style;
    if (!style) {
        varStyleTag.remove();
    }
}
function addStyle(style, id) {
    var varStyleTag = findOrCreateStyle(id);
    // bca-disable-line
    varStyleTag.innerHTML += style;
}
// 继承数据处理
function handleInheritData(statusMap, data) {
    if (!data) {
        return;
    }
    // 检查是否存在inherit
    ['hover', 'active'].forEach(function (status) {
        Object.keys(statusMap[status]).forEach(function (key) {
            if (typeof statusMap[status][key] === 'object') {
                Object.keys(statusMap[status][key]).forEach(function (style) {
                    if (statusMap[status][key][style] === 'inherit') {
                        // 值为inherit时设置为default的值或者主题中的default值
                        if (statusMap['default'][key] && statusMap['default'][key][style]) {
                            statusMap[status][key][style] = statusMap.default[key][style];
                        }
                        else {
                            var value = inheritValueMap[key] || key;
                            statusMap[status][key][style] =
                                data['default'].body[value][style];
                        }
                    }
                });
            }
            else {
                if (statusMap[status][key] === 'inherit') {
                    if (statusMap['default'][key] && statusMap['default'][key]) {
                        statusMap[status][key] = statusMap.default[key];
                    }
                    else {
                        var value = inheritValueMap[key] || key;
                        statusMap[status][key] = data['default'].body[value];
                    }
                }
            }
        });
    });
}
function formatStyle(themeCss, classNames, id, defaultData) {
    var e_1, _a;
    // 没有具体的样式，或者没有对应的classname
    if (!themeCss || !classNames) {
        return { value: '', origin: [] };
    }
    var res = [];
    var status2string = {
        default: '',
        hover: ':hover',
        active: ':hover:active',
        disabled: '.is-disabled'
    };
    var _loop_1 = function (item) {
        var body = themeCss[item.key];
        if (!body) {
            return "continue";
        }
        var className = item.key + '-' + (id === null || id === void 0 ? void 0 : id.replace('u:', ''));
        var weightsList = item.weights || {};
        var statusMap = {
            default: {},
            hover: {},
            active: {},
            disabled: {}
        };
        Object.keys(body).forEach(function (key) {
            if (key !== '$$id' && body[key]) {
                if (!!~key.indexOf(':default')) {
                    statusMap.default[key.replace(':default', '')] = body[key];
                }
                else if (!!~key.indexOf(':hover')) {
                    statusMap.hover[key.replace(':hover', '')] = body[key];
                }
                else if (!!~key.indexOf(':active')) {
                    statusMap.active[key.replace(':active', '')] = body[key];
                }
                else if (!!~key.indexOf(':disabled')) {
                    statusMap.disabled[key.replace(':disabled', '')] = body[key];
                }
                else {
                    statusMap.default[key] = body[key];
                }
            }
        });
        handleInheritData(statusMap, defaultData);
        Object.keys(statusMap).forEach(function (status) {
            var weights = weightsList[status];
            var styles = [];
            var fn = function (key, value) {
                key = valueMap[key] || key;
                styles.push("".concat(kebabCase__default["default"](key), ": ").concat(value + ((weights === null || weights === void 0 ? void 0 : weights.important) ? ' !important' : ''), ";"));
            };
            Object.keys(statusMap[status]).forEach(function (key) {
                if (key !== '$$id') {
                    var style_1 = statusMap[status][key];
                    if (typeof style_1 === 'object') {
                        // 圆角特殊处理
                        if (key === 'radius') {
                            fn('border-radius', [
                                style_1['top-left-border-radius'] || 0,
                                style_1['top-right-border-radius'] || 0,
                                style_1['bottom-right-border-radius'] || 0,
                                style_1['bottom-left-border-radius'] || 0,
                                (weights === null || weights === void 0 ? void 0 : weights.important) ? ' !important' : ''
                            ].join(' '));
                        }
                        else {
                            Object.keys(style_1).forEach(function (k) {
                                if (k !== '$$id') {
                                    var value = style_1[k];
                                    value &&
                                        fn(k, value + ((weights === null || weights === void 0 ? void 0 : weights.important) ? ' !important' : ''));
                                }
                            });
                        }
                    }
                    else {
                        var value = style_1;
                        if (key === 'iconSize') {
                            fn('width', value);
                            fn('height', value);
                            fn('font-size', value);
                        }
                        else {
                            value && fn(key, value);
                        }
                    }
                }
            });
            if (styles.length > 0) {
                var cx = ((weights === null || weights === void 0 ? void 0 : weights.pre) || '') + className + ((weights === null || weights === void 0 ? void 0 : weights.suf) || '');
                var inner = (weights === null || weights === void 0 ? void 0 : weights.inner) || '';
                res.push({
                    className: cx + status2string[status] + inner,
                    content: ".".concat(cx + status2string[status], " ").concat(inner, "{\n  ").concat(styles.join('\n  '), "\n}")
                });
                // TODO:切换状态暂时先不改变组件的样式
                // if (['hover', 'active', 'disabled'].includes(status)) {
                //   res.push({
                //     className: cx + '.' + status,
                //     content: `.${cx}.${status} {\n  ${styles.join('\n  ')}\n}`
                //   });
                // }
            }
        });
    };
    try {
        for (var classNames_1 = tslib.__values(classNames), classNames_1_1 = classNames_1.next(); !classNames_1_1.done; classNames_1_1 = classNames_1.next()) {
            var item = classNames_1_1.value;
            _loop_1(item);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (classNames_1_1 && !classNames_1_1.done && (_a = classNames_1.return)) _a.call(classNames_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return {
        value: res.map(function (n) { return n.content; }).join('\n'),
        origin: res
    };
}
function insertCustomStyle(themeCss, classNames, id, defaultData, customStyleClassPrefix, doc) {
    if (!themeCss) {
        return;
    }
    var value = formatStyle(themeCss, classNames, id, defaultData).value;
    value = customStyleClassPrefix ? "".concat(customStyleClassPrefix, " ").concat(value) : value;
    insertStyle(value, id.replace('u:', ''), doc);
}
/**
 * 根据路径获取默认值
 */
function getValueByPath(path, data) {
    try {
        if (!path || !data) {
            return null;
        }
        var keys = path.split('.');
        var value = cloneDeep__default["default"](data.component);
        for (var i = 0; i < keys.length; i++) {
            value = value[keys[i]];
        }
        return value;
    }
    catch (e) {
        return null;
    }
}
// 递归处理嵌套的样式，转化成一维对象
function traverseStyle(style, path, result) {
    Object.keys(style).forEach(function (key) {
        if (key !== '$$id') {
            if (isObject__default["default"](style[key])) {
                var nowPath = path ? "".concat(path, " ").concat(key) : key;
                traverseStyle(style[key], nowPath, result);
            }
            else if (path === '') {
                !result[key] && (result[key] = {});
                result[key] = style[key];
            }
            else {
                !result[path] && (result[path] = {});
                result[path][key] = style[key];
            }
        }
    });
}
/**
 * 设置源码编辑自定义样式
 */
function insertEditCustomStyle(customStyle, id, doc) {
    var styles = {};
    traverseStyle(customStyle, '', styles);
    var content = '';
    if (!isEmpty__default["default"](styles)) {
        var className_1 = "wrapperCustomStyle-".concat(id === null || id === void 0 ? void 0 : id.replace('u:', ''));
        Object.keys(styles).forEach(function (key) {
            if (!isObject__default["default"](styles[key])) {
                content += "\n.".concat(className_1, " {\n  ").concat(key, ": ").concat(styles[key], "\n}");
            }
            else if (key === 'root') {
                var res = map__default["default"](styles[key], function (value, key) { return "".concat(key, ": ").concat(value, ";"); });
                content += "\n.".concat(className_1, " {\n  ").concat(res.join('\n  '), "\n}");
            }
            else if (/^root:/.test(key)) {
                var res = map__default["default"](styles[key], function (value, key) { return "".concat(key, ": ").concat(value, ";"); });
                var nowKey = key.replace('root', '');
                content += "\n.".concat(className_1, " ").concat(nowKey, " {\n  ").concat(res.join('\n  '), "\n}");
            }
            else {
                var res = map__default["default"](styles[key], function (value, key) { return "".concat(key, ": ").concat(value, ";"); });
                content += "\n.".concat(className_1, " ").concat(key, " {\n  ").concat(res.join('\n  '), "\n}");
            }
        });
    }
    insertStyle(content, 'wrapperCustomStyle-' + ((id === null || id === void 0 ? void 0 : id.replace('u:', '')) || helper.uuid()), doc);
}
/**
 * 移除自定义样式
 */
function removeCustomStyle(type, id, doc) {
    var style = (doc || document).getElementById('amis-' + (type ? type + '-' : '') + id.replace('u:', ''));
    if (style) {
        style.remove();
    }
}
function formatInputThemeCss(themeCss) {
    if (!themeCss) {
        return;
    }
    var inputFontThemeCss = { inputControlClassName: {} };
    var inputControlClassNameObject = (themeCss === null || themeCss === void 0 ? void 0 : themeCss.inputControlClassName) || {};
    Object.keys(inputControlClassNameObject).forEach(function (key) {
        if (~key.indexOf('font')) {
            inputFontThemeCss.inputControlClassName[key] =
                inputControlClassNameObject[key];
        }
    });
    return inputFontThemeCss;
}
function setThemeClassName(name, id, themeCss, extra) {
    if (!id || !themeCss) {
        return '';
    }
    if (name !== 'wrapperCustomStyle' && !themeCss[name]) {
        return '';
    }
    return "".concat(name, "-").concat(id.replace('u:', '')) + (extra ? "-".concat(extra) : '');
}

exports.addStyle = addStyle;
exports.findOrCreateStyle = findOrCreateStyle;
exports.formatInputThemeCss = formatInputThemeCss;
exports.formatStyle = formatStyle;
exports.getValueByPath = getValueByPath;
exports.inheritValueMap = inheritValueMap;
exports.insertCustomStyle = insertCustomStyle;
exports.insertEditCustomStyle = insertEditCustomStyle;
exports.insertStyle = insertStyle;
exports.removeCustomStyle = removeCustomStyle;
exports.setThemeClassName = setThemeClassName;
exports.valueMap = valueMap;
