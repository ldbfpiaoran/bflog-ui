{
  "version": 3,
  "sources": ["../../echarts-wordcloud/dist/webpack:/echarts-wordcloud/webpack/universalModuleDefinition", "../../echarts-wordcloud/dist/webpack:/echarts-wordcloud/src/WordCloudSeries.js", "../../echarts-wordcloud/dist/webpack:/echarts-wordcloud/src/WordCloudView.js", "../../echarts-wordcloud/dist/webpack:/echarts-wordcloud/src/layout.js", "../../echarts-wordcloud/dist/webpack:/echarts-wordcloud/src/wordCloud.js", "../../echarts-wordcloud/dist/webpack:/echarts-wordcloud/index.js", "../../echarts-wordcloud/dist/webpack:/echarts-wordcloud/external \"echarts\"", "../../echarts-wordcloud/dist/webpack:/echarts-wordcloud/webpack/bootstrap", "../../echarts-wordcloud/dist/webpack:/echarts-wordcloud/webpack/runtime/make namespace object", "../../echarts-wordcloud/dist/webpack:/echarts-wordcloud/webpack/startup"],
  "sourcesContent": ["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"echarts\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"echarts\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"echarts-wordcloud\"] = factory(require(\"echarts\"));\n\telse\n\t\troot[\"echarts-wordcloud\"] = factory(root[\"echarts\"]);\n})(self, function(__WEBPACK_EXTERNAL_MODULE_echarts_lib_echarts__) {\nreturn ", "import * as echarts from 'echarts/lib/echarts';\n\necharts.extendSeriesModel({\n  type: 'series.wordCloud',\n\n  visualStyleAccessPath: 'textStyle',\n  visualStyleMapper: function (model) {\n    return {\n      fill: model.get('color')\n    };\n  },\n  visualDrawType: 'fill',\n\n  optionUpdated: function () {\n    var option = this.option;\n    option.gridSize = Math.max(Math.floor(option.gridSize), 4);\n  },\n\n  getInitialData: function (option, ecModel) {\n    var dimensions = echarts.helper.createDimensions(option.data, {\n      coordDimensions: ['value']\n    });\n    var list = new echarts.List(dimensions, this);\n    list.initData(option.data);\n    return list;\n  },\n\n  // Most of options are from https://github.com/timdream/wordcloud2.js/blob/gh-pages/API.md\n  defaultOption: {\n    maskImage: null,\n\n    // Shape can be 'circle', 'cardioid', 'diamond', 'triangle-forward', 'triangle', 'pentagon', 'star'\n    shape: 'circle',\n    keepAspect: false,\n\n    left: 'center',\n\n    top: 'center',\n\n    width: '70%',\n\n    height: '80%',\n\n    sizeRange: [12, 60],\n\n    rotationRange: [-90, 90],\n\n    rotationStep: 45,\n\n    gridSize: 8,\n\n    drawOutOfBound: false,\n    shrinkToFit: false,\n\n    textStyle: {\n      fontWeight: 'normal'\n    }\n  }\n});\n", "import * as echarts from 'echarts/lib/echarts';\n\necharts.extendChartView({\n  type: 'wordCloud',\n\n  render: function (seriesModel, ecModel, api) {\n    var group = this.group;\n    group.removeAll();\n\n    var data = seriesModel.getData();\n\n    var gridSize = seriesModel.get('gridSize');\n\n    seriesModel.layoutInstance.ondraw = function (text, size, dataIdx, drawn) {\n      var itemModel = data.getItemModel(dataIdx);\n      var textStyleModel = itemModel.getModel('textStyle');\n\n      var textEl = new echarts.graphic.Text({\n        style: echarts.helper.createTextStyle(textStyleModel),\n        scaleX: 1 / drawn.info.mu,\n        scaleY: 1 / drawn.info.mu,\n        x: (drawn.gx + drawn.info.gw / 2) * gridSize,\n        y: (drawn.gy + drawn.info.gh / 2) * gridSize,\n        rotation: drawn.rot\n      });\n      textEl.setStyle({\n        x: drawn.info.fillTextOffsetX,\n        y: drawn.info.fillTextOffsetY + size * 0.5,\n        text: text,\n        verticalAlign: 'middle',\n        fill: data.getItemVisual(dataIdx, 'style').fill,\n        fontSize: size\n      });\n\n      group.add(textEl);\n\n      data.setItemGraphicEl(dataIdx, textEl);\n\n      textEl.ensureState('emphasis').style = echarts.helper.createTextStyle(\n        itemModel.getModel(['emphasis', 'textStyle']),\n        {\n          state: 'emphasis'\n        }\n      );\n      textEl.ensureState('blur').style = echarts.helper.createTextStyle(\n        itemModel.getModel(['blur', 'textStyle']),\n        {\n          state: 'blur'\n        }\n      );\n\n      echarts.helper.enableHoverEmphasis(\n        textEl,\n        itemModel.get(['emphasis', 'focus']),\n        itemModel.get(['emphasis', 'blurScope'])\n      );\n\n      textEl.stateTransition = {\n        duration: seriesModel.get('animation')\n          ? seriesModel.get(['stateAnimation', 'duration'])\n          : 0,\n        easing: seriesModel.get(['stateAnimation', 'easing'])\n      };\n      // TODO\n      textEl.__highDownDispatcher = true;\n    };\n\n    this._model = seriesModel;\n  },\n\n  remove: function () {\n    this.group.removeAll();\n\n    this._model.layoutInstance.dispose();\n  },\n\n  dispose: function () {\n    this._model.layoutInstance.dispose();\n  }\n});\n", "/*!\n * wordcloud2.js\n * http://timdream.org/wordcloud2.js/\n *\n * Copyright 2011 - 2019 Tim Guan-tin Chien and contributors.\n * Released under the MIT license\n */\n\n'use strict';\n\n// setImmediate\nif (!window.setImmediate) {\n  window.setImmediate = (function setupSetImmediate() {\n    return (\n      window.msSetImmediate ||\n      window.webkitSetImmediate ||\n      window.mozSetImmediate ||\n      window.oSetImmediate ||\n      (function setupSetZeroTimeout() {\n        if (!window.postMessage || !window.addEventListener) {\n          return null;\n        }\n\n        var callbacks = [undefined];\n        var message = 'zero-timeout-message';\n\n        // Like setTimeout, but only takes a function argument.  There's\n        // no time argument (always zero) and no arguments (you have to\n        // use a closure).\n        var setZeroTimeout = function setZeroTimeout(callback) {\n          var id = callbacks.length;\n          callbacks.push(callback);\n          window.postMessage(message + id.toString(36), '*');\n\n          return id;\n        };\n\n        window.addEventListener(\n          'message',\n          function setZeroTimeoutMessage(evt) {\n            // Skipping checking event source, retarded IE confused this window\n            // object with another in the presence of iframe\n            if (\n              typeof evt.data !== 'string' ||\n              evt.data.substr(0, message.length) !== message /* ||\n            evt.source !== window */\n            ) {\n              return;\n            }\n\n            evt.stopImmediatePropagation();\n\n            var id = parseInt(evt.data.substr(message.length), 36);\n            if (!callbacks[id]) {\n              return;\n            }\n\n            callbacks[id]();\n            callbacks[id] = undefined;\n          },\n          true\n        );\n\n        /* specify clearImmediate() here since we need the scope */\n        window.clearImmediate = function clearZeroTimeout(id) {\n          if (!callbacks[id]) {\n            return;\n          }\n\n          callbacks[id] = undefined;\n        };\n\n        return setZeroTimeout;\n      })() ||\n      // fallback\n      function setImmediateFallback(fn) {\n        window.setTimeout(fn, 0);\n      }\n    );\n  })();\n}\n\nif (!window.clearImmediate) {\n  window.clearImmediate = (function setupClearImmediate() {\n    return (\n      window.msClearImmediate ||\n      window.webkitClearImmediate ||\n      window.mozClearImmediate ||\n      window.oClearImmediate ||\n      // \"clearZeroTimeout\" is implement on the previous block ||\n      // fallback\n      function clearImmediateFallback(timer) {\n        window.clearTimeout(timer);\n      }\n    );\n  })();\n}\n\n// Check if WordCloud can run on this browser\nvar isSupported = (function isSupported() {\n  var canvas = document.createElement('canvas');\n  if (!canvas || !canvas.getContext) {\n    return false;\n  }\n\n  var ctx = canvas.getContext('2d');\n  if (!ctx) {\n    return false;\n  }\n  if (!ctx.getImageData) {\n    return false;\n  }\n  if (!ctx.fillText) {\n    return false;\n  }\n\n  if (!Array.prototype.some) {\n    return false;\n  }\n  if (!Array.prototype.push) {\n    return false;\n  }\n\n  return true;\n})();\n\n// Find out if the browser impose minium font size by\n// drawing small texts on a canvas and measure it's width.\nvar minFontSize = (function getMinFontSize() {\n  if (!isSupported) {\n    return;\n  }\n\n  var ctx = document.createElement('canvas').getContext('2d');\n\n  // start from 20\n  var size = 20;\n\n  // two sizes to measure\n  var hanWidth, mWidth;\n\n  while (size) {\n    ctx.font = size.toString(10) + 'px sans-serif';\n    if (\n      ctx.measureText('\\uFF37').width === hanWidth &&\n      ctx.measureText('m').width === mWidth\n    ) {\n      return size + 1;\n    }\n\n    hanWidth = ctx.measureText('\\uFF37').width;\n    mWidth = ctx.measureText('m').width;\n\n    size--;\n  }\n\n  return 0;\n})();\n\nvar getItemExtraData = function (item) {\n  if (Array.isArray(item)) {\n    var itemCopy = item.slice();\n    // remove data we already have (word and weight)\n    itemCopy.splice(0, 2);\n    return itemCopy;\n  } else {\n    return [];\n  }\n};\n\n// Based on http://jsfromhell.com/array/shuffle\nvar shuffleArray = function shuffleArray(arr) {\n  for (var j, x, i = arr.length; i; ) {\n    j = Math.floor(Math.random() * i);\n    x = arr[--i];\n    arr[i] = arr[j];\n    arr[j] = x;\n  }\n  return arr;\n};\n\nvar timer = {};\nvar WordCloud = function WordCloud(elements, options) {\n  if (!isSupported) {\n    return;\n  }\n\n  var timerId = Math.floor(Math.random() * Date.now());\n\n  if (!Array.isArray(elements)) {\n    elements = [elements];\n  }\n\n  elements.forEach(function (el, i) {\n    if (typeof el === 'string') {\n      elements[i] = document.getElementById(el);\n      if (!elements[i]) {\n        throw new Error('The element id specified is not found.');\n      }\n    } else if (!el.tagName && !el.appendChild) {\n      throw new Error(\n        'You must pass valid HTML elements, or ID of the element.'\n      );\n    }\n  });\n\n  /* Default values to be overwritten by options object */\n  var settings = {\n    list: [],\n    fontFamily:\n      '\"Trebuchet MS\", \"Heiti TC\", \"微軟正黑體\", ' +\n      '\"Arial Unicode MS\", \"Droid Fallback Sans\", sans-serif',\n    fontWeight: 'normal',\n    color: 'random-dark',\n    minSize: 0, // 0 to disable\n    weightFactor: 1,\n    clearCanvas: true,\n    backgroundColor: '#fff', // opaque white = rgba(255, 255, 255, 1)\n\n    gridSize: 8,\n    drawOutOfBound: false,\n    shrinkToFit: false,\n    origin: null,\n\n    drawMask: false,\n    maskColor: 'rgba(255,0,0,0.3)',\n    maskGapWidth: 0.3,\n\n    layoutAnimation: true,\n\n    wait: 0,\n    abortThreshold: 0, // disabled\n    abort: function noop() {},\n\n    minRotation: -Math.PI / 2,\n    maxRotation: Math.PI / 2,\n    rotationStep: 0.1,\n\n    shuffle: true,\n    rotateRatio: 0.1,\n\n    shape: 'circle',\n    ellipticity: 0.65,\n\n    classes: null,\n\n    hover: null,\n    click: null\n  };\n\n  if (options) {\n    for (var key in options) {\n      if (key in settings) {\n        settings[key] = options[key];\n      }\n    }\n  }\n\n  /* Convert weightFactor into a function */\n  if (typeof settings.weightFactor !== 'function') {\n    var factor = settings.weightFactor;\n    settings.weightFactor = function weightFactor(pt) {\n      return pt * factor; // in px\n    };\n  }\n\n  /* Convert shape into a function */\n  if (typeof settings.shape !== 'function') {\n    switch (settings.shape) {\n      case 'circle':\n      /* falls through */\n      default:\n        // 'circle' is the default and a shortcut in the code loop.\n        settings.shape = 'circle';\n        break;\n\n      case 'cardioid':\n        settings.shape = function shapeCardioid(theta) {\n          return 1 - Math.sin(theta);\n        };\n        break;\n\n      /*\n        To work out an X-gon, one has to calculate \"m\",\n        where 1/(cos(2*PI/X)+m*sin(2*PI/X)) = 1/(cos(0)+m*sin(0))\n        http://www.wolframalpha.com/input/?i=1%2F%28cos%282*PI%2FX%29%2Bm*sin%28\n        2*PI%2FX%29%29+%3D+1%2F%28cos%280%29%2Bm*sin%280%29%29\n        Copy the solution into polar equation r = 1/(cos(t') + m*sin(t'))\n        where t' equals to mod(t, 2PI/X);\n        */\n\n      case 'diamond':\n        // http://www.wolframalpha.com/input/?i=plot+r+%3D+1%2F%28cos%28mod+\n        // %28t%2C+PI%2F2%29%29%2Bsin%28mod+%28t%2C+PI%2F2%29%29%29%2C+t+%3D\n        // +0+..+2*PI\n        settings.shape = function shapeSquare(theta) {\n          var thetaPrime = theta % ((2 * Math.PI) / 4);\n          return 1 / (Math.cos(thetaPrime) + Math.sin(thetaPrime));\n        };\n        break;\n\n      case 'square':\n        // http://www.wolframalpha.com/input/?i=plot+r+%3D+min(1%2Fabs(cos(t\n        // )),1%2Fabs(sin(t)))),+t+%3D+0+..+2*PI\n        settings.shape = function shapeSquare(theta) {\n          return Math.min(\n            1 / Math.abs(Math.cos(theta)),\n            1 / Math.abs(Math.sin(theta))\n          );\n        };\n        break;\n\n      case 'triangle-forward':\n        // http://www.wolframalpha.com/input/?i=plot+r+%3D+1%2F%28cos%28mod+\n        // %28t%2C+2*PI%2F3%29%29%2Bsqrt%283%29sin%28mod+%28t%2C+2*PI%2F3%29\n        // %29%29%2C+t+%3D+0+..+2*PI\n        settings.shape = function shapeTriangle(theta) {\n          var thetaPrime = theta % ((2 * Math.PI) / 3);\n          return (\n            1 / (Math.cos(thetaPrime) + Math.sqrt(3) * Math.sin(thetaPrime))\n          );\n        };\n        break;\n\n      case 'triangle':\n      case 'triangle-upright':\n        settings.shape = function shapeTriangle(theta) {\n          var thetaPrime = (theta + (Math.PI * 3) / 2) % ((2 * Math.PI) / 3);\n          return (\n            1 / (Math.cos(thetaPrime) + Math.sqrt(3) * Math.sin(thetaPrime))\n          );\n        };\n        break;\n\n      case 'pentagon':\n        settings.shape = function shapePentagon(theta) {\n          var thetaPrime = (theta + 0.955) % ((2 * Math.PI) / 5);\n          return 1 / (Math.cos(thetaPrime) + 0.726543 * Math.sin(thetaPrime));\n        };\n        break;\n\n      case 'star':\n        settings.shape = function shapeStar(theta) {\n          var thetaPrime = (theta + 0.955) % ((2 * Math.PI) / 10);\n          if (\n            ((theta + 0.955) % ((2 * Math.PI) / 5)) - (2 * Math.PI) / 10 >=\n            0\n          ) {\n            return (\n              1 /\n              (Math.cos((2 * Math.PI) / 10 - thetaPrime) +\n                3.07768 * Math.sin((2 * Math.PI) / 10 - thetaPrime))\n            );\n          } else {\n            return 1 / (Math.cos(thetaPrime) + 3.07768 * Math.sin(thetaPrime));\n          }\n        };\n        break;\n    }\n  }\n\n  /* Make sure gridSize is a whole number and is not smaller than 4px */\n  settings.gridSize = Math.max(Math.floor(settings.gridSize), 4);\n\n  /* shorthand */\n  var g = settings.gridSize;\n  var maskRectWidth = g - settings.maskGapWidth;\n\n  /* normalize rotation settings */\n  var rotationRange = Math.abs(settings.maxRotation - settings.minRotation);\n  var minRotation = Math.min(settings.maxRotation, settings.minRotation);\n  var rotationStep = settings.rotationStep;\n\n  /* information/object available to all functions, set when start() */\n  var grid, // 2d array containing filling information\n    ngx,\n    ngy, // width and height of the grid\n    center, // position of the center of the cloud\n    maxRadius;\n\n  /* timestamp for measuring each putWord() action */\n  var escapeTime;\n\n  /* function for getting the color of the text */\n  var getTextColor;\n  function randomHslColor(min, max) {\n    return (\n      'hsl(' +\n      (Math.random() * 360).toFixed() +\n      ',' +\n      (Math.random() * 30 + 70).toFixed() +\n      '%,' +\n      (Math.random() * (max - min) + min).toFixed() +\n      '%)'\n    );\n  }\n  switch (settings.color) {\n    case 'random-dark':\n      getTextColor = function getRandomDarkColor() {\n        return randomHslColor(10, 50);\n      };\n      break;\n\n    case 'random-light':\n      getTextColor = function getRandomLightColor() {\n        return randomHslColor(50, 90);\n      };\n      break;\n\n    default:\n      if (typeof settings.color === 'function') {\n        getTextColor = settings.color;\n      }\n      break;\n  }\n\n  /* function for getting the font-weight of the text */\n  var getTextFontWeight;\n  if (typeof settings.fontWeight === 'function') {\n    getTextFontWeight = settings.fontWeight;\n  }\n\n  /* function for getting the classes of the text */\n  var getTextClasses = null;\n  if (typeof settings.classes === 'function') {\n    getTextClasses = settings.classes;\n  }\n\n  /* Interactive */\n  var interactive = false;\n  var infoGrid = [];\n  var hovered;\n\n  var getInfoGridFromMouseTouchEvent = function getInfoGridFromMouseTouchEvent(\n    evt\n  ) {\n    var canvas = evt.currentTarget;\n    var rect = canvas.getBoundingClientRect();\n    var clientX;\n    var clientY;\n    /** Detect if touches are available */\n    if (evt.touches) {\n      clientX = evt.touches[0].clientX;\n      clientY = evt.touches[0].clientY;\n    } else {\n      clientX = evt.clientX;\n      clientY = evt.clientY;\n    }\n    var eventX = clientX - rect.left;\n    var eventY = clientY - rect.top;\n\n    var x = Math.floor((eventX * (canvas.width / rect.width || 1)) / g);\n    var y = Math.floor((eventY * (canvas.height / rect.height || 1)) / g);\n\n    if (!infoGrid[x]) {\n      return null\n    }\n\n    return infoGrid[x][y];\n  };\n\n  var wordcloudhover = function wordcloudhover(evt) {\n    var info = getInfoGridFromMouseTouchEvent(evt);\n\n    if (hovered === info) {\n      return;\n    }\n\n    hovered = info;\n    if (!info) {\n      settings.hover(undefined, undefined, evt);\n\n      return;\n    }\n\n    settings.hover(info.item, info.dimension, evt);\n  };\n\n  var wordcloudclick = function wordcloudclick(evt) {\n    var info = getInfoGridFromMouseTouchEvent(evt);\n    if (!info) {\n      return;\n    }\n\n    settings.click(info.item, info.dimension, evt);\n    evt.preventDefault();\n  };\n\n  /* Get points on the grid for a given radius away from the center */\n  var pointsAtRadius = [];\n  var getPointsAtRadius = function getPointsAtRadius(radius) {\n    if (pointsAtRadius[radius]) {\n      return pointsAtRadius[radius];\n    }\n\n    // Look for these number of points on each radius\n    var T = radius * 8;\n\n    // Getting all the points at this radius\n    var t = T;\n    var points = [];\n\n    if (radius === 0) {\n      points.push([center[0], center[1], 0]);\n    }\n\n    while (t--) {\n      // distort the radius to put the cloud in shape\n      var rx = 1;\n      if (settings.shape !== 'circle') {\n        rx = settings.shape((t / T) * 2 * Math.PI); // 0 to 1\n      }\n\n      // Push [x, y, t]; t is used solely for getTextColor()\n      points.push([\n        center[0] + radius * rx * Math.cos((-t / T) * 2 * Math.PI),\n        center[1] +\n          radius * rx * Math.sin((-t / T) * 2 * Math.PI) * settings.ellipticity,\n        (t / T) * 2 * Math.PI\n      ]);\n    }\n\n    pointsAtRadius[radius] = points;\n    return points;\n  };\n\n  /* Return true if we had spent too much time */\n  var exceedTime = function exceedTime() {\n    return (\n      settings.abortThreshold > 0 &&\n      new Date().getTime() - escapeTime > settings.abortThreshold\n    );\n  };\n\n  /* Get the deg of rotation according to settings, and luck. */\n  var getRotateDeg = function getRotateDeg() {\n    if (settings.rotateRatio === 0) {\n      return 0;\n    }\n\n    if (Math.random() > settings.rotateRatio) {\n      return 0;\n    }\n\n    if (rotationRange === 0) {\n      return minRotation;\n    }\n\n    return minRotation + Math.round(Math.random() * rotationRange / rotationStep) * rotationStep;\n  };\n\n  var getTextInfo = function getTextInfo(\n    word,\n    weight,\n    rotateDeg,\n    extraDataArray\n  ) {\n    // calculate the acutal font size\n    // fontSize === 0 means weightFactor function wants the text skipped,\n    // and size < minSize means we cannot draw the text.\n    var debug = false;\n    var fontSize = settings.weightFactor(weight);\n    if (fontSize <= settings.minSize) {\n      return false;\n    }\n\n    // Scale factor here is to make sure fillText is not limited by\n    // the minium font size set by browser.\n    // It will always be 1 or 2n.\n    var mu = 1;\n    if (fontSize < minFontSize) {\n      mu = (function calculateScaleFactor() {\n        var mu = 2;\n        while (mu * fontSize < minFontSize) {\n          mu += 2;\n        }\n        return mu;\n      })();\n    }\n\n    // Get fontWeight that will be used to set fctx.font\n    var fontWeight;\n    if (getTextFontWeight) {\n      fontWeight = getTextFontWeight(word, weight, fontSize, extraDataArray);\n    } else {\n      fontWeight = settings.fontWeight;\n    }\n\n    var fcanvas = document.createElement('canvas');\n    var fctx = fcanvas.getContext('2d', { willReadFrequently: true });\n\n    fctx.font =\n      fontWeight +\n      ' ' +\n      (fontSize * mu).toString(10) +\n      'px ' +\n      settings.fontFamily;\n\n    // Estimate the dimension of the text with measureText().\n    var fw = fctx.measureText(word).width / mu;\n    var fh =\n      Math.max(\n        fontSize * mu,\n        fctx.measureText('m').width,\n        fctx.measureText('\\uFF37').width\n      ) / mu;\n\n    // Create a boundary box that is larger than our estimates,\n    // so text don't get cut of (it sill might)\n    var boxWidth = fw + fh * 2;\n    var boxHeight = fh * 3;\n    var fgw = Math.ceil(boxWidth / g);\n    var fgh = Math.ceil(boxHeight / g);\n    boxWidth = fgw * g;\n    boxHeight = fgh * g;\n\n    // Calculate the proper offsets to make the text centered at\n    // the preferred position.\n\n    // This is simply half of the width.\n    var fillTextOffsetX = -fw / 2;\n    // Instead of moving the box to the exact middle of the preferred\n    // position, for Y-offset we move 0.4 instead, so Latin alphabets look\n    // vertical centered.\n    var fillTextOffsetY = -fh * 0.4;\n\n    // Calculate the actual dimension of the canvas, considering the rotation.\n    var cgh = Math.ceil(\n      (boxWidth * Math.abs(Math.sin(rotateDeg)) +\n        boxHeight * Math.abs(Math.cos(rotateDeg))) /\n        g\n    );\n    var cgw = Math.ceil(\n      (boxWidth * Math.abs(Math.cos(rotateDeg)) +\n        boxHeight * Math.abs(Math.sin(rotateDeg))) /\n        g\n    );\n    var width = cgw * g;\n    var height = cgh * g;\n\n    fcanvas.setAttribute('width', width);\n    fcanvas.setAttribute('height', height);\n\n    if (debug) {\n      // Attach fcanvas to the DOM\n      document.body.appendChild(fcanvas);\n      // Save it's state so that we could restore and draw the grid correctly.\n      fctx.save();\n    }\n\n    // Scale the canvas with |mu|.\n    fctx.scale(1 / mu, 1 / mu);\n    fctx.translate((width * mu) / 2, (height * mu) / 2);\n    fctx.rotate(-rotateDeg);\n\n    // Once the width/height is set, ctx info will be reset.\n    // Set it again here.\n    fctx.font =\n      fontWeight +\n      ' ' +\n      (fontSize * mu).toString(10) +\n      'px ' +\n      settings.fontFamily;\n\n    // Fill the text into the fcanvas.\n    // XXX: We cannot because textBaseline = 'top' here because\n    // Firefox and Chrome uses different default line-height for canvas.\n    // Please read https://bugzil.la/737852#c6.\n    // Here, we use textBaseline = 'middle' and draw the text at exactly\n    // 0.5 * fontSize lower.\n    fctx.fillStyle = '#000';\n    fctx.textBaseline = 'middle';\n    fctx.fillText(\n      word,\n      fillTextOffsetX * mu,\n      (fillTextOffsetY + fontSize * 0.5) * mu\n    );\n\n    // Get the pixels of the text\n    var imageData = fctx.getImageData(0, 0, width, height).data;\n\n    if (exceedTime()) {\n      return false;\n    }\n\n    if (debug) {\n      // Draw the box of the original estimation\n      fctx.strokeRect(fillTextOffsetX * mu, fillTextOffsetY, fw * mu, fh * mu);\n      fctx.restore();\n    }\n\n    // Read the pixels and save the information to the occupied array\n    var occupied = [];\n    var gx = cgw;\n    var gy, x, y;\n    var bounds = [cgh / 2, cgw / 2, cgh / 2, cgw / 2];\n    while (gx--) {\n      gy = cgh;\n      while (gy--) {\n        y = g;\n        /* eslint no-labels: ['error', { 'allowLoop': true }] */\n        singleGridLoop: while (y--) {\n          x = g;\n          while (x--) {\n            if (imageData[((gy * g + y) * width + (gx * g + x)) * 4 + 3]) {\n              occupied.push([gx, gy]);\n\n              if (gx < bounds[3]) {\n                bounds[3] = gx;\n              }\n              if (gx > bounds[1]) {\n                bounds[1] = gx;\n              }\n              if (gy < bounds[0]) {\n                bounds[0] = gy;\n              }\n              if (gy > bounds[2]) {\n                bounds[2] = gy;\n              }\n\n              if (debug) {\n                fctx.fillStyle = 'rgba(255, 0, 0, 0.5)';\n                fctx.fillRect(gx * g, gy * g, g - 0.5, g - 0.5);\n              }\n              break singleGridLoop;\n            }\n          }\n        }\n        if (debug) {\n          fctx.fillStyle = 'rgba(0, 0, 255, 0.5)';\n          fctx.fillRect(gx * g, gy * g, g - 0.5, g - 0.5);\n        }\n      }\n    }\n\n    if (debug) {\n      fctx.fillStyle = 'rgba(0, 255, 0, 0.5)';\n      fctx.fillRect(\n        bounds[3] * g,\n        bounds[0] * g,\n        (bounds[1] - bounds[3] + 1) * g,\n        (bounds[2] - bounds[0] + 1) * g\n      );\n    }\n\n    // Return information needed to create the text on the real canvas\n    return {\n      mu: mu,\n      occupied: occupied,\n      bounds: bounds,\n      gw: cgw,\n      gh: cgh,\n      fillTextOffsetX: fillTextOffsetX,\n      fillTextOffsetY: fillTextOffsetY,\n      fillTextWidth: fw,\n      fillTextHeight: fh,\n      fontSize: fontSize\n    };\n  };\n\n  /* Determine if there is room available in the given dimension */\n  var canFitText = function canFitText(gx, gy, gw, gh, occupied) {\n    // Go through the occupied points,\n    // return false if the space is not available.\n    var i = occupied.length;\n    while (i--) {\n      var px = gx + occupied[i][0];\n      var py = gy + occupied[i][1];\n\n      if (px >= ngx || py >= ngy || px < 0 || py < 0) {\n        if (!settings.drawOutOfBound) {\n          return false;\n        }\n        continue;\n      }\n\n      if (!grid[px][py]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  /* Actually draw the text on the grid */\n  var drawText = function drawText(\n    gx,\n    gy,\n    info,\n    word,\n    weight,\n    distance,\n    theta,\n    rotateDeg,\n    attributes,\n    extraDataArray\n  ) {\n    var fontSize = info.fontSize;\n    var color;\n    if (getTextColor) {\n      color = getTextColor(\n        word,\n        weight,\n        fontSize,\n        distance,\n        theta,\n        extraDataArray\n      );\n    } else {\n      color = settings.color;\n    }\n\n    // get fontWeight that will be used to set ctx.font and font style rule\n    var fontWeight;\n    if (getTextFontWeight) {\n      fontWeight = getTextFontWeight(word, weight, fontSize, extraDataArray);\n    } else {\n      fontWeight = settings.fontWeight;\n    }\n\n    var classes;\n    if (getTextClasses) {\n      classes = getTextClasses(word, weight, fontSize, extraDataArray);\n    } else {\n      classes = settings.classes;\n    }\n\n    elements.forEach(function (el) {\n      if (el.getContext) {\n        var ctx = el.getContext('2d');\n        var mu = info.mu;\n\n        // Save the current state before messing it\n        ctx.save();\n        ctx.scale(1 / mu, 1 / mu);\n\n        ctx.font =\n          fontWeight +\n          ' ' +\n          (fontSize * mu).toString(10) +\n          'px ' +\n          settings.fontFamily;\n        ctx.fillStyle = color;\n\n        // Translate the canvas position to the origin coordinate of where\n        // the text should be put.\n        ctx.translate((gx + info.gw / 2) * g * mu, (gy + info.gh / 2) * g * mu);\n\n        if (rotateDeg !== 0) {\n          ctx.rotate(-rotateDeg);\n        }\n\n        // Finally, fill the text.\n\n        // XXX: We cannot because textBaseline = 'top' here because\n        // Firefox and Chrome uses different default line-height for canvas.\n        // Please read https://bugzil.la/737852#c6.\n        // Here, we use textBaseline = 'middle' and draw the text at exactly\n        // 0.5 * fontSize lower.\n        ctx.textBaseline = 'middle';\n        ctx.fillText(\n          word,\n          info.fillTextOffsetX * mu,\n          (info.fillTextOffsetY + fontSize * 0.5) * mu\n        );\n\n        // The below box is always matches how <span>s are positioned\n        /* ctx.strokeRect(info.fillTextOffsetX, info.fillTextOffsetY,\n            info.fillTextWidth, info.fillTextHeight); */\n\n        // Restore the state.\n        ctx.restore();\n      } else {\n        // drawText on DIV element\n        var span = document.createElement('span');\n        var transformRule = '';\n        transformRule = 'rotate(' + (-rotateDeg / Math.PI) * 180 + 'deg) ';\n        if (info.mu !== 1) {\n          transformRule +=\n            'translateX(-' +\n            info.fillTextWidth / 4 +\n            'px) ' +\n            'scale(' +\n            1 / info.mu +\n            ')';\n        }\n        var styleRules = {\n          position: 'absolute',\n          display: 'block',\n          font:\n            fontWeight + ' ' + fontSize * info.mu + 'px ' + settings.fontFamily,\n          left: (gx + info.gw / 2) * g + info.fillTextOffsetX + 'px',\n          top: (gy + info.gh / 2) * g + info.fillTextOffsetY + 'px',\n          width: info.fillTextWidth + 'px',\n          height: info.fillTextHeight + 'px',\n          lineHeight: fontSize + 'px',\n          whiteSpace: 'nowrap',\n          transform: transformRule,\n          webkitTransform: transformRule,\n          msTransform: transformRule,\n          transformOrigin: '50% 40%',\n          webkitTransformOrigin: '50% 40%',\n          msTransformOrigin: '50% 40%'\n        };\n        if (color) {\n          styleRules.color = color;\n        }\n        span.textContent = word;\n        for (var cssProp in styleRules) {\n          span.style[cssProp] = styleRules[cssProp];\n        }\n        if (attributes) {\n          for (var attribute in attributes) {\n            span.setAttribute(attribute, attributes[attribute]);\n          }\n        }\n        if (classes) {\n          span.className += classes;\n        }\n        el.appendChild(span);\n      }\n    });\n  };\n\n  /* Help function to updateGrid */\n  var fillGridAt = function fillGridAt(x, y, drawMask, dimension, item) {\n    if (x >= ngx || y >= ngy || x < 0 || y < 0) {\n      return;\n    }\n\n    grid[x][y] = false;\n\n    if (drawMask) {\n      var ctx = elements[0].getContext('2d');\n      ctx.fillRect(x * g, y * g, maskRectWidth, maskRectWidth);\n    }\n\n    if (interactive) {\n      infoGrid[x][y] = { item: item, dimension: dimension };\n    }\n  };\n\n  /* Update the filling information of the given space with occupied points.\n       Draw the mask on the canvas if necessary. */\n  var updateGrid = function updateGrid(gx, gy, gw, gh, info, item) {\n    var occupied = info.occupied;\n    var drawMask = settings.drawMask;\n    var ctx;\n    if (drawMask) {\n      ctx = elements[0].getContext('2d');\n      ctx.save();\n      ctx.fillStyle = settings.maskColor;\n    }\n\n    var dimension;\n    if (interactive) {\n      var bounds = info.bounds;\n      dimension = {\n        x: (gx + bounds[3]) * g,\n        y: (gy + bounds[0]) * g,\n        w: (bounds[1] - bounds[3] + 1) * g,\n        h: (bounds[2] - bounds[0] + 1) * g\n      };\n    }\n\n    var i = occupied.length;\n    while (i--) {\n      var px = gx + occupied[i][0];\n      var py = gy + occupied[i][1];\n\n      if (px >= ngx || py >= ngy || px < 0 || py < 0) {\n        continue;\n      }\n\n      fillGridAt(px, py, drawMask, dimension, item);\n    }\n\n    if (drawMask) {\n      ctx.restore();\n    }\n  };\n\n  /* putWord() processes each item on the list,\n       calculate it's size and determine it's position, and actually\n       put it on the canvas. */\n  var putWord = function putWord(item, loopIndex) {\n    if (loopIndex > 20) {\n      return null;\n    }\n\n    var word, weight, attributes;\n    if (Array.isArray(item)) {\n      word = item[0];\n      weight = item[1];\n    } else {\n      word = item.word;\n      weight = item.weight;\n      attributes = item.attributes;\n    }\n    var rotateDeg = getRotateDeg();\n\n    var extraDataArray = getItemExtraData(item);\n\n    // get info needed to put the text onto the canvas\n    var info = getTextInfo(word, weight, rotateDeg, extraDataArray);\n\n    // not getting the info means we shouldn't be drawing this one.\n    if (!info) {\n      return false;\n    }\n\n    if (exceedTime()) {\n      return false;\n    }\n\n    // If drawOutOfBound is set to false,\n    // skip the loop if we have already know the bounding box of\n    // word is larger than the canvas.\n    if (!settings.drawOutOfBound && !settings.shrinkToFit) {\n      var bounds = info.bounds;\n      if (bounds[1] - bounds[3] + 1 > ngx || bounds[2] - bounds[0] + 1 > ngy) {\n        return false;\n      }\n    }\n\n    // Determine the position to put the text by\n    // start looking for the nearest points\n    var r = maxRadius + 1;\n\n    var tryToPutWordAtPoint = function (gxy) {\n      var gx = Math.floor(gxy[0] - info.gw / 2);\n      var gy = Math.floor(gxy[1] - info.gh / 2);\n      var gw = info.gw;\n      var gh = info.gh;\n\n      // If we cannot fit the text at this position, return false\n      // and go to the next position.\n      if (!canFitText(gx, gy, gw, gh, info.occupied)) {\n        return false;\n      }\n\n      // Actually put the text on the canvas\n      drawText(\n        gx,\n        gy,\n        info,\n        word,\n        weight,\n        maxRadius - r,\n        gxy[2],\n        rotateDeg,\n        attributes,\n        extraDataArray\n      );\n\n      // Mark the spaces on the grid as filled\n      updateGrid(gx, gy, gw, gh, info, item);\n\n      return {\n        gx: gx,\n        gy: gy,\n        rot: rotateDeg,\n        info: info\n      };\n    };\n\n    while (r--) {\n      var points = getPointsAtRadius(maxRadius - r);\n\n      if (settings.shuffle) {\n        points = [].concat(points);\n        shuffleArray(points);\n      }\n\n      // Try to fit the words by looking at each point.\n      // array.some() will stop and return true\n      // when putWordAtPoint() returns true.\n      for (var i = 0; i < points.length; i++) {\n        var res = tryToPutWordAtPoint(points[i]);\n        if (res) {\n          return res;\n        }\n      }\n\n      // var drawn = points.some(tryToPutWordAtPoint);\n      // if (drawn) {\n      //   // leave putWord() and return true\n      //   return true;\n      // }\n    }\n\n    if (settings.shrinkToFit) {\n      if (Array.isArray(item)) {\n        item[1] = (item[1] * 3) / 4;\n      } else {\n        item.weight = (item.weight * 3) / 4;\n      }\n      return putWord(item, loopIndex + 1);\n    }\n\n    // we tried all distances but text won't fit, return null\n    return null;\n  };\n\n  /* Send DOM event to all elements. Will stop sending event and return\n       if the previous one is canceled (for cancelable events). */\n  var sendEvent = function sendEvent(type, cancelable, details) {\n    if (cancelable) {\n      return !elements.some(function (el) {\n        var event = new CustomEvent(type, {\n          detail: details || {}\n        });\n        return !el.dispatchEvent(event);\n      }, this);\n    } else {\n      elements.forEach(function (el) {\n        var event = new CustomEvent(type, {\n          detail: details || {}\n        });\n        el.dispatchEvent(event);\n      }, this);\n    }\n  };\n\n  /* Start drawing on a canvas */\n  var start = function start() {\n    // For dimensions, clearCanvas etc.,\n    // we only care about the first element.\n    var canvas = elements[0];\n\n    if (canvas.getContext) {\n      ngx = Math.ceil(canvas.width / g);\n      ngy = Math.ceil(canvas.height / g);\n    } else {\n      var rect = canvas.getBoundingClientRect();\n      ngx = Math.ceil(rect.width / g);\n      ngy = Math.ceil(rect.height / g);\n    }\n\n    // Sending a wordcloudstart event which cause the previous loop to stop.\n    // Do nothing if the event is canceled.\n    if (!sendEvent('wordcloudstart', true)) {\n      return;\n    }\n\n    // Determine the center of the word cloud\n    center = settings.origin\n      ? [settings.origin[0] / g, settings.origin[1] / g]\n      : [ngx / 2, ngy / 2];\n\n    // Maxium radius to look for space\n    maxRadius = Math.floor(Math.sqrt(ngx * ngx + ngy * ngy));\n\n    /* Clear the canvas only if the clearCanvas is set,\n         if not, update the grid to the current canvas state */\n    grid = [];\n\n    var gx, gy, i;\n    if (!canvas.getContext || settings.clearCanvas) {\n      elements.forEach(function (el) {\n        if (el.getContext) {\n          var ctx = el.getContext('2d');\n          ctx.fillStyle = settings.backgroundColor;\n          ctx.clearRect(0, 0, ngx * (g + 1), ngy * (g + 1));\n          ctx.fillRect(0, 0, ngx * (g + 1), ngy * (g + 1));\n        } else {\n          el.textContent = '';\n          el.style.backgroundColor = settings.backgroundColor;\n          el.style.position = 'relative';\n        }\n      });\n\n      /* fill the grid with empty state */\n      gx = ngx;\n      while (gx--) {\n        grid[gx] = [];\n        gy = ngy;\n        while (gy--) {\n          grid[gx][gy] = true;\n        }\n      }\n    } else {\n      /* Determine bgPixel by creating\n           another canvas and fill the specified background color. */\n      var bctx = document.createElement('canvas').getContext('2d');\n\n      bctx.fillStyle = settings.backgroundColor;\n      bctx.fillRect(0, 0, 1, 1);\n      var bgPixel = bctx.getImageData(0, 0, 1, 1).data;\n\n      /* Read back the pixels of the canvas we got to tell which part of the\n           canvas is empty.\n           (no clearCanvas only works with a canvas, not divs) */\n      var imageData = canvas\n        .getContext('2d')\n        .getImageData(0, 0, ngx * g, ngy * g).data;\n\n      gx = ngx;\n      var x, y;\n      while (gx--) {\n        grid[gx] = [];\n        gy = ngy;\n        while (gy--) {\n          y = g;\n          /* eslint no-labels: ['error', { 'allowLoop': true }] */\n          singleGridLoop: while (y--) {\n            x = g;\n            while (x--) {\n              i = 4;\n              while (i--) {\n                if (\n                  imageData[((gy * g + y) * ngx * g + (gx * g + x)) * 4 + i] !==\n                  bgPixel[i]\n                ) {\n                  grid[gx][gy] = false;\n                  break singleGridLoop;\n                }\n              }\n            }\n          }\n          if (grid[gx][gy] !== false) {\n            grid[gx][gy] = true;\n          }\n        }\n      }\n\n      imageData = bctx = bgPixel = undefined;\n    }\n\n    // fill the infoGrid with empty state if we need it\n    if (settings.hover || settings.click) {\n      interactive = true;\n\n      /* fill the grid with empty state */\n      gx = ngx + 1;\n      while (gx--) {\n        infoGrid[gx] = [];\n      }\n\n      if (settings.hover) {\n        canvas.addEventListener('mousemove', wordcloudhover);\n      }\n\n      if (settings.click) {\n        canvas.addEventListener('click', wordcloudclick);\n        canvas.addEventListener('touchstart', wordcloudclick);\n        canvas.addEventListener('touchend', function (e) {\n          e.preventDefault();\n        });\n        canvas.style.webkitTapHighlightColor = 'rgba(0, 0, 0, 0)';\n      }\n\n      canvas.addEventListener('wordcloudstart', function stopInteraction() {\n        canvas.removeEventListener('wordcloudstart', stopInteraction);\n\n        canvas.removeEventListener('mousemove', wordcloudhover);\n        canvas.removeEventListener('click', wordcloudclick);\n        hovered = undefined;\n      });\n    }\n\n    i = 0;\n    var loopingFunction, stoppingFunction;\n    var layouting = true;\n    if (!settings.layoutAnimation) {\n      loopingFunction = function (cb) {\n        cb();\n      };\n      stoppingFunction = function () {\n        layouting = false;\n      };\n    } else if (settings.wait !== 0) {\n      loopingFunction = window.setTimeout;\n      stoppingFunction = window.clearTimeout;\n    } else {\n      loopingFunction = window.setImmediate;\n      stoppingFunction = window.clearImmediate;\n    }\n\n    var addEventListener = function addEventListener(type, listener) {\n      elements.forEach(function (el) {\n        el.addEventListener(type, listener);\n      }, this);\n    };\n\n    var removeEventListener = function removeEventListener(type, listener) {\n      elements.forEach(function (el) {\n        el.removeEventListener(type, listener);\n      }, this);\n    };\n\n    var anotherWordCloudStart = function anotherWordCloudStart() {\n      removeEventListener('wordcloudstart', anotherWordCloudStart);\n      stoppingFunction(timer[timerId]);\n    };\n\n    addEventListener('wordcloudstart', anotherWordCloudStart);\n\n    // At least wait the following code before call the first iteration.\n    timer[timerId] = (settings.layoutAnimation ? loopingFunction : setTimeout)(\n      function loop() {\n        if (!layouting) {\n          return;\n        }\n        if (i >= settings.list.length) {\n          stoppingFunction(timer[timerId]);\n          sendEvent('wordcloudstop', false);\n          removeEventListener('wordcloudstart', anotherWordCloudStart);\n          delete timer[timerId];\n          return;\n        }\n        escapeTime = new Date().getTime();\n        var drawn = putWord(settings.list[i], 0);\n        var canceled = !sendEvent('wordclouddrawn', true, {\n          item: settings.list[i],\n          drawn: drawn\n        });\n        if (exceedTime() || canceled) {\n          stoppingFunction(timer[timerId]);\n          settings.abort();\n          sendEvent('wordcloudabort', false);\n          sendEvent('wordcloudstop', false);\n          removeEventListener('wordcloudstart', anotherWordCloudStart);\n          return;\n        }\n        i++;\n        timer[timerId] = loopingFunction(loop, settings.wait);\n      },\n      settings.wait\n    );\n  };\n\n  // All set, start the drawing\n  start();\n};\n\nWordCloud.isSupported = isSupported;\nWordCloud.minFontSize = minFontSize;\n\nexport default WordCloud;\n", "import * as echarts from 'echarts/lib/echarts';\n\nimport './WordCloudSeries';\nimport './WordCloudView';\n\nimport wordCloudLayoutHelper from './layout';\n\nif (!wordCloudLayoutHelper.isSupported) {\n  throw new Error('Sorry your browser not support wordCloud');\n}\n\n// https://github.com/timdream/wordcloud2.js/blob/c236bee60436e048949f9becc4f0f67bd832dc5c/index.js#L233\nfunction updateCanvasMask(maskCanvas) {\n  var ctx = maskCanvas.getContext('2d');\n  var imageData = ctx.getImageData(0, 0, maskCanvas.width, maskCanvas.height);\n  var newImageData = ctx.createImageData(imageData);\n\n  var toneSum = 0;\n  var toneCnt = 0;\n  for (var i = 0; i < imageData.data.length; i += 4) {\n    var alpha = imageData.data[i + 3];\n    if (alpha > 128) {\n      var tone =\n        imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2];\n      toneSum += tone;\n      ++toneCnt;\n    }\n  }\n  var threshold = toneSum / toneCnt;\n\n  for (var i = 0; i < imageData.data.length; i += 4) {\n    var tone =\n      imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2];\n    var alpha = imageData.data[i + 3];\n\n    if (alpha < 128 || tone > threshold) {\n      // Area not to draw\n      newImageData.data[i] = 0;\n      newImageData.data[i + 1] = 0;\n      newImageData.data[i + 2] = 0;\n      newImageData.data[i + 3] = 0;\n    } else {\n      // Area to draw\n      // The color must be same with backgroundColor\n      newImageData.data[i] = 255;\n      newImageData.data[i + 1] = 255;\n      newImageData.data[i + 2] = 255;\n      newImageData.data[i + 3] = 255;\n    }\n  }\n\n  ctx.putImageData(newImageData, 0, 0);\n}\n\necharts.registerLayout(function (ecModel, api) {\n  ecModel.eachSeriesByType('wordCloud', function (seriesModel) {\n    var gridRect = echarts.helper.getLayoutRect(\n      seriesModel.getBoxLayoutParams(),\n      {\n        width: api.getWidth(),\n        height: api.getHeight()\n      }\n    );\n\n    var keepAspect = seriesModel.get('keepAspect');\n    var maskImage = seriesModel.get('maskImage');\n    var ratio = maskImage ? maskImage.width / maskImage.height : 1;\n    keepAspect && adjustRectAspect(gridRect, ratio);\n\n    var data = seriesModel.getData();\n\n    var canvas = document.createElement('canvas');\n    canvas.width = gridRect.width;\n    canvas.height = gridRect.height;\n\n    var ctx = canvas.getContext('2d');\n    if (maskImage) {\n      try {\n        ctx.drawImage(maskImage, 0, 0, canvas.width, canvas.height);\n        updateCanvasMask(canvas);\n      } catch (e) {\n        console.error('Invalid mask image');\n        console.error(e.toString());\n      }\n    }\n\n    var sizeRange = seriesModel.get('sizeRange');\n    var rotationRange = seriesModel.get('rotationRange');\n    var valueExtent = data.getDataExtent('value');\n\n    var DEGREE_TO_RAD = Math.PI / 180;\n    var gridSize = seriesModel.get('gridSize');\n    wordCloudLayoutHelper(canvas, {\n      list: data\n        .mapArray('value', function (value, idx) {\n          var itemModel = data.getItemModel(idx);\n          return [\n            data.getName(idx),\n            itemModel.get('textStyle.fontSize', true) ||\n              echarts.number.linearMap(value, valueExtent, sizeRange),\n            idx\n          ];\n        })\n        .sort(function (a, b) {\n          // Sort from large to small in case there is no more room for more words\n          return b[1] - a[1];\n        }),\n      fontFamily:\n        seriesModel.get('textStyle.fontFamily') ||\n        seriesModel.get('emphasis.textStyle.fontFamily') ||\n        ecModel.get('textStyle.fontFamily'),\n      fontWeight:\n        seriesModel.get('textStyle.fontWeight') ||\n        seriesModel.get('emphasis.textStyle.fontWeight') ||\n        ecModel.get('textStyle.fontWeight'),\n\n      gridSize: gridSize,\n\n      ellipticity: gridRect.height / gridRect.width,\n\n      minRotation: rotationRange[0] * DEGREE_TO_RAD,\n      maxRotation: rotationRange[1] * DEGREE_TO_RAD,\n\n      clearCanvas: !maskImage,\n\n      rotateRatio: 1,\n\n      rotationStep: seriesModel.get('rotationStep') * DEGREE_TO_RAD,\n\n      drawOutOfBound: seriesModel.get('drawOutOfBound'),\n      shrinkToFit: seriesModel.get('shrinkToFit'),\n\n      layoutAnimation: seriesModel.get('layoutAnimation'),\n\n      shuffle: false,\n\n      shape: seriesModel.get('shape')\n    });\n\n    function onWordCloudDrawn(e) {\n      var item = e.detail.item;\n      if (e.detail.drawn && seriesModel.layoutInstance.ondraw) {\n        e.detail.drawn.gx += gridRect.x / gridSize;\n        e.detail.drawn.gy += gridRect.y / gridSize;\n        seriesModel.layoutInstance.ondraw(\n          item[0],\n          item[1],\n          item[2],\n          e.detail.drawn\n        );\n      }\n    }\n\n    canvas.addEventListener('wordclouddrawn', onWordCloudDrawn);\n\n    if (seriesModel.layoutInstance) {\n      // Dispose previous\n      seriesModel.layoutInstance.dispose();\n    }\n\n    seriesModel.layoutInstance = {\n      ondraw: null,\n\n      dispose: function () {\n        canvas.removeEventListener('wordclouddrawn', onWordCloudDrawn);\n        // Abort\n        canvas.addEventListener('wordclouddrawn', function (e) {\n          // Prevent default to cancle the event and stop the loop\n          e.preventDefault();\n        });\n      }\n    };\n  });\n});\n\necharts.registerPreprocessor(function (option) {\n  var series = (option || {}).series;\n  !echarts.util.isArray(series) && (series = series ? [series] : []);\n\n  var compats = ['shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY'];\n\n  echarts.util.each(series, function (seriesItem) {\n    if (seriesItem && seriesItem.type === 'wordCloud') {\n      var textStyle = seriesItem.textStyle || {};\n\n      compatTextStyle(textStyle.normal);\n      compatTextStyle(textStyle.emphasis);\n    }\n  });\n\n  function compatTextStyle(textStyle) {\n    textStyle &&\n      echarts.util.each(compats, function (key) {\n        if (textStyle.hasOwnProperty(key)) {\n          textStyle['text' + echarts.format.capitalFirst(key)] = textStyle[key];\n        }\n      });\n  }\n});\n\nfunction adjustRectAspect(gridRect, aspect) {\n  // var outerWidth = gridRect.width + gridRect.x * 2;\n  // var outerHeight = gridRect.height + gridRect.y * 2;\n  var width = gridRect.width;\n  var height = gridRect.height;\n  if (width > height * aspect) {\n    gridRect.x += (width - height * aspect) / 2;\n    gridRect.width = height * aspect;\n  } else {\n    gridRect.y += (height - width / aspect) / 2;\n    gridRect.height = width / aspect;\n  }\n}\n", "import './src/wordCloud';\n", "module.exports = __WEBPACK_EXTERNAL_MODULE_echarts_lib_echarts__;", "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n", "// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};", "// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(\"./index.js\");\n"],
  "mappings": "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",
  "names": ["setZeroTimeout", "timer", "isSupported", "shuffleArray", "WordCloud", "getInfoGridFromMouseTouchEvent", "wordcloudhover", "wordcloudclick", "getPointsAtRadius", "exceedTime", "getRotateDeg", "getTextInfo", "mu", "canFitText", "drawText", "fillGridAt", "updateGrid", "putWord", "sendEvent", "start", "addEventListener", "removeEventListener", "anotherWordCloudStart", "module", "exports"]
}
