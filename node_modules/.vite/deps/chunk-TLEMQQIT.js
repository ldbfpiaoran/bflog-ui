import {
  Icon
} from "./chunk-YKV3TIX6.js";
import {
  autobind,
  localeable,
  themeable
} from "./chunk-E64EENQX.js";
import {
  __assign,
  __decorate,
  __extends,
  __metadata
} from "./chunk-N4FYP52A.js";
import {
  require_react
} from "./chunk-AIVQU27O.js";
import {
  __toESM
} from "./chunk-LFBQMW2U.js";

// node_modules/amis-ui/esm/components/Editor.js
var import_react = __toESM(require_react());
function filterUrl(url) {
  return url;
}
if (!window.MonacoEnvironment) {
  window.MonacoEnvironment = {
    getWorkerUrl: function(moduleId, label) {
      var url = "/pkg/editor.worker.js";
      if (label === "json") {
        url = "/pkg/json.worker.js";
      } else if (label === "css") {
        url = "/pkg/css.worker.js";
      } else if (label === "html") {
        url = "/pkg/html.worker.js";
      } else if (label === "typescript" || label === "javascript") {
        url = "/pkg/ts.worker.js";
      }
      url = filterUrl(url);
      if (/^https?/.test(url)) {
        return "data:text/javascript;charset=utf-8,".concat(encodeURIComponent("\n        importScripts('".concat(url, "');")), "\n      ");
      }
      return url;
    }
  };
}
function monacoFactory(containerElement, monaco, options) {
  return monaco.editor.create(containerElement, __assign({ "autoIndent": true, "formatOnType": true, "formatOnPaste": true, "selectOnLineNumbers": true, "scrollBeyondLastLine": false, "folding": true, "minimap": {
    enabled: false
  }, "scrollbar": {
    alwaysConsumeMouseWheel: false
  }, "bracketPairColorization.enabled": true }, options));
}
var Editor = (
  /** @class */
  function(_super) {
    __extends(Editor2, _super);
    function Editor2(props) {
      var _this = _super.call(this, props) || this;
      _this.state = {
        isFullscreen: false,
        innerWidth: "auto",
        innerHeight: "auto"
      };
      _this.disposes = [];
      _this.wrapperRef = _this.wrapperRef.bind(_this);
      _this.currentValue = props.value;
      return _this;
    }
    Editor2.prototype.componentDidUpdate = function(prevProps) {
      var _a, _b;
      if (this.props.value !== this.currentValue && this.editor && !this.props.isDiffEditor) {
        var value = String(this.props.value);
        if (this.props.language === "json") {
          try {
            value = JSON.stringify(JSON.parse(value), null, 2);
          } catch (e) {
          }
        }
        this.preventTriggerChangeEvent = true;
        var eidtor = this.editor.getModifiedEditor ? this.editor.getModifiedEditor() : this.editor;
        var model = eidtor.getModel();
        eidtor.pushUndoStop();
        model.pushEditOperations([], [
          {
            range: model.getFullModelRange(),
            text: value
          }
        ]);
        eidtor.pushUndoStop();
        this.preventTriggerChangeEvent = false;
      }
      if (this.props.options.readOnly !== prevProps.options.readOnly && this.editor) {
        (_b = (_a = this.editor).updateOptions) === null || _b === void 0 ? void 0 : _b.call(_a, this.props.options);
      }
    };
    Editor2.prototype.componentWillUnmount = function() {
      var _a;
      if (this.editor) {
        var context = this.props.context || window;
        var monaco = context.monaco || window.monaco;
        var editorWillUnmount = this.props.editorWillUnmount;
        editorWillUnmount && editorWillUnmount(this.editor, monaco);
      }
      this.disposes.forEach(function(_a2) {
        var dispose = _a2.dispose;
        return dispose();
      });
      this.disposes = [];
      (_a = this.editor) === null || _a === void 0 ? void 0 : _a.dispose();
    };
    Editor2.prototype.wrapperRef = function(ref) {
      this.container = ref;
      if (ref) {
        this.loadMonaco();
      } else {
        try {
          this.disposes.forEach(function(_a) {
            var dispose = _a.dispose;
            return dispose();
          });
          this.disposes = [];
          if (this.editor) {
            this.editor.getModel().dispose();
            this.editor.dispose();
          }
          this.editor = null;
        } catch (e) {
        }
      }
    };
    Editor2.prototype.loadMonaco = function() {
      var _this = this;
      import("./editor.main-JQIB55TF.js").then(function(monaco) {
        return _this.initMonaco(monaco);
      });
    };
    Editor2.prototype.initMonaco = function(monaco) {
      var _a, _b;
      var value = this.props.value !== null ? this.props.value : this.props.defaultValue;
      var _c = this.props, language = _c.language, editorTheme = _c.editorTheme, options = _c.options, editorFactory = _c.editorFactory;
      var containerElement = this.container;
      if (!containerElement) {
        return;
      }
      this.editorWillMount(monaco);
      if (this.props.language === "json") {
        try {
          value = JSON.stringify(typeof value === "string" ? JSON.parse(value) : value, null, 2);
        } catch (e) {
        }
      }
      var factory = editorFactory || monacoFactory;
      this.editor = factory(containerElement, monaco, __assign(__assign({}, options), { automaticLayout: true, value, language, editorTheme, theme: editorTheme }));
      (_a = monaco.languages.json) === null || _a === void 0 ? void 0 : _a.jsonDefaults.setDiagnosticsOptions(__assign({ enableSchemaRequest: true, validate: true, allowComments: true }, (_b = monaco.languages.json) === null || _b === void 0 ? void 0 : _b.jsonDefaults.diagnosticsOptions));
      this.editorDidMount(this.editor, monaco);
    };
    Editor2.prototype.editorWillMount = function(monaco) {
      var editorWillMount = this.props.editorWillMount;
      editorWillMount && editorWillMount(monaco);
    };
    Editor2.prototype.editorDidMount = function(editor, monaco) {
      var _this = this;
      var _a, _b, _c;
      var _d = this.props, editorDidMount = _d.editorDidMount, onChange = _d.onChange, onFocus = _d.onFocus, onBlur = _d.onBlur;
      editorDidMount && editorDidMount(editor, monaco);
      editor.onDidChangeModelContent && this.disposes.push(editor.onDidChangeModelContent(function(event) {
        var value = editor.getValue();
        _this.currentValue = value;
        if (!_this.preventTriggerChangeEvent && onChange) {
          onChange(value, event);
        }
      }));
      onFocus && editor.onDidFocusEditorWidget && this.disposes.push(editor.onDidFocusEditorWidget(onFocus));
      onBlur && editor.onDidBlurEditorWidget && this.disposes.push(editor.onDidBlurEditorWidget(onBlur));
      var _e = (_c = (_b = (_a = this === null || this === void 0 ? void 0 : this.editor) === null || _a === void 0 ? void 0 : _a._configuration) === null || _b === void 0 ? void 0 : _b._elementSizeObserver) !== null && _c !== void 0 ? _c : {}, _f = _e.width, width = _f === void 0 ? "auto" : _f, _g = _e.height, height = _g === void 0 ? "auto" : _g;
      this.setState({ innerHeight: height, innerWidth: width });
    };
    Editor2.prototype.handleFullscreenModeChange = function() {
      var _this = this;
      this.setState({ isFullscreen: !this.state.isFullscreen }, function() {
        return !_this.state.isFullscreen && _this.editor.layout({
          width: _this.state.innerWidth,
          height: _this.state.innerHeight
        });
      });
    };
    Editor2.prototype.render = function() {
      var _a = this.props, className = _a.className, width = _a.width, height = _a.height, __ = _a.translate, placeholder = _a.placeholder, cx = _a.classnames, value = _a.value;
      var style = __assign({}, this.props.style || {});
      style.width = width;
      style.height = height;
      return import_react.default.createElement(
        "div",
        { className: cx("MonacoEditor", { "is-fullscreen": this.state.isFullscreen }, className), style, ref: this.wrapperRef },
        this.editor && placeholder && !value ? import_react.default.createElement("span", { className: cx("MonacoEditor-placeholder") }, placeholder) : null,
        this.editor && this.props.allowFullscreen ? import_react.default.createElement(
          "div",
          { className: cx("MonacoEditor-header") },
          import_react.default.createElement(
            "a",
            { className: cx("Modal-close", "MonacoEditor-fullscreen"), "data-tooltip": this.state.isFullscreen ? __("Editor.exitFullscreen") : __("Editor.fullscreen"), "data-position": "left", onClick: this.handleFullscreenModeChange },
            import_react.default.createElement(Icon, { icon: this.state.isFullscreen ? "compress-alt" : "expand-alt", className: "icon" })
          )
        ) : null
      );
    };
    Editor2.defaultProps = {
      language: "javascript",
      editorTheme: "vs",
      width: "100%",
      height: "100%",
      allowFullscreen: false,
      options: {}
    };
    __decorate([
      autobind,
      __metadata("design:type", Function),
      __metadata("design:paramtypes", []),
      __metadata("design:returntype", void 0)
    ], Editor2.prototype, "handleFullscreenModeChange", null);
    return Editor2;
  }(import_react.default.Component)
);
var Editor$1 = themeable(localeable(Editor));

export {
  monacoFactory,
  Editor,
  Editor$1
};
//# sourceMappingURL=chunk-TLEMQQIT.js.map
