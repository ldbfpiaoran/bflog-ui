import {
  __commonJS
} from "./chunk-LFBQMW2U.js";

// node_modules/mpegts.js/dist/mpegts.js
var require_mpegts = __commonJS({
  "node_modules/mpegts.js/dist/mpegts.js"(exports, module) {
    !function(e, t) {
      "object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == typeof exports ? exports.mpegts = t() : e.mpegts = t();
    }(window, function() {
      return function(e) {
        var t = {};
        function i(n) {
          if (t[n])
            return t[n].exports;
          var r = t[n] = { i: n, l: false, exports: {} };
          return e[n].call(r.exports, r, r.exports, i), r.l = true, r.exports;
        }
        return i.m = e, i.c = t, i.d = function(e2, t2, n) {
          i.o(e2, t2) || Object.defineProperty(e2, t2, { enumerable: true, get: n });
        }, i.r = function(e2) {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
        }, i.t = function(e2, t2) {
          if (1 & t2 && (e2 = i(e2)), 8 & t2)
            return e2;
          if (4 & t2 && "object" == typeof e2 && e2 && e2.__esModule)
            return e2;
          var n = /* @__PURE__ */ Object.create(null);
          if (i.r(n), Object.defineProperty(n, "default", { enumerable: true, value: e2 }), 2 & t2 && "string" != typeof e2)
            for (var r in e2)
              i.d(n, r, function(t3) {
                return e2[t3];
              }.bind(null, r));
          return n;
        }, i.n = function(e2) {
          var t2 = e2 && e2.__esModule ? function() {
            return e2.default;
          } : function() {
            return e2;
          };
          return i.d(t2, "a", t2), t2;
        }, i.o = function(e2, t2) {
          return Object.prototype.hasOwnProperty.call(e2, t2);
        }, i.p = "", i(i.s = 14);
      }([function(e, t, i) {
        "use strict";
        var n = i(6), r = i.n(n), s = function() {
          function e2() {
          }
          return e2.e = function(t2, i2) {
            t2 && !e2.FORCE_GLOBAL_TAG || (t2 = e2.GLOBAL_TAG);
            var n2 = "[" + t2 + "] > " + i2;
            e2.ENABLE_CALLBACK && e2.emitter.emit("log", "error", n2), e2.ENABLE_ERROR && (console.error ? console.error(n2) : console.warn ? console.warn(n2) : console.log(n2));
          }, e2.i = function(t2, i2) {
            t2 && !e2.FORCE_GLOBAL_TAG || (t2 = e2.GLOBAL_TAG);
            var n2 = "[" + t2 + "] > " + i2;
            e2.ENABLE_CALLBACK && e2.emitter.emit("log", "info", n2), e2.ENABLE_INFO && (console.info ? console.info(n2) : console.log(n2));
          }, e2.w = function(t2, i2) {
            t2 && !e2.FORCE_GLOBAL_TAG || (t2 = e2.GLOBAL_TAG);
            var n2 = "[" + t2 + "] > " + i2;
            e2.ENABLE_CALLBACK && e2.emitter.emit("log", "warn", n2), e2.ENABLE_WARN && (console.warn ? console.warn(n2) : console.log(n2));
          }, e2.d = function(t2, i2) {
            t2 && !e2.FORCE_GLOBAL_TAG || (t2 = e2.GLOBAL_TAG);
            var n2 = "[" + t2 + "] > " + i2;
            e2.ENABLE_CALLBACK && e2.emitter.emit("log", "debug", n2), e2.ENABLE_DEBUG && (console.debug ? console.debug(n2) : console.log(n2));
          }, e2.v = function(t2, i2) {
            t2 && !e2.FORCE_GLOBAL_TAG || (t2 = e2.GLOBAL_TAG);
            var n2 = "[" + t2 + "] > " + i2;
            e2.ENABLE_CALLBACK && e2.emitter.emit("log", "verbose", n2), e2.ENABLE_VERBOSE && console.log(n2);
          }, e2;
        }();
        s.GLOBAL_TAG = "mpegts.js", s.FORCE_GLOBAL_TAG = false, s.ENABLE_ERROR = true, s.ENABLE_INFO = true, s.ENABLE_WARN = true, s.ENABLE_DEBUG = true, s.ENABLE_VERBOSE = true, s.ENABLE_CALLBACK = false, s.emitter = new r.a(), t.a = s;
      }, function(e, t, i) {
        "use strict";
        t.a = { IO_ERROR: "io_error", DEMUX_ERROR: "demux_error", INIT_SEGMENT: "init_segment", MEDIA_SEGMENT: "media_segment", LOADING_COMPLETE: "loading_complete", RECOVERED_EARLY_EOF: "recovered_early_eof", MEDIA_INFO: "media_info", METADATA_ARRIVED: "metadata_arrived", SCRIPTDATA_ARRIVED: "scriptdata_arrived", TIMED_ID3_METADATA_ARRIVED: "timed_id3_metadata_arrived", PES_PRIVATE_DATA_DESCRIPTOR: "pes_private_data_descriptor", PES_PRIVATE_DATA_ARRIVED: "pes_private_data_arrived", STATISTICS_INFO: "statistics_info", RECOMMEND_SEEKPOINT: "recommend_seekpoint" };
      }, function(e, t, i) {
        "use strict";
        i.d(t, "c", function() {
          return r;
        }), i.d(t, "b", function() {
          return s;
        }), i.d(t, "a", function() {
          return a;
        });
        var n = i(3), r = { kIdle: 0, kConnecting: 1, kBuffering: 2, kError: 3, kComplete: 4 }, s = { OK: "OK", EXCEPTION: "Exception", HTTP_STATUS_CODE_INVALID: "HttpStatusCodeInvalid", CONNECTING_TIMEOUT: "ConnectingTimeout", EARLY_EOF: "EarlyEof", UNRECOVERABLE_EARLY_EOF: "UnrecoverableEarlyEof" }, a = function() {
          function e2(e3) {
            this._type = e3 || "undefined", this._status = r.kIdle, this._needStash = false, this._onContentLengthKnown = null, this._onURLRedirect = null, this._onDataArrival = null, this._onError = null, this._onComplete = null;
          }
          return e2.prototype.destroy = function() {
            this._status = r.kIdle, this._onContentLengthKnown = null, this._onURLRedirect = null, this._onDataArrival = null, this._onError = null, this._onComplete = null;
          }, e2.prototype.isWorking = function() {
            return this._status === r.kConnecting || this._status === r.kBuffering;
          }, Object.defineProperty(e2.prototype, "type", { get: function() {
            return this._type;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "status", { get: function() {
            return this._status;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "needStashBuffer", { get: function() {
            return this._needStash;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "onContentLengthKnown", { get: function() {
            return this._onContentLengthKnown;
          }, set: function(e3) {
            this._onContentLengthKnown = e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "onURLRedirect", { get: function() {
            return this._onURLRedirect;
          }, set: function(e3) {
            this._onURLRedirect = e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "onDataArrival", { get: function() {
            return this._onDataArrival;
          }, set: function(e3) {
            this._onDataArrival = e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "onError", { get: function() {
            return this._onError;
          }, set: function(e3) {
            this._onError = e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "onComplete", { get: function() {
            return this._onComplete;
          }, set: function(e3) {
            this._onComplete = e3;
          }, enumerable: false, configurable: true }), e2.prototype.open = function(e3, t2) {
            throw new n.c("Unimplemented abstract function!");
          }, e2.prototype.abort = function() {
            throw new n.c("Unimplemented abstract function!");
          }, e2;
        }();
      }, function(e, t, i) {
        "use strict";
        i.d(t, "d", function() {
          return s;
        }), i.d(t, "a", function() {
          return a;
        }), i.d(t, "b", function() {
          return o;
        }), i.d(t, "c", function() {
          return h;
        });
        var n, r = (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var i2 in t3)
              t3.hasOwnProperty(i2) && (e3[i2] = t3[i2]);
          })(e2, t2);
        }, function(e2, t2) {
          function i2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (i2.prototype = t2.prototype, new i2());
        }), s = function() {
          function e2(e3) {
            this._message = e3;
          }
          return Object.defineProperty(e2.prototype, "name", { get: function() {
            return "RuntimeException";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "message", { get: function() {
            return this._message;
          }, enumerable: false, configurable: true }), e2.prototype.toString = function() {
            return this.name + ": " + this.message;
          }, e2;
        }(), a = function(e2) {
          function t2(t3) {
            return e2.call(this, t3) || this;
          }
          return r(t2, e2), Object.defineProperty(t2.prototype, "name", { get: function() {
            return "IllegalStateException";
          }, enumerable: false, configurable: true }), t2;
        }(s), o = function(e2) {
          function t2(t3) {
            return e2.call(this, t3) || this;
          }
          return r(t2, e2), Object.defineProperty(t2.prototype, "name", { get: function() {
            return "InvalidArgumentException";
          }, enumerable: false, configurable: true }), t2;
        }(s), h = function(e2) {
          function t2(t3) {
            return e2.call(this, t3) || this;
          }
          return r(t2, e2), Object.defineProperty(t2.prototype, "name", { get: function() {
            return "NotImplementedException";
          }, enumerable: false, configurable: true }), t2;
        }(s);
      }, function(e, t, i) {
        "use strict";
        var n = {};
        !function() {
          var e2 = self.navigator.userAgent.toLowerCase(), t2 = /(edge)\/([\w.]+)/.exec(e2) || /(opr)[\/]([\w.]+)/.exec(e2) || /(chrome)[ \/]([\w.]+)/.exec(e2) || /(iemobile)[\/]([\w.]+)/.exec(e2) || /(version)(applewebkit)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(e2) || /(webkit)[ \/]([\w.]+).*(version)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(e2) || /(webkit)[ \/]([\w.]+)/.exec(e2) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e2) || /(msie) ([\w.]+)/.exec(e2) || e2.indexOf("trident") >= 0 && /(rv)(?::| )([\w.]+)/.exec(e2) || e2.indexOf("compatible") < 0 && /(firefox)[ \/]([\w.]+)/.exec(e2) || [], i2 = /(ipad)/.exec(e2) || /(ipod)/.exec(e2) || /(windows phone)/.exec(e2) || /(iphone)/.exec(e2) || /(kindle)/.exec(e2) || /(android)/.exec(e2) || /(windows)/.exec(e2) || /(mac)/.exec(e2) || /(linux)/.exec(e2) || /(cros)/.exec(e2) || [], r = { browser: t2[5] || t2[3] || t2[1] || "", version: t2[2] || t2[4] || "0", majorVersion: t2[4] || t2[2] || "0", platform: i2[0] || "" }, s = {};
          if (r.browser) {
            s[r.browser] = true;
            var a = r.majorVersion.split(".");
            s.version = { major: parseInt(r.majorVersion, 10), string: r.version }, a.length > 1 && (s.version.minor = parseInt(a[1], 10)), a.length > 2 && (s.version.build = parseInt(a[2], 10));
          }
          if (r.platform && (s[r.platform] = true), (s.chrome || s.opr || s.safari) && (s.webkit = true), s.rv || s.iemobile) {
            s.rv && delete s.rv;
            r.browser = "msie", s.msie = true;
          }
          if (s.edge) {
            delete s.edge;
            r.browser = "msedge", s.msedge = true;
          }
          if (s.opr) {
            r.browser = "opera", s.opera = true;
          }
          if (s.safari && s.android) {
            r.browser = "android", s.android = true;
          }
          for (var o in s.name = r.browser, s.platform = r.platform, n)
            n.hasOwnProperty(o) && delete n[o];
          Object.assign(n, s);
        }(), t.a = n;
      }, function(e, t, i) {
        "use strict";
        t.a = { OK: "OK", FORMAT_ERROR: "FormatError", FORMAT_UNSUPPORTED: "FormatUnsupported", CODEC_UNSUPPORTED: "CodecUnsupported" };
      }, function(e, t, i) {
        "use strict";
        var n, r = "object" == typeof Reflect ? Reflect : null, s = r && "function" == typeof r.apply ? r.apply : function(e2, t2, i2) {
          return Function.prototype.apply.call(e2, t2, i2);
        };
        n = r && "function" == typeof r.ownKeys ? r.ownKeys : Object.getOwnPropertySymbols ? function(e2) {
          return Object.getOwnPropertyNames(e2).concat(Object.getOwnPropertySymbols(e2));
        } : function(e2) {
          return Object.getOwnPropertyNames(e2);
        };
        var a = Number.isNaN || function(e2) {
          return e2 != e2;
        };
        function o() {
          o.init.call(this);
        }
        e.exports = o, e.exports.once = function(e2, t2) {
          return new Promise(function(i2, n2) {
            function r2(i3) {
              e2.removeListener(t2, s2), n2(i3);
            }
            function s2() {
              "function" == typeof e2.removeListener && e2.removeListener("error", r2), i2([].slice.call(arguments));
            }
            g(e2, t2, s2, { once: true }), "error" !== t2 && function(e3, t3, i3) {
              "function" == typeof e3.on && g(e3, "error", t3, i3);
            }(e2, r2, { once: true });
          });
        }, o.EventEmitter = o, o.prototype._events = void 0, o.prototype._eventsCount = 0, o.prototype._maxListeners = void 0;
        var h = 10;
        function d(e2) {
          if ("function" != typeof e2)
            throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e2);
        }
        function u(e2) {
          return void 0 === e2._maxListeners ? o.defaultMaxListeners : e2._maxListeners;
        }
        function _(e2, t2, i2, n2) {
          var r2, s2, a2, o2;
          if (d(i2), void 0 === (s2 = e2._events) ? (s2 = e2._events = /* @__PURE__ */ Object.create(null), e2._eventsCount = 0) : (void 0 !== s2.newListener && (e2.emit("newListener", t2, i2.listener ? i2.listener : i2), s2 = e2._events), a2 = s2[t2]), void 0 === a2)
            a2 = s2[t2] = i2, ++e2._eventsCount;
          else if ("function" == typeof a2 ? a2 = s2[t2] = n2 ? [i2, a2] : [a2, i2] : n2 ? a2.unshift(i2) : a2.push(i2), (r2 = u(e2)) > 0 && a2.length > r2 && !a2.warned) {
            a2.warned = true;
            var h2 = new Error("Possible EventEmitter memory leak detected. " + a2.length + " " + String(t2) + " listeners added. Use emitter.setMaxListeners() to increase limit");
            h2.name = "MaxListenersExceededWarning", h2.emitter = e2, h2.type = t2, h2.count = a2.length, o2 = h2, console && console.warn && console.warn(o2);
          }
          return e2;
        }
        function l() {
          if (!this.fired)
            return this.target.removeListener(this.type, this.wrapFn), this.fired = true, 0 === arguments.length ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
        }
        function c(e2, t2, i2) {
          var n2 = { fired: false, wrapFn: void 0, target: e2, type: t2, listener: i2 }, r2 = l.bind(n2);
          return r2.listener = i2, n2.wrapFn = r2, r2;
        }
        function f(e2, t2, i2) {
          var n2 = e2._events;
          if (void 0 === n2)
            return [];
          var r2 = n2[t2];
          return void 0 === r2 ? [] : "function" == typeof r2 ? i2 ? [r2.listener || r2] : [r2] : i2 ? function(e3) {
            for (var t3 = new Array(e3.length), i3 = 0; i3 < t3.length; ++i3)
              t3[i3] = e3[i3].listener || e3[i3];
            return t3;
          }(r2) : m(r2, r2.length);
        }
        function p(e2) {
          var t2 = this._events;
          if (void 0 !== t2) {
            var i2 = t2[e2];
            if ("function" == typeof i2)
              return 1;
            if (void 0 !== i2)
              return i2.length;
          }
          return 0;
        }
        function m(e2, t2) {
          for (var i2 = new Array(t2), n2 = 0; n2 < t2; ++n2)
            i2[n2] = e2[n2];
          return i2;
        }
        function g(e2, t2, i2, n2) {
          if ("function" == typeof e2.on)
            n2.once ? e2.once(t2, i2) : e2.on(t2, i2);
          else {
            if ("function" != typeof e2.addEventListener)
              throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof e2);
            e2.addEventListener(t2, function r2(s2) {
              n2.once && e2.removeEventListener(t2, r2), i2(s2);
            });
          }
        }
        Object.defineProperty(o, "defaultMaxListeners", { enumerable: true, get: function() {
          return h;
        }, set: function(e2) {
          if ("number" != typeof e2 || e2 < 0 || a(e2))
            throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + e2 + ".");
          h = e2;
        } }), o.init = function() {
          void 0 !== this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
        }, o.prototype.setMaxListeners = function(e2) {
          if ("number" != typeof e2 || e2 < 0 || a(e2))
            throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e2 + ".");
          return this._maxListeners = e2, this;
        }, o.prototype.getMaxListeners = function() {
          return u(this);
        }, o.prototype.emit = function(e2) {
          for (var t2 = [], i2 = 1; i2 < arguments.length; i2++)
            t2.push(arguments[i2]);
          var n2 = "error" === e2, r2 = this._events;
          if (void 0 !== r2)
            n2 = n2 && void 0 === r2.error;
          else if (!n2)
            return false;
          if (n2) {
            var a2;
            if (t2.length > 0 && (a2 = t2[0]), a2 instanceof Error)
              throw a2;
            var o2 = new Error("Unhandled error." + (a2 ? " (" + a2.message + ")" : ""));
            throw o2.context = a2, o2;
          }
          var h2 = r2[e2];
          if (void 0 === h2)
            return false;
          if ("function" == typeof h2)
            s(h2, this, t2);
          else {
            var d2 = h2.length, u2 = m(h2, d2);
            for (i2 = 0; i2 < d2; ++i2)
              s(u2[i2], this, t2);
          }
          return true;
        }, o.prototype.addListener = function(e2, t2) {
          return _(this, e2, t2, false);
        }, o.prototype.on = o.prototype.addListener, o.prototype.prependListener = function(e2, t2) {
          return _(this, e2, t2, true);
        }, o.prototype.once = function(e2, t2) {
          return d(t2), this.on(e2, c(this, e2, t2)), this;
        }, o.prototype.prependOnceListener = function(e2, t2) {
          return d(t2), this.prependListener(e2, c(this, e2, t2)), this;
        }, o.prototype.removeListener = function(e2, t2) {
          var i2, n2, r2, s2, a2;
          if (d(t2), void 0 === (n2 = this._events))
            return this;
          if (void 0 === (i2 = n2[e2]))
            return this;
          if (i2 === t2 || i2.listener === t2)
            0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : (delete n2[e2], n2.removeListener && this.emit("removeListener", e2, i2.listener || t2));
          else if ("function" != typeof i2) {
            for (r2 = -1, s2 = i2.length - 1; s2 >= 0; s2--)
              if (i2[s2] === t2 || i2[s2].listener === t2) {
                a2 = i2[s2].listener, r2 = s2;
                break;
              }
            if (r2 < 0)
              return this;
            0 === r2 ? i2.shift() : function(e3, t3) {
              for (; t3 + 1 < e3.length; t3++)
                e3[t3] = e3[t3 + 1];
              e3.pop();
            }(i2, r2), 1 === i2.length && (n2[e2] = i2[0]), void 0 !== n2.removeListener && this.emit("removeListener", e2, a2 || t2);
          }
          return this;
        }, o.prototype.off = o.prototype.removeListener, o.prototype.removeAllListeners = function(e2) {
          var t2, i2, n2;
          if (void 0 === (i2 = this._events))
            return this;
          if (void 0 === i2.removeListener)
            return 0 === arguments.length ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : void 0 !== i2[e2] && (0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : delete i2[e2]), this;
          if (0 === arguments.length) {
            var r2, s2 = Object.keys(i2);
            for (n2 = 0; n2 < s2.length; ++n2)
              "removeListener" !== (r2 = s2[n2]) && this.removeAllListeners(r2);
            return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
          }
          if ("function" == typeof (t2 = i2[e2]))
            this.removeListener(e2, t2);
          else if (void 0 !== t2)
            for (n2 = t2.length - 1; n2 >= 0; n2--)
              this.removeListener(e2, t2[n2]);
          return this;
        }, o.prototype.listeners = function(e2) {
          return f(this, e2, true);
        }, o.prototype.rawListeners = function(e2) {
          return f(this, e2, false);
        }, o.listenerCount = function(e2, t2) {
          return "function" == typeof e2.listenerCount ? e2.listenerCount(t2) : p.call(e2, t2);
        }, o.prototype.listenerCount = p, o.prototype.eventNames = function() {
          return this._eventsCount > 0 ? n(this._events) : [];
        };
      }, function(e, t, i) {
        "use strict";
        i.d(t, "d", function() {
          return n;
        }), i.d(t, "b", function() {
          return r;
        }), i.d(t, "a", function() {
          return s;
        }), i.d(t, "c", function() {
          return a;
        });
        var n = function(e2, t2, i2, n2, r2) {
          this.dts = e2, this.pts = t2, this.duration = i2, this.originalDts = n2, this.isSyncPoint = r2, this.fileposition = null;
        }, r = function() {
          function e2() {
            this.beginDts = 0, this.endDts = 0, this.beginPts = 0, this.endPts = 0, this.originalBeginDts = 0, this.originalEndDts = 0, this.syncPoints = [], this.firstSample = null, this.lastSample = null;
          }
          return e2.prototype.appendSyncPoint = function(e3) {
            e3.isSyncPoint = true, this.syncPoints.push(e3);
          }, e2;
        }(), s = function() {
          function e2() {
            this._list = [];
          }
          return e2.prototype.clear = function() {
            this._list = [];
          }, e2.prototype.appendArray = function(e3) {
            var t2 = this._list;
            0 !== e3.length && (t2.length > 0 && e3[0].originalDts < t2[t2.length - 1].originalDts && this.clear(), Array.prototype.push.apply(t2, e3));
          }, e2.prototype.getLastSyncPointBeforeDts = function(e3) {
            if (0 == this._list.length)
              return null;
            var t2 = this._list, i2 = 0, n2 = t2.length - 1, r2 = 0, s2 = 0, a2 = n2;
            for (e3 < t2[0].dts && (i2 = 0, s2 = a2 + 1); s2 <= a2; ) {
              if ((r2 = s2 + Math.floor((a2 - s2) / 2)) === n2 || e3 >= t2[r2].dts && e3 < t2[r2 + 1].dts) {
                i2 = r2;
                break;
              }
              t2[r2].dts < e3 ? s2 = r2 + 1 : a2 = r2 - 1;
            }
            return this._list[i2];
          }, e2;
        }(), a = function() {
          function e2(e3) {
            this._type = e3, this._list = [], this._lastAppendLocation = -1;
          }
          return Object.defineProperty(e2.prototype, "type", { get: function() {
            return this._type;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "length", { get: function() {
            return this._list.length;
          }, enumerable: false, configurable: true }), e2.prototype.isEmpty = function() {
            return 0 === this._list.length;
          }, e2.prototype.clear = function() {
            this._list = [], this._lastAppendLocation = -1;
          }, e2.prototype._searchNearestSegmentBefore = function(e3) {
            var t2 = this._list;
            if (0 === t2.length)
              return -2;
            var i2 = t2.length - 1, n2 = 0, r2 = 0, s2 = i2, a2 = 0;
            if (e3 < t2[0].originalBeginDts)
              return a2 = -1;
            for (; r2 <= s2; ) {
              if ((n2 = r2 + Math.floor((s2 - r2) / 2)) === i2 || e3 > t2[n2].lastSample.originalDts && e3 < t2[n2 + 1].originalBeginDts) {
                a2 = n2;
                break;
              }
              t2[n2].originalBeginDts < e3 ? r2 = n2 + 1 : s2 = n2 - 1;
            }
            return a2;
          }, e2.prototype._searchNearestSegmentAfter = function(e3) {
            return this._searchNearestSegmentBefore(e3) + 1;
          }, e2.prototype.append = function(e3) {
            var t2 = this._list, i2 = e3, n2 = this._lastAppendLocation, r2 = 0;
            -1 !== n2 && n2 < t2.length && i2.originalBeginDts >= t2[n2].lastSample.originalDts && (n2 === t2.length - 1 || n2 < t2.length - 1 && i2.originalBeginDts < t2[n2 + 1].originalBeginDts) ? r2 = n2 + 1 : t2.length > 0 && (r2 = this._searchNearestSegmentBefore(i2.originalBeginDts) + 1), this._lastAppendLocation = r2, this._list.splice(r2, 0, i2);
          }, e2.prototype.getLastSegmentBefore = function(e3) {
            var t2 = this._searchNearestSegmentBefore(e3);
            return t2 >= 0 ? this._list[t2] : null;
          }, e2.prototype.getLastSampleBefore = function(e3) {
            var t2 = this.getLastSegmentBefore(e3);
            return null != t2 ? t2.lastSample : null;
          }, e2.prototype.getLastSyncPointBefore = function(e3) {
            for (var t2 = this._searchNearestSegmentBefore(e3), i2 = this._list[t2].syncPoints; 0 === i2.length && t2 > 0; )
              t2--, i2 = this._list[t2].syncPoints;
            return i2.length > 0 ? i2[i2.length - 1] : null;
          }, e2;
        }();
      }, function(e, t, i) {
        "use strict";
        var n = function() {
          function e2() {
            this.mimeType = null, this.duration = null, this.hasAudio = null, this.hasVideo = null, this.audioCodec = null, this.videoCodec = null, this.audioDataRate = null, this.videoDataRate = null, this.audioSampleRate = null, this.audioChannelCount = null, this.width = null, this.height = null, this.fps = null, this.profile = null, this.level = null, this.refFrames = null, this.chromaFormat = null, this.sarNum = null, this.sarDen = null, this.metadata = null, this.segments = null, this.segmentCount = null, this.hasKeyframesIndex = null, this.keyframesIndex = null;
          }
          return e2.prototype.isComplete = function() {
            var e3 = false === this.hasAudio || true === this.hasAudio && null != this.audioCodec && null != this.audioSampleRate && null != this.audioChannelCount, t2 = false === this.hasVideo || true === this.hasVideo && null != this.videoCodec && null != this.width && null != this.height && null != this.fps && null != this.profile && null != this.level && null != this.refFrames && null != this.chromaFormat && null != this.sarNum && null != this.sarDen;
            return null != this.mimeType && e3 && t2;
          }, e2.prototype.isSeekable = function() {
            return true === this.hasKeyframesIndex;
          }, e2.prototype.getNearestKeyframe = function(e3) {
            if (null == this.keyframesIndex)
              return null;
            var t2 = this.keyframesIndex, i2 = this._search(t2.times, e3);
            return { index: i2, milliseconds: t2.times[i2], fileposition: t2.filepositions[i2] };
          }, e2.prototype._search = function(e3, t2) {
            var i2 = 0, n2 = e3.length - 1, r = 0, s = 0, a = n2;
            for (t2 < e3[0] && (i2 = 0, s = a + 1); s <= a; ) {
              if ((r = s + Math.floor((a - s) / 2)) === n2 || t2 >= e3[r] && t2 < e3[r + 1]) {
                i2 = r;
                break;
              }
              e3[r] < t2 ? s = r + 1 : a = r - 1;
            }
            return i2;
          }, e2;
        }();
        t.a = n;
      }, function(e, t, i) {
        "use strict";
        var n = i(6), r = i.n(n), s = i(0), a = function() {
          function e2() {
          }
          return Object.defineProperty(e2, "forceGlobalTag", { get: function() {
            return s.a.FORCE_GLOBAL_TAG;
          }, set: function(t2) {
            s.a.FORCE_GLOBAL_TAG = t2, e2._notifyChange();
          }, enumerable: false, configurable: true }), Object.defineProperty(e2, "globalTag", { get: function() {
            return s.a.GLOBAL_TAG;
          }, set: function(t2) {
            s.a.GLOBAL_TAG = t2, e2._notifyChange();
          }, enumerable: false, configurable: true }), Object.defineProperty(e2, "enableAll", { get: function() {
            return s.a.ENABLE_VERBOSE && s.a.ENABLE_DEBUG && s.a.ENABLE_INFO && s.a.ENABLE_WARN && s.a.ENABLE_ERROR;
          }, set: function(t2) {
            s.a.ENABLE_VERBOSE = t2, s.a.ENABLE_DEBUG = t2, s.a.ENABLE_INFO = t2, s.a.ENABLE_WARN = t2, s.a.ENABLE_ERROR = t2, e2._notifyChange();
          }, enumerable: false, configurable: true }), Object.defineProperty(e2, "enableDebug", { get: function() {
            return s.a.ENABLE_DEBUG;
          }, set: function(t2) {
            s.a.ENABLE_DEBUG = t2, e2._notifyChange();
          }, enumerable: false, configurable: true }), Object.defineProperty(e2, "enableVerbose", { get: function() {
            return s.a.ENABLE_VERBOSE;
          }, set: function(t2) {
            s.a.ENABLE_VERBOSE = t2, e2._notifyChange();
          }, enumerable: false, configurable: true }), Object.defineProperty(e2, "enableInfo", { get: function() {
            return s.a.ENABLE_INFO;
          }, set: function(t2) {
            s.a.ENABLE_INFO = t2, e2._notifyChange();
          }, enumerable: false, configurable: true }), Object.defineProperty(e2, "enableWarn", { get: function() {
            return s.a.ENABLE_WARN;
          }, set: function(t2) {
            s.a.ENABLE_WARN = t2, e2._notifyChange();
          }, enumerable: false, configurable: true }), Object.defineProperty(e2, "enableError", { get: function() {
            return s.a.ENABLE_ERROR;
          }, set: function(t2) {
            s.a.ENABLE_ERROR = t2, e2._notifyChange();
          }, enumerable: false, configurable: true }), e2.getConfig = function() {
            return { globalTag: s.a.GLOBAL_TAG, forceGlobalTag: s.a.FORCE_GLOBAL_TAG, enableVerbose: s.a.ENABLE_VERBOSE, enableDebug: s.a.ENABLE_DEBUG, enableInfo: s.a.ENABLE_INFO, enableWarn: s.a.ENABLE_WARN, enableError: s.a.ENABLE_ERROR, enableCallback: s.a.ENABLE_CALLBACK };
          }, e2.applyConfig = function(e3) {
            s.a.GLOBAL_TAG = e3.globalTag, s.a.FORCE_GLOBAL_TAG = e3.forceGlobalTag, s.a.ENABLE_VERBOSE = e3.enableVerbose, s.a.ENABLE_DEBUG = e3.enableDebug, s.a.ENABLE_INFO = e3.enableInfo, s.a.ENABLE_WARN = e3.enableWarn, s.a.ENABLE_ERROR = e3.enableError, s.a.ENABLE_CALLBACK = e3.enableCallback;
          }, e2._notifyChange = function() {
            var t2 = e2.emitter;
            if (t2.listenerCount("change") > 0) {
              var i2 = e2.getConfig();
              t2.emit("change", i2);
            }
          }, e2.registerListener = function(t2) {
            e2.emitter.addListener("change", t2);
          }, e2.removeListener = function(t2) {
            e2.emitter.removeListener("change", t2);
          }, e2.addLogListener = function(t2) {
            s.a.emitter.addListener("log", t2), s.a.emitter.listenerCount("log") > 0 && (s.a.ENABLE_CALLBACK = true, e2._notifyChange());
          }, e2.removeLogListener = function(t2) {
            s.a.emitter.removeListener("log", t2), 0 === s.a.emitter.listenerCount("log") && (s.a.ENABLE_CALLBACK = false, e2._notifyChange());
          }, e2;
        }();
        a.emitter = new r.a(), t.a = a;
      }, function(e, t, i) {
        "use strict";
        var n = i(6), r = i.n(n), s = i(0), a = i(4), o = i(8);
        function h(e2, t2, i2) {
          var n2 = e2;
          if (t2 + i2 < n2.length) {
            for (; i2--; )
              if (128 != (192 & n2[++t2]))
                return false;
            return true;
          }
          return false;
        }
        var d, u = function(e2) {
          for (var t2 = [], i2 = e2, n2 = 0, r2 = e2.length; n2 < r2; )
            if (i2[n2] < 128)
              t2.push(String.fromCharCode(i2[n2])), ++n2;
            else {
              if (i2[n2] < 192)
                ;
              else if (i2[n2] < 224) {
                if (h(i2, n2, 1)) {
                  if ((s2 = (31 & i2[n2]) << 6 | 63 & i2[n2 + 1]) >= 128) {
                    t2.push(String.fromCharCode(65535 & s2)), n2 += 2;
                    continue;
                  }
                }
              } else if (i2[n2] < 240) {
                if (h(i2, n2, 2)) {
                  if ((s2 = (15 & i2[n2]) << 12 | (63 & i2[n2 + 1]) << 6 | 63 & i2[n2 + 2]) >= 2048 && 55296 != (63488 & s2)) {
                    t2.push(String.fromCharCode(65535 & s2)), n2 += 3;
                    continue;
                  }
                }
              } else if (i2[n2] < 248) {
                var s2;
                if (h(i2, n2, 3)) {
                  if ((s2 = (7 & i2[n2]) << 18 | (63 & i2[n2 + 1]) << 12 | (63 & i2[n2 + 2]) << 6 | 63 & i2[n2 + 3]) > 65536 && s2 < 1114112) {
                    s2 -= 65536, t2.push(String.fromCharCode(s2 >>> 10 | 55296)), t2.push(String.fromCharCode(1023 & s2 | 56320)), n2 += 4;
                    continue;
                  }
                }
              }
              t2.push(String.fromCharCode(65533)), ++n2;
            }
          return t2.join("");
        }, _ = i(3), l = (d = new ArrayBuffer(2), new DataView(d).setInt16(0, 256, true), 256 === new Int16Array(d)[0]), c = function() {
          function e2() {
          }
          return e2.parseScriptData = function(t2, i2, n2) {
            var r2 = {};
            try {
              var a2 = e2.parseValue(t2, i2, n2), o2 = e2.parseValue(t2, i2 + a2.size, n2 - a2.size);
              r2[a2.data] = o2.data;
            } catch (e3) {
              s.a.e("AMF", e3.toString());
            }
            return r2;
          }, e2.parseObject = function(t2, i2, n2) {
            if (n2 < 3)
              throw new _.a("Data not enough when parse ScriptDataObject");
            var r2 = e2.parseString(t2, i2, n2), s2 = e2.parseValue(t2, i2 + r2.size, n2 - r2.size), a2 = s2.objectEnd;
            return { data: { name: r2.data, value: s2.data }, size: r2.size + s2.size, objectEnd: a2 };
          }, e2.parseVariable = function(t2, i2, n2) {
            return e2.parseObject(t2, i2, n2);
          }, e2.parseString = function(e3, t2, i2) {
            if (i2 < 2)
              throw new _.a("Data not enough when parse String");
            var n2 = new DataView(e3, t2, i2).getUint16(0, !l);
            return { data: n2 > 0 ? u(new Uint8Array(e3, t2 + 2, n2)) : "", size: 2 + n2 };
          }, e2.parseLongString = function(e3, t2, i2) {
            if (i2 < 4)
              throw new _.a("Data not enough when parse LongString");
            var n2 = new DataView(e3, t2, i2).getUint32(0, !l);
            return { data: n2 > 0 ? u(new Uint8Array(e3, t2 + 4, n2)) : "", size: 4 + n2 };
          }, e2.parseDate = function(e3, t2, i2) {
            if (i2 < 10)
              throw new _.a("Data size invalid when parse Date");
            var n2 = new DataView(e3, t2, i2), r2 = n2.getFloat64(0, !l), s2 = n2.getInt16(8, !l);
            return { data: new Date(r2 += 60 * s2 * 1e3), size: 10 };
          }, e2.parseValue = function(t2, i2, n2) {
            if (n2 < 1)
              throw new _.a("Data not enough when parse Value");
            var r2, a2 = new DataView(t2, i2, n2), o2 = 1, h2 = a2.getUint8(0), d2 = false;
            try {
              switch (h2) {
                case 0:
                  r2 = a2.getFloat64(1, !l), o2 += 8;
                  break;
                case 1:
                  r2 = !!a2.getUint8(1), o2 += 1;
                  break;
                case 2:
                  var u2 = e2.parseString(t2, i2 + 1, n2 - 1);
                  r2 = u2.data, o2 += u2.size;
                  break;
                case 3:
                  r2 = {};
                  var c2 = 0;
                  for (9 == (16777215 & a2.getUint32(n2 - 4, !l)) && (c2 = 3); o2 < n2 - 4; ) {
                    var f2 = e2.parseObject(t2, i2 + o2, n2 - o2 - c2);
                    if (f2.objectEnd)
                      break;
                    r2[f2.data.name] = f2.data.value, o2 += f2.size;
                  }
                  if (o2 <= n2 - 3)
                    9 === (16777215 & a2.getUint32(o2 - 1, !l)) && (o2 += 3);
                  break;
                case 8:
                  r2 = {}, o2 += 4;
                  c2 = 0;
                  for (9 == (16777215 & a2.getUint32(n2 - 4, !l)) && (c2 = 3); o2 < n2 - 8; ) {
                    var p2 = e2.parseVariable(t2, i2 + o2, n2 - o2 - c2);
                    if (p2.objectEnd)
                      break;
                    r2[p2.data.name] = p2.data.value, o2 += p2.size;
                  }
                  if (o2 <= n2 - 3)
                    9 === (16777215 & a2.getUint32(o2 - 1, !l)) && (o2 += 3);
                  break;
                case 9:
                  r2 = void 0, o2 = 1, d2 = true;
                  break;
                case 10:
                  r2 = [];
                  var m2 = a2.getUint32(1, !l);
                  o2 += 4;
                  for (var g2 = 0; g2 < m2; g2++) {
                    var v2 = e2.parseValue(t2, i2 + o2, n2 - o2);
                    r2.push(v2.data), o2 += v2.size;
                  }
                  break;
                case 11:
                  var y2 = e2.parseDate(t2, i2 + 1, n2 - 1);
                  r2 = y2.data, o2 += y2.size;
                  break;
                case 12:
                  var E2 = e2.parseString(t2, i2 + 1, n2 - 1);
                  r2 = E2.data, o2 += E2.size;
                  break;
                default:
                  o2 = n2, s.a.w("AMF", "Unsupported AMF value type " + h2);
              }
            } catch (e3) {
              s.a.e("AMF", e3.toString());
            }
            return { data: r2, size: o2, objectEnd: d2 };
          }, e2;
        }(), f = function() {
          function e2(e3) {
            this.TAG = "ExpGolomb", this._buffer = e3, this._buffer_index = 0, this._total_bytes = e3.byteLength, this._total_bits = 8 * e3.byteLength, this._current_word = 0, this._current_word_bits_left = 0;
          }
          return e2.prototype.destroy = function() {
            this._buffer = null;
          }, e2.prototype._fillCurrentWord = function() {
            var e3 = this._total_bytes - this._buffer_index;
            if (e3 <= 0)
              throw new _.a("ExpGolomb: _fillCurrentWord() but no bytes available");
            var t2 = Math.min(4, e3), i2 = new Uint8Array(4);
            i2.set(this._buffer.subarray(this._buffer_index, this._buffer_index + t2)), this._current_word = new DataView(i2.buffer).getUint32(0, false), this._buffer_index += t2, this._current_word_bits_left = 8 * t2;
          }, e2.prototype.readBits = function(e3) {
            if (e3 > 32)
              throw new _.b("ExpGolomb: readBits() bits exceeded max 32bits!");
            if (e3 <= this._current_word_bits_left) {
              var t2 = this._current_word >>> 32 - e3;
              return this._current_word <<= e3, this._current_word_bits_left -= e3, t2;
            }
            var i2 = this._current_word_bits_left ? this._current_word : 0;
            i2 >>>= 32 - this._current_word_bits_left;
            var n2 = e3 - this._current_word_bits_left;
            this._fillCurrentWord();
            var r2 = Math.min(n2, this._current_word_bits_left), s2 = this._current_word >>> 32 - r2;
            return this._current_word <<= r2, this._current_word_bits_left -= r2, i2 = i2 << r2 | s2;
          }, e2.prototype.readBool = function() {
            return 1 === this.readBits(1);
          }, e2.prototype.readByte = function() {
            return this.readBits(8);
          }, e2.prototype._skipLeadingZero = function() {
            var e3;
            for (e3 = 0; e3 < this._current_word_bits_left; e3++)
              if (0 != (this._current_word & 2147483648 >>> e3))
                return this._current_word <<= e3, this._current_word_bits_left -= e3, e3;
            return this._fillCurrentWord(), e3 + this._skipLeadingZero();
          }, e2.prototype.readUEG = function() {
            var e3 = this._skipLeadingZero();
            return this.readBits(e3 + 1) - 1;
          }, e2.prototype.readSEG = function() {
            var e3 = this.readUEG();
            return 1 & e3 ? e3 + 1 >>> 1 : -1 * (e3 >>> 1);
          }, e2;
        }(), p = function() {
          function e2() {
          }
          return e2._ebsp2rbsp = function(e3) {
            for (var t2 = e3, i2 = t2.byteLength, n2 = new Uint8Array(i2), r2 = 0, s2 = 0; s2 < i2; s2++)
              s2 >= 2 && 3 === t2[s2] && 0 === t2[s2 - 1] && 0 === t2[s2 - 2] || (n2[r2] = t2[s2], r2++);
            return new Uint8Array(n2.buffer, 0, r2);
          }, e2.parseSPS = function(t2) {
            for (var i2 = t2.subarray(1, 4), n2 = "avc1.", r2 = 0; r2 < 3; r2++) {
              var s2 = i2[r2].toString(16);
              s2.length < 2 && (s2 = "0" + s2), n2 += s2;
            }
            var a2 = e2._ebsp2rbsp(t2), o2 = new f(a2);
            o2.readByte();
            var h2 = o2.readByte();
            o2.readByte();
            var d2 = o2.readByte();
            o2.readUEG();
            var u2 = e2.getProfileString(h2), _2 = e2.getLevelString(d2), l2 = 1, c2 = 420, p2 = 8, m2 = 8;
            if ((100 === h2 || 110 === h2 || 122 === h2 || 244 === h2 || 44 === h2 || 83 === h2 || 86 === h2 || 118 === h2 || 128 === h2 || 138 === h2 || 144 === h2) && (3 === (l2 = o2.readUEG()) && o2.readBits(1), l2 <= 3 && (c2 = [0, 420, 422, 444][l2]), p2 = o2.readUEG() + 8, m2 = o2.readUEG() + 8, o2.readBits(1), o2.readBool()))
              for (var g2 = 3 !== l2 ? 8 : 12, v2 = 0; v2 < g2; v2++)
                o2.readBool() && (v2 < 6 ? e2._skipScalingList(o2, 16) : e2._skipScalingList(o2, 64));
            o2.readUEG();
            var y2 = o2.readUEG();
            if (0 === y2)
              o2.readUEG();
            else if (1 === y2) {
              o2.readBits(1), o2.readSEG(), o2.readSEG();
              var E2 = o2.readUEG();
              for (v2 = 0; v2 < E2; v2++)
                o2.readSEG();
            }
            var b2 = o2.readUEG();
            o2.readBits(1);
            var S2 = o2.readUEG(), A2 = o2.readUEG(), R2 = o2.readBits(1);
            0 === R2 && o2.readBits(1), o2.readBits(1);
            var L2 = 0, T2 = 0, w2 = 0, D2 = 0;
            o2.readBool() && (L2 = o2.readUEG(), T2 = o2.readUEG(), w2 = o2.readUEG(), D2 = o2.readUEG());
            var k2 = 1, C2 = 1, I2 = 0, O2 = true, P2 = 0, M2 = 0;
            if (o2.readBool()) {
              if (o2.readBool()) {
                var x2 = o2.readByte();
                x2 > 0 && x2 < 16 ? (k2 = [1, 12, 10, 16, 40, 24, 20, 32, 80, 18, 15, 64, 160, 4, 3, 2][x2 - 1], C2 = [1, 11, 11, 11, 33, 11, 11, 11, 33, 11, 11, 33, 99, 3, 2, 1][x2 - 1]) : 255 === x2 && (k2 = o2.readByte() << 8 | o2.readByte(), C2 = o2.readByte() << 8 | o2.readByte());
              }
              if (o2.readBool() && o2.readBool(), o2.readBool() && (o2.readBits(4), o2.readBool() && o2.readBits(24)), o2.readBool() && (o2.readUEG(), o2.readUEG()), o2.readBool()) {
                var B2 = o2.readBits(32), U2 = o2.readBits(32);
                O2 = o2.readBool(), I2 = (P2 = U2) / (M2 = 2 * B2);
              }
            }
            var N2 = 1;
            1 === k2 && 1 === C2 || (N2 = k2 / C2);
            var F2 = 0, G2 = 0;
            0 === l2 ? (F2 = 1, G2 = 2 - R2) : (F2 = 3 === l2 ? 1 : 2, G2 = (1 === l2 ? 2 : 1) * (2 - R2));
            var V2 = 16 * (S2 + 1), j2 = 16 * (A2 + 1) * (2 - R2);
            V2 -= (L2 + T2) * F2, j2 -= (w2 + D2) * G2;
            var z2 = Math.ceil(V2 * N2);
            return o2.destroy(), o2 = null, { codec_mimetype: n2, profile_idc: h2, level_idc: d2, profile_string: u2, level_string: _2, chroma_format_idc: l2, bit_depth: p2, bit_depth_luma: p2, bit_depth_chroma: m2, ref_frames: b2, chroma_format: c2, chroma_format_string: e2.getChromaFormatString(c2), frame_rate: { fixed: O2, fps: I2, fps_den: M2, fps_num: P2 }, sar_ratio: { width: k2, height: C2 }, codec_size: { width: V2, height: j2 }, present_size: { width: z2, height: j2 } };
          }, e2._skipScalingList = function(e3, t2) {
            for (var i2 = 8, n2 = 8, r2 = 0; r2 < t2; r2++)
              0 !== n2 && (n2 = (i2 + e3.readSEG() + 256) % 256), i2 = 0 === n2 ? i2 : n2;
          }, e2.getProfileString = function(e3) {
            switch (e3) {
              case 66:
                return "Baseline";
              case 77:
                return "Main";
              case 88:
                return "Extended";
              case 100:
                return "High";
              case 110:
                return "High10";
              case 122:
                return "High422";
              case 244:
                return "High444";
              default:
                return "Unknown";
            }
          }, e2.getLevelString = function(e3) {
            return (e3 / 10).toFixed(1);
          }, e2.getChromaFormatString = function(e3) {
            switch (e3) {
              case 420:
                return "4:2:0";
              case 422:
                return "4:2:2";
              case 444:
                return "4:4:4";
              default:
                return "Unknown";
            }
          }, e2;
        }(), m = i(5);
        var g, v = function() {
          function e2(e3, t2) {
            this.TAG = "FLVDemuxer", this._config = t2, this._onError = null, this._onMediaInfo = null, this._onMetaDataArrived = null, this._onScriptDataArrived = null, this._onTrackMetadata = null, this._onDataAvailable = null, this._dataOffset = e3.dataOffset, this._firstParse = true, this._dispatch = false, this._hasAudio = e3.hasAudioTrack, this._hasVideo = e3.hasVideoTrack, this._hasAudioFlagOverrided = false, this._hasVideoFlagOverrided = false, this._audioInitialMetadataDispatched = false, this._videoInitialMetadataDispatched = false, this._mediaInfo = new o.a(), this._mediaInfo.hasAudio = this._hasAudio, this._mediaInfo.hasVideo = this._hasVideo, this._metadata = null, this._audioMetadata = null, this._videoMetadata = null, this._naluLengthSize = 4, this._timestampBase = 0, this._timescale = 1e3, this._duration = 0, this._durationOverrided = false, this._referenceFrameRate = { fixed: true, fps: 23.976, fps_num: 23976, fps_den: 1e3 }, this._flvSoundRateTable = [5500, 11025, 22050, 44100, 48e3], this._mpegSamplingRates = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350], this._mpegAudioV10SampleRateTable = [44100, 48e3, 32e3, 0], this._mpegAudioV20SampleRateTable = [22050, 24e3, 16e3, 0], this._mpegAudioV25SampleRateTable = [11025, 12e3, 8e3, 0], this._mpegAudioL1BitRateTable = [0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, -1], this._mpegAudioL2BitRateTable = [0, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, -1], this._mpegAudioL3BitRateTable = [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, -1], this._videoTrack = { type: "video", id: 1, sequenceNumber: 0, samples: [], length: 0 }, this._audioTrack = { type: "audio", id: 2, sequenceNumber: 0, samples: [], length: 0 }, this._littleEndian = function() {
              var e4 = new ArrayBuffer(2);
              return new DataView(e4).setInt16(0, 256, true), 256 === new Int16Array(e4)[0];
            }();
          }
          return e2.prototype.destroy = function() {
            this._mediaInfo = null, this._metadata = null, this._audioMetadata = null, this._videoMetadata = null, this._videoTrack = null, this._audioTrack = null, this._onError = null, this._onMediaInfo = null, this._onMetaDataArrived = null, this._onScriptDataArrived = null, this._onTrackMetadata = null, this._onDataAvailable = null;
          }, e2.probe = function(e3) {
            var t2 = new Uint8Array(e3), i2 = { match: false };
            if (70 !== t2[0] || 76 !== t2[1] || 86 !== t2[2] || 1 !== t2[3])
              return i2;
            var n2, r2, s2 = (4 & t2[4]) >>> 2 != 0, a2 = 0 != (1 & t2[4]), o2 = (n2 = t2)[r2 = 5] << 24 | n2[r2 + 1] << 16 | n2[r2 + 2] << 8 | n2[r2 + 3];
            return o2 < 9 ? i2 : { match: true, consumed: o2, dataOffset: o2, hasAudioTrack: s2, hasVideoTrack: a2 };
          }, e2.prototype.bindDataSource = function(e3) {
            return e3.onDataArrival = this.parseChunks.bind(this), this;
          }, Object.defineProperty(e2.prototype, "onTrackMetadata", { get: function() {
            return this._onTrackMetadata;
          }, set: function(e3) {
            this._onTrackMetadata = e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "onMediaInfo", { get: function() {
            return this._onMediaInfo;
          }, set: function(e3) {
            this._onMediaInfo = e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "onMetaDataArrived", { get: function() {
            return this._onMetaDataArrived;
          }, set: function(e3) {
            this._onMetaDataArrived = e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "onScriptDataArrived", { get: function() {
            return this._onScriptDataArrived;
          }, set: function(e3) {
            this._onScriptDataArrived = e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "onError", { get: function() {
            return this._onError;
          }, set: function(e3) {
            this._onError = e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "onDataAvailable", { get: function() {
            return this._onDataAvailable;
          }, set: function(e3) {
            this._onDataAvailable = e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "timestampBase", { get: function() {
            return this._timestampBase;
          }, set: function(e3) {
            this._timestampBase = e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "overridedDuration", { get: function() {
            return this._duration;
          }, set: function(e3) {
            this._durationOverrided = true, this._duration = e3, this._mediaInfo.duration = e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "overridedHasAudio", { set: function(e3) {
            this._hasAudioFlagOverrided = true, this._hasAudio = e3, this._mediaInfo.hasAudio = e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "overridedHasVideo", { set: function(e3) {
            this._hasVideoFlagOverrided = true, this._hasVideo = e3, this._mediaInfo.hasVideo = e3;
          }, enumerable: false, configurable: true }), e2.prototype.resetMediaInfo = function() {
            this._mediaInfo = new o.a();
          }, e2.prototype._isInitialMetadataDispatched = function() {
            return this._hasAudio && this._hasVideo ? this._audioInitialMetadataDispatched && this._videoInitialMetadataDispatched : this._hasAudio && !this._hasVideo ? this._audioInitialMetadataDispatched : !(this._hasAudio || !this._hasVideo) && this._videoInitialMetadataDispatched;
          }, e2.prototype.parseChunks = function(t2, i2) {
            if (!(this._onError && this._onMediaInfo && this._onTrackMetadata && this._onDataAvailable))
              throw new _.a("Flv: onError & onMediaInfo & onTrackMetadata & onDataAvailable callback must be specified");
            var n2 = 0, r2 = this._littleEndian;
            if (0 === i2) {
              if (!(t2.byteLength > 13))
                return 0;
              n2 = e2.probe(t2).dataOffset;
            }
            this._firstParse && (this._firstParse = false, i2 + n2 !== this._dataOffset && s.a.w(this.TAG, "First time parsing but chunk byteStart invalid!"), 0 !== (a2 = new DataView(t2, n2)).getUint32(0, !r2) && s.a.w(this.TAG, "PrevTagSize0 !== 0 !!!"), n2 += 4);
            for (; n2 < t2.byteLength; ) {
              this._dispatch = true;
              var a2 = new DataView(t2, n2);
              if (n2 + 11 + 4 > t2.byteLength)
                break;
              var o2 = a2.getUint8(0), h2 = 16777215 & a2.getUint32(0, !r2);
              if (n2 + 11 + h2 + 4 > t2.byteLength)
                break;
              if (8 === o2 || 9 === o2 || 18 === o2) {
                var d2 = a2.getUint8(4), u2 = a2.getUint8(5), l2 = a2.getUint8(6) | u2 << 8 | d2 << 16 | a2.getUint8(7) << 24;
                0 !== (16777215 & a2.getUint32(7, !r2)) && s.a.w(this.TAG, "Meet tag which has StreamID != 0!");
                var c2 = n2 + 11;
                switch (o2) {
                  case 8:
                    this._parseAudioData(t2, c2, h2, l2);
                    break;
                  case 9:
                    this._parseVideoData(t2, c2, h2, l2, i2 + n2);
                    break;
                  case 18:
                    this._parseScriptData(t2, c2, h2);
                }
                var f2 = a2.getUint32(11 + h2, !r2);
                f2 !== 11 + h2 && s.a.w(this.TAG, "Invalid PrevTagSize " + f2), n2 += 11 + h2 + 4;
              } else
                s.a.w(this.TAG, "Unsupported tag type " + o2 + ", skipped"), n2 += 11 + h2 + 4;
            }
            return this._isInitialMetadataDispatched() && this._dispatch && (this._audioTrack.length || this._videoTrack.length) && this._onDataAvailable(this._audioTrack, this._videoTrack), n2;
          }, e2.prototype._parseScriptData = function(e3, t2, i2) {
            var n2 = c.parseScriptData(e3, t2, i2);
            if (n2.hasOwnProperty("onMetaData")) {
              if (null == n2.onMetaData || "object" != typeof n2.onMetaData)
                return void s.a.w(this.TAG, "Invalid onMetaData structure!");
              this._metadata && s.a.w(this.TAG, "Found another onMetaData tag!"), this._metadata = n2;
              var r2 = this._metadata.onMetaData;
              if (this._onMetaDataArrived && this._onMetaDataArrived(Object.assign({}, r2)), "boolean" == typeof r2.hasAudio && false === this._hasAudioFlagOverrided && (this._hasAudio = r2.hasAudio, this._mediaInfo.hasAudio = this._hasAudio), "boolean" == typeof r2.hasVideo && false === this._hasVideoFlagOverrided && (this._hasVideo = r2.hasVideo, this._mediaInfo.hasVideo = this._hasVideo), "number" == typeof r2.audiodatarate && (this._mediaInfo.audioDataRate = r2.audiodatarate), "number" == typeof r2.videodatarate && (this._mediaInfo.videoDataRate = r2.videodatarate), "number" == typeof r2.width && (this._mediaInfo.width = r2.width), "number" == typeof r2.height && (this._mediaInfo.height = r2.height), "number" == typeof r2.duration) {
                if (!this._durationOverrided) {
                  var a2 = Math.floor(r2.duration * this._timescale);
                  this._duration = a2, this._mediaInfo.duration = a2;
                }
              } else
                this._mediaInfo.duration = 0;
              if ("number" == typeof r2.framerate) {
                var o2 = Math.floor(1e3 * r2.framerate);
                if (o2 > 0) {
                  var h2 = o2 / 1e3;
                  this._referenceFrameRate.fixed = true, this._referenceFrameRate.fps = h2, this._referenceFrameRate.fps_num = o2, this._referenceFrameRate.fps_den = 1e3, this._mediaInfo.fps = h2;
                }
              }
              if ("object" == typeof r2.keyframes) {
                this._mediaInfo.hasKeyframesIndex = true;
                var d2 = r2.keyframes;
                this._mediaInfo.keyframesIndex = this._parseKeyframesIndex(d2), r2.keyframes = null;
              } else
                this._mediaInfo.hasKeyframesIndex = false;
              this._dispatch = false, this._mediaInfo.metadata = r2, s.a.v(this.TAG, "Parsed onMetaData"), this._mediaInfo.isComplete() && this._onMediaInfo(this._mediaInfo);
            }
            Object.keys(n2).length > 0 && this._onScriptDataArrived && this._onScriptDataArrived(Object.assign({}, n2));
          }, e2.prototype._parseKeyframesIndex = function(e3) {
            for (var t2 = [], i2 = [], n2 = 1; n2 < e3.times.length; n2++) {
              var r2 = this._timestampBase + Math.floor(1e3 * e3.times[n2]);
              t2.push(r2), i2.push(e3.filepositions[n2]);
            }
            return { times: t2, filepositions: i2 };
          }, e2.prototype._parseAudioData = function(e3, t2, i2, n2) {
            if (i2 <= 1)
              s.a.w(this.TAG, "Flv: Invalid audio packet, missing SoundData payload!");
            else if (true !== this._hasAudioFlagOverrided || false !== this._hasAudio) {
              this._littleEndian;
              var r2 = new DataView(e3, t2, i2).getUint8(0), a2 = r2 >>> 4;
              if (2 === a2 || 10 === a2) {
                var o2 = 0, h2 = (12 & r2) >>> 2;
                if (h2 >= 0 && h2 <= 4) {
                  o2 = this._flvSoundRateTable[h2];
                  var d2 = 1 & r2, u2 = this._audioMetadata, _2 = this._audioTrack;
                  if (u2 || (false === this._hasAudio && false === this._hasAudioFlagOverrided && (this._hasAudio = true, this._mediaInfo.hasAudio = true), (u2 = this._audioMetadata = {}).type = "audio", u2.id = _2.id, u2.timescale = this._timescale, u2.duration = this._duration, u2.audioSampleRate = o2, u2.channelCount = 0 === d2 ? 1 : 2), 10 === a2) {
                    var l2 = this._parseAACAudioData(e3, t2 + 1, i2 - 1);
                    if (null == l2)
                      return;
                    if (0 === l2.packetType) {
                      u2.config && s.a.w(this.TAG, "Found another AudioSpecificConfig!");
                      var c2 = l2.data;
                      u2.audioSampleRate = c2.samplingRate, u2.channelCount = c2.channelCount, u2.codec = c2.codec, u2.originalCodec = c2.originalCodec, u2.config = c2.config, u2.refSampleDuration = 1024 / u2.audioSampleRate * u2.timescale, s.a.v(this.TAG, "Parsed AudioSpecificConfig"), this._isInitialMetadataDispatched() ? this._dispatch && (this._audioTrack.length || this._videoTrack.length) && this._onDataAvailable(this._audioTrack, this._videoTrack) : this._audioInitialMetadataDispatched = true, this._dispatch = false, this._onTrackMetadata("audio", u2), (g2 = this._mediaInfo).audioCodec = u2.originalCodec, g2.audioSampleRate = u2.audioSampleRate, g2.audioChannelCount = u2.channelCount, g2.hasVideo ? null != g2.videoCodec && (g2.mimeType = 'video/x-flv; codecs="' + g2.videoCodec + "," + g2.audioCodec + '"') : g2.mimeType = 'video/x-flv; codecs="' + g2.audioCodec + '"', g2.isComplete() && this._onMediaInfo(g2);
                    } else if (1 === l2.packetType) {
                      var f2 = this._timestampBase + n2, p2 = { unit: l2.data, length: l2.data.byteLength, dts: f2, pts: f2 };
                      _2.samples.push(p2), _2.length += l2.data.length;
                    } else
                      s.a.e(this.TAG, "Flv: Unsupported AAC data type " + l2.packetType);
                  } else if (2 === a2) {
                    if (!u2.codec) {
                      var g2;
                      if (null == (c2 = this._parseMP3AudioData(e3, t2 + 1, i2 - 1, true)))
                        return;
                      u2.audioSampleRate = c2.samplingRate, u2.channelCount = c2.channelCount, u2.codec = c2.codec, u2.originalCodec = c2.originalCodec, u2.refSampleDuration = 1152 / u2.audioSampleRate * u2.timescale, s.a.v(this.TAG, "Parsed MPEG Audio Frame Header"), this._audioInitialMetadataDispatched = true, this._onTrackMetadata("audio", u2), (g2 = this._mediaInfo).audioCodec = u2.codec, g2.audioSampleRate = u2.audioSampleRate, g2.audioChannelCount = u2.channelCount, g2.audioDataRate = c2.bitRate, g2.hasVideo ? null != g2.videoCodec && (g2.mimeType = 'video/x-flv; codecs="' + g2.videoCodec + "," + g2.audioCodec + '"') : g2.mimeType = 'video/x-flv; codecs="' + g2.audioCodec + '"', g2.isComplete() && this._onMediaInfo(g2);
                    }
                    var v2 = this._parseMP3AudioData(e3, t2 + 1, i2 - 1, false);
                    if (null == v2)
                      return;
                    f2 = this._timestampBase + n2;
                    var y2 = { unit: v2, length: v2.byteLength, dts: f2, pts: f2 };
                    _2.samples.push(y2), _2.length += v2.length;
                  }
                } else
                  this._onError(m.a.FORMAT_ERROR, "Flv: Invalid audio sample rate idx: " + h2);
              } else
                this._onError(m.a.CODEC_UNSUPPORTED, "Flv: Unsupported audio codec idx: " + a2);
            }
          }, e2.prototype._parseAACAudioData = function(e3, t2, i2) {
            if (!(i2 <= 1)) {
              var n2 = {}, r2 = new Uint8Array(e3, t2, i2);
              return n2.packetType = r2[0], 0 === r2[0] ? n2.data = this._parseAACAudioSpecificConfig(e3, t2 + 1, i2 - 1) : n2.data = r2.subarray(1), n2;
            }
            s.a.w(this.TAG, "Flv: Invalid AAC packet, missing AACPacketType or/and Data!");
          }, e2.prototype._parseAACAudioSpecificConfig = function(e3, t2, i2) {
            var n2, r2, s2 = new Uint8Array(e3, t2, i2), a2 = null, o2 = 0, h2 = null;
            if (o2 = n2 = s2[0] >>> 3, (r2 = (7 & s2[0]) << 1 | s2[1] >>> 7) < 0 || r2 >= this._mpegSamplingRates.length)
              this._onError(m.a.FORMAT_ERROR, "Flv: AAC invalid sampling frequency index!");
            else {
              var d2 = this._mpegSamplingRates[r2], u2 = (120 & s2[1]) >>> 3;
              if (!(u2 < 0 || u2 >= 8)) {
                5 === o2 && (h2 = (7 & s2[1]) << 1 | s2[2] >>> 7, (124 & s2[2]) >>> 2);
                var _2 = self.navigator.userAgent.toLowerCase();
                return -1 !== _2.indexOf("firefox") ? r2 >= 6 ? (o2 = 5, a2 = new Array(4), h2 = r2 - 3) : (o2 = 2, a2 = new Array(2), h2 = r2) : -1 !== _2.indexOf("android") ? (o2 = 2, a2 = new Array(2), h2 = r2) : (o2 = 5, h2 = r2, a2 = new Array(4), r2 >= 6 ? h2 = r2 - 3 : 1 === u2 && (o2 = 2, a2 = new Array(2), h2 = r2)), a2[0] = o2 << 3, a2[0] |= (15 & r2) >>> 1, a2[1] = (15 & r2) << 7, a2[1] |= (15 & u2) << 3, 5 === o2 && (a2[1] |= (15 & h2) >>> 1, a2[2] = (1 & h2) << 7, a2[2] |= 8, a2[3] = 0), { config: a2, samplingRate: d2, channelCount: u2, codec: "mp4a.40." + o2, originalCodec: "mp4a.40." + n2 };
              }
              this._onError(m.a.FORMAT_ERROR, "Flv: AAC invalid channel configuration");
            }
          }, e2.prototype._parseMP3AudioData = function(e3, t2, i2, n2) {
            if (!(i2 < 4)) {
              this._littleEndian;
              var r2 = new Uint8Array(e3, t2, i2), a2 = null;
              if (n2) {
                if (255 !== r2[0])
                  return;
                var o2 = r2[1] >>> 3 & 3, h2 = (6 & r2[1]) >> 1, d2 = (240 & r2[2]) >>> 4, u2 = (12 & r2[2]) >>> 2, _2 = 3 !== (r2[3] >>> 6 & 3) ? 2 : 1, l2 = 0, c2 = 0;
                switch (o2) {
                  case 0:
                    l2 = this._mpegAudioV25SampleRateTable[u2];
                    break;
                  case 2:
                    l2 = this._mpegAudioV20SampleRateTable[u2];
                    break;
                  case 3:
                    l2 = this._mpegAudioV10SampleRateTable[u2];
                }
                switch (h2) {
                  case 1:
                    34, d2 < this._mpegAudioL3BitRateTable.length && (c2 = this._mpegAudioL3BitRateTable[d2]);
                    break;
                  case 2:
                    33, d2 < this._mpegAudioL2BitRateTable.length && (c2 = this._mpegAudioL2BitRateTable[d2]);
                    break;
                  case 3:
                    32, d2 < this._mpegAudioL1BitRateTable.length && (c2 = this._mpegAudioL1BitRateTable[d2]);
                }
                a2 = { bitRate: c2, samplingRate: l2, channelCount: _2, codec: "mp3", originalCodec: "mp3" };
              } else
                a2 = r2;
              return a2;
            }
            s.a.w(this.TAG, "Flv: Invalid MP3 packet, header missing!");
          }, e2.prototype._parseVideoData = function(e3, t2, i2, n2, r2) {
            if (i2 <= 1)
              s.a.w(this.TAG, "Flv: Invalid video packet, missing VideoData payload!");
            else if (true !== this._hasVideoFlagOverrided || false !== this._hasVideo) {
              var a2 = new Uint8Array(e3, t2, i2)[0], o2 = (240 & a2) >>> 4, h2 = 15 & a2;
              7 === h2 ? this._parseAVCVideoPacket(e3, t2 + 1, i2 - 1, n2, r2, o2) : this._onError(m.a.CODEC_UNSUPPORTED, "Flv: Unsupported codec in video frame: " + h2);
            }
          }, e2.prototype._parseAVCVideoPacket = function(e3, t2, i2, n2, r2, a2) {
            if (i2 < 4)
              s.a.w(this.TAG, "Flv: Invalid AVC packet, missing AVCPacketType or/and CompositionTime");
            else {
              var o2 = this._littleEndian, h2 = new DataView(e3, t2, i2), d2 = h2.getUint8(0), u2 = (16777215 & h2.getUint32(0, !o2)) << 8 >> 8;
              if (0 === d2)
                this._parseAVCDecoderConfigurationRecord(e3, t2 + 4, i2 - 4);
              else if (1 === d2)
                this._parseAVCVideoData(e3, t2 + 4, i2 - 4, n2, r2, a2, u2);
              else if (2 !== d2)
                return void this._onError(m.a.FORMAT_ERROR, "Flv: Invalid video packet type " + d2);
            }
          }, e2.prototype._parseAVCDecoderConfigurationRecord = function(e3, t2, i2) {
            if (i2 < 7)
              s.a.w(this.TAG, "Flv: Invalid AVCDecoderConfigurationRecord, lack of data!");
            else {
              var n2 = this._videoMetadata, r2 = this._videoTrack, a2 = this._littleEndian, o2 = new DataView(e3, t2, i2);
              n2 ? void 0 !== n2.avcc && s.a.w(this.TAG, "Found another AVCDecoderConfigurationRecord!") : (false === this._hasVideo && false === this._hasVideoFlagOverrided && (this._hasVideo = true, this._mediaInfo.hasVideo = true), (n2 = this._videoMetadata = {}).type = "video", n2.id = r2.id, n2.timescale = this._timescale, n2.duration = this._duration);
              var h2 = o2.getUint8(0), d2 = o2.getUint8(1);
              o2.getUint8(2), o2.getUint8(3);
              if (1 === h2 && 0 !== d2)
                if (this._naluLengthSize = 1 + (3 & o2.getUint8(4)), 3 === this._naluLengthSize || 4 === this._naluLengthSize) {
                  var u2 = 31 & o2.getUint8(5);
                  if (0 !== u2) {
                    u2 > 1 && s.a.w(this.TAG, "Flv: Strange AVCDecoderConfigurationRecord: SPS Count = " + u2);
                    for (var _2 = 6, l2 = 0; l2 < u2; l2++) {
                      var c2 = o2.getUint16(_2, !a2);
                      if (_2 += 2, 0 !== c2) {
                        var f2 = new Uint8Array(e3, t2 + _2, c2);
                        _2 += c2;
                        var g2 = p.parseSPS(f2);
                        if (0 === l2) {
                          n2.codecWidth = g2.codec_size.width, n2.codecHeight = g2.codec_size.height, n2.presentWidth = g2.present_size.width, n2.presentHeight = g2.present_size.height, n2.profile = g2.profile_string, n2.level = g2.level_string, n2.bitDepth = g2.bit_depth, n2.chromaFormat = g2.chroma_format, n2.sarRatio = g2.sar_ratio, n2.frameRate = g2.frame_rate, false !== g2.frame_rate.fixed && 0 !== g2.frame_rate.fps_num && 0 !== g2.frame_rate.fps_den || (n2.frameRate = this._referenceFrameRate);
                          var v2 = n2.frameRate.fps_den, y2 = n2.frameRate.fps_num;
                          n2.refSampleDuration = n2.timescale * (v2 / y2);
                          for (var E2 = f2.subarray(1, 4), b2 = "avc1.", S2 = 0; S2 < 3; S2++) {
                            var A2 = E2[S2].toString(16);
                            A2.length < 2 && (A2 = "0" + A2), b2 += A2;
                          }
                          n2.codec = b2;
                          var R2 = this._mediaInfo;
                          R2.width = n2.codecWidth, R2.height = n2.codecHeight, R2.fps = n2.frameRate.fps, R2.profile = n2.profile, R2.level = n2.level, R2.refFrames = g2.ref_frames, R2.chromaFormat = g2.chroma_format_string, R2.sarNum = n2.sarRatio.width, R2.sarDen = n2.sarRatio.height, R2.videoCodec = b2, R2.hasAudio ? null != R2.audioCodec && (R2.mimeType = 'video/x-flv; codecs="' + R2.videoCodec + "," + R2.audioCodec + '"') : R2.mimeType = 'video/x-flv; codecs="' + R2.videoCodec + '"', R2.isComplete() && this._onMediaInfo(R2);
                        }
                      }
                    }
                    var L2 = o2.getUint8(_2);
                    if (0 !== L2) {
                      L2 > 1 && s.a.w(this.TAG, "Flv: Strange AVCDecoderConfigurationRecord: PPS Count = " + L2), _2++;
                      for (l2 = 0; l2 < L2; l2++) {
                        c2 = o2.getUint16(_2, !a2);
                        _2 += 2, 0 !== c2 && (_2 += c2);
                      }
                      n2.avcc = new Uint8Array(i2), n2.avcc.set(new Uint8Array(e3, t2, i2), 0), s.a.v(this.TAG, "Parsed AVCDecoderConfigurationRecord"), this._isInitialMetadataDispatched() ? this._dispatch && (this._audioTrack.length || this._videoTrack.length) && this._onDataAvailable(this._audioTrack, this._videoTrack) : this._videoInitialMetadataDispatched = true, this._dispatch = false, this._onTrackMetadata("video", n2);
                    } else
                      this._onError(m.a.FORMAT_ERROR, "Flv: Invalid AVCDecoderConfigurationRecord: No PPS");
                  } else
                    this._onError(m.a.FORMAT_ERROR, "Flv: Invalid AVCDecoderConfigurationRecord: No SPS");
                } else
                  this._onError(m.a.FORMAT_ERROR, "Flv: Strange NaluLengthSizeMinusOne: " + (this._naluLengthSize - 1));
              else
                this._onError(m.a.FORMAT_ERROR, "Flv: Invalid AVCDecoderConfigurationRecord");
            }
          }, e2.prototype._parseAVCVideoData = function(e3, t2, i2, n2, r2, a2, o2) {
            for (var h2 = this._littleEndian, d2 = new DataView(e3, t2, i2), u2 = [], _2 = 0, l2 = 0, c2 = this._naluLengthSize, f2 = this._timestampBase + n2, p2 = 1 === a2; l2 < i2; ) {
              if (l2 + 4 >= i2) {
                s.a.w(this.TAG, "Malformed Nalu near timestamp " + f2 + ", offset = " + l2 + ", dataSize = " + i2);
                break;
              }
              var m2 = d2.getUint32(l2, !h2);
              if (3 === c2 && (m2 >>>= 8), m2 > i2 - c2)
                return void s.a.w(this.TAG, "Malformed Nalus near timestamp " + f2 + ", NaluSize > DataSize!");
              var g2 = 31 & d2.getUint8(l2 + c2);
              5 === g2 && (p2 = true);
              var v2 = new Uint8Array(e3, t2 + l2, c2 + m2), y2 = { type: g2, data: v2 };
              u2.push(y2), _2 += v2.byteLength, l2 += c2 + m2;
            }
            if (u2.length) {
              var E2 = this._videoTrack, b2 = { units: u2, length: _2, isKeyframe: p2, dts: f2, cts: o2, pts: f2 + o2 };
              p2 && (b2.fileposition = r2), E2.samples.push(b2), E2.length += _2;
            }
          }, e2;
        }(), y = function() {
          function e2() {
          }
          return e2.prototype.destroy = function() {
            this.onError = null, this.onMediaInfo = null, this.onMetaDataArrived = null, this.onTrackMetadata = null, this.onDataAvailable = null, this.onTimedID3Metadata = null, this.onPESPrivateData = null, this.onPESPrivateDataDescriptor = null;
          }, e2;
        }(), E = function() {
          this.program_pmt_pid = {};
        };
        !function(e2) {
          e2[e2.kMPEG1Audio = 3] = "kMPEG1Audio", e2[e2.kMPEG2Audio = 4] = "kMPEG2Audio", e2[e2.kPESPrivateData = 6] = "kPESPrivateData", e2[e2.kADTSAAC = 15] = "kADTSAAC", e2[e2.kID3 = 21] = "kID3", e2[e2.kH264 = 27] = "kH264", e2[e2.kH265 = 36] = "kH265";
        }(g || (g = {}));
        var b, S = function() {
          this.pid_stream_type = {}, this.common_pids = { h264: void 0, adts_aac: void 0 }, this.pes_private_data_pids = {}, this.timed_id3_pids = {};
        }, A = function() {
        }, R = function() {
          this.slices = [], this.total_length = 0, this.expected_length = 0, this.file_position = 0;
        };
        !function(e2) {
          e2[e2.kUnspecified = 0] = "kUnspecified", e2[e2.kSliceNonIDR = 1] = "kSliceNonIDR", e2[e2.kSliceDPA = 2] = "kSliceDPA", e2[e2.kSliceDPB = 3] = "kSliceDPB", e2[e2.kSliceDPC = 4] = "kSliceDPC", e2[e2.kSliceIDR = 5] = "kSliceIDR", e2[e2.kSliceSEI = 6] = "kSliceSEI", e2[e2.kSliceSPS = 7] = "kSliceSPS", e2[e2.kSlicePPS = 8] = "kSlicePPS", e2[e2.kSliceAUD = 9] = "kSliceAUD", e2[e2.kEndOfSequence = 10] = "kEndOfSequence", e2[e2.kEndOfStream = 11] = "kEndOfStream", e2[e2.kFiller = 12] = "kFiller", e2[e2.kSPSExt = 13] = "kSPSExt", e2[e2.kReserved0 = 14] = "kReserved0";
        }(b || (b = {}));
        var L, T, w = function() {
        }, D = function(e2) {
          var t2 = e2.data.byteLength;
          this.type = e2.type, this.data = new Uint8Array(4 + t2), new DataView(this.data.buffer).setUint32(0, t2), this.data.set(e2.data, 4);
        }, k = function() {
          function e2(e3) {
            this.TAG = "H264AnnexBParser", this.current_startcode_offset_ = 0, this.eof_flag_ = false, this.data_ = e3, this.current_startcode_offset_ = this.findNextStartCodeOffset(0), this.eof_flag_ && s.a.e(this.TAG, "Could not found H264 startcode until payload end!");
          }
          return e2.prototype.findNextStartCodeOffset = function(e3) {
            for (var t2 = e3, i2 = this.data_; ; ) {
              if (t2 + 3 >= i2.byteLength)
                return this.eof_flag_ = true, i2.byteLength;
              var n2 = i2[t2 + 0] << 24 | i2[t2 + 1] << 16 | i2[t2 + 2] << 8 | i2[t2 + 3], r2 = i2[t2 + 0] << 16 | i2[t2 + 1] << 8 | i2[t2 + 2];
              if (1 === n2 || 1 === r2)
                return t2;
              t2++;
            }
          }, e2.prototype.readNextNaluPayload = function() {
            for (var e3 = this.data_, t2 = null; null == t2 && !this.eof_flag_; ) {
              var i2 = this.current_startcode_offset_, n2 = 31 & e3[i2 += 1 === (e3[i2] << 24 | e3[i2 + 1] << 16 | e3[i2 + 2] << 8 | e3[i2 + 3]) ? 4 : 3], r2 = (128 & e3[i2]) >>> 7, s2 = this.findNextStartCodeOffset(i2);
              if (this.current_startcode_offset_ = s2, !(n2 >= b.kReserved0) && 0 === r2) {
                var a2 = e3.subarray(i2, s2);
                (t2 = new w()).type = n2, t2.data = a2;
              }
            }
            return t2;
          }, e2;
        }(), C = function() {
          function e2(e3, t2, i2) {
            var n2 = 8 + e3.byteLength + 1 + 2 + t2.byteLength, r2 = false;
            66 !== e3[3] && 77 !== e3[3] && 88 !== e3[3] && (r2 = true, n2 += 4);
            var s2 = this.data = new Uint8Array(n2);
            s2[0] = 1, s2[1] = e3[1], s2[2] = e3[2], s2[3] = e3[3], s2[4] = 255, s2[5] = 225;
            var a2 = e3.byteLength;
            s2[6] = a2 >>> 8, s2[7] = 255 & a2;
            var o2 = 8;
            s2.set(e3, 8), s2[o2 += a2] = 1;
            var h2 = t2.byteLength;
            s2[o2 + 1] = h2 >>> 8, s2[o2 + 2] = 255 & h2, s2.set(t2, o2 + 3), o2 += 3 + h2, r2 && (s2[o2] = 252 | i2.chroma_format_idc, s2[o2 + 1] = 248 | i2.bit_depth_luma - 8, s2[o2 + 2] = 248 | i2.bit_depth_chroma - 8, s2[o2 + 3] = 0, o2 += 4);
          }
          return e2.prototype.getData = function() {
            return this.data;
          }, e2;
        }();
        !function(e2) {
          e2[e2.kNull = 0] = "kNull", e2[e2.kAACMain = 1] = "kAACMain", e2[e2.kAAC_LC = 2] = "kAAC_LC", e2[e2.kAAC_SSR = 3] = "kAAC_SSR", e2[e2.kAAC_LTP = 4] = "kAAC_LTP", e2[e2.kAAC_SBR = 5] = "kAAC_SBR", e2[e2.kAAC_Scalable = 6] = "kAAC_Scalable", e2[e2.kLayer1 = 32] = "kLayer1", e2[e2.kLayer2 = 33] = "kLayer2", e2[e2.kLayer3 = 34] = "kLayer3";
        }(L || (L = {})), function(e2) {
          e2[e2.k96000Hz = 0] = "k96000Hz", e2[e2.k88200Hz = 1] = "k88200Hz", e2[e2.k64000Hz = 2] = "k64000Hz", e2[e2.k48000Hz = 3] = "k48000Hz", e2[e2.k44100Hz = 4] = "k44100Hz", e2[e2.k32000Hz = 5] = "k32000Hz", e2[e2.k24000Hz = 6] = "k24000Hz", e2[e2.k22050Hz = 7] = "k22050Hz", e2[e2.k16000Hz = 8] = "k16000Hz", e2[e2.k12000Hz = 9] = "k12000Hz", e2[e2.k11025Hz = 10] = "k11025Hz", e2[e2.k8000Hz = 11] = "k8000Hz", e2[e2.k7350Hz = 12] = "k7350Hz";
        }(T || (T = {}));
        var I, O = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350], P = function() {
        }, M = function() {
          function e2(e3) {
            this.TAG = "AACADTSParser", this.data_ = e3, this.current_syncword_offset_ = this.findNextSyncwordOffset(0), this.eof_flag_ && s.a.e(this.TAG, "Could not found ADTS syncword until payload end");
          }
          return e2.prototype.findNextSyncwordOffset = function(e3) {
            for (var t2 = e3, i2 = this.data_; ; ) {
              if (t2 + 7 >= i2.byteLength)
                return this.eof_flag_ = true, i2.byteLength;
              if (4095 === (i2[t2 + 0] << 8 | i2[t2 + 1]) >>> 4)
                return t2;
              t2++;
            }
          }, e2.prototype.readNextAACFrame = function() {
            for (var e3 = this.data_, t2 = null; null == t2 && !this.eof_flag_; ) {
              var i2 = this.current_syncword_offset_, n2 = (8 & e3[i2 + 1]) >>> 3, r2 = (6 & e3[i2 + 1]) >>> 1, s2 = 1 & e3[i2 + 1], a2 = (192 & e3[i2 + 2]) >>> 6, o2 = (60 & e3[i2 + 2]) >>> 2, h2 = (1 & e3[i2 + 2]) << 2 | (192 & e3[i2 + 3]) >>> 6, d2 = (3 & e3[i2 + 3]) << 11 | e3[i2 + 4] << 3 | (224 & e3[i2 + 5]) >>> 5;
              e3[i2 + 6];
              if (i2 + d2 > this.data_.byteLength) {
                this.eof_flag_ = true, this.has_last_incomplete_data = true;
                break;
              }
              var u2 = 1 === s2 ? 7 : 9, _2 = d2 - u2;
              i2 += u2;
              var l2 = this.findNextSyncwordOffset(i2 + _2);
              if (this.current_syncword_offset_ = l2, (0 === n2 || 1 === n2) && 0 === r2) {
                var c2 = e3.subarray(i2, i2 + _2);
                (t2 = new P()).audio_object_type = a2 + 1, t2.sampling_freq_index = o2, t2.sampling_frequency = O[o2], t2.channel_config = h2, t2.data = c2;
              }
            }
            return t2;
          }, e2.prototype.hasIncompleteData = function() {
            return this.has_last_incomplete_data;
          }, e2.prototype.getIncompleteData = function() {
            return this.has_last_incomplete_data ? this.data_.subarray(this.current_syncword_offset_) : null;
          }, e2;
        }(), x = function(e2) {
          var t2 = null, i2 = e2.audio_object_type, n2 = e2.audio_object_type, r2 = e2.sampling_freq_index, s2 = e2.channel_config, a2 = 0, o2 = navigator.userAgent.toLowerCase();
          -1 !== o2.indexOf("firefox") ? r2 >= 6 ? (n2 = 5, t2 = new Array(4), a2 = r2 - 3) : (n2 = 2, t2 = new Array(2), a2 = r2) : -1 !== o2.indexOf("android") ? (n2 = 2, t2 = new Array(2), a2 = r2) : (n2 = 5, a2 = r2, t2 = new Array(4), r2 >= 6 ? a2 = r2 - 3 : 1 === s2 && (n2 = 2, t2 = new Array(2), a2 = r2)), t2[0] = n2 << 3, t2[0] |= (15 & r2) >>> 1, t2[1] = (15 & r2) << 7, t2[1] |= (15 & s2) << 3, 5 === n2 && (t2[1] |= (15 & a2) >>> 1, t2[2] = (1 & a2) << 7, t2[2] |= 8, t2[3] = 0), this.config = t2, this.sampling_rate = O[r2], this.channel_count = s2, this.codec_mimetype = "mp4a.40." + n2, this.original_codec_mimetype = "mp4a.40." + i2;
        }, B = function() {
        }, U = function() {
        }, N = (I = function(e2, t2) {
          return (I = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var i2 in t3)
              t3.hasOwnProperty(i2) && (e3[i2] = t3[i2]);
          })(e2, t2);
        }, function(e2, t2) {
          function i2() {
            this.constructor = e2;
          }
          I(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (i2.prototype = t2.prototype, new i2());
        }), F = function(e2) {
          function t2(t3, i2) {
            var n2 = e2.call(this) || this;
            return n2.TAG = "TSDemuxer", n2.first_parse_ = true, n2.media_info_ = new o.a(), n2.timescale_ = 90, n2.duration_ = 0, n2.current_pmt_pid_ = -1, n2.program_pmt_map_ = {}, n2.pes_slice_queues_ = {}, n2.video_metadata_ = { sps: void 0, pps: void 0, sps_details: void 0 }, n2.audio_metadata_ = { audio_object_type: void 0, sampling_freq_index: void 0, sampling_frequency: void 0, channel_config: void 0 }, n2.aac_last_sample_pts_ = void 0, n2.aac_last_incomplete_data_ = null, n2.has_video_ = false, n2.has_audio_ = false, n2.video_init_segment_dispatched_ = false, n2.audio_init_segment_dispatched_ = false, n2.video_metadata_changed_ = false, n2.audio_metadata_changed_ = false, n2.video_track_ = { type: "video", id: 1, sequenceNumber: 0, samples: [], length: 0 }, n2.audio_track_ = { type: "audio", id: 2, sequenceNumber: 0, samples: [], length: 0 }, n2.ts_packet_size_ = t3.ts_packet_size, n2.sync_offset_ = t3.sync_offset, n2.config_ = i2, n2;
          }
          return N(t2, e2), t2.prototype.destroy = function() {
            this.media_info_ = null, this.pes_slice_queues_ = null, this.video_metadata_ = null, this.audio_metadata_ = null, this.aac_last_incomplete_data_ = null, this.video_track_ = null, this.audio_track_ = null, e2.prototype.destroy.call(this);
          }, t2.probe = function(e3) {
            var t3 = new Uint8Array(e3), i2 = -1, n2 = 188;
            if (t3.byteLength <= 3 * n2)
              return s.a.e("TSDemuxer", "Probe data " + t3.byteLength + " bytes is too few for judging MPEG-TS stream format!"), { match: false };
            for (; -1 === i2; ) {
              for (var r2 = Math.min(1e3, t3.byteLength - 3 * n2), a2 = 0; a2 < r2; ) {
                if (71 === t3[a2] && 71 === t3[a2 + n2] && 71 === t3[a2 + 2 * n2]) {
                  i2 = a2;
                  break;
                }
                a2++;
              }
              if (-1 === i2)
                if (188 === n2)
                  n2 = 192;
                else {
                  if (192 !== n2)
                    break;
                  n2 = 204;
                }
            }
            return -1 === i2 ? { match: false } : (192 === n2 && i2 >= 4 ? (s.a.v("TSDemuxer", "ts_packet_size = 192, m2ts mode"), i2 -= 4) : 204 === n2 && s.a.v("TSDemuxer", "ts_packet_size = 204, RS encoded MPEG2-TS stream"), { match: true, consumed: 0, ts_packet_size: n2, sync_offset: i2 });
          }, t2.prototype.bindDataSource = function(e3) {
            return e3.onDataArrival = this.parseChunks.bind(this), this;
          }, t2.prototype.resetMediaInfo = function() {
            this.media_info_ = new o.a();
          }, t2.prototype.parseChunks = function(e3, t3) {
            if (!(this.onError && this.onMediaInfo && this.onTrackMetadata && this.onDataAvailable))
              throw new _.a("onError & onMediaInfo & onTrackMetadata & onDataAvailable callback must be specified");
            var i2 = 0;
            for (this.first_parse_ && (this.first_parse_ = false, i2 = this.sync_offset_); i2 + this.ts_packet_size_ <= e3.byteLength; ) {
              var n2 = t3 + i2;
              192 === this.ts_packet_size_ && (i2 += 4);
              var r2 = new Uint8Array(e3, i2, 188), a2 = r2[0];
              if (71 !== a2) {
                s.a.e(this.TAG, "sync_byte = " + a2 + ", not 0x47");
                break;
              }
              var o2 = (64 & r2[1]) >>> 6, h2 = (r2[1], (31 & r2[1]) << 8 | r2[2]), d2 = (48 & r2[3]) >>> 4, u2 = 15 & r2[3], l2 = {}, c2 = 4;
              if (2 == d2 || 3 == d2) {
                var f2 = r2[4];
                if (5 + f2 === 188) {
                  i2 += 188, 204 === this.ts_packet_size_ && (i2 += 16);
                  continue;
                }
                f2 > 0 && (l2 = this.parseAdaptationField(e3, i2 + 4, 1 + f2)), c2 = 5 + f2;
              }
              if (1 == d2 || 3 == d2) {
                if (0 === h2 || h2 === this.current_pmt_pid_) {
                  if (o2)
                    c2 += 1 + r2[c2];
                  var p2 = 188 - c2;
                  0 === h2 ? this.parsePAT(e3, i2 + c2, p2, { payload_unit_start_indicator: o2, continuity_conunter: u2 }) : this.parsePMT(e3, i2 + c2, p2, { payload_unit_start_indicator: o2, continuity_conunter: u2 });
                } else if (null != this.pmt_ && null != this.pmt_.pid_stream_type[h2]) {
                  p2 = 188 - c2;
                  var m2 = this.pmt_.pid_stream_type[h2];
                  h2 !== this.pmt_.common_pids.h264 && h2 !== this.pmt_.common_pids.adts_aac && true !== this.pmt_.pes_private_data_pids[h2] && true !== this.pmt_.timed_id3_pids[h2] || this.handlePESSlice(e3, i2 + c2, p2, { pid: h2, stream_type: m2, file_position: n2, payload_unit_start_indicator: o2, continuity_conunter: u2, random_access_indicator: l2.random_access_indicator });
                }
              }
              i2 += 188, 204 === this.ts_packet_size_ && (i2 += 16);
            }
            return this.dispatchAudioVideoMediaSegment(), i2;
          }, t2.prototype.parseAdaptationField = function(e3, t3, i2) {
            var n2 = new Uint8Array(e3, t3, i2), r2 = n2[0];
            return r2 > 0 ? r2 > 183 ? (s.a.w(this.TAG, "Illegal adaptation_field_length: " + r2), {}) : { discontinuity_indicator: (128 & n2[1]) >>> 7, random_access_indicator: (64 & n2[1]) >>> 6, elementary_stream_priority_indicator: (32 & n2[1]) >>> 5 } : {};
          }, t2.prototype.parsePAT = function(e3, t3, i2, n2) {
            var r2 = new Uint8Array(e3, t3, i2), a2 = r2[0];
            if (0 === a2) {
              var o2 = (15 & r2[1]) << 8 | r2[2], h2 = (r2[3], r2[4], (62 & r2[5]) >>> 1), d2 = 1 & r2[5], u2 = r2[6], _2 = (r2[7], null);
              if (1 === d2 && 0 === u2)
                (_2 = new E()).version_number = h2;
              else if (null == (_2 = this.pat_))
                return;
              for (var l2 = o2 - 5 - 4, c2 = -1, f2 = -1, p2 = 8; p2 < 8 + l2; p2 += 4) {
                var m2 = r2[p2] << 8 | r2[p2 + 1], g2 = (31 & r2[p2 + 2]) << 8 | r2[p2 + 3];
                0 === m2 ? _2.network_pid = g2 : (_2.program_pmt_pid[m2] = g2, -1 === c2 && (c2 = m2), -1 === f2 && (f2 = g2));
              }
              1 === d2 && 0 === u2 && (null == this.pat_ && s.a.v(this.TAG, "Parsed first PAT: " + JSON.stringify(_2)), this.pat_ = _2, this.current_program_ = c2, this.current_pmt_pid_ = f2);
            } else
              s.a.e(this.TAG, "parsePAT: table_id " + a2 + " is not corresponded to PAT!");
          }, t2.prototype.parsePMT = function(e3, t3, i2, n2) {
            var r2 = new Uint8Array(e3, t3, i2), a2 = r2[0];
            if (2 === a2) {
              var o2 = (15 & r2[1]) << 8 | r2[2], h2 = r2[3] << 8 | r2[4], d2 = (62 & r2[5]) >>> 1, u2 = 1 & r2[5], _2 = r2[6], l2 = (r2[7], null);
              if (1 === u2 && 0 === _2)
                (l2 = new S()).program_number = h2, l2.version_number = d2, this.program_pmt_map_[h2] = l2;
              else if (null == (l2 = this.program_pmt_map_[h2]))
                return;
              r2[8], r2[9];
              for (var c2 = (15 & r2[10]) << 8 | r2[11], f2 = 12 + c2, p2 = o2 - 9 - c2 - 4, m2 = f2; m2 < f2 + p2; ) {
                var v2 = r2[m2], y2 = (31 & r2[m2 + 1]) << 8 | r2[m2 + 2], E2 = (15 & r2[m2 + 3]) << 8 | r2[m2 + 4];
                if (l2.pid_stream_type[y2] = v2, v2 !== g.kH264 || l2.common_pids.h264)
                  if (v2 !== g.kADTSAAC || l2.common_pids.adts_aac)
                    if (v2 === g.kPESPrivateData) {
                      if (l2.pes_private_data_pids[y2] = true, E2 > 0) {
                        var b2 = r2.subarray(m2 + 5, m2 + 5 + E2);
                        this.dispatchPESPrivateDataDescriptor(y2, v2, b2);
                      }
                    } else
                      v2 === g.kID3 && (l2.timed_id3_pids[y2] = true);
                  else
                    l2.common_pids.adts_aac = y2;
                else
                  l2.common_pids.h264 = y2;
                m2 += 5 + E2;
              }
              h2 === this.current_program_ && (null == this.pmt_ && s.a.v(this.TAG, "Parsed first PMT: " + JSON.stringify(l2)), this.pmt_ = l2, l2.common_pids.h264 && (this.has_video_ = true), l2.common_pids.adts_aac && (this.has_audio_ = true));
            } else
              s.a.e(this.TAG, "parsePMT: table_id " + a2 + " is not corresponded to PMT!");
          }, t2.prototype.handlePESSlice = function(e3, t3, i2, n2) {
            var r2 = new Uint8Array(e3, t3, i2), a2 = r2[0] << 16 | r2[1] << 8 | r2[2], o2 = (r2[3], r2[4] << 8 | r2[5]);
            if (n2.payload_unit_start_indicator) {
              if (1 !== a2)
                return void s.a.e(this.TAG, "handlePESSlice: packet_start_code_prefix should be 1 but with value " + a2);
              var h2 = this.pes_slice_queues_[n2.pid];
              h2 && (0 === h2.expected_length || h2.expected_length === h2.total_length ? this.emitPESSlices(h2, n2) : this.cleanPESSlices(h2, n2)), this.pes_slice_queues_[n2.pid] = new R(), this.pes_slice_queues_[n2.pid].file_position = n2.file_position, this.pes_slice_queues_[n2.pid].random_access_indicator = n2.random_access_indicator;
            }
            if (null != this.pes_slice_queues_[n2.pid]) {
              var d2 = this.pes_slice_queues_[n2.pid];
              d2.slices.push(r2), n2.payload_unit_start_indicator && (d2.expected_length = 0 === o2 ? 0 : o2 + 6), d2.total_length += r2.byteLength, d2.expected_length > 0 && d2.expected_length === d2.total_length ? this.emitPESSlices(d2, n2) : d2.expected_length > 0 && d2.expected_length < d2.total_length && this.cleanPESSlices(d2, n2);
            }
          }, t2.prototype.emitPESSlices = function(e3, t3) {
            for (var i2 = new Uint8Array(e3.total_length), n2 = 0, r2 = 0; n2 < e3.slices.length; n2++) {
              var s2 = e3.slices[n2];
              i2.set(s2, r2), r2 += s2.byteLength;
            }
            e3.slices = [], e3.expected_length = -1, e3.total_length = 0;
            var a2 = new A();
            a2.pid = t3.pid, a2.data = i2, a2.stream_type = t3.stream_type, a2.file_position = e3.file_position, a2.random_access_indicator = e3.random_access_indicator, this.parsePES(a2);
          }, t2.prototype.cleanPESSlices = function(e3, t3) {
            e3.slices = [], e3.expected_length = -1, e3.total_length = 0;
          }, t2.prototype.parsePES = function(e3) {
            var t3 = e3.data, i2 = t3[0] << 16 | t3[1] << 8 | t3[2], n2 = t3[3], r2 = t3[4] << 8 | t3[5];
            if (1 === i2) {
              if (188 !== n2 && 190 !== n2 && 191 !== n2 && 240 !== n2 && 241 !== n2 && 255 !== n2 && 242 !== n2 && 248 !== n2) {
                t3[6];
                var a2 = (192 & t3[7]) >>> 6, o2 = t3[8], h2 = void 0, d2 = void 0;
                2 !== a2 && 3 !== a2 || (h2 = 536870912 * (14 & t3[9]) + 4194304 * (255 & t3[10]) + 16384 * (254 & t3[11]) + 128 * (255 & t3[12]) + (254 & t3[13]) / 2, d2 = 3 === a2 ? 536870912 * (14 & t3[14]) + 4194304 * (255 & t3[15]) + 16384 * (254 & t3[16]) + 128 * (255 & t3[17]) + (254 & t3[18]) / 2 : h2);
                var u2 = 9 + o2, _2 = void 0;
                if (0 !== r2) {
                  if (r2 < 3 + o2)
                    return void s.a.v(this.TAG, "Malformed PES: PES_packet_length < 3 + PES_header_data_length");
                  _2 = r2 - 3 - o2;
                } else
                  _2 = t3.byteLength - u2;
                var l2 = t3.subarray(u2, u2 + _2);
                switch (e3.stream_type) {
                  case g.kMPEG1Audio:
                  case g.kMPEG2Audio:
                    break;
                  case g.kPESPrivateData:
                    this.parsePESPrivateDataPayload(l2, h2, d2, e3.pid, n2);
                    break;
                  case g.kADTSAAC:
                    this.parseAACPayload(l2, h2);
                    break;
                  case g.kID3:
                    this.parseTimedID3MetadataPayload(l2, h2, d2, e3.pid, n2);
                    break;
                  case g.kH264:
                    this.parseH264Payload(l2, h2, d2, e3.file_position, e3.random_access_indicator);
                    break;
                  case g.kH265:
                }
              } else if ((188 === n2 || 191 === n2 || 240 === n2 || 241 === n2 || 255 === n2 || 242 === n2 || 248 === n2) && e3.stream_type === g.kPESPrivateData) {
                u2 = 6, _2 = void 0;
                _2 = 0 !== r2 ? r2 : t3.byteLength - u2;
                l2 = t3.subarray(u2, u2 + _2);
                this.parsePESPrivateDataPayload(l2, void 0, void 0, e3.pid, n2);
              }
            } else
              s.a.e(this.TAG, "parsePES: packet_start_code_prefix should be 1 but with value " + i2);
          }, t2.prototype.parseH264Payload = function(e3, t3, i2, n2, r2) {
            for (var a2 = new k(e3), o2 = null, h2 = [], d2 = 0, u2 = false; null != (o2 = a2.readNextNaluPayload()); ) {
              var _2 = new D(o2);
              if (_2.type === b.kSliceSPS) {
                var l2 = p.parseSPS(o2.data);
                this.video_init_segment_dispatched_ ? true === this.detectVideoMetadataChange(_2, l2) && (s.a.v(this.TAG, "H264: Critical h264 metadata has been changed, attempt to re-generate InitSegment"), this.video_metadata_changed_ = true, this.video_metadata_ = { sps: _2, pps: void 0, sps_details: l2 }) : (this.video_metadata_.sps = _2, this.video_metadata_.sps_details = l2);
              } else
                _2.type === b.kSlicePPS ? this.video_init_segment_dispatched_ && !this.video_metadata_changed_ || (this.video_metadata_.pps = _2, this.video_metadata_.sps && this.video_metadata_.pps && (this.video_metadata_changed_ && this.dispatchVideoMediaSegment(), this.dispatchVideoInitSegment())) : (_2.type === b.kSliceIDR || _2.type === b.kSliceNonIDR && 1 === r2) && (u2 = true);
              this.video_init_segment_dispatched_ && (h2.push(_2), d2 += _2.data.byteLength);
            }
            var c2 = Math.floor(t3 / this.timescale_), f2 = Math.floor(i2 / this.timescale_);
            if (h2.length) {
              var m2 = this.video_track_, g2 = { units: h2, length: d2, isKeyframe: u2, dts: f2, pts: c2, cts: c2 - f2, file_position: n2 };
              m2.samples.push(g2), m2.length += d2;
            }
          }, t2.prototype.detectVideoMetadataChange = function(e3, t3) {
            if (t3.codec_mimetype !== this.video_metadata_.sps_details.codec_mimetype)
              return s.a.v(this.TAG, "H264: Codec mimeType changed from " + this.video_metadata_.sps_details.codec_mimetype + " to " + t3.codec_mimetype), true;
            if (t3.codec_size.width !== this.video_metadata_.sps_details.codec_size.width || t3.codec_size.height !== this.video_metadata_.sps_details.codec_size.height) {
              var i2 = this.video_metadata_.sps_details.codec_size, n2 = t3.codec_size;
              return s.a.v(this.TAG, "H264: Coded Resolution changed from " + i2.width + "x" + i2.height + " to " + n2.width + "x" + n2.height), true;
            }
            return t3.present_size.width !== this.video_metadata_.sps_details.present_size.width && (s.a.v(this.TAG, "H264: Present resolution width changed from " + this.video_metadata_.sps_details.present_size.width + " to " + t3.present_size.width), true);
          }, t2.prototype.isInitSegmentDispatched = function() {
            return this.has_video_ && this.has_audio_ ? this.video_init_segment_dispatched_ && this.audio_init_segment_dispatched_ : this.has_video_ && !this.has_audio_ ? this.video_init_segment_dispatched_ : !(this.has_video_ || !this.has_audio_) && this.audio_init_segment_dispatched_;
          }, t2.prototype.dispatchVideoInitSegment = function() {
            var e3 = this.video_metadata_.sps_details, t3 = { type: "video" };
            t3.id = this.video_track_.id, t3.timescale = 1e3, t3.duration = this.duration_, t3.codecWidth = e3.codec_size.width, t3.codecHeight = e3.codec_size.height, t3.presentWidth = e3.present_size.width, t3.presentHeight = e3.present_size.height, t3.profile = e3.profile_string, t3.level = e3.level_string, t3.bitDepth = e3.bit_depth, t3.chromaFormat = e3.chroma_format, t3.sarRatio = e3.sar_ratio, t3.frameRate = e3.frame_rate;
            var i2 = t3.frameRate.fps_den, n2 = t3.frameRate.fps_num;
            t3.refSampleDuration = i2 / n2 * 1e3, t3.codec = e3.codec_mimetype;
            var r2 = this.video_metadata_.sps.data.subarray(4), a2 = this.video_metadata_.pps.data.subarray(4), o2 = new C(r2, a2, e3);
            t3.avcc = o2.getData(), 0 == this.video_init_segment_dispatched_ && s.a.v(this.TAG, "Generated first AVCDecoderConfigurationRecord for mimeType: " + t3.codec), this.onTrackMetadata("video", t3), this.video_init_segment_dispatched_ = true, this.video_metadata_changed_ = false;
            var h2 = this.media_info_;
            h2.hasVideo = true, h2.width = t3.codecWidth, h2.height = t3.codecHeight, h2.fps = t3.frameRate.fps, h2.profile = t3.profile, h2.level = t3.level, h2.refFrames = e3.ref_frames, h2.chromaFormat = e3.chroma_format_string, h2.sarNum = t3.sarRatio.width, h2.sarDen = t3.sarRatio.height, h2.videoCodec = t3.codec, h2.hasAudio && h2.audioCodec ? h2.mimeType = 'video/mp2t; codecs="' + h2.videoCodec + "," + h2.audioCodec + '"' : h2.mimeType = 'video/mp2t; codecs="' + h2.videoCodec + '"', h2.isComplete() && this.onMediaInfo(h2);
          }, t2.prototype.dispatchVideoMediaSegment = function() {
            this.isInitSegmentDispatched() && this.video_track_.length && this.onDataAvailable(null, this.video_track_);
          }, t2.prototype.dispatchAudioMediaSegment = function() {
            this.isInitSegmentDispatched() && this.audio_track_.length && this.onDataAvailable(this.audio_track_, null);
          }, t2.prototype.dispatchAudioVideoMediaSegment = function() {
            this.isInitSegmentDispatched() && (this.audio_track_.length || this.video_track_.length) && this.onDataAvailable(this.audio_track_, this.video_track_);
          }, t2.prototype.parseAACPayload = function(e3, t3) {
            if (!this.has_video_ || this.video_init_segment_dispatched_) {
              if (this.aac_last_incomplete_data_) {
                var i2 = new Uint8Array(e3.byteLength + this.aac_last_incomplete_data_.byteLength);
                i2.set(this.aac_last_incomplete_data_, 0), i2.set(e3, this.aac_last_incomplete_data_.byteLength), e3 = i2;
              }
              var n2, r2;
              if (null != t3)
                r2 = t3 / this.timescale_;
              else {
                if (null == this.aac_last_sample_pts_)
                  return void s.a.w(this.TAG, "AAC: Unknown pts");
                n2 = 1024 / this.audio_metadata_.sampling_frequency * 1e3, r2 = this.aac_last_sample_pts_ + n2;
              }
              if (this.aac_last_incomplete_data_ && this.aac_last_sample_pts_) {
                n2 = 1024 / this.audio_metadata_.sampling_frequency * 1e3;
                var a2 = this.aac_last_sample_pts_ + n2;
                Math.abs(a2 - r2) > 1 && (s.a.w(this.TAG, "AAC: Detected pts overlapped, expected: " + a2 + "ms, PES pts: " + r2 + "ms"), r2 = a2);
              }
              for (var o2, h2 = new M(e3), d2 = null, u2 = r2; null != (d2 = h2.readNextAACFrame()); ) {
                n2 = 1024 / d2.sampling_frequency * 1e3, 0 == this.audio_init_segment_dispatched_ ? (this.audio_metadata_.audio_object_type = d2.audio_object_type, this.audio_metadata_.sampling_freq_index = d2.sampling_freq_index, this.audio_metadata_.sampling_frequency = d2.sampling_frequency, this.audio_metadata_.channel_config = d2.channel_config, this.dispatchAudioInitSegment(d2)) : this.detectAudioMetadataChange(d2) && (this.dispatchAudioMediaSegment(), this.dispatchAudioInitSegment(d2)), o2 = u2;
                var _2 = Math.floor(u2), l2 = { unit: d2.data, length: d2.data.byteLength, pts: _2, dts: _2 };
                this.audio_track_.samples.push(l2), this.audio_track_.length += d2.data.byteLength, u2 += n2;
              }
              h2.hasIncompleteData() && (this.aac_last_incomplete_data_ = h2.getIncompleteData()), o2 && (this.aac_last_sample_pts_ = o2);
            }
          }, t2.prototype.detectAudioMetadataChange = function(e3) {
            return e3.audio_object_type !== this.audio_metadata_.audio_object_type ? (s.a.v(this.TAG, "AAC: AudioObjectType changed from " + this.audio_metadata_.audio_object_type + " to " + e3.audio_object_type), true) : e3.sampling_freq_index !== this.audio_metadata_.sampling_freq_index ? (s.a.v(this.TAG, "AAC: SamplingFrequencyIndex changed from " + this.audio_metadata_.sampling_freq_index + " to " + e3.sampling_freq_index), true) : e3.channel_config !== this.audio_metadata_.channel_config && (s.a.v(this.TAG, "AAC: Channel configuration changed from " + this.audio_metadata_.channel_config + " to " + e3.channel_config), true);
          }, t2.prototype.dispatchAudioInitSegment = function(e3) {
            var t3 = new x(e3), i2 = { type: "audio" };
            i2.id = this.audio_track_.id, i2.timescale = 1e3, i2.duration = this.duration_, i2.audioSampleRate = t3.sampling_rate, i2.channelCount = t3.channel_count, i2.codec = t3.codec_mimetype, i2.originalCodec = t3.original_codec_mimetype, i2.config = t3.config, i2.refSampleDuration = 1024 / i2.audioSampleRate * i2.timescale, 0 == this.audio_init_segment_dispatched_ && s.a.v(this.TAG, "Generated first AudioSpecificConfig for mimeType: " + i2.codec), this.onTrackMetadata("audio", i2), this.audio_init_segment_dispatched_ = true, this.video_metadata_changed_ = false;
            var n2 = this.media_info_;
            n2.hasAudio = true, n2.audioCodec = i2.originalCodec, n2.audioSampleRate = i2.audioSampleRate, n2.audioChannelCount = i2.channelCount, n2.hasVideo && n2.videoCodec ? n2.mimeType = 'video/mp2t; codecs="' + n2.videoCodec + "," + n2.audioCodec + '"' : n2.mimeType = 'video/mp2t; codecs="' + n2.audioCodec + '"', n2.isComplete() && this.onMediaInfo(n2);
          }, t2.prototype.dispatchPESPrivateDataDescriptor = function(e3, t3, i2) {
            var n2 = new U();
            n2.pid = e3, n2.stream_type = t3, n2.descriptor = i2, this.onPESPrivateDataDescriptor && this.onPESPrivateDataDescriptor(n2);
          }, t2.prototype.parsePESPrivateDataPayload = function(e3, t3, i2, n2, r2) {
            var s2 = new B();
            if (s2.pid = n2, s2.stream_id = r2, s2.len = e3.byteLength, s2.data = e3, null != t3) {
              var a2 = Math.floor(t3 / this.timescale_);
              s2.pts = a2;
            } else
              s2.nearest_pts = this.aac_last_sample_pts_;
            if (null != i2) {
              var o2 = Math.floor(i2 / this.timescale_);
              s2.dts = o2;
            }
            this.onPESPrivateData && this.onPESPrivateData(s2);
          }, t2.prototype.parseTimedID3MetadataPayload = function(e3, t3, i2, n2, r2) {
            var s2 = new B();
            if (s2.pid = n2, s2.stream_id = r2, s2.len = e3.byteLength, s2.data = e3, null != t3) {
              var a2 = Math.floor(t3 / this.timescale_);
              s2.pts = a2;
            }
            if (null != i2) {
              var o2 = Math.floor(i2 / this.timescale_);
              s2.dts = o2;
            }
            this.onTimedID3Metadata && this.onTimedID3Metadata(s2);
          }, t2;
        }(y), G = function() {
          function e2() {
          }
          return e2.init = function() {
            for (var t2 in e2.types = { avc1: [], avcC: [], btrt: [], dinf: [], dref: [], esds: [], ftyp: [], hdlr: [], mdat: [], mdhd: [], mdia: [], mfhd: [], minf: [], moof: [], moov: [], mp4a: [], mvex: [], mvhd: [], sdtp: [], stbl: [], stco: [], stsc: [], stsd: [], stsz: [], stts: [], tfdt: [], tfhd: [], traf: [], trak: [], trun: [], trex: [], tkhd: [], vmhd: [], smhd: [], ".mp3": [] }, e2.types)
              e2.types.hasOwnProperty(t2) && (e2.types[t2] = [t2.charCodeAt(0), t2.charCodeAt(1), t2.charCodeAt(2), t2.charCodeAt(3)]);
            var i2 = e2.constants = {};
            i2.FTYP = new Uint8Array([105, 115, 111, 109, 0, 0, 0, 1, 105, 115, 111, 109, 97, 118, 99, 49]), i2.STSD_PREFIX = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1]), i2.STTS = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]), i2.STSC = i2.STCO = i2.STTS, i2.STSZ = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), i2.HDLR_VIDEO = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 118, 105, 100, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 105, 100, 101, 111, 72, 97, 110, 100, 108, 101, 114, 0]), i2.HDLR_AUDIO = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 115, 111, 117, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 111, 117, 110, 100, 72, 97, 110, 100, 108, 101, 114, 0]), i2.DREF = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 117, 114, 108, 32, 0, 0, 0, 1]), i2.SMHD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]), i2.VMHD = new Uint8Array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]);
          }, e2.box = function(e3) {
            for (var t2 = 8, i2 = null, n2 = Array.prototype.slice.call(arguments, 1), r2 = n2.length, s2 = 0; s2 < r2; s2++)
              t2 += n2[s2].byteLength;
            (i2 = new Uint8Array(t2))[0] = t2 >>> 24 & 255, i2[1] = t2 >>> 16 & 255, i2[2] = t2 >>> 8 & 255, i2[3] = 255 & t2, i2.set(e3, 4);
            var a2 = 8;
            for (s2 = 0; s2 < r2; s2++)
              i2.set(n2[s2], a2), a2 += n2[s2].byteLength;
            return i2;
          }, e2.generateInitSegment = function(t2) {
            var i2 = e2.box(e2.types.ftyp, e2.constants.FTYP), n2 = e2.moov(t2), r2 = new Uint8Array(i2.byteLength + n2.byteLength);
            return r2.set(i2, 0), r2.set(n2, i2.byteLength), r2;
          }, e2.moov = function(t2) {
            var i2 = e2.mvhd(t2.timescale, t2.duration), n2 = e2.trak(t2), r2 = e2.mvex(t2);
            return e2.box(e2.types.moov, i2, n2, r2);
          }, e2.mvhd = function(t2, i2) {
            return e2.box(e2.types.mvhd, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2 >>> 24 & 255, t2 >>> 16 & 255, t2 >>> 8 & 255, 255 & t2, i2 >>> 24 & 255, i2 >>> 16 & 255, i2 >>> 8 & 255, 255 & i2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255]));
          }, e2.trak = function(t2) {
            return e2.box(e2.types.trak, e2.tkhd(t2), e2.mdia(t2));
          }, e2.tkhd = function(t2) {
            var i2 = t2.id, n2 = t2.duration, r2 = t2.presentWidth, s2 = t2.presentHeight;
            return e2.box(e2.types.tkhd, new Uint8Array([0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, i2 >>> 24 & 255, i2 >>> 16 & 255, i2 >>> 8 & 255, 255 & i2, 0, 0, 0, 0, n2 >>> 24 & 255, n2 >>> 16 & 255, n2 >>> 8 & 255, 255 & n2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, r2 >>> 8 & 255, 255 & r2, 0, 0, s2 >>> 8 & 255, 255 & s2, 0, 0]));
          }, e2.mdia = function(t2) {
            return e2.box(e2.types.mdia, e2.mdhd(t2), e2.hdlr(t2), e2.minf(t2));
          }, e2.mdhd = function(t2) {
            var i2 = t2.timescale, n2 = t2.duration;
            return e2.box(e2.types.mdhd, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, i2 >>> 24 & 255, i2 >>> 16 & 255, i2 >>> 8 & 255, 255 & i2, n2 >>> 24 & 255, n2 >>> 16 & 255, n2 >>> 8 & 255, 255 & n2, 85, 196, 0, 0]));
          }, e2.hdlr = function(t2) {
            var i2 = null;
            return i2 = "audio" === t2.type ? e2.constants.HDLR_AUDIO : e2.constants.HDLR_VIDEO, e2.box(e2.types.hdlr, i2);
          }, e2.minf = function(t2) {
            var i2 = null;
            return i2 = "audio" === t2.type ? e2.box(e2.types.smhd, e2.constants.SMHD) : e2.box(e2.types.vmhd, e2.constants.VMHD), e2.box(e2.types.minf, i2, e2.dinf(), e2.stbl(t2));
          }, e2.dinf = function() {
            return e2.box(e2.types.dinf, e2.box(e2.types.dref, e2.constants.DREF));
          }, e2.stbl = function(t2) {
            return e2.box(e2.types.stbl, e2.stsd(t2), e2.box(e2.types.stts, e2.constants.STTS), e2.box(e2.types.stsc, e2.constants.STSC), e2.box(e2.types.stsz, e2.constants.STSZ), e2.box(e2.types.stco, e2.constants.STCO));
          }, e2.stsd = function(t2) {
            return "audio" === t2.type ? "mp3" === t2.codec ? e2.box(e2.types.stsd, e2.constants.STSD_PREFIX, e2.mp3(t2)) : e2.box(e2.types.stsd, e2.constants.STSD_PREFIX, e2.mp4a(t2)) : e2.box(e2.types.stsd, e2.constants.STSD_PREFIX, e2.avc1(t2));
          }, e2.mp3 = function(t2) {
            var i2 = t2.channelCount, n2 = t2.audioSampleRate, r2 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, i2, 0, 16, 0, 0, 0, 0, n2 >>> 8 & 255, 255 & n2, 0, 0]);
            return e2.box(e2.types[".mp3"], r2);
          }, e2.mp4a = function(t2) {
            var i2 = t2.channelCount, n2 = t2.audioSampleRate, r2 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, i2, 0, 16, 0, 0, 0, 0, n2 >>> 8 & 255, 255 & n2, 0, 0]);
            return e2.box(e2.types.mp4a, r2, e2.esds(t2));
          }, e2.esds = function(t2) {
            var i2 = t2.config || [], n2 = i2.length, r2 = new Uint8Array([0, 0, 0, 0, 3, 23 + n2, 0, 1, 0, 4, 15 + n2, 64, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5].concat([n2]).concat(i2).concat([6, 1, 2]));
            return e2.box(e2.types.esds, r2);
          }, e2.avc1 = function(t2) {
            var i2 = t2.avcc, n2 = t2.codecWidth, r2 = t2.codecHeight, s2 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, n2 >>> 8 & 255, 255 & n2, r2 >>> 8 & 255, 255 & r2, 0, 72, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 1, 10, 120, 113, 113, 47, 102, 108, 118, 46, 106, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 255, 255]);
            return e2.box(e2.types.avc1, s2, e2.box(e2.types.avcC, i2));
          }, e2.mvex = function(t2) {
            return e2.box(e2.types.mvex, e2.trex(t2));
          }, e2.trex = function(t2) {
            var i2 = t2.id, n2 = new Uint8Array([0, 0, 0, 0, i2 >>> 24 & 255, i2 >>> 16 & 255, i2 >>> 8 & 255, 255 & i2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]);
            return e2.box(e2.types.trex, n2);
          }, e2.moof = function(t2, i2) {
            return e2.box(e2.types.moof, e2.mfhd(t2.sequenceNumber), e2.traf(t2, i2));
          }, e2.mfhd = function(t2) {
            var i2 = new Uint8Array([0, 0, 0, 0, t2 >>> 24 & 255, t2 >>> 16 & 255, t2 >>> 8 & 255, 255 & t2]);
            return e2.box(e2.types.mfhd, i2);
          }, e2.traf = function(t2, i2) {
            var n2 = t2.id, r2 = e2.box(e2.types.tfhd, new Uint8Array([0, 0, 0, 0, n2 >>> 24 & 255, n2 >>> 16 & 255, n2 >>> 8 & 255, 255 & n2])), s2 = e2.box(e2.types.tfdt, new Uint8Array([0, 0, 0, 0, i2 >>> 24 & 255, i2 >>> 16 & 255, i2 >>> 8 & 255, 255 & i2])), a2 = e2.sdtp(t2), o2 = e2.trun(t2, a2.byteLength + 16 + 16 + 8 + 16 + 8 + 8);
            return e2.box(e2.types.traf, r2, s2, o2, a2);
          }, e2.sdtp = function(t2) {
            for (var i2 = t2.samples || [], n2 = i2.length, r2 = new Uint8Array(4 + n2), s2 = 0; s2 < n2; s2++) {
              var a2 = i2[s2].flags;
              r2[s2 + 4] = a2.isLeading << 6 | a2.dependsOn << 4 | a2.isDependedOn << 2 | a2.hasRedundancy;
            }
            return e2.box(e2.types.sdtp, r2);
          }, e2.trun = function(t2, i2) {
            var n2 = t2.samples || [], r2 = n2.length, s2 = 12 + 16 * r2, a2 = new Uint8Array(s2);
            i2 += 8 + s2, a2.set([0, 0, 15, 1, r2 >>> 24 & 255, r2 >>> 16 & 255, r2 >>> 8 & 255, 255 & r2, i2 >>> 24 & 255, i2 >>> 16 & 255, i2 >>> 8 & 255, 255 & i2], 0);
            for (var o2 = 0; o2 < r2; o2++) {
              var h2 = n2[o2].duration, d2 = n2[o2].size, u2 = n2[o2].flags, _2 = n2[o2].cts;
              a2.set([h2 >>> 24 & 255, h2 >>> 16 & 255, h2 >>> 8 & 255, 255 & h2, d2 >>> 24 & 255, d2 >>> 16 & 255, d2 >>> 8 & 255, 255 & d2, u2.isLeading << 2 | u2.dependsOn, u2.isDependedOn << 6 | u2.hasRedundancy << 4 | u2.isNonSync, 0, 0, _2 >>> 24 & 255, _2 >>> 16 & 255, _2 >>> 8 & 255, 255 & _2], 12 + 16 * o2);
            }
            return e2.box(e2.types.trun, a2);
          }, e2.mdat = function(t2) {
            return e2.box(e2.types.mdat, t2);
          }, e2;
        }();
        G.init();
        var V = G, j = function() {
          function e2() {
          }
          return e2.getSilentFrame = function(e3, t2) {
            if ("mp4a.40.2" === e3) {
              if (1 === t2)
                return new Uint8Array([0, 200, 0, 128, 35, 128]);
              if (2 === t2)
                return new Uint8Array([33, 0, 73, 144, 2, 25, 0, 35, 128]);
              if (3 === t2)
                return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 142]);
              if (4 === t2)
                return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 128, 44, 128, 8, 2, 56]);
              if (5 === t2)
                return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 56]);
              if (6 === t2)
                return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 0, 178, 0, 32, 8, 224]);
            } else {
              if (1 === t2)
                return new Uint8Array([1, 64, 34, 128, 163, 78, 230, 128, 186, 8, 0, 0, 0, 28, 6, 241, 193, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
              if (2 === t2)
                return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
              if (3 === t2)
                return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
            }
            return null;
          }, e2;
        }(), z = i(7), H = function() {
          function e2(e3) {
            this.TAG = "MP4Remuxer", this._config = e3, this._isLive = true === e3.isLive, this._dtsBase = -1, this._dtsBaseInited = false, this._audioDtsBase = 1 / 0, this._videoDtsBase = 1 / 0, this._audioNextDts = void 0, this._videoNextDts = void 0, this._audioStashedLastSample = null, this._videoStashedLastSample = null, this._audioMeta = null, this._videoMeta = null, this._audioSegmentInfoList = new z.c("audio"), this._videoSegmentInfoList = new z.c("video"), this._onInitSegment = null, this._onMediaSegment = null, this._forceFirstIDR = !(!a.a.chrome || !(a.a.version.major < 50 || 50 === a.a.version.major && a.a.version.build < 2661)), this._fillSilentAfterSeek = a.a.msedge || a.a.msie, this._mp3UseMpegAudio = !a.a.firefox, this._fillAudioTimestampGap = this._config.fixAudioTimestampGap;
          }
          return e2.prototype.destroy = function() {
            this._dtsBase = -1, this._dtsBaseInited = false, this._audioMeta = null, this._videoMeta = null, this._audioSegmentInfoList.clear(), this._audioSegmentInfoList = null, this._videoSegmentInfoList.clear(), this._videoSegmentInfoList = null, this._onInitSegment = null, this._onMediaSegment = null;
          }, e2.prototype.bindDataSource = function(e3) {
            return e3.onDataAvailable = this.remux.bind(this), e3.onTrackMetadata = this._onTrackMetadataReceived.bind(this), this;
          }, Object.defineProperty(e2.prototype, "onInitSegment", { get: function() {
            return this._onInitSegment;
          }, set: function(e3) {
            this._onInitSegment = e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "onMediaSegment", { get: function() {
            return this._onMediaSegment;
          }, set: function(e3) {
            this._onMediaSegment = e3;
          }, enumerable: false, configurable: true }), e2.prototype.insertDiscontinuity = function() {
            this._audioNextDts = this._videoNextDts = void 0;
          }, e2.prototype.seek = function(e3) {
            this._audioStashedLastSample = null, this._videoStashedLastSample = null, this._videoSegmentInfoList.clear(), this._audioSegmentInfoList.clear();
          }, e2.prototype.remux = function(e3, t2) {
            if (!this._onMediaSegment)
              throw new _.a("MP4Remuxer: onMediaSegment callback must be specificed!");
            this._dtsBaseInited || this._calculateDtsBase(e3, t2), t2 && this._remuxVideo(t2), e3 && this._remuxAudio(e3);
          }, e2.prototype._onTrackMetadataReceived = function(e3, t2) {
            var i2 = null, n2 = "mp4", r2 = t2.codec;
            if ("audio" === e3)
              this._audioMeta = t2, "mp3" === t2.codec && this._mp3UseMpegAudio ? (n2 = "mpeg", r2 = "", i2 = new Uint8Array()) : i2 = V.generateInitSegment(t2);
            else {
              if ("video" !== e3)
                return;
              this._videoMeta = t2, i2 = V.generateInitSegment(t2);
            }
            if (!this._onInitSegment)
              throw new _.a("MP4Remuxer: onInitSegment callback must be specified!");
            this._onInitSegment(e3, { type: e3, data: i2.buffer, codec: r2, container: e3 + "/" + n2, mediaDuration: t2.duration });
          }, e2.prototype._calculateDtsBase = function(e3, t2) {
            this._dtsBaseInited || (e3 && e3.samples && e3.samples.length && (this._audioDtsBase = e3.samples[0].dts), t2 && t2.samples && t2.samples.length && (this._videoDtsBase = t2.samples[0].dts), this._dtsBase = Math.min(this._audioDtsBase, this._videoDtsBase), this._dtsBaseInited = true);
          }, e2.prototype.getTimestampBase = function() {
            if (this._dtsBaseInited)
              return this._dtsBase;
          }, e2.prototype.flushStashedSamples = function() {
            var e3 = this._videoStashedLastSample, t2 = this._audioStashedLastSample, i2 = { type: "video", id: 1, sequenceNumber: 0, samples: [], length: 0 };
            null != e3 && (i2.samples.push(e3), i2.length = e3.length);
            var n2 = { type: "audio", id: 2, sequenceNumber: 0, samples: [], length: 0 };
            null != t2 && (n2.samples.push(t2), n2.length = t2.length), this._videoStashedLastSample = null, this._audioStashedLastSample = null, this._remuxVideo(i2, true), this._remuxAudio(n2, true);
          }, e2.prototype._remuxAudio = function(e3, t2) {
            if (null != this._audioMeta) {
              var i2, n2 = e3, r2 = n2.samples, o2 = void 0, h2 = -1, d2 = this._audioMeta.refSampleDuration, u2 = "mp3" === this._audioMeta.codec && this._mp3UseMpegAudio, _2 = this._dtsBaseInited && void 0 === this._audioNextDts, l2 = false;
              if (r2 && 0 !== r2.length && (1 !== r2.length || t2)) {
                var c2 = 0, f2 = null, p2 = 0;
                u2 ? (c2 = 0, p2 = n2.length) : (c2 = 8, p2 = 8 + n2.length);
                var m2 = null;
                if (r2.length > 1 && (p2 -= (m2 = r2.pop()).length), null != this._audioStashedLastSample) {
                  var g2 = this._audioStashedLastSample;
                  this._audioStashedLastSample = null, r2.unshift(g2), p2 += g2.length;
                }
                null != m2 && (this._audioStashedLastSample = m2);
                var v2 = r2[0].dts - this._dtsBase;
                if (this._audioNextDts)
                  o2 = v2 - this._audioNextDts;
                else if (this._audioSegmentInfoList.isEmpty())
                  o2 = 0, this._fillSilentAfterSeek && !this._videoSegmentInfoList.isEmpty() && "mp3" !== this._audioMeta.originalCodec && (l2 = true);
                else {
                  var y2 = this._audioSegmentInfoList.getLastSampleBefore(v2);
                  if (null != y2) {
                    var E2 = v2 - (y2.originalDts + y2.duration);
                    E2 <= 3 && (E2 = 0), o2 = v2 - (y2.dts + y2.duration + E2);
                  } else
                    o2 = 0;
                }
                if (l2) {
                  var b2 = v2 - o2, S2 = this._videoSegmentInfoList.getLastSegmentBefore(v2);
                  if (null != S2 && S2.beginDts < b2) {
                    if (P2 = j.getSilentFrame(this._audioMeta.originalCodec, this._audioMeta.channelCount)) {
                      var A2 = S2.beginDts, R2 = b2 - S2.beginDts;
                      s.a.v(this.TAG, "InsertPrefixSilentAudio: dts: " + A2 + ", duration: " + R2), r2.unshift({ unit: P2, dts: A2, pts: A2 }), p2 += P2.byteLength;
                    }
                  } else
                    l2 = false;
                }
                for (var L2 = [], T2 = 0; T2 < r2.length; T2++) {
                  var w2 = (g2 = r2[T2]).unit, D2 = g2.dts - this._dtsBase, k2 = (A2 = D2, false), C2 = null, I2 = 0;
                  if (!(D2 < -1e-3)) {
                    if ("mp3" !== this._audioMeta.codec) {
                      var O2 = D2;
                      if (this._audioNextDts && (O2 = this._audioNextDts), (o2 = D2 - O2) <= -3 * d2) {
                        s.a.w(this.TAG, "Dropping 1 audio frame (originalDts: " + D2 + " ms ,curRefDts: " + O2 + " ms)  due to dtsCorrection: " + o2 + " ms overlap.");
                        continue;
                      }
                      if (o2 >= 3 * d2 && this._fillAudioTimestampGap && !a.a.safari) {
                        k2 = true;
                        var P2, M2 = Math.floor(o2 / d2);
                        s.a.w(this.TAG, "Large audio timestamp gap detected, may cause AV sync to drift. Silent frames will be generated to avoid unsync.\noriginalDts: " + D2 + " ms, curRefDts: " + O2 + " ms, dtsCorrection: " + Math.round(o2) + " ms, generate: " + M2 + " frames"), A2 = Math.floor(O2), I2 = Math.floor(O2 + d2) - A2, null == (P2 = j.getSilentFrame(this._audioMeta.originalCodec, this._audioMeta.channelCount)) && (s.a.w(this.TAG, "Unable to generate silent frame for " + this._audioMeta.originalCodec + " with " + this._audioMeta.channelCount + " channels, repeat last frame"), P2 = w2), C2 = [];
                        for (var x2 = 0; x2 < M2; x2++) {
                          O2 += d2;
                          var B2 = Math.floor(O2), U2 = Math.floor(O2 + d2) - B2, N2 = { dts: B2, pts: B2, cts: 0, unit: P2, size: P2.byteLength, duration: U2, originalDts: D2, flags: { isLeading: 0, dependsOn: 1, isDependedOn: 0, hasRedundancy: 0 } };
                          C2.push(N2), p2 += N2.size;
                        }
                        this._audioNextDts = O2 + d2;
                      } else
                        A2 = Math.floor(O2), I2 = Math.floor(O2 + d2) - A2, this._audioNextDts = O2 + d2;
                    } else {
                      if (A2 = D2 - o2, T2 !== r2.length - 1)
                        I2 = r2[T2 + 1].dts - this._dtsBase - o2 - A2;
                      else if (null != m2)
                        I2 = m2.dts - this._dtsBase - o2 - A2;
                      else
                        I2 = L2.length >= 1 ? L2[L2.length - 1].duration : Math.floor(d2);
                      this._audioNextDts = A2 + I2;
                    }
                    -1 === h2 && (h2 = A2), L2.push({ dts: A2, pts: A2, cts: 0, unit: g2.unit, size: g2.unit.byteLength, duration: I2, originalDts: D2, flags: { isLeading: 0, dependsOn: 1, isDependedOn: 0, hasRedundancy: 0 } }), k2 && L2.push.apply(L2, C2);
                  }
                }
                if (0 === L2.length)
                  return n2.samples = [], void (n2.length = 0);
                u2 ? f2 = new Uint8Array(p2) : ((f2 = new Uint8Array(p2))[0] = p2 >>> 24 & 255, f2[1] = p2 >>> 16 & 255, f2[2] = p2 >>> 8 & 255, f2[3] = 255 & p2, f2.set(V.types.mdat, 4));
                for (T2 = 0; T2 < L2.length; T2++) {
                  w2 = L2[T2].unit;
                  f2.set(w2, c2), c2 += w2.byteLength;
                }
                var F2 = L2[L2.length - 1];
                i2 = F2.dts + F2.duration;
                var G2 = new z.b();
                G2.beginDts = h2, G2.endDts = i2, G2.beginPts = h2, G2.endPts = i2, G2.originalBeginDts = L2[0].originalDts, G2.originalEndDts = F2.originalDts + F2.duration, G2.firstSample = new z.d(L2[0].dts, L2[0].pts, L2[0].duration, L2[0].originalDts, false), G2.lastSample = new z.d(F2.dts, F2.pts, F2.duration, F2.originalDts, false), this._isLive || this._audioSegmentInfoList.append(G2), n2.samples = L2, n2.sequenceNumber++;
                var H2 = null;
                H2 = u2 ? new Uint8Array() : V.moof(n2, h2), n2.samples = [], n2.length = 0;
                var q2 = { type: "audio", data: this._mergeBoxes(H2, f2).buffer, sampleCount: L2.length, info: G2 };
                u2 && _2 && (q2.timestampOffset = h2), this._onMediaSegment("audio", q2);
              }
            }
          }, e2.prototype._remuxVideo = function(e3, t2) {
            if (null != this._videoMeta) {
              var i2, n2, r2 = e3, s2 = r2.samples, a2 = void 0, o2 = -1, h2 = -1;
              if (s2 && 0 !== s2.length && (1 !== s2.length || t2)) {
                var d2 = 8, u2 = null, _2 = 8 + e3.length, l2 = null;
                if (s2.length > 1 && (_2 -= (l2 = s2.pop()).length), null != this._videoStashedLastSample) {
                  var c2 = this._videoStashedLastSample;
                  this._videoStashedLastSample = null, s2.unshift(c2), _2 += c2.length;
                }
                null != l2 && (this._videoStashedLastSample = l2);
                var f2 = s2[0].dts - this._dtsBase;
                if (this._videoNextDts)
                  a2 = f2 - this._videoNextDts;
                else if (this._videoSegmentInfoList.isEmpty())
                  a2 = 0;
                else {
                  var p2 = this._videoSegmentInfoList.getLastSampleBefore(f2);
                  if (null != p2) {
                    var m2 = f2 - (p2.originalDts + p2.duration);
                    m2 <= 3 && (m2 = 0), a2 = f2 - (p2.dts + p2.duration + m2);
                  } else
                    a2 = 0;
                }
                for (var g2 = new z.b(), v2 = [], y2 = 0; y2 < s2.length; y2++) {
                  var E2 = (c2 = s2[y2]).dts - this._dtsBase, b2 = c2.isKeyframe, S2 = E2 - a2, A2 = c2.cts, R2 = S2 + A2;
                  -1 === o2 && (o2 = S2, h2 = R2);
                  var L2 = 0;
                  if (y2 !== s2.length - 1)
                    L2 = s2[y2 + 1].dts - this._dtsBase - a2 - S2;
                  else if (null != l2)
                    L2 = l2.dts - this._dtsBase - a2 - S2;
                  else
                    L2 = v2.length >= 1 ? v2[v2.length - 1].duration : Math.floor(this._videoMeta.refSampleDuration);
                  if (b2) {
                    var T2 = new z.d(S2, R2, L2, c2.dts, true);
                    T2.fileposition = c2.fileposition, g2.appendSyncPoint(T2);
                  }
                  v2.push({ dts: S2, pts: R2, cts: A2, units: c2.units, size: c2.length, isKeyframe: b2, duration: L2, originalDts: E2, flags: { isLeading: 0, dependsOn: b2 ? 2 : 1, isDependedOn: b2 ? 1 : 0, hasRedundancy: 0, isNonSync: b2 ? 0 : 1 } });
                }
                (u2 = new Uint8Array(_2))[0] = _2 >>> 24 & 255, u2[1] = _2 >>> 16 & 255, u2[2] = _2 >>> 8 & 255, u2[3] = 255 & _2, u2.set(V.types.mdat, 4);
                for (y2 = 0; y2 < v2.length; y2++)
                  for (var w2 = v2[y2].units; w2.length; ) {
                    var D2 = w2.shift().data;
                    u2.set(D2, d2), d2 += D2.byteLength;
                  }
                var k2 = v2[v2.length - 1];
                if (i2 = k2.dts + k2.duration, n2 = k2.pts + k2.duration, this._videoNextDts = i2, g2.beginDts = o2, g2.endDts = i2, g2.beginPts = h2, g2.endPts = n2, g2.originalBeginDts = v2[0].originalDts, g2.originalEndDts = k2.originalDts + k2.duration, g2.firstSample = new z.d(v2[0].dts, v2[0].pts, v2[0].duration, v2[0].originalDts, v2[0].isKeyframe), g2.lastSample = new z.d(k2.dts, k2.pts, k2.duration, k2.originalDts, k2.isKeyframe), this._isLive || this._videoSegmentInfoList.append(g2), r2.samples = v2, r2.sequenceNumber++, this._forceFirstIDR) {
                  var C2 = v2[0].flags;
                  C2.dependsOn = 2, C2.isNonSync = 0;
                }
                var I2 = V.moof(r2, o2);
                r2.samples = [], r2.length = 0, this._onMediaSegment("video", { type: "video", data: this._mergeBoxes(I2, u2).buffer, sampleCount: v2.length, info: g2 });
              }
            }
          }, e2.prototype._mergeBoxes = function(e3, t2) {
            var i2 = new Uint8Array(e3.byteLength + t2.byteLength);
            return i2.set(e3, 0), i2.set(t2, e3.byteLength), i2;
          }, e2;
        }(), q = i(11), K = i(1), W = function() {
          function e2(e3, t2) {
            this.TAG = "TransmuxingController", this._emitter = new r.a(), this._config = t2, e3.segments || (e3.segments = [{ duration: e3.duration, filesize: e3.filesize, url: e3.url }]), "boolean" != typeof e3.cors && (e3.cors = true), "boolean" != typeof e3.withCredentials && (e3.withCredentials = false), this._mediaDataSource = e3, this._currentSegmentIndex = 0;
            var i2 = 0;
            this._mediaDataSource.segments.forEach(function(n2) {
              n2.timestampBase = i2, i2 += n2.duration, n2.cors = e3.cors, n2.withCredentials = e3.withCredentials, t2.referrerPolicy && (n2.referrerPolicy = t2.referrerPolicy);
            }), isNaN(i2) || this._mediaDataSource.duration === i2 || (this._mediaDataSource.duration = i2), this._mediaInfo = null, this._demuxer = null, this._remuxer = null, this._ioctl = null, this._pendingSeekTime = null, this._pendingResolveSeekPoint = null, this._statisticsReporter = null;
          }
          return e2.prototype.destroy = function() {
            this._mediaInfo = null, this._mediaDataSource = null, this._statisticsReporter && this._disableStatisticsReporter(), this._ioctl && (this._ioctl.destroy(), this._ioctl = null), this._demuxer && (this._demuxer.destroy(), this._demuxer = null), this._remuxer && (this._remuxer.destroy(), this._remuxer = null), this._emitter.removeAllListeners(), this._emitter = null;
          }, e2.prototype.on = function(e3, t2) {
            this._emitter.addListener(e3, t2);
          }, e2.prototype.off = function(e3, t2) {
            this._emitter.removeListener(e3, t2);
          }, e2.prototype.start = function() {
            this._loadSegment(0), this._enableStatisticsReporter();
          }, e2.prototype._loadSegment = function(e3, t2) {
            this._currentSegmentIndex = e3;
            var i2 = this._mediaDataSource.segments[e3], n2 = this._ioctl = new q.a(i2, this._config, e3);
            n2.onError = this._onIOException.bind(this), n2.onSeeked = this._onIOSeeked.bind(this), n2.onComplete = this._onIOComplete.bind(this), n2.onRedirect = this._onIORedirect.bind(this), n2.onRecoveredEarlyEof = this._onIORecoveredEarlyEof.bind(this), t2 ? this._demuxer.bindDataSource(this._ioctl) : n2.onDataArrival = this._onInitChunkArrival.bind(this), n2.open(t2);
          }, e2.prototype.stop = function() {
            this._internalAbort(), this._disableStatisticsReporter();
          }, e2.prototype._internalAbort = function() {
            this._ioctl && (this._ioctl.destroy(), this._ioctl = null);
          }, e2.prototype.pause = function() {
            this._ioctl && this._ioctl.isWorking() && (this._ioctl.pause(), this._disableStatisticsReporter());
          }, e2.prototype.resume = function() {
            this._ioctl && this._ioctl.isPaused() && (this._ioctl.resume(), this._enableStatisticsReporter());
          }, e2.prototype.seek = function(e3) {
            if (null != this._mediaInfo && this._mediaInfo.isSeekable()) {
              var t2 = this._searchSegmentIndexContains(e3);
              if (t2 === this._currentSegmentIndex) {
                var i2 = this._mediaInfo.segments[t2];
                if (null == i2)
                  this._pendingSeekTime = e3;
                else {
                  var n2 = i2.getNearestKeyframe(e3);
                  this._remuxer.seek(n2.milliseconds), this._ioctl.seek(n2.fileposition), this._pendingResolveSeekPoint = n2.milliseconds;
                }
              } else {
                var r2 = this._mediaInfo.segments[t2];
                if (null == r2)
                  this._pendingSeekTime = e3, this._internalAbort(), this._remuxer.seek(), this._remuxer.insertDiscontinuity(), this._loadSegment(t2);
                else {
                  n2 = r2.getNearestKeyframe(e3);
                  this._internalAbort(), this._remuxer.seek(e3), this._remuxer.insertDiscontinuity(), this._demuxer.resetMediaInfo(), this._demuxer.timestampBase = this._mediaDataSource.segments[t2].timestampBase, this._loadSegment(t2, n2.fileposition), this._pendingResolveSeekPoint = n2.milliseconds, this._reportSegmentMediaInfo(t2);
                }
              }
              this._enableStatisticsReporter();
            }
          }, e2.prototype._searchSegmentIndexContains = function(e3) {
            for (var t2 = this._mediaDataSource.segments, i2 = t2.length - 1, n2 = 0; n2 < t2.length; n2++)
              if (e3 < t2[n2].timestampBase) {
                i2 = n2 - 1;
                break;
              }
            return i2;
          }, e2.prototype._onInitChunkArrival = function(e3, t2) {
            var i2 = this, n2 = null, r2 = 0;
            if (t2 > 0)
              this._demuxer.bindDataSource(this._ioctl), this._demuxer.timestampBase = this._mediaDataSource.segments[this._currentSegmentIndex].timestampBase, r2 = this._demuxer.parseChunks(e3, t2);
            else if ((n2 = F.probe(e3)).match) {
              var a2 = this._demuxer = new F(n2, this._config);
              this._remuxer || (this._remuxer = new H(this._config)), a2.onError = this._onDemuxException.bind(this), a2.onMediaInfo = this._onMediaInfo.bind(this), a2.onMetaDataArrived = this._onMetaDataArrived.bind(this), a2.onTimedID3Metadata = this._onTimedID3Metadata.bind(this), a2.onPESPrivateDataDescriptor = this._onPESPrivateDataDescriptor.bind(this), a2.onPESPrivateData = this._onPESPrivateData.bind(this), this._remuxer.bindDataSource(this._demuxer), this._demuxer.bindDataSource(this._ioctl), this._remuxer.onInitSegment = this._onRemuxerInitSegmentArrival.bind(this), this._remuxer.onMediaSegment = this._onRemuxerMediaSegmentArrival.bind(this), r2 = this._demuxer.parseChunks(e3, t2);
            } else if ((n2 = v.probe(e3)).match) {
              this._demuxer = new v(n2, this._config), this._remuxer || (this._remuxer = new H(this._config));
              var o2 = this._mediaDataSource;
              null == o2.duration || isNaN(o2.duration) || (this._demuxer.overridedDuration = o2.duration), "boolean" == typeof o2.hasAudio && (this._demuxer.overridedHasAudio = o2.hasAudio), "boolean" == typeof o2.hasVideo && (this._demuxer.overridedHasVideo = o2.hasVideo), this._demuxer.timestampBase = o2.segments[this._currentSegmentIndex].timestampBase, this._demuxer.onError = this._onDemuxException.bind(this), this._demuxer.onMediaInfo = this._onMediaInfo.bind(this), this._demuxer.onMetaDataArrived = this._onMetaDataArrived.bind(this), this._demuxer.onScriptDataArrived = this._onScriptDataArrived.bind(this), this._remuxer.bindDataSource(this._demuxer.bindDataSource(this._ioctl)), this._remuxer.onInitSegment = this._onRemuxerInitSegmentArrival.bind(this), this._remuxer.onMediaSegment = this._onRemuxerMediaSegmentArrival.bind(this), r2 = this._demuxer.parseChunks(e3, t2);
            } else
              n2 = null, s.a.e(this.TAG, "Non MPEG-TS/FLV, Unsupported media type!"), Promise.resolve().then(function() {
                i2._internalAbort();
              }), this._emitter.emit(K.a.DEMUX_ERROR, m.a.FORMAT_UNSUPPORTED, "Non MPEG-TS/FLV, Unsupported media type!"), r2 = 0;
            return r2;
          }, e2.prototype._onMediaInfo = function(e3) {
            var t2 = this;
            null == this._mediaInfo && (this._mediaInfo = Object.assign({}, e3), this._mediaInfo.keyframesIndex = null, this._mediaInfo.segments = [], this._mediaInfo.segmentCount = this._mediaDataSource.segments.length, Object.setPrototypeOf(this._mediaInfo, o.a.prototype));
            var i2 = Object.assign({}, e3);
            Object.setPrototypeOf(i2, o.a.prototype), this._mediaInfo.segments[this._currentSegmentIndex] = i2, this._reportSegmentMediaInfo(this._currentSegmentIndex), null != this._pendingSeekTime && Promise.resolve().then(function() {
              var e4 = t2._pendingSeekTime;
              t2._pendingSeekTime = null, t2.seek(e4);
            });
          }, e2.prototype._onMetaDataArrived = function(e3) {
            this._emitter.emit(K.a.METADATA_ARRIVED, e3);
          }, e2.prototype._onScriptDataArrived = function(e3) {
            this._emitter.emit(K.a.SCRIPTDATA_ARRIVED, e3);
          }, e2.prototype._onTimedID3Metadata = function(e3) {
            var t2 = this._remuxer.getTimestampBase();
            null != t2 && (null != e3.pts && (e3.pts -= t2), null != e3.dts && (e3.dts -= t2), this._emitter.emit(K.a.TIMED_ID3_METADATA_ARRIVED, e3));
          }, e2.prototype._onPESPrivateDataDescriptor = function(e3) {
            this._emitter.emit(K.a.PES_PRIVATE_DATA_DESCRIPTOR, e3);
          }, e2.prototype._onPESPrivateData = function(e3) {
            var t2 = this._remuxer.getTimestampBase();
            null != t2 && (null != e3.pts && (e3.pts -= t2), null != e3.nearest_pts && (e3.nearest_pts -= t2), null != e3.dts && (e3.dts -= t2), this._emitter.emit(K.a.PES_PRIVATE_DATA_ARRIVED, e3));
          }, e2.prototype._onIOSeeked = function() {
            this._remuxer.insertDiscontinuity();
          }, e2.prototype._onIOComplete = function(e3) {
            var t2 = e3 + 1;
            t2 < this._mediaDataSource.segments.length ? (this._internalAbort(), this._remuxer && this._remuxer.flushStashedSamples(), this._loadSegment(t2)) : (this._remuxer && this._remuxer.flushStashedSamples(), this._emitter.emit(K.a.LOADING_COMPLETE), this._disableStatisticsReporter());
          }, e2.prototype._onIORedirect = function(e3) {
            var t2 = this._ioctl.extraData;
            this._mediaDataSource.segments[t2].redirectedURL = e3;
          }, e2.prototype._onIORecoveredEarlyEof = function() {
            this._emitter.emit(K.a.RECOVERED_EARLY_EOF);
          }, e2.prototype._onIOException = function(e3, t2) {
            s.a.e(this.TAG, "IOException: type = " + e3 + ", code = " + t2.code + ", msg = " + t2.msg), this._emitter.emit(K.a.IO_ERROR, e3, t2), this._disableStatisticsReporter();
          }, e2.prototype._onDemuxException = function(e3, t2) {
            s.a.e(this.TAG, "DemuxException: type = " + e3 + ", info = " + t2), this._emitter.emit(K.a.DEMUX_ERROR, e3, t2);
          }, e2.prototype._onRemuxerInitSegmentArrival = function(e3, t2) {
            this._emitter.emit(K.a.INIT_SEGMENT, e3, t2);
          }, e2.prototype._onRemuxerMediaSegmentArrival = function(e3, t2) {
            if (null == this._pendingSeekTime && (this._emitter.emit(K.a.MEDIA_SEGMENT, e3, t2), null != this._pendingResolveSeekPoint && "video" === e3)) {
              var i2 = t2.info.syncPoints, n2 = this._pendingResolveSeekPoint;
              this._pendingResolveSeekPoint = null, a.a.safari && i2.length > 0 && i2[0].originalDts === n2 && (n2 = i2[0].pts), this._emitter.emit(K.a.RECOMMEND_SEEKPOINT, n2);
            }
          }, e2.prototype._enableStatisticsReporter = function() {
            null == this._statisticsReporter && (this._statisticsReporter = self.setInterval(this._reportStatisticsInfo.bind(this), this._config.statisticsInfoReportInterval));
          }, e2.prototype._disableStatisticsReporter = function() {
            this._statisticsReporter && (self.clearInterval(this._statisticsReporter), this._statisticsReporter = null);
          }, e2.prototype._reportSegmentMediaInfo = function(e3) {
            var t2 = this._mediaInfo.segments[e3], i2 = Object.assign({}, t2);
            i2.duration = this._mediaInfo.duration, i2.segmentCount = this._mediaInfo.segmentCount, delete i2.segments, delete i2.keyframesIndex, this._emitter.emit(K.a.MEDIA_INFO, i2);
          }, e2.prototype._reportStatisticsInfo = function() {
            var e3 = {};
            e3.url = this._ioctl.currentURL, e3.hasRedirect = this._ioctl.hasRedirect, e3.hasRedirect && (e3.redirectedURL = this._ioctl.currentRedirectedURL), e3.speed = this._ioctl.currentSpeed, e3.loaderType = this._ioctl.loaderType, e3.currentSegmentIndex = this._currentSegmentIndex, e3.totalSegmentCount = this._mediaDataSource.segments.length, this._emitter.emit(K.a.STATISTICS_INFO, e3);
          }, e2;
        }();
        t.a = W;
      }, function(e, t, i) {
        "use strict";
        var n, r = i(0), s = function() {
          function e2() {
            this._firstCheckpoint = 0, this._lastCheckpoint = 0, this._intervalBytes = 0, this._totalBytes = 0, this._lastSecondBytes = 0, self.performance && self.performance.now ? this._now = self.performance.now.bind(self.performance) : this._now = Date.now;
          }
          return e2.prototype.reset = function() {
            this._firstCheckpoint = this._lastCheckpoint = 0, this._totalBytes = this._intervalBytes = 0, this._lastSecondBytes = 0;
          }, e2.prototype.addBytes = function(e3) {
            0 === this._firstCheckpoint ? (this._firstCheckpoint = this._now(), this._lastCheckpoint = this._firstCheckpoint, this._intervalBytes += e3, this._totalBytes += e3) : this._now() - this._lastCheckpoint < 1e3 ? (this._intervalBytes += e3, this._totalBytes += e3) : (this._lastSecondBytes = this._intervalBytes, this._intervalBytes = e3, this._totalBytes += e3, this._lastCheckpoint = this._now());
          }, Object.defineProperty(e2.prototype, "currentKBps", { get: function() {
            this.addBytes(0);
            var e3 = (this._now() - this._lastCheckpoint) / 1e3;
            return 0 == e3 && (e3 = 1), this._intervalBytes / e3 / 1024;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "lastSecondKBps", { get: function() {
            return this.addBytes(0), 0 !== this._lastSecondBytes ? this._lastSecondBytes / 1024 : this._now() - this._lastCheckpoint >= 500 ? this.currentKBps : 0;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "averageKBps", { get: function() {
            var e3 = (this._now() - this._firstCheckpoint) / 1e3;
            return this._totalBytes / e3 / 1024;
          }, enumerable: false, configurable: true }), e2;
        }(), a = i(2), o = i(4), h = i(3), d = (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var i2 in t3)
              t3.hasOwnProperty(i2) && (e3[i2] = t3[i2]);
          })(e2, t2);
        }, function(e2, t2) {
          function i2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (i2.prototype = t2.prototype, new i2());
        }), u = function(e2) {
          function t2(t3, i2) {
            var n2 = e2.call(this, "fetch-stream-loader") || this;
            return n2.TAG = "FetchStreamLoader", n2._seekHandler = t3, n2._config = i2, n2._needStash = true, n2._requestAbort = false, n2._abortController = null, n2._contentLength = null, n2._receivedLength = 0, n2;
          }
          return d(t2, e2), t2.isSupported = function() {
            try {
              var e3 = o.a.msedge && o.a.version.minor >= 15048, t3 = !o.a.msedge || e3;
              return self.fetch && self.ReadableStream && t3;
            } catch (e4) {
              return false;
            }
          }, t2.prototype.destroy = function() {
            this.isWorking() && this.abort(), e2.prototype.destroy.call(this);
          }, t2.prototype.open = function(e3, t3) {
            var i2 = this;
            this._dataSource = e3, this._range = t3;
            var n2 = e3.url;
            this._config.reuseRedirectedURL && null != e3.redirectedURL && (n2 = e3.redirectedURL);
            var r2 = this._seekHandler.getConfig(n2, t3), s2 = new self.Headers();
            if ("object" == typeof r2.headers) {
              var o2 = r2.headers;
              for (var d2 in o2)
                o2.hasOwnProperty(d2) && s2.append(d2, o2[d2]);
            }
            var u2 = { method: "GET", headers: s2, mode: "cors", cache: "default", referrerPolicy: "no-referrer-when-downgrade" };
            if ("object" == typeof this._config.headers)
              for (var d2 in this._config.headers)
                s2.append(d2, this._config.headers[d2]);
            false === e3.cors && (u2.mode = "same-origin"), e3.withCredentials && (u2.credentials = "include"), e3.referrerPolicy && (u2.referrerPolicy = e3.referrerPolicy), self.AbortController && (this._abortController = new self.AbortController(), u2.signal = this._abortController.signal), this._status = a.c.kConnecting, self.fetch(r2.url, u2).then(function(e4) {
              if (i2._requestAbort)
                return i2._status = a.c.kIdle, void e4.body.cancel();
              if (e4.ok && e4.status >= 200 && e4.status <= 299) {
                if (e4.url !== r2.url && i2._onURLRedirect) {
                  var t4 = i2._seekHandler.removeURLParameters(e4.url);
                  i2._onURLRedirect(t4);
                }
                var n3 = e4.headers.get("Content-Length");
                return null != n3 && (i2._contentLength = parseInt(n3), 0 !== i2._contentLength && i2._onContentLengthKnown && i2._onContentLengthKnown(i2._contentLength)), i2._pump.call(i2, e4.body.getReader());
              }
              if (i2._status = a.c.kError, !i2._onError)
                throw new h.d("FetchStreamLoader: Http code invalid, " + e4.status + " " + e4.statusText);
              i2._onError(a.b.HTTP_STATUS_CODE_INVALID, { code: e4.status, msg: e4.statusText });
            }).catch(function(e4) {
              if (!i2._abortController || !i2._abortController.signal.aborted) {
                if (i2._status = a.c.kError, !i2._onError)
                  throw e4;
                i2._onError(a.b.EXCEPTION, { code: -1, msg: e4.message });
              }
            });
          }, t2.prototype.abort = function() {
            if (this._requestAbort = true, (this._status !== a.c.kBuffering || !o.a.chrome) && this._abortController)
              try {
                this._abortController.abort();
              } catch (e3) {
              }
          }, t2.prototype._pump = function(e3) {
            var t3 = this;
            return e3.read().then(function(i2) {
              if (i2.done)
                if (null !== t3._contentLength && t3._receivedLength < t3._contentLength) {
                  t3._status = a.c.kError;
                  var n2 = a.b.EARLY_EOF, r2 = { code: -1, msg: "Fetch stream meet Early-EOF" };
                  if (!t3._onError)
                    throw new h.d(r2.msg);
                  t3._onError(n2, r2);
                } else
                  t3._status = a.c.kComplete, t3._onComplete && t3._onComplete(t3._range.from, t3._range.from + t3._receivedLength - 1);
              else {
                if (t3._abortController && t3._abortController.signal.aborted)
                  return void (t3._status = a.c.kComplete);
                if (true === t3._requestAbort)
                  return t3._status = a.c.kComplete, e3.cancel();
                t3._status = a.c.kBuffering;
                var s2 = i2.value.buffer, o2 = t3._range.from + t3._receivedLength;
                t3._receivedLength += s2.byteLength, t3._onDataArrival && t3._onDataArrival(s2, o2, t3._receivedLength), t3._pump(e3);
              }
            }).catch(function(e4) {
              if (t3._abortController && t3._abortController.signal.aborted)
                t3._status = a.c.kComplete;
              else if (11 !== e4.code || !o.a.msedge) {
                t3._status = a.c.kError;
                var i2 = 0, n2 = null;
                if (19 !== e4.code && "network error" !== e4.message || !(null === t3._contentLength || null !== t3._contentLength && t3._receivedLength < t3._contentLength) ? (i2 = a.b.EXCEPTION, n2 = { code: e4.code, msg: e4.message }) : (i2 = a.b.EARLY_EOF, n2 = { code: e4.code, msg: "Fetch stream meet Early-EOF" }), !t3._onError)
                  throw new h.d(n2.msg);
                t3._onError(i2, n2);
              }
            });
          }, t2;
        }(a.a), _ = function() {
          var e2 = function(t2, i2) {
            return (e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var i3 in t3)
                t3.hasOwnProperty(i3) && (e3[i3] = t3[i3]);
            })(t2, i2);
          };
          return function(t2, i2) {
            function n2() {
              this.constructor = t2;
            }
            e2(t2, i2), t2.prototype = null === i2 ? Object.create(i2) : (n2.prototype = i2.prototype, new n2());
          };
        }(), l = function(e2) {
          function t2(t3, i2) {
            var n2 = e2.call(this, "xhr-moz-chunked-loader") || this;
            return n2.TAG = "MozChunkedLoader", n2._seekHandler = t3, n2._config = i2, n2._needStash = true, n2._xhr = null, n2._requestAbort = false, n2._contentLength = null, n2._receivedLength = 0, n2;
          }
          return _(t2, e2), t2.isSupported = function() {
            try {
              var e3 = new XMLHttpRequest();
              return e3.open("GET", "https://example.com", true), e3.responseType = "moz-chunked-arraybuffer", "moz-chunked-arraybuffer" === e3.responseType;
            } catch (e4) {
              return r.a.w("MozChunkedLoader", e4.message), false;
            }
          }, t2.prototype.destroy = function() {
            this.isWorking() && this.abort(), this._xhr && (this._xhr.onreadystatechange = null, this._xhr.onprogress = null, this._xhr.onloadend = null, this._xhr.onerror = null, this._xhr = null), e2.prototype.destroy.call(this);
          }, t2.prototype.open = function(e3, t3) {
            this._dataSource = e3, this._range = t3;
            var i2 = e3.url;
            this._config.reuseRedirectedURL && null != e3.redirectedURL && (i2 = e3.redirectedURL);
            var n2 = this._seekHandler.getConfig(i2, t3);
            this._requestURL = n2.url;
            var r2 = this._xhr = new XMLHttpRequest();
            if (r2.open("GET", n2.url, true), r2.responseType = "moz-chunked-arraybuffer", r2.onreadystatechange = this._onReadyStateChange.bind(this), r2.onprogress = this._onProgress.bind(this), r2.onloadend = this._onLoadEnd.bind(this), r2.onerror = this._onXhrError.bind(this), e3.withCredentials && (r2.withCredentials = true), "object" == typeof n2.headers) {
              var s2 = n2.headers;
              for (var o2 in s2)
                s2.hasOwnProperty(o2) && r2.setRequestHeader(o2, s2[o2]);
            }
            if ("object" == typeof this._config.headers) {
              s2 = this._config.headers;
              for (var o2 in s2)
                s2.hasOwnProperty(o2) && r2.setRequestHeader(o2, s2[o2]);
            }
            this._status = a.c.kConnecting, r2.send();
          }, t2.prototype.abort = function() {
            this._requestAbort = true, this._xhr && this._xhr.abort(), this._status = a.c.kComplete;
          }, t2.prototype._onReadyStateChange = function(e3) {
            var t3 = e3.target;
            if (2 === t3.readyState) {
              if (null != t3.responseURL && t3.responseURL !== this._requestURL && this._onURLRedirect) {
                var i2 = this._seekHandler.removeURLParameters(t3.responseURL);
                this._onURLRedirect(i2);
              }
              if (0 !== t3.status && (t3.status < 200 || t3.status > 299)) {
                if (this._status = a.c.kError, !this._onError)
                  throw new h.d("MozChunkedLoader: Http code invalid, " + t3.status + " " + t3.statusText);
                this._onError(a.b.HTTP_STATUS_CODE_INVALID, { code: t3.status, msg: t3.statusText });
              } else
                this._status = a.c.kBuffering;
            }
          }, t2.prototype._onProgress = function(e3) {
            if (this._status !== a.c.kError) {
              null === this._contentLength && null !== e3.total && 0 !== e3.total && (this._contentLength = e3.total, this._onContentLengthKnown && this._onContentLengthKnown(this._contentLength));
              var t3 = e3.target.response, i2 = this._range.from + this._receivedLength;
              this._receivedLength += t3.byteLength, this._onDataArrival && this._onDataArrival(t3, i2, this._receivedLength);
            }
          }, t2.prototype._onLoadEnd = function(e3) {
            true !== this._requestAbort ? this._status !== a.c.kError && (this._status = a.c.kComplete, this._onComplete && this._onComplete(this._range.from, this._range.from + this._receivedLength - 1)) : this._requestAbort = false;
          }, t2.prototype._onXhrError = function(e3) {
            this._status = a.c.kError;
            var t3 = 0, i2 = null;
            if (this._contentLength && e3.loaded < this._contentLength ? (t3 = a.b.EARLY_EOF, i2 = { code: -1, msg: "Moz-Chunked stream meet Early-Eof" }) : (t3 = a.b.EXCEPTION, i2 = { code: -1, msg: e3.constructor.name + " " + e3.type }), !this._onError)
              throw new h.d(i2.msg);
            this._onError(t3, i2);
          }, t2;
        }(a.a), c = function() {
          var e2 = function(t2, i2) {
            return (e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var i3 in t3)
                t3.hasOwnProperty(i3) && (e3[i3] = t3[i3]);
            })(t2, i2);
          };
          return function(t2, i2) {
            function n2() {
              this.constructor = t2;
            }
            e2(t2, i2), t2.prototype = null === i2 ? Object.create(i2) : (n2.prototype = i2.prototype, new n2());
          };
        }(), f = function(e2) {
          function t2(t3, i2) {
            var n2 = e2.call(this, "xhr-range-loader") || this;
            return n2.TAG = "RangeLoader", n2._seekHandler = t3, n2._config = i2, n2._needStash = false, n2._chunkSizeKBList = [128, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 5120, 6144, 7168, 8192], n2._currentChunkSizeKB = 384, n2._currentSpeedNormalized = 0, n2._zeroSpeedChunkCount = 0, n2._xhr = null, n2._speedSampler = new s(), n2._requestAbort = false, n2._waitForTotalLength = false, n2._totalLengthReceived = false, n2._currentRequestURL = null, n2._currentRedirectedURL = null, n2._currentRequestRange = null, n2._totalLength = null, n2._contentLength = null, n2._receivedLength = 0, n2._lastTimeLoaded = 0, n2;
          }
          return c(t2, e2), t2.isSupported = function() {
            try {
              var e3 = new XMLHttpRequest();
              return e3.open("GET", "https://example.com", true), e3.responseType = "arraybuffer", "arraybuffer" === e3.responseType;
            } catch (e4) {
              return r.a.w("RangeLoader", e4.message), false;
            }
          }, t2.prototype.destroy = function() {
            this.isWorking() && this.abort(), this._xhr && (this._xhr.onreadystatechange = null, this._xhr.onprogress = null, this._xhr.onload = null, this._xhr.onerror = null, this._xhr = null), e2.prototype.destroy.call(this);
          }, Object.defineProperty(t2.prototype, "currentSpeed", { get: function() {
            return this._speedSampler.lastSecondKBps;
          }, enumerable: false, configurable: true }), t2.prototype.open = function(e3, t3) {
            this._dataSource = e3, this._range = t3, this._status = a.c.kConnecting;
            var i2 = false;
            null != this._dataSource.filesize && 0 !== this._dataSource.filesize && (i2 = true, this._totalLength = this._dataSource.filesize), this._totalLengthReceived || i2 ? this._openSubRange() : (this._waitForTotalLength = true, this._internalOpen(this._dataSource, { from: 0, to: -1 }));
          }, t2.prototype._openSubRange = function() {
            var e3 = 1024 * this._currentChunkSizeKB, t3 = this._range.from + this._receivedLength, i2 = t3 + e3;
            null != this._contentLength && i2 - this._range.from >= this._contentLength && (i2 = this._range.from + this._contentLength - 1), this._currentRequestRange = { from: t3, to: i2 }, this._internalOpen(this._dataSource, this._currentRequestRange);
          }, t2.prototype._internalOpen = function(e3, t3) {
            this._lastTimeLoaded = 0;
            var i2 = e3.url;
            this._config.reuseRedirectedURL && (null != this._currentRedirectedURL ? i2 = this._currentRedirectedURL : null != e3.redirectedURL && (i2 = e3.redirectedURL));
            var n2 = this._seekHandler.getConfig(i2, t3);
            this._currentRequestURL = n2.url;
            var r2 = this._xhr = new XMLHttpRequest();
            if (r2.open("GET", n2.url, true), r2.responseType = "arraybuffer", r2.onreadystatechange = this._onReadyStateChange.bind(this), r2.onprogress = this._onProgress.bind(this), r2.onload = this._onLoad.bind(this), r2.onerror = this._onXhrError.bind(this), e3.withCredentials && (r2.withCredentials = true), "object" == typeof n2.headers) {
              var s2 = n2.headers;
              for (var a2 in s2)
                s2.hasOwnProperty(a2) && r2.setRequestHeader(a2, s2[a2]);
            }
            if ("object" == typeof this._config.headers) {
              s2 = this._config.headers;
              for (var a2 in s2)
                s2.hasOwnProperty(a2) && r2.setRequestHeader(a2, s2[a2]);
            }
            r2.send();
          }, t2.prototype.abort = function() {
            this._requestAbort = true, this._internalAbort(), this._status = a.c.kComplete;
          }, t2.prototype._internalAbort = function() {
            this._xhr && (this._xhr.onreadystatechange = null, this._xhr.onprogress = null, this._xhr.onload = null, this._xhr.onerror = null, this._xhr.abort(), this._xhr = null);
          }, t2.prototype._onReadyStateChange = function(e3) {
            var t3 = e3.target;
            if (2 === t3.readyState) {
              if (null != t3.responseURL) {
                var i2 = this._seekHandler.removeURLParameters(t3.responseURL);
                t3.responseURL !== this._currentRequestURL && i2 !== this._currentRedirectedURL && (this._currentRedirectedURL = i2, this._onURLRedirect && this._onURLRedirect(i2));
              }
              if (t3.status >= 200 && t3.status <= 299) {
                if (this._waitForTotalLength)
                  return;
                this._status = a.c.kBuffering;
              } else {
                if (this._status = a.c.kError, !this._onError)
                  throw new h.d("RangeLoader: Http code invalid, " + t3.status + " " + t3.statusText);
                this._onError(a.b.HTTP_STATUS_CODE_INVALID, { code: t3.status, msg: t3.statusText });
              }
            }
          }, t2.prototype._onProgress = function(e3) {
            if (this._status !== a.c.kError) {
              if (null === this._contentLength) {
                var t3 = false;
                if (this._waitForTotalLength) {
                  this._waitForTotalLength = false, this._totalLengthReceived = true, t3 = true;
                  var i2 = e3.total;
                  this._internalAbort(), null != i2 & 0 !== i2 && (this._totalLength = i2);
                }
                if (-1 === this._range.to ? this._contentLength = this._totalLength - this._range.from : this._contentLength = this._range.to - this._range.from + 1, t3)
                  return void this._openSubRange();
                this._onContentLengthKnown && this._onContentLengthKnown(this._contentLength);
              }
              var n2 = e3.loaded - this._lastTimeLoaded;
              this._lastTimeLoaded = e3.loaded, this._speedSampler.addBytes(n2);
            }
          }, t2.prototype._normalizeSpeed = function(e3) {
            var t3 = this._chunkSizeKBList, i2 = t3.length - 1, n2 = 0, r2 = 0, s2 = i2;
            if (e3 < t3[0])
              return t3[0];
            for (; r2 <= s2; ) {
              if ((n2 = r2 + Math.floor((s2 - r2) / 2)) === i2 || e3 >= t3[n2] && e3 < t3[n2 + 1])
                return t3[n2];
              t3[n2] < e3 ? r2 = n2 + 1 : s2 = n2 - 1;
            }
          }, t2.prototype._onLoad = function(e3) {
            if (this._status !== a.c.kError)
              if (this._waitForTotalLength)
                this._waitForTotalLength = false;
              else {
                this._lastTimeLoaded = 0;
                var t3 = this._speedSampler.lastSecondKBps;
                if (0 === t3 && (this._zeroSpeedChunkCount++, this._zeroSpeedChunkCount >= 3 && (t3 = this._speedSampler.currentKBps)), 0 !== t3) {
                  var i2 = this._normalizeSpeed(t3);
                  this._currentSpeedNormalized !== i2 && (this._currentSpeedNormalized = i2, this._currentChunkSizeKB = i2);
                }
                var n2 = e3.target.response, r2 = this._range.from + this._receivedLength;
                this._receivedLength += n2.byteLength;
                var s2 = false;
                null != this._contentLength && this._receivedLength < this._contentLength ? this._openSubRange() : s2 = true, this._onDataArrival && this._onDataArrival(n2, r2, this._receivedLength), s2 && (this._status = a.c.kComplete, this._onComplete && this._onComplete(this._range.from, this._range.from + this._receivedLength - 1));
              }
          }, t2.prototype._onXhrError = function(e3) {
            this._status = a.c.kError;
            var t3 = 0, i2 = null;
            if (this._contentLength && this._receivedLength > 0 && this._receivedLength < this._contentLength ? (t3 = a.b.EARLY_EOF, i2 = { code: -1, msg: "RangeLoader meet Early-Eof" }) : (t3 = a.b.EXCEPTION, i2 = { code: -1, msg: e3.constructor.name + " " + e3.type }), !this._onError)
              throw new h.d(i2.msg);
            this._onError(t3, i2);
          }, t2;
        }(a.a), p = function() {
          var e2 = function(t2, i2) {
            return (e2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var i3 in t3)
                t3.hasOwnProperty(i3) && (e3[i3] = t3[i3]);
            })(t2, i2);
          };
          return function(t2, i2) {
            function n2() {
              this.constructor = t2;
            }
            e2(t2, i2), t2.prototype = null === i2 ? Object.create(i2) : (n2.prototype = i2.prototype, new n2());
          };
        }(), m = function(e2) {
          function t2() {
            var t3 = e2.call(this, "websocket-loader") || this;
            return t3.TAG = "WebSocketLoader", t3._needStash = true, t3._ws = null, t3._requestAbort = false, t3._receivedLength = 0, t3;
          }
          return p(t2, e2), t2.isSupported = function() {
            try {
              return void 0 !== self.WebSocket;
            } catch (e3) {
              return false;
            }
          }, t2.prototype.destroy = function() {
            this._ws && this.abort(), e2.prototype.destroy.call(this);
          }, t2.prototype.open = function(e3) {
            try {
              var t3 = this._ws = new self.WebSocket(e3.url);
              t3.binaryType = "arraybuffer", t3.onopen = this._onWebSocketOpen.bind(this), t3.onclose = this._onWebSocketClose.bind(this), t3.onmessage = this._onWebSocketMessage.bind(this), t3.onerror = this._onWebSocketError.bind(this), this._status = a.c.kConnecting;
            } catch (e4) {
              this._status = a.c.kError;
              var i2 = { code: e4.code, msg: e4.message };
              if (!this._onError)
                throw new h.d(i2.msg);
              this._onError(a.b.EXCEPTION, i2);
            }
          }, t2.prototype.abort = function() {
            var e3 = this._ws;
            !e3 || 0 !== e3.readyState && 1 !== e3.readyState || (this._requestAbort = true, e3.close()), this._ws = null, this._status = a.c.kComplete;
          }, t2.prototype._onWebSocketOpen = function(e3) {
            this._status = a.c.kBuffering;
          }, t2.prototype._onWebSocketClose = function(e3) {
            true !== this._requestAbort ? (this._status = a.c.kComplete, this._onComplete && this._onComplete(0, this._receivedLength - 1)) : this._requestAbort = false;
          }, t2.prototype._onWebSocketMessage = function(e3) {
            var t3 = this;
            if (e3.data instanceof ArrayBuffer)
              this._dispatchArrayBuffer(e3.data);
            else if (e3.data instanceof Blob) {
              var i2 = new FileReader();
              i2.onload = function() {
                t3._dispatchArrayBuffer(i2.result);
              }, i2.readAsArrayBuffer(e3.data);
            } else {
              this._status = a.c.kError;
              var n2 = { code: -1, msg: "Unsupported WebSocket message type: " + e3.data.constructor.name };
              if (!this._onError)
                throw new h.d(n2.msg);
              this._onError(a.b.EXCEPTION, n2);
            }
          }, t2.prototype._dispatchArrayBuffer = function(e3) {
            var t3 = e3, i2 = this._receivedLength;
            this._receivedLength += t3.byteLength, this._onDataArrival && this._onDataArrival(t3, i2, this._receivedLength);
          }, t2.prototype._onWebSocketError = function(e3) {
            this._status = a.c.kError;
            var t3 = { code: e3.code, msg: e3.message };
            if (!this._onError)
              throw new h.d(t3.msg);
            this._onError(a.b.EXCEPTION, t3);
          }, t2;
        }(a.a), g = function() {
          function e2(e3) {
            this._zeroStart = e3 || false;
          }
          return e2.prototype.getConfig = function(e3, t2) {
            var i2 = {};
            if (0 !== t2.from || -1 !== t2.to) {
              var n2 = void 0;
              n2 = -1 !== t2.to ? "bytes=" + t2.from.toString() + "-" + t2.to.toString() : "bytes=" + t2.from.toString() + "-", i2.Range = n2;
            } else
              this._zeroStart && (i2.Range = "bytes=0-");
            return { url: e3, headers: i2 };
          }, e2.prototype.removeURLParameters = function(e3) {
            return e3;
          }, e2;
        }(), v = function() {
          function e2(e3, t2) {
            this._startName = e3, this._endName = t2;
          }
          return e2.prototype.getConfig = function(e3, t2) {
            var i2 = e3;
            if (0 !== t2.from || -1 !== t2.to) {
              var n2 = true;
              -1 === i2.indexOf("?") && (i2 += "?", n2 = false), n2 && (i2 += "&"), i2 += this._startName + "=" + t2.from.toString(), -1 !== t2.to && (i2 += "&" + this._endName + "=" + t2.to.toString());
            }
            return { url: i2, headers: {} };
          }, e2.prototype.removeURLParameters = function(e3) {
            var t2 = e3.split("?")[0], i2 = void 0, n2 = e3.indexOf("?");
            -1 !== n2 && (i2 = e3.substring(n2 + 1));
            var r2 = "";
            if (null != i2 && i2.length > 0)
              for (var s2 = i2.split("&"), a2 = 0; a2 < s2.length; a2++) {
                var o2 = s2[a2].split("="), h2 = a2 > 0;
                o2[0] !== this._startName && o2[0] !== this._endName && (h2 && (r2 += "&"), r2 += s2[a2]);
              }
            return 0 === r2.length ? t2 : t2 + "?" + r2;
          }, e2;
        }(), y = function() {
          function e2(e3, t2, i2) {
            this.TAG = "IOController", this._config = t2, this._extraData = i2, this._stashInitialSize = 65536, null != t2.stashInitialSize && t2.stashInitialSize > 0 && (this._stashInitialSize = t2.stashInitialSize), this._stashUsed = 0, this._stashSize = this._stashInitialSize, this._bufferSize = 3145728, this._stashBuffer = new ArrayBuffer(this._bufferSize), this._stashByteStart = 0, this._enableStash = true, false === t2.enableStashBuffer && (this._enableStash = false), this._loader = null, this._loaderClass = null, this._seekHandler = null, this._dataSource = e3, this._isWebSocketURL = /wss?:\/\/(.+?)/.test(e3.url), this._refTotalLength = e3.filesize ? e3.filesize : null, this._totalLength = this._refTotalLength, this._fullRequestFlag = false, this._currentRange = null, this._redirectedURL = null, this._speedNormalized = 0, this._speedSampler = new s(), this._speedNormalizeList = [32, 64, 96, 128, 192, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096], this._isEarlyEofReconnecting = false, this._paused = false, this._resumeFrom = 0, this._onDataArrival = null, this._onSeeked = null, this._onError = null, this._onComplete = null, this._onRedirect = null, this._onRecoveredEarlyEof = null, this._selectSeekHandler(), this._selectLoader(), this._createLoader();
          }
          return e2.prototype.destroy = function() {
            this._loader.isWorking() && this._loader.abort(), this._loader.destroy(), this._loader = null, this._loaderClass = null, this._dataSource = null, this._stashBuffer = null, this._stashUsed = this._stashSize = this._bufferSize = this._stashByteStart = 0, this._currentRange = null, this._speedSampler = null, this._isEarlyEofReconnecting = false, this._onDataArrival = null, this._onSeeked = null, this._onError = null, this._onComplete = null, this._onRedirect = null, this._onRecoveredEarlyEof = null, this._extraData = null;
          }, e2.prototype.isWorking = function() {
            return this._loader && this._loader.isWorking() && !this._paused;
          }, e2.prototype.isPaused = function() {
            return this._paused;
          }, Object.defineProperty(e2.prototype, "status", { get: function() {
            return this._loader.status;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "extraData", { get: function() {
            return this._extraData;
          }, set: function(e3) {
            this._extraData = e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "onDataArrival", { get: function() {
            return this._onDataArrival;
          }, set: function(e3) {
            this._onDataArrival = e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "onSeeked", { get: function() {
            return this._onSeeked;
          }, set: function(e3) {
            this._onSeeked = e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "onError", { get: function() {
            return this._onError;
          }, set: function(e3) {
            this._onError = e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "onComplete", { get: function() {
            return this._onComplete;
          }, set: function(e3) {
            this._onComplete = e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "onRedirect", { get: function() {
            return this._onRedirect;
          }, set: function(e3) {
            this._onRedirect = e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "onRecoveredEarlyEof", { get: function() {
            return this._onRecoveredEarlyEof;
          }, set: function(e3) {
            this._onRecoveredEarlyEof = e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "currentURL", { get: function() {
            return this._dataSource.url;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "hasRedirect", { get: function() {
            return null != this._redirectedURL || null != this._dataSource.redirectedURL;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "currentRedirectedURL", { get: function() {
            return this._redirectedURL || this._dataSource.redirectedURL;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "currentSpeed", { get: function() {
            return this._loaderClass === f ? this._loader.currentSpeed : this._speedSampler.lastSecondKBps;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "loaderType", { get: function() {
            return this._loader.type;
          }, enumerable: false, configurable: true }), e2.prototype._selectSeekHandler = function() {
            var e3 = this._config;
            if ("range" === e3.seekType)
              this._seekHandler = new g(this._config.rangeLoadZeroStart);
            else if ("param" === e3.seekType) {
              var t2 = e3.seekParamStart || "bstart", i2 = e3.seekParamEnd || "bend";
              this._seekHandler = new v(t2, i2);
            } else {
              if ("custom" !== e3.seekType)
                throw new h.b("Invalid seekType in config: " + e3.seekType);
              if ("function" != typeof e3.customSeekHandler)
                throw new h.b("Custom seekType specified in config but invalid customSeekHandler!");
              this._seekHandler = new e3.customSeekHandler();
            }
          }, e2.prototype._selectLoader = function() {
            if (null != this._config.customLoader)
              this._loaderClass = this._config.customLoader;
            else if (this._isWebSocketURL)
              this._loaderClass = m;
            else if (u.isSupported())
              this._loaderClass = u;
            else if (l.isSupported())
              this._loaderClass = l;
            else {
              if (!f.isSupported())
                throw new h.d("Your browser doesn't support xhr with arraybuffer responseType!");
              this._loaderClass = f;
            }
          }, e2.prototype._createLoader = function() {
            this._loader = new this._loaderClass(this._seekHandler, this._config), false === this._loader.needStashBuffer && (this._enableStash = false), this._loader.onContentLengthKnown = this._onContentLengthKnown.bind(this), this._loader.onURLRedirect = this._onURLRedirect.bind(this), this._loader.onDataArrival = this._onLoaderChunkArrival.bind(this), this._loader.onComplete = this._onLoaderComplete.bind(this), this._loader.onError = this._onLoaderError.bind(this);
          }, e2.prototype.open = function(e3) {
            this._currentRange = { from: 0, to: -1 }, e3 && (this._currentRange.from = e3), this._speedSampler.reset(), e3 || (this._fullRequestFlag = true), this._loader.open(this._dataSource, Object.assign({}, this._currentRange));
          }, e2.prototype.abort = function() {
            this._loader.abort(), this._paused && (this._paused = false, this._resumeFrom = 0);
          }, e2.prototype.pause = function() {
            this.isWorking() && (this._loader.abort(), 0 !== this._stashUsed ? (this._resumeFrom = this._stashByteStart, this._currentRange.to = this._stashByteStart - 1) : this._resumeFrom = this._currentRange.to + 1, this._stashUsed = 0, this._stashByteStart = 0, this._paused = true);
          }, e2.prototype.resume = function() {
            if (this._paused) {
              this._paused = false;
              var e3 = this._resumeFrom;
              this._resumeFrom = 0, this._internalSeek(e3, true);
            }
          }, e2.prototype.seek = function(e3) {
            this._paused = false, this._stashUsed = 0, this._stashByteStart = 0, this._internalSeek(e3, true);
          }, e2.prototype._internalSeek = function(e3, t2) {
            this._loader.isWorking() && this._loader.abort(), this._flushStashBuffer(t2), this._loader.destroy(), this._loader = null;
            var i2 = { from: e3, to: -1 };
            this._currentRange = { from: i2.from, to: -1 }, this._speedSampler.reset(), this._stashSize = this._stashInitialSize, this._createLoader(), this._loader.open(this._dataSource, i2), this._onSeeked && this._onSeeked();
          }, e2.prototype.updateUrl = function(e3) {
            if (!e3 || "string" != typeof e3 || 0 === e3.length)
              throw new h.b("Url must be a non-empty string!");
            this._dataSource.url = e3;
          }, e2.prototype._expandBuffer = function(e3) {
            for (var t2 = this._stashSize; t2 + 1048576 < e3; )
              t2 *= 2;
            if ((t2 += 1048576) !== this._bufferSize) {
              var i2 = new ArrayBuffer(t2);
              if (this._stashUsed > 0) {
                var n2 = new Uint8Array(this._stashBuffer, 0, this._stashUsed);
                new Uint8Array(i2, 0, t2).set(n2, 0);
              }
              this._stashBuffer = i2, this._bufferSize = t2;
            }
          }, e2.prototype._normalizeSpeed = function(e3) {
            var t2 = this._speedNormalizeList, i2 = t2.length - 1, n2 = 0, r2 = 0, s2 = i2;
            if (e3 < t2[0])
              return t2[0];
            for (; r2 <= s2; ) {
              if ((n2 = r2 + Math.floor((s2 - r2) / 2)) === i2 || e3 >= t2[n2] && e3 < t2[n2 + 1])
                return t2[n2];
              t2[n2] < e3 ? r2 = n2 + 1 : s2 = n2 - 1;
            }
          }, e2.prototype._adjustStashSize = function(e3) {
            var t2 = 0;
            (t2 = this._config.isLive ? e3 / 8 : e3 < 512 ? e3 : e3 >= 512 && e3 <= 1024 ? Math.floor(1.5 * e3) : 2 * e3) > 8192 && (t2 = 8192);
            var i2 = 1024 * t2 + 1048576;
            this._bufferSize < i2 && this._expandBuffer(i2), this._stashSize = 1024 * t2;
          }, e2.prototype._dispatchChunks = function(e3, t2) {
            return this._currentRange.to = t2 + e3.byteLength - 1, this._onDataArrival(e3, t2);
          }, e2.prototype._onURLRedirect = function(e3) {
            this._redirectedURL = e3, this._onRedirect && this._onRedirect(e3);
          }, e2.prototype._onContentLengthKnown = function(e3) {
            e3 && this._fullRequestFlag && (this._totalLength = e3, this._fullRequestFlag = false);
          }, e2.prototype._onLoaderChunkArrival = function(e3, t2, i2) {
            if (!this._onDataArrival)
              throw new h.a("IOController: No existing consumer (onDataArrival) callback!");
            if (!this._paused) {
              this._isEarlyEofReconnecting && (this._isEarlyEofReconnecting = false, this._onRecoveredEarlyEof && this._onRecoveredEarlyEof()), this._speedSampler.addBytes(e3.byteLength);
              var n2 = this._speedSampler.lastSecondKBps;
              if (0 !== n2) {
                var r2 = this._normalizeSpeed(n2);
                this._speedNormalized !== r2 && (this._speedNormalized = r2, this._adjustStashSize(r2));
              }
              if (this._enableStash)
                if (0 === this._stashUsed && 0 === this._stashByteStart && (this._stashByteStart = t2), this._stashUsed + e3.byteLength <= this._stashSize) {
                  (o2 = new Uint8Array(this._stashBuffer, 0, this._stashSize)).set(new Uint8Array(e3), this._stashUsed), this._stashUsed += e3.byteLength;
                } else {
                  o2 = new Uint8Array(this._stashBuffer, 0, this._bufferSize);
                  if (this._stashUsed > 0) {
                    var s2 = this._stashBuffer.slice(0, this._stashUsed);
                    if ((d2 = this._dispatchChunks(s2, this._stashByteStart)) < s2.byteLength) {
                      if (d2 > 0) {
                        u2 = new Uint8Array(s2, d2);
                        o2.set(u2, 0), this._stashUsed = u2.byteLength, this._stashByteStart += d2;
                      }
                    } else
                      this._stashUsed = 0, this._stashByteStart += d2;
                    this._stashUsed + e3.byteLength > this._bufferSize && (this._expandBuffer(this._stashUsed + e3.byteLength), o2 = new Uint8Array(this._stashBuffer, 0, this._bufferSize)), o2.set(new Uint8Array(e3), this._stashUsed), this._stashUsed += e3.byteLength;
                  } else {
                    if ((d2 = this._dispatchChunks(e3, t2)) < e3.byteLength)
                      (a2 = e3.byteLength - d2) > this._bufferSize && (this._expandBuffer(a2), o2 = new Uint8Array(this._stashBuffer, 0, this._bufferSize)), o2.set(new Uint8Array(e3, d2), 0), this._stashUsed += a2, this._stashByteStart = t2 + d2;
                  }
                }
              else if (0 === this._stashUsed) {
                var a2;
                if ((d2 = this._dispatchChunks(e3, t2)) < e3.byteLength)
                  (a2 = e3.byteLength - d2) > this._bufferSize && this._expandBuffer(a2), (o2 = new Uint8Array(this._stashBuffer, 0, this._bufferSize)).set(new Uint8Array(e3, d2), 0), this._stashUsed += a2, this._stashByteStart = t2 + d2;
              } else {
                var o2, d2;
                if (this._stashUsed + e3.byteLength > this._bufferSize && this._expandBuffer(this._stashUsed + e3.byteLength), (o2 = new Uint8Array(this._stashBuffer, 0, this._bufferSize)).set(new Uint8Array(e3), this._stashUsed), this._stashUsed += e3.byteLength, (d2 = this._dispatchChunks(this._stashBuffer.slice(0, this._stashUsed), this._stashByteStart)) < this._stashUsed && d2 > 0) {
                  var u2 = new Uint8Array(this._stashBuffer, d2);
                  o2.set(u2, 0);
                }
                this._stashUsed -= d2, this._stashByteStart += d2;
              }
            }
          }, e2.prototype._flushStashBuffer = function(e3) {
            if (this._stashUsed > 0) {
              var t2 = this._stashBuffer.slice(0, this._stashUsed), i2 = this._dispatchChunks(t2, this._stashByteStart), n2 = t2.byteLength - i2;
              if (i2 < t2.byteLength) {
                if (!e3) {
                  if (i2 > 0) {
                    var s2 = new Uint8Array(this._stashBuffer, 0, this._bufferSize), a2 = new Uint8Array(t2, i2);
                    s2.set(a2, 0), this._stashUsed = a2.byteLength, this._stashByteStart += i2;
                  }
                  return 0;
                }
                r.a.w(this.TAG, n2 + " bytes unconsumed data remain when flush buffer, dropped");
              }
              return this._stashUsed = 0, this._stashByteStart = 0, n2;
            }
            return 0;
          }, e2.prototype._onLoaderComplete = function(e3, t2) {
            this._flushStashBuffer(true), this._onComplete && this._onComplete(this._extraData);
          }, e2.prototype._onLoaderError = function(e3, t2) {
            switch (r.a.e(this.TAG, "Loader error, code = " + t2.code + ", msg = " + t2.msg), this._flushStashBuffer(false), this._isEarlyEofReconnecting && (this._isEarlyEofReconnecting = false, e3 = a.b.UNRECOVERABLE_EARLY_EOF), e3) {
              case a.b.EARLY_EOF:
                if (!this._config.isLive && this._totalLength) {
                  var i2 = this._currentRange.to + 1;
                  return void (i2 < this._totalLength && (r.a.w(this.TAG, "Connection lost, trying reconnect..."), this._isEarlyEofReconnecting = true, this._internalSeek(i2, false)));
                }
                e3 = a.b.UNRECOVERABLE_EARLY_EOF;
                break;
              case a.b.UNRECOVERABLE_EARLY_EOF:
              case a.b.CONNECTING_TIMEOUT:
              case a.b.HTTP_STATUS_CODE_INVALID:
              case a.b.EXCEPTION:
            }
            if (!this._onError)
              throw new h.d("IOException: " + t2.msg);
            this._onError(e3, t2);
          }, e2;
        }();
        t.a = y;
      }, function(e, t, i) {
        "use strict";
        var n = function() {
          function e2() {
          }
          return e2.install = function() {
            Object.setPrototypeOf = Object.setPrototypeOf || function(e3, t2) {
              return e3.__proto__ = t2, e3;
            }, Object.assign = Object.assign || function(e3) {
              if (null == e3)
                throw new TypeError("Cannot convert undefined or null to object");
              for (var t2 = Object(e3), i2 = 1; i2 < arguments.length; i2++) {
                var n2 = arguments[i2];
                if (null != n2)
                  for (var r in n2)
                    n2.hasOwnProperty(r) && (t2[r] = n2[r]);
              }
              return t2;
            }, "function" != typeof self.Promise && i(15).polyfill();
          }, e2;
        }();
        n.install(), t.a = n;
      }, function(e, t, i) {
        function n(e2) {
          var t2 = {};
          function i2(n3) {
            if (t2[n3])
              return t2[n3].exports;
            var r2 = t2[n3] = { i: n3, l: false, exports: {} };
            return e2[n3].call(r2.exports, r2, r2.exports, i2), r2.l = true, r2.exports;
          }
          i2.m = e2, i2.c = t2, i2.i = function(e3) {
            return e3;
          }, i2.d = function(e3, t3, n3) {
            i2.o(e3, t3) || Object.defineProperty(e3, t3, { configurable: false, enumerable: true, get: n3 });
          }, i2.r = function(e3) {
            Object.defineProperty(e3, "__esModule", { value: true });
          }, i2.n = function(e3) {
            var t3 = e3 && e3.__esModule ? function() {
              return e3.default;
            } : function() {
              return e3;
            };
            return i2.d(t3, "a", t3), t3;
          }, i2.o = function(e3, t3) {
            return Object.prototype.hasOwnProperty.call(e3, t3);
          }, i2.p = "/", i2.oe = function(e3) {
            throw console.error(e3), e3;
          };
          var n2 = i2(i2.s = ENTRY_MODULE);
          return n2.default || n2;
        }
        function r(e2) {
          return (e2 + "").replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
        }
        function s(e2, t2, n2) {
          var s2 = {};
          s2[n2] = [];
          var a2 = t2.toString(), o = a2.match(/^function\s?\w*\(\w+,\s*\w+,\s*(\w+)\)/);
          if (!o)
            return s2;
          for (var h, d = o[1], u = new RegExp("(\\\\n|\\W)" + r(d) + "\\(\\s*(/\\*.*?\\*/)?\\s*.*?([\\.|\\-|\\+|\\w|/|@]+).*?\\)", "g"); h = u.exec(a2); )
            "dll-reference" !== h[3] && s2[n2].push(h[3]);
          for (u = new RegExp("\\(" + r(d) + '\\("(dll-reference\\s([\\.|\\-|\\+|\\w|/|@]+))"\\)\\)\\(\\s*(/\\*.*?\\*/)?\\s*.*?([\\.|\\-|\\+|\\w|/|@]+).*?\\)', "g"); h = u.exec(a2); )
            e2[h[2]] || (s2[n2].push(h[1]), e2[h[2]] = i(h[1]).m), s2[h[2]] = s2[h[2]] || [], s2[h[2]].push(h[4]);
          for (var _, l = Object.keys(s2), c = 0; c < l.length; c++)
            for (var f = 0; f < s2[l[c]].length; f++)
              _ = s2[l[c]][f], isNaN(1 * _) || (s2[l[c]][f] = 1 * s2[l[c]][f]);
          return s2;
        }
        function a(e2) {
          return Object.keys(e2).reduce(function(t2, i2) {
            return t2 || e2[i2].length > 0;
          }, false);
        }
        e.exports = function(e2, t2) {
          t2 = t2 || {};
          var r2 = { main: i.m }, o = t2.all ? { main: Object.keys(r2.main) } : function(e3, t3) {
            for (var i2 = { main: [t3] }, n2 = { main: [] }, r3 = { main: {} }; a(i2); )
              for (var o2 = Object.keys(i2), h2 = 0; h2 < o2.length; h2++) {
                var d2 = o2[h2], u2 = i2[d2].pop();
                if (r3[d2] = r3[d2] || {}, !r3[d2][u2] && e3[d2][u2]) {
                  r3[d2][u2] = true, n2[d2] = n2[d2] || [], n2[d2].push(u2);
                  for (var _2 = s(e3, e3[d2][u2], d2), l = Object.keys(_2), c = 0; c < l.length; c++)
                    i2[l[c]] = i2[l[c]] || [], i2[l[c]] = i2[l[c]].concat(_2[l[c]]);
                }
              }
            return n2;
          }(r2, e2), h = "";
          Object.keys(o).filter(function(e3) {
            return "main" !== e3;
          }).forEach(function(e3) {
            for (var t3 = 0; o[e3][t3]; )
              t3++;
            o[e3].push(t3), r2[e3][t3] = "(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })", h = h + "var " + e3 + " = (" + n.toString().replace("ENTRY_MODULE", JSON.stringify(t3)) + ")({" + o[e3].map(function(t4) {
              return JSON.stringify(t4) + ": " + r2[e3][t4].toString();
            }).join(",") + "});\n";
          }), h = h + "new ((" + n.toString().replace("ENTRY_MODULE", JSON.stringify(e2)) + ")({" + o.main.map(function(e3) {
            return JSON.stringify(e3) + ": " + r2.main[e3].toString();
          }).join(",") + "}))(self);";
          var d = new window.Blob([h], { type: "text/javascript" });
          if (t2.bare)
            return d;
          var u = (window.URL || window.webkitURL || window.mozURL || window.msURL).createObjectURL(d), _ = new window.Worker(u);
          return _.objectURL = u, _;
        };
      }, function(e, t, i) {
        e.exports = i(19).default;
      }, function(e, t, i) {
        (function(t2, i2) {
          var n;
          n = function() {
            "use strict";
            function e2(e3) {
              return "function" == typeof e3;
            }
            var n2 = Array.isArray ? Array.isArray : function(e3) {
              return "[object Array]" === Object.prototype.toString.call(e3);
            }, r = 0, s = void 0, a = void 0, o = function(e3, t3) {
              f[r] = e3, f[r + 1] = t3, 2 === (r += 2) && (a ? a(p) : E());
            }, h = "undefined" != typeof window ? window : void 0, d = h || {}, u = d.MutationObserver || d.WebKitMutationObserver, _ = "undefined" == typeof self && void 0 !== t2 && "[object process]" === {}.toString.call(t2), l = "undefined" != typeof Uint8ClampedArray && "undefined" != typeof importScripts && "undefined" != typeof MessageChannel;
            function c() {
              var e3 = setTimeout;
              return function() {
                return e3(p, 1);
              };
            }
            var f = new Array(1e3);
            function p() {
              for (var e3 = 0; e3 < r; e3 += 2)
                (0, f[e3])(f[e3 + 1]), f[e3] = void 0, f[e3 + 1] = void 0;
              r = 0;
            }
            var m, g, v, y, E = void 0;
            function b(e3, t3) {
              var i3 = this, n3 = new this.constructor(R);
              void 0 === n3[A] && M(n3);
              var r2 = i3._state;
              if (r2) {
                var s2 = arguments[r2 - 1];
                o(function() {
                  return O(r2, n3, s2, i3._result);
                });
              } else
                C(i3, n3, e3, t3);
              return n3;
            }
            function S(e3) {
              if (e3 && "object" == typeof e3 && e3.constructor === this)
                return e3;
              var t3 = new this(R);
              return T(t3, e3), t3;
            }
            _ ? E = function() {
              return t2.nextTick(p);
            } : u ? (g = 0, v = new u(p), y = document.createTextNode(""), v.observe(y, { characterData: true }), E = function() {
              y.data = g = ++g % 2;
            }) : l ? ((m = new MessageChannel()).port1.onmessage = p, E = function() {
              return m.port2.postMessage(0);
            }) : E = void 0 === h ? function() {
              try {
                var e3 = Function("return this")().require("vertx");
                return void 0 !== (s = e3.runOnLoop || e3.runOnContext) ? function() {
                  s(p);
                } : c();
              } catch (e4) {
                return c();
              }
            }() : c();
            var A = Math.random().toString(36).substring(2);
            function R() {
            }
            function L(t3, i3, n3) {
              i3.constructor === t3.constructor && n3 === b && i3.constructor.resolve === S ? function(e3, t4) {
                1 === t4._state ? D(e3, t4._result) : 2 === t4._state ? k(e3, t4._result) : C(t4, void 0, function(t5) {
                  return T(e3, t5);
                }, function(t5) {
                  return k(e3, t5);
                });
              }(t3, i3) : void 0 === n3 ? D(t3, i3) : e2(n3) ? function(e3, t4, i4) {
                o(function(e4) {
                  var n4 = false, r2 = function(e5, t5, i5, n5) {
                    try {
                      e5.call(t5, i5, n5);
                    } catch (e6) {
                      return e6;
                    }
                  }(i4, t4, function(i5) {
                    n4 || (n4 = true, t4 !== i5 ? T(e4, i5) : D(e4, i5));
                  }, function(t5) {
                    n4 || (n4 = true, k(e4, t5));
                  }, e4._label);
                  !n4 && r2 && (n4 = true, k(e4, r2));
                }, e3);
              }(t3, i3, n3) : D(t3, i3);
            }
            function T(e3, t3) {
              if (e3 === t3)
                k(e3, new TypeError("You cannot resolve a promise with itself"));
              else if (r2 = typeof (n3 = t3), null === n3 || "object" !== r2 && "function" !== r2)
                D(e3, t3);
              else {
                var i3 = void 0;
                try {
                  i3 = t3.then;
                } catch (t4) {
                  return void k(e3, t4);
                }
                L(e3, t3, i3);
              }
              var n3, r2;
            }
            function w(e3) {
              e3._onerror && e3._onerror(e3._result), I(e3);
            }
            function D(e3, t3) {
              void 0 === e3._state && (e3._result = t3, e3._state = 1, 0 !== e3._subscribers.length && o(I, e3));
            }
            function k(e3, t3) {
              void 0 === e3._state && (e3._state = 2, e3._result = t3, o(w, e3));
            }
            function C(e3, t3, i3, n3) {
              var r2 = e3._subscribers, s2 = r2.length;
              e3._onerror = null, r2[s2] = t3, r2[s2 + 1] = i3, r2[s2 + 2] = n3, 0 === s2 && e3._state && o(I, e3);
            }
            function I(e3) {
              var t3 = e3._subscribers, i3 = e3._state;
              if (0 !== t3.length) {
                for (var n3 = void 0, r2 = void 0, s2 = e3._result, a2 = 0; a2 < t3.length; a2 += 3)
                  n3 = t3[a2], r2 = t3[a2 + i3], n3 ? O(i3, n3, r2, s2) : r2(s2);
                e3._subscribers.length = 0;
              }
            }
            function O(t3, i3, n3, r2) {
              var s2 = e2(n3), a2 = void 0, o2 = void 0, h2 = true;
              if (s2) {
                try {
                  a2 = n3(r2);
                } catch (e3) {
                  h2 = false, o2 = e3;
                }
                if (i3 === a2)
                  return void k(i3, new TypeError("A promises callback cannot return that same promise."));
              } else
                a2 = r2;
              void 0 !== i3._state || (s2 && h2 ? T(i3, a2) : false === h2 ? k(i3, o2) : 1 === t3 ? D(i3, a2) : 2 === t3 && k(i3, a2));
            }
            var P = 0;
            function M(e3) {
              e3[A] = P++, e3._state = void 0, e3._result = void 0, e3._subscribers = [];
            }
            var x = function() {
              function e3(e4, t3) {
                this._instanceConstructor = e4, this.promise = new e4(R), this.promise[A] || M(this.promise), n2(t3) ? (this.length = t3.length, this._remaining = t3.length, this._result = new Array(this.length), 0 === this.length ? D(this.promise, this._result) : (this.length = this.length || 0, this._enumerate(t3), 0 === this._remaining && D(this.promise, this._result))) : k(this.promise, new Error("Array Methods must be provided an Array"));
              }
              return e3.prototype._enumerate = function(e4) {
                for (var t3 = 0; void 0 === this._state && t3 < e4.length; t3++)
                  this._eachEntry(e4[t3], t3);
              }, e3.prototype._eachEntry = function(e4, t3) {
                var i3 = this._instanceConstructor, n3 = i3.resolve;
                if (n3 === S) {
                  var r2 = void 0, s2 = void 0, a2 = false;
                  try {
                    r2 = e4.then;
                  } catch (e5) {
                    a2 = true, s2 = e5;
                  }
                  if (r2 === b && void 0 !== e4._state)
                    this._settledAt(e4._state, t3, e4._result);
                  else if ("function" != typeof r2)
                    this._remaining--, this._result[t3] = e4;
                  else if (i3 === B) {
                    var o2 = new i3(R);
                    a2 ? k(o2, s2) : L(o2, e4, r2), this._willSettleAt(o2, t3);
                  } else
                    this._willSettleAt(new i3(function(t4) {
                      return t4(e4);
                    }), t3);
                } else
                  this._willSettleAt(n3(e4), t3);
              }, e3.prototype._settledAt = function(e4, t3, i3) {
                var n3 = this.promise;
                void 0 === n3._state && (this._remaining--, 2 === e4 ? k(n3, i3) : this._result[t3] = i3), 0 === this._remaining && D(n3, this._result);
              }, e3.prototype._willSettleAt = function(e4, t3) {
                var i3 = this;
                C(e4, void 0, function(e5) {
                  return i3._settledAt(1, t3, e5);
                }, function(e5) {
                  return i3._settledAt(2, t3, e5);
                });
              }, e3;
            }(), B = function() {
              function t3(e3) {
                this[A] = P++, this._result = this._state = void 0, this._subscribers = [], R !== e3 && ("function" != typeof e3 && function() {
                  throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
                }(), this instanceof t3 ? function(e4, t4) {
                  try {
                    t4(function(t5) {
                      T(e4, t5);
                    }, function(t5) {
                      k(e4, t5);
                    });
                  } catch (t5) {
                    k(e4, t5);
                  }
                }(this, e3) : function() {
                  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
                }());
              }
              return t3.prototype.catch = function(e3) {
                return this.then(null, e3);
              }, t3.prototype.finally = function(t4) {
                var i3 = this.constructor;
                return e2(t4) ? this.then(function(e3) {
                  return i3.resolve(t4()).then(function() {
                    return e3;
                  });
                }, function(e3) {
                  return i3.resolve(t4()).then(function() {
                    throw e3;
                  });
                }) : this.then(t4, t4);
              }, t3;
            }();
            return B.prototype.then = b, B.all = function(e3) {
              return new x(this, e3).promise;
            }, B.race = function(e3) {
              var t3 = this;
              return n2(e3) ? new t3(function(i3, n3) {
                for (var r2 = e3.length, s2 = 0; s2 < r2; s2++)
                  t3.resolve(e3[s2]).then(i3, n3);
              }) : new t3(function(e4, t4) {
                return t4(new TypeError("You must pass an array to race."));
              });
            }, B.resolve = S, B.reject = function(e3) {
              var t3 = new this(R);
              return k(t3, e3), t3;
            }, B._setScheduler = function(e3) {
              a = e3;
            }, B._setAsap = function(e3) {
              o = e3;
            }, B._asap = o, B.polyfill = function() {
              var e3 = void 0;
              if (void 0 !== i2)
                e3 = i2;
              else if ("undefined" != typeof self)
                e3 = self;
              else
                try {
                  e3 = Function("return this")();
                } catch (e4) {
                  throw new Error("polyfill failed because global object is unavailable in this environment");
                }
              var t3 = e3.Promise;
              if (t3) {
                var n3 = null;
                try {
                  n3 = Object.prototype.toString.call(t3.resolve());
                } catch (e4) {
                }
                if ("[object Promise]" === n3 && !t3.cast)
                  return;
              }
              e3.Promise = B;
            }, B.Promise = B, B;
          }, e.exports = n();
        }).call(this, i(16), i(17));
      }, function(e, t) {
        var i, n, r = e.exports = {};
        function s() {
          throw new Error("setTimeout has not been defined");
        }
        function a() {
          throw new Error("clearTimeout has not been defined");
        }
        function o(e2) {
          if (i === setTimeout)
            return setTimeout(e2, 0);
          if ((i === s || !i) && setTimeout)
            return i = setTimeout, setTimeout(e2, 0);
          try {
            return i(e2, 0);
          } catch (t2) {
            try {
              return i.call(null, e2, 0);
            } catch (t3) {
              return i.call(this, e2, 0);
            }
          }
        }
        !function() {
          try {
            i = "function" == typeof setTimeout ? setTimeout : s;
          } catch (e2) {
            i = s;
          }
          try {
            n = "function" == typeof clearTimeout ? clearTimeout : a;
          } catch (e2) {
            n = a;
          }
        }();
        var h, d = [], u = false, _ = -1;
        function l() {
          u && h && (u = false, h.length ? d = h.concat(d) : _ = -1, d.length && c());
        }
        function c() {
          if (!u) {
            var e2 = o(l);
            u = true;
            for (var t2 = d.length; t2; ) {
              for (h = d, d = []; ++_ < t2; )
                h && h[_].run();
              _ = -1, t2 = d.length;
            }
            h = null, u = false, function(e3) {
              if (n === clearTimeout)
                return clearTimeout(e3);
              if ((n === a || !n) && clearTimeout)
                return n = clearTimeout, clearTimeout(e3);
              try {
                n(e3);
              } catch (t3) {
                try {
                  return n.call(null, e3);
                } catch (t4) {
                  return n.call(this, e3);
                }
              }
            }(e2);
          }
        }
        function f(e2, t2) {
          this.fun = e2, this.array = t2;
        }
        function p() {
        }
        r.nextTick = function(e2) {
          var t2 = new Array(arguments.length - 1);
          if (arguments.length > 1)
            for (var i2 = 1; i2 < arguments.length; i2++)
              t2[i2 - 1] = arguments[i2];
          d.push(new f(e2, t2)), 1 !== d.length || u || o(c);
        }, f.prototype.run = function() {
          this.fun.apply(null, this.array);
        }, r.title = "browser", r.browser = true, r.env = {}, r.argv = [], r.version = "", r.versions = {}, r.on = p, r.addListener = p, r.once = p, r.off = p, r.removeListener = p, r.removeAllListeners = p, r.emit = p, r.prependListener = p, r.prependOnceListener = p, r.listeners = function(e2) {
          return [];
        }, r.binding = function(e2) {
          throw new Error("process.binding is not supported");
        }, r.cwd = function() {
          return "/";
        }, r.chdir = function(e2) {
          throw new Error("process.chdir is not supported");
        }, r.umask = function() {
          return 0;
        };
      }, function(e, t) {
        var i;
        i = function() {
          return this;
        }();
        try {
          i = i || new Function("return this")();
        } catch (e2) {
          "object" == typeof window && (i = window);
        }
        e.exports = i;
      }, function(e, t, i) {
        "use strict";
        i.r(t);
        var n = i(9), r = i(12), s = i(10), a = i(1);
        t.default = function(e2) {
          var t2 = null, i2 = function(t3, i3) {
            e2.postMessage({ msg: "logcat_callback", data: { type: t3, logcat: i3 } });
          }.bind(this);
          function o(t3, i3) {
            var n2 = { msg: a.a.INIT_SEGMENT, data: { type: t3, data: i3 } };
            e2.postMessage(n2, [i3.data]);
          }
          function h(t3, i3) {
            var n2 = { msg: a.a.MEDIA_SEGMENT, data: { type: t3, data: i3 } };
            e2.postMessage(n2, [i3.data]);
          }
          function d() {
            var t3 = { msg: a.a.LOADING_COMPLETE };
            e2.postMessage(t3);
          }
          function u() {
            var t3 = { msg: a.a.RECOVERED_EARLY_EOF };
            e2.postMessage(t3);
          }
          function _(t3) {
            var i3 = { msg: a.a.MEDIA_INFO, data: t3 };
            e2.postMessage(i3);
          }
          function l(t3) {
            var i3 = { msg: a.a.METADATA_ARRIVED, data: t3 };
            e2.postMessage(i3);
          }
          function c(t3) {
            var i3 = { msg: a.a.SCRIPTDATA_ARRIVED, data: t3 };
            e2.postMessage(i3);
          }
          function f(t3) {
            var i3 = { msg: a.a.TIMED_ID3_METADATA_ARRIVED, data: t3 };
            e2.postMessage(i3);
          }
          function p(t3) {
            var i3 = { msg: a.a.PES_PRIVATE_DATA_DESCRIPTOR, data: t3 };
            e2.postMessage(i3);
          }
          function m(t3) {
            var i3 = { msg: a.a.PES_PRIVATE_DATA_ARRIVED, data: t3 };
            e2.postMessage(i3);
          }
          function g(t3) {
            var i3 = { msg: a.a.STATISTICS_INFO, data: t3 };
            e2.postMessage(i3);
          }
          function v(t3, i3) {
            e2.postMessage({ msg: a.a.IO_ERROR, data: { type: t3, info: i3 } });
          }
          function y(t3, i3) {
            e2.postMessage({ msg: a.a.DEMUX_ERROR, data: { type: t3, info: i3 } });
          }
          function E(t3) {
            e2.postMessage({ msg: a.a.RECOMMEND_SEEKPOINT, data: t3 });
          }
          r.a.install(), e2.addEventListener("message", function(r2) {
            switch (r2.data.cmd) {
              case "init":
                (t2 = new s.a(r2.data.param[0], r2.data.param[1])).on(a.a.IO_ERROR, v.bind(this)), t2.on(a.a.DEMUX_ERROR, y.bind(this)), t2.on(a.a.INIT_SEGMENT, o.bind(this)), t2.on(a.a.MEDIA_SEGMENT, h.bind(this)), t2.on(a.a.LOADING_COMPLETE, d.bind(this)), t2.on(a.a.RECOVERED_EARLY_EOF, u.bind(this)), t2.on(a.a.MEDIA_INFO, _.bind(this)), t2.on(a.a.METADATA_ARRIVED, l.bind(this)), t2.on(a.a.SCRIPTDATA_ARRIVED, c.bind(this)), t2.on(a.a.TIMED_ID3_METADATA_ARRIVED, f.bind(this)), t2.on(a.a.PES_PRIVATE_DATA_DESCRIPTOR, p.bind(this)), t2.on(a.a.PES_PRIVATE_DATA_ARRIVED, m.bind(this)), t2.on(a.a.STATISTICS_INFO, g.bind(this)), t2.on(a.a.RECOMMEND_SEEKPOINT, E.bind(this));
                break;
              case "destroy":
                t2 && (t2.destroy(), t2 = null), e2.postMessage({ msg: "destroyed" });
                break;
              case "start":
                t2.start();
                break;
              case "stop":
                t2.stop();
                break;
              case "seek":
                t2.seek(r2.data.param);
                break;
              case "pause":
                t2.pause();
                break;
              case "resume":
                t2.resume();
                break;
              case "logging_config":
                var b = r2.data.param;
                n.a.applyConfig(b), true === b.enableCallback ? n.a.addLogListener(i2) : n.a.removeLogListener(i2);
            }
          });
        };
      }, function(e, t, i) {
        "use strict";
        i.r(t);
        var n = i(12), r = i(11), s = { enableWorker: false, enableStashBuffer: true, stashInitialSize: void 0, isLive: false, liveBufferLatencyChasing: false, liveBufferLatencyMaxLatency: 1.5, liveBufferLatencyMinRemain: 0.5, lazyLoad: true, lazyLoadMaxDuration: 180, lazyLoadRecoverDuration: 30, deferLoadAfterSourceOpen: true, autoCleanupMaxBackwardDuration: 180, autoCleanupMinBackwardDuration: 120, statisticsInfoReportInterval: 600, fixAudioTimestampGap: true, accurateSeek: false, seekType: "range", seekParamStart: "bstart", seekParamEnd: "bend", rangeLoadZeroStart: false, customSeekHandler: void 0, reuseRedirectedURL: false, headers: void 0, customLoader: void 0 };
        function a() {
          return Object.assign({}, s);
        }
        var o = function() {
          function e2() {
          }
          return e2.supportMSEH264Playback = function() {
            return window.MediaSource && window.MediaSource.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"');
          }, e2.supportNetworkStreamIO = function() {
            var e3 = new r.a({}, a()), t2 = e3.loaderType;
            return e3.destroy(), "fetch-stream-loader" == t2 || "xhr-moz-chunked-loader" == t2;
          }, e2.getNetworkLoaderTypeName = function() {
            var e3 = new r.a({}, a()), t2 = e3.loaderType;
            return e3.destroy(), t2;
          }, e2.supportNativeMediaPlayback = function(t2) {
            null == e2.videoElement && (e2.videoElement = window.document.createElement("video"));
            var i2 = e2.videoElement.canPlayType(t2);
            return "probably" === i2 || "maybe" == i2;
          }, e2.getFeatureList = function() {
            var t2 = { msePlayback: false, mseLivePlayback: false, networkStreamIO: false, networkLoaderName: "", nativeMP4H264Playback: false, nativeWebmVP8Playback: false, nativeWebmVP9Playback: false };
            return t2.msePlayback = e2.supportMSEH264Playback(), t2.networkStreamIO = e2.supportNetworkStreamIO(), t2.networkLoaderName = e2.getNetworkLoaderTypeName(), t2.mseLivePlayback = t2.msePlayback && t2.networkStreamIO, t2.nativeMP4H264Playback = e2.supportNativeMediaPlayback('video/mp4; codecs="avc1.42001E, mp4a.40.2"'), t2.nativeWebmVP8Playback = e2.supportNativeMediaPlayback('video/webm; codecs="vp8.0, vorbis"'), t2.nativeWebmVP9Playback = e2.supportNativeMediaPlayback('video/webm; codecs="vp9"'), t2;
          }, e2;
        }(), h = i(2), d = i(6), u = i.n(d), _ = i(0), l = i(4), c = { ERROR: "error", LOADING_COMPLETE: "loading_complete", RECOVERED_EARLY_EOF: "recovered_early_eof", MEDIA_INFO: "media_info", METADATA_ARRIVED: "metadata_arrived", SCRIPTDATA_ARRIVED: "scriptdata_arrived", TIMED_ID3_METADATA_ARRIVED: "timed_id3_metadata_arrived", PES_PRIVATE_DATA_DESCRIPTOR: "pes_private_data_descriptor", PES_PRIVATE_DATA_ARRIVED: "pes_private_data_arrived", STATISTICS_INFO: "statistics_info" }, f = i(13), p = i.n(f), m = i(9), g = i(10), v = i(1), y = i(8), E = function() {
          function e2(e3, t2) {
            if (this.TAG = "Transmuxer", this._emitter = new u.a(), t2.enableWorker && "undefined" != typeof Worker)
              try {
                this._worker = p()(18), this._workerDestroying = false, this._worker.addEventListener("message", this._onWorkerMessage.bind(this)), this._worker.postMessage({ cmd: "init", param: [e3, t2] }), this.e = { onLoggingConfigChanged: this._onLoggingConfigChanged.bind(this) }, m.a.registerListener(this.e.onLoggingConfigChanged), this._worker.postMessage({ cmd: "logging_config", param: m.a.getConfig() });
              } catch (i3) {
                _.a.e(this.TAG, "Error while initialize transmuxing worker, fallback to inline transmuxing"), this._worker = null, this._controller = new g.a(e3, t2);
              }
            else
              this._controller = new g.a(e3, t2);
            if (this._controller) {
              var i2 = this._controller;
              i2.on(v.a.IO_ERROR, this._onIOError.bind(this)), i2.on(v.a.DEMUX_ERROR, this._onDemuxError.bind(this)), i2.on(v.a.INIT_SEGMENT, this._onInitSegment.bind(this)), i2.on(v.a.MEDIA_SEGMENT, this._onMediaSegment.bind(this)), i2.on(v.a.LOADING_COMPLETE, this._onLoadingComplete.bind(this)), i2.on(v.a.RECOVERED_EARLY_EOF, this._onRecoveredEarlyEof.bind(this)), i2.on(v.a.MEDIA_INFO, this._onMediaInfo.bind(this)), i2.on(v.a.METADATA_ARRIVED, this._onMetaDataArrived.bind(this)), i2.on(v.a.SCRIPTDATA_ARRIVED, this._onScriptDataArrived.bind(this)), i2.on(v.a.TIMED_ID3_METADATA_ARRIVED, this._onTimedID3MetadataArrived.bind(this)), i2.on(v.a.PES_PRIVATE_DATA_DESCRIPTOR, this._onPESPrivateDataDescriptor.bind(this)), i2.on(v.a.PES_PRIVATE_DATA_ARRIVED, this._onPESPrivateDataArrived.bind(this)), i2.on(v.a.STATISTICS_INFO, this._onStatisticsInfo.bind(this)), i2.on(v.a.RECOMMEND_SEEKPOINT, this._onRecommendSeekpoint.bind(this));
            }
          }
          return e2.prototype.destroy = function() {
            this._worker ? this._workerDestroying || (this._workerDestroying = true, this._worker.postMessage({ cmd: "destroy" }), m.a.removeListener(this.e.onLoggingConfigChanged), this.e = null) : (this._controller.destroy(), this._controller = null), this._emitter.removeAllListeners(), this._emitter = null;
          }, e2.prototype.on = function(e3, t2) {
            this._emitter.addListener(e3, t2);
          }, e2.prototype.off = function(e3, t2) {
            this._emitter.removeListener(e3, t2);
          }, e2.prototype.hasWorker = function() {
            return null != this._worker;
          }, e2.prototype.open = function() {
            this._worker ? this._worker.postMessage({ cmd: "start" }) : this._controller.start();
          }, e2.prototype.close = function() {
            this._worker ? this._worker.postMessage({ cmd: "stop" }) : this._controller.stop();
          }, e2.prototype.seek = function(e3) {
            this._worker ? this._worker.postMessage({ cmd: "seek", param: e3 }) : this._controller.seek(e3);
          }, e2.prototype.pause = function() {
            this._worker ? this._worker.postMessage({ cmd: "pause" }) : this._controller.pause();
          }, e2.prototype.resume = function() {
            this._worker ? this._worker.postMessage({ cmd: "resume" }) : this._controller.resume();
          }, e2.prototype._onInitSegment = function(e3, t2) {
            var i2 = this;
            Promise.resolve().then(function() {
              i2._emitter.emit(v.a.INIT_SEGMENT, e3, t2);
            });
          }, e2.prototype._onMediaSegment = function(e3, t2) {
            var i2 = this;
            Promise.resolve().then(function() {
              i2._emitter.emit(v.a.MEDIA_SEGMENT, e3, t2);
            });
          }, e2.prototype._onLoadingComplete = function() {
            var e3 = this;
            Promise.resolve().then(function() {
              e3._emitter.emit(v.a.LOADING_COMPLETE);
            });
          }, e2.prototype._onRecoveredEarlyEof = function() {
            var e3 = this;
            Promise.resolve().then(function() {
              e3._emitter.emit(v.a.RECOVERED_EARLY_EOF);
            });
          }, e2.prototype._onMediaInfo = function(e3) {
            var t2 = this;
            Promise.resolve().then(function() {
              t2._emitter.emit(v.a.MEDIA_INFO, e3);
            });
          }, e2.prototype._onMetaDataArrived = function(e3) {
            var t2 = this;
            Promise.resolve().then(function() {
              t2._emitter.emit(v.a.METADATA_ARRIVED, e3);
            });
          }, e2.prototype._onScriptDataArrived = function(e3) {
            var t2 = this;
            Promise.resolve().then(function() {
              t2._emitter.emit(v.a.SCRIPTDATA_ARRIVED, e3);
            });
          }, e2.prototype._onTimedID3MetadataArrived = function(e3) {
            var t2 = this;
            Promise.resolve().then(function() {
              t2._emitter.emit(v.a.TIMED_ID3_METADATA_ARRIVED, e3);
            });
          }, e2.prototype._onPESPrivateDataDescriptor = function(e3) {
            var t2 = this;
            Promise.resolve().then(function() {
              t2._emitter.emit(v.a.PES_PRIVATE_DATA_DESCRIPTOR, e3);
            });
          }, e2.prototype._onPESPrivateDataArrived = function(e3) {
            var t2 = this;
            Promise.resolve().then(function() {
              t2._emitter.emit(v.a.PES_PRIVATE_DATA_ARRIVED, e3);
            });
          }, e2.prototype._onStatisticsInfo = function(e3) {
            var t2 = this;
            Promise.resolve().then(function() {
              t2._emitter.emit(v.a.STATISTICS_INFO, e3);
            });
          }, e2.prototype._onIOError = function(e3, t2) {
            var i2 = this;
            Promise.resolve().then(function() {
              i2._emitter.emit(v.a.IO_ERROR, e3, t2);
            });
          }, e2.prototype._onDemuxError = function(e3, t2) {
            var i2 = this;
            Promise.resolve().then(function() {
              i2._emitter.emit(v.a.DEMUX_ERROR, e3, t2);
            });
          }, e2.prototype._onRecommendSeekpoint = function(e3) {
            var t2 = this;
            Promise.resolve().then(function() {
              t2._emitter.emit(v.a.RECOMMEND_SEEKPOINT, e3);
            });
          }, e2.prototype._onLoggingConfigChanged = function(e3) {
            this._worker && this._worker.postMessage({ cmd: "logging_config", param: e3 });
          }, e2.prototype._onWorkerMessage = function(e3) {
            var t2 = e3.data, i2 = t2.data;
            if ("destroyed" === t2.msg || this._workerDestroying)
              return this._workerDestroying = false, this._worker.terminate(), void (this._worker = null);
            switch (t2.msg) {
              case v.a.INIT_SEGMENT:
              case v.a.MEDIA_SEGMENT:
                this._emitter.emit(t2.msg, i2.type, i2.data);
                break;
              case v.a.LOADING_COMPLETE:
              case v.a.RECOVERED_EARLY_EOF:
                this._emitter.emit(t2.msg);
                break;
              case v.a.MEDIA_INFO:
                Object.setPrototypeOf(i2, y.a.prototype), this._emitter.emit(t2.msg, i2);
                break;
              case v.a.METADATA_ARRIVED:
              case v.a.SCRIPTDATA_ARRIVED:
              case v.a.TIMED_ID3_METADATA_ARRIVED:
              case v.a.PES_PRIVATE_DATA_DESCRIPTOR:
              case v.a.PES_PRIVATE_DATA_ARRIVED:
              case v.a.STATISTICS_INFO:
                this._emitter.emit(t2.msg, i2);
                break;
              case v.a.IO_ERROR:
              case v.a.DEMUX_ERROR:
                this._emitter.emit(t2.msg, i2.type, i2.info);
                break;
              case v.a.RECOMMEND_SEEKPOINT:
                this._emitter.emit(t2.msg, i2);
                break;
              case "logcat_callback":
                _.a.emitter.emit("log", i2.type, i2.logcat);
            }
          }, e2;
        }(), b = { ERROR: "error", SOURCE_OPEN: "source_open", UPDATE_END: "update_end", BUFFER_FULL: "buffer_full" }, S = i(7), A = i(3), R = function() {
          function e2(e3) {
            this.TAG = "MSEController", this._config = e3, this._emitter = new u.a(), this._config.isLive && null == this._config.autoCleanupSourceBuffer && (this._config.autoCleanupSourceBuffer = true), this.e = { onSourceOpen: this._onSourceOpen.bind(this), onSourceEnded: this._onSourceEnded.bind(this), onSourceClose: this._onSourceClose.bind(this), onSourceBufferError: this._onSourceBufferError.bind(this), onSourceBufferUpdateEnd: this._onSourceBufferUpdateEnd.bind(this) }, this._mediaSource = null, this._mediaSourceObjectURL = null, this._mediaElement = null, this._isBufferFull = false, this._hasPendingEos = false, this._requireSetMediaDuration = false, this._pendingMediaDuration = 0, this._pendingSourceBufferInit = [], this._mimeTypes = { video: null, audio: null }, this._sourceBuffers = { video: null, audio: null }, this._lastInitSegments = { video: null, audio: null }, this._pendingSegments = { video: [], audio: [] }, this._pendingRemoveRanges = { video: [], audio: [] }, this._idrList = new S.a();
          }
          return e2.prototype.destroy = function() {
            (this._mediaElement || this._mediaSource) && this.detachMediaElement(), this.e = null, this._emitter.removeAllListeners(), this._emitter = null;
          }, e2.prototype.on = function(e3, t2) {
            this._emitter.addListener(e3, t2);
          }, e2.prototype.off = function(e3, t2) {
            this._emitter.removeListener(e3, t2);
          }, e2.prototype.attachMediaElement = function(e3) {
            if (this._mediaSource)
              throw new A.a("MediaSource has been attached to an HTMLMediaElement!");
            var t2 = this._mediaSource = new window.MediaSource();
            t2.addEventListener("sourceopen", this.e.onSourceOpen), t2.addEventListener("sourceended", this.e.onSourceEnded), t2.addEventListener("sourceclose", this.e.onSourceClose), this._mediaElement = e3, this._mediaSourceObjectURL = window.URL.createObjectURL(this._mediaSource), e3.src = this._mediaSourceObjectURL;
          }, e2.prototype.detachMediaElement = function() {
            if (this._mediaSource) {
              var e3 = this._mediaSource;
              for (var t2 in this._sourceBuffers) {
                var i2 = this._pendingSegments[t2];
                i2.splice(0, i2.length), this._pendingSegments[t2] = null, this._pendingRemoveRanges[t2] = null, this._lastInitSegments[t2] = null;
                var n2 = this._sourceBuffers[t2];
                if (n2) {
                  if ("closed" !== e3.readyState) {
                    try {
                      e3.removeSourceBuffer(n2);
                    } catch (e4) {
                      _.a.e(this.TAG, e4.message);
                    }
                    n2.removeEventListener("error", this.e.onSourceBufferError), n2.removeEventListener("updateend", this.e.onSourceBufferUpdateEnd);
                  }
                  this._mimeTypes[t2] = null, this._sourceBuffers[t2] = null;
                }
              }
              if ("open" === e3.readyState)
                try {
                  e3.endOfStream();
                } catch (e4) {
                  _.a.e(this.TAG, e4.message);
                }
              e3.removeEventListener("sourceopen", this.e.onSourceOpen), e3.removeEventListener("sourceended", this.e.onSourceEnded), e3.removeEventListener("sourceclose", this.e.onSourceClose), this._pendingSourceBufferInit = [], this._isBufferFull = false, this._idrList.clear(), this._mediaSource = null;
            }
            this._mediaElement && (this._mediaElement.src = "", this._mediaElement.removeAttribute("src"), this._mediaElement = null), this._mediaSourceObjectURL && (window.URL.revokeObjectURL(this._mediaSourceObjectURL), this._mediaSourceObjectURL = null);
          }, e2.prototype.appendInitSegment = function(e3, t2) {
            if (!this._mediaSource || "open" !== this._mediaSource.readyState)
              return this._pendingSourceBufferInit.push(e3), void this._pendingSegments[e3.type].push(e3);
            var i2 = e3, n2 = "" + i2.container;
            i2.codec && i2.codec.length > 0 && (n2 += ";codecs=" + i2.codec);
            var r2 = false;
            if (_.a.v(this.TAG, "Received Initialization Segment, mimeType: " + n2), this._lastInitSegments[i2.type] = i2, n2 !== this._mimeTypes[i2.type]) {
              if (this._mimeTypes[i2.type])
                _.a.v(this.TAG, "Notice: " + i2.type + " mimeType changed, origin: " + this._mimeTypes[i2.type] + ", target: " + n2);
              else {
                r2 = true;
                try {
                  var s2 = this._sourceBuffers[i2.type] = this._mediaSource.addSourceBuffer(n2);
                  s2.addEventListener("error", this.e.onSourceBufferError), s2.addEventListener("updateend", this.e.onSourceBufferUpdateEnd);
                } catch (e4) {
                  return _.a.e(this.TAG, e4.message), void this._emitter.emit(b.ERROR, { code: e4.code, msg: e4.message });
                }
              }
              this._mimeTypes[i2.type] = n2;
            }
            t2 || this._pendingSegments[i2.type].push(i2), r2 || this._sourceBuffers[i2.type] && !this._sourceBuffers[i2.type].updating && this._doAppendSegments(), l.a.safari && "audio/mpeg" === i2.container && i2.mediaDuration > 0 && (this._requireSetMediaDuration = true, this._pendingMediaDuration = i2.mediaDuration / 1e3, this._updateMediaSourceDuration());
          }, e2.prototype.appendMediaSegment = function(e3) {
            var t2 = e3;
            this._pendingSegments[t2.type].push(t2), this._config.autoCleanupSourceBuffer && this._needCleanupSourceBuffer() && this._doCleanupSourceBuffer();
            var i2 = this._sourceBuffers[t2.type];
            !i2 || i2.updating || this._hasPendingRemoveRanges() || this._doAppendSegments();
          }, e2.prototype.seek = function(e3) {
            for (var t2 in this._sourceBuffers)
              if (this._sourceBuffers[t2]) {
                var i2 = this._sourceBuffers[t2];
                if ("open" === this._mediaSource.readyState)
                  try {
                    i2.abort();
                  } catch (e4) {
                    _.a.e(this.TAG, e4.message);
                  }
                this._idrList.clear();
                var n2 = this._pendingSegments[t2];
                if (n2.splice(0, n2.length), "closed" !== this._mediaSource.readyState) {
                  for (var r2 = 0; r2 < i2.buffered.length; r2++) {
                    var s2 = i2.buffered.start(r2), a2 = i2.buffered.end(r2);
                    this._pendingRemoveRanges[t2].push({ start: s2, end: a2 });
                  }
                  if (i2.updating || this._doRemoveRanges(), l.a.safari) {
                    var o2 = this._lastInitSegments[t2];
                    o2 && (this._pendingSegments[t2].push(o2), i2.updating || this._doAppendSegments());
                  }
                }
              }
          }, e2.prototype.endOfStream = function() {
            var e3 = this._mediaSource, t2 = this._sourceBuffers;
            e3 && "open" === e3.readyState ? t2.video && t2.video.updating || t2.audio && t2.audio.updating ? this._hasPendingEos = true : (this._hasPendingEos = false, e3.endOfStream()) : e3 && "closed" === e3.readyState && this._hasPendingSegments() && (this._hasPendingEos = true);
          }, e2.prototype.getNearestKeyframe = function(e3) {
            return this._idrList.getLastSyncPointBeforeDts(e3);
          }, e2.prototype._needCleanupSourceBuffer = function() {
            if (!this._config.autoCleanupSourceBuffer)
              return false;
            var e3 = this._mediaElement.currentTime;
            for (var t2 in this._sourceBuffers) {
              var i2 = this._sourceBuffers[t2];
              if (i2) {
                var n2 = i2.buffered;
                if (n2.length >= 1 && e3 - n2.start(0) >= this._config.autoCleanupMaxBackwardDuration)
                  return true;
              }
            }
            return false;
          }, e2.prototype._doCleanupSourceBuffer = function() {
            var e3 = this._mediaElement.currentTime;
            for (var t2 in this._sourceBuffers) {
              var i2 = this._sourceBuffers[t2];
              if (i2) {
                for (var n2 = i2.buffered, r2 = false, s2 = 0; s2 < n2.length; s2++) {
                  var a2 = n2.start(s2), o2 = n2.end(s2);
                  if (a2 <= e3 && e3 < o2 + 3) {
                    if (e3 - a2 >= this._config.autoCleanupMaxBackwardDuration) {
                      r2 = true;
                      var h2 = e3 - this._config.autoCleanupMinBackwardDuration;
                      this._pendingRemoveRanges[t2].push({ start: a2, end: h2 });
                    }
                  } else
                    o2 < e3 && (r2 = true, this._pendingRemoveRanges[t2].push({ start: a2, end: o2 }));
                }
                r2 && !i2.updating && this._doRemoveRanges();
              }
            }
          }, e2.prototype._updateMediaSourceDuration = function() {
            var e3 = this._sourceBuffers;
            if (0 !== this._mediaElement.readyState && "open" === this._mediaSource.readyState && !(e3.video && e3.video.updating || e3.audio && e3.audio.updating)) {
              var t2 = this._mediaSource.duration, i2 = this._pendingMediaDuration;
              i2 > 0 && (isNaN(t2) || i2 > t2) && (_.a.v(this.TAG, "Update MediaSource duration from " + t2 + " to " + i2), this._mediaSource.duration = i2), this._requireSetMediaDuration = false, this._pendingMediaDuration = 0;
            }
          }, e2.prototype._doRemoveRanges = function() {
            for (var e3 in this._pendingRemoveRanges)
              if (this._sourceBuffers[e3] && !this._sourceBuffers[e3].updating)
                for (var t2 = this._sourceBuffers[e3], i2 = this._pendingRemoveRanges[e3]; i2.length && !t2.updating; ) {
                  var n2 = i2.shift();
                  t2.remove(n2.start, n2.end);
                }
          }, e2.prototype._doAppendSegments = function() {
            var e3 = this._pendingSegments;
            for (var t2 in e3)
              if (this._sourceBuffers[t2] && !this._sourceBuffers[t2].updating && e3[t2].length > 0) {
                var i2 = e3[t2].shift();
                if (i2.timestampOffset) {
                  var n2 = this._sourceBuffers[t2].timestampOffset, r2 = i2.timestampOffset / 1e3;
                  Math.abs(n2 - r2) > 0.1 && (_.a.v(this.TAG, "Update MPEG audio timestampOffset from " + n2 + " to " + r2), this._sourceBuffers[t2].timestampOffset = r2), delete i2.timestampOffset;
                }
                if (!i2.data || 0 === i2.data.byteLength)
                  continue;
                try {
                  this._sourceBuffers[t2].appendBuffer(i2.data), this._isBufferFull = false, "video" === t2 && i2.hasOwnProperty("info") && this._idrList.appendArray(i2.info.syncPoints);
                } catch (e4) {
                  this._pendingSegments[t2].unshift(i2), 22 === e4.code ? (this._isBufferFull || this._emitter.emit(b.BUFFER_FULL), this._isBufferFull = true) : (_.a.e(this.TAG, e4.message), this._emitter.emit(b.ERROR, { code: e4.code, msg: e4.message }));
                }
              }
          }, e2.prototype._onSourceOpen = function() {
            if (_.a.v(this.TAG, "MediaSource onSourceOpen"), this._mediaSource.removeEventListener("sourceopen", this.e.onSourceOpen), this._pendingSourceBufferInit.length > 0)
              for (var e3 = this._pendingSourceBufferInit; e3.length; ) {
                var t2 = e3.shift();
                this.appendInitSegment(t2, true);
              }
            this._hasPendingSegments() && this._doAppendSegments(), this._emitter.emit(b.SOURCE_OPEN);
          }, e2.prototype._onSourceEnded = function() {
            _.a.v(this.TAG, "MediaSource onSourceEnded");
          }, e2.prototype._onSourceClose = function() {
            _.a.v(this.TAG, "MediaSource onSourceClose"), this._mediaSource && null != this.e && (this._mediaSource.removeEventListener("sourceopen", this.e.onSourceOpen), this._mediaSource.removeEventListener("sourceended", this.e.onSourceEnded), this._mediaSource.removeEventListener("sourceclose", this.e.onSourceClose));
          }, e2.prototype._hasPendingSegments = function() {
            var e3 = this._pendingSegments;
            return e3.video.length > 0 || e3.audio.length > 0;
          }, e2.prototype._hasPendingRemoveRanges = function() {
            var e3 = this._pendingRemoveRanges;
            return e3.video.length > 0 || e3.audio.length > 0;
          }, e2.prototype._onSourceBufferUpdateEnd = function() {
            this._requireSetMediaDuration ? this._updateMediaSourceDuration() : this._hasPendingRemoveRanges() ? this._doRemoveRanges() : this._hasPendingSegments() ? this._doAppendSegments() : this._hasPendingEos && this.endOfStream(), this._emitter.emit(b.UPDATE_END);
          }, e2.prototype._onSourceBufferError = function(e3) {
            _.a.e(this.TAG, "SourceBuffer Error: " + e3);
          }, e2;
        }(), L = i(5), T = { NETWORK_ERROR: "NetworkError", MEDIA_ERROR: "MediaError", OTHER_ERROR: "OtherError" }, w = { NETWORK_EXCEPTION: h.b.EXCEPTION, NETWORK_STATUS_CODE_INVALID: h.b.HTTP_STATUS_CODE_INVALID, NETWORK_TIMEOUT: h.b.CONNECTING_TIMEOUT, NETWORK_UNRECOVERABLE_EARLY_EOF: h.b.UNRECOVERABLE_EARLY_EOF, MEDIA_MSE_ERROR: "MediaMSEError", MEDIA_FORMAT_ERROR: L.a.FORMAT_ERROR, MEDIA_FORMAT_UNSUPPORTED: L.a.FORMAT_UNSUPPORTED, MEDIA_CODEC_UNSUPPORTED: L.a.CODEC_UNSUPPORTED }, D = function() {
          function e2(e3, t2) {
            this.TAG = "MSEPlayer", this._type = "MSEPlayer", this._emitter = new u.a(), this._config = a(), "object" == typeof t2 && Object.assign(this._config, t2);
            var i2 = e3.type.toLowerCase();
            if ("mse" !== i2 && "mpegts" !== i2 && "m2ts" !== i2 && "flv" !== i2)
              throw new A.b("MSEPlayer requires an mpegts/m2ts/flv MediaDataSource input!");
            true === e3.isLive && (this._config.isLive = true), this.e = { onvLoadedMetadata: this._onvLoadedMetadata.bind(this), onvSeeking: this._onvSeeking.bind(this), onvCanPlay: this._onvCanPlay.bind(this), onvStalled: this._onvStalled.bind(this), onvProgress: this._onvProgress.bind(this) }, self.performance && self.performance.now ? this._now = self.performance.now.bind(self.performance) : this._now = Date.now, this._pendingSeekTime = null, this._requestSetTime = false, this._seekpointRecord = null, this._progressChecker = null, this._mediaDataSource = e3, this._mediaElement = null, this._msectl = null, this._transmuxer = null, this._mseSourceOpened = false, this._hasPendingLoad = false, this._receivedCanPlay = false, this._mediaInfo = null, this._statisticsInfo = null;
            var n2 = l.a.chrome && (l.a.version.major < 50 || 50 === l.a.version.major && l.a.version.build < 2661);
            this._alwaysSeekKeyframe = !!(n2 || l.a.msedge || l.a.msie), this._alwaysSeekKeyframe && (this._config.accurateSeek = false);
          }
          return e2.prototype.destroy = function() {
            null != this._progressChecker && (window.clearInterval(this._progressChecker), this._progressChecker = null), this._transmuxer && this.unload(), this._mediaElement && this.detachMediaElement(), this.e = null, this._mediaDataSource = null, this._emitter.removeAllListeners(), this._emitter = null;
          }, e2.prototype.on = function(e3, t2) {
            var i2 = this;
            e3 === c.MEDIA_INFO ? null != this._mediaInfo && Promise.resolve().then(function() {
              i2._emitter.emit(c.MEDIA_INFO, i2.mediaInfo);
            }) : e3 === c.STATISTICS_INFO && null != this._statisticsInfo && Promise.resolve().then(function() {
              i2._emitter.emit(c.STATISTICS_INFO, i2.statisticsInfo);
            }), this._emitter.addListener(e3, t2);
          }, e2.prototype.off = function(e3, t2) {
            this._emitter.removeListener(e3, t2);
          }, e2.prototype.attachMediaElement = function(e3) {
            var t2 = this;
            if (this._mediaElement = e3, e3.addEventListener("loadedmetadata", this.e.onvLoadedMetadata), e3.addEventListener("seeking", this.e.onvSeeking), e3.addEventListener("canplay", this.e.onvCanPlay), e3.addEventListener("stalled", this.e.onvStalled), e3.addEventListener("progress", this.e.onvProgress), this._msectl = new R(this._config), this._msectl.on(b.UPDATE_END, this._onmseUpdateEnd.bind(this)), this._msectl.on(b.BUFFER_FULL, this._onmseBufferFull.bind(this)), this._msectl.on(b.SOURCE_OPEN, function() {
              t2._mseSourceOpened = true, t2._hasPendingLoad && (t2._hasPendingLoad = false, t2.load());
            }), this._msectl.on(b.ERROR, function(e4) {
              t2._emitter.emit(c.ERROR, T.MEDIA_ERROR, w.MEDIA_MSE_ERROR, e4);
            }), this._msectl.attachMediaElement(e3), null != this._pendingSeekTime)
              try {
                e3.currentTime = this._pendingSeekTime, this._pendingSeekTime = null;
              } catch (e4) {
              }
          }, e2.prototype.detachMediaElement = function() {
            this._mediaElement && (this._msectl.detachMediaElement(), this._mediaElement.removeEventListener("loadedmetadata", this.e.onvLoadedMetadata), this._mediaElement.removeEventListener("seeking", this.e.onvSeeking), this._mediaElement.removeEventListener("canplay", this.e.onvCanPlay), this._mediaElement.removeEventListener("stalled", this.e.onvStalled), this._mediaElement.removeEventListener("progress", this.e.onvProgress), this._mediaElement = null), this._msectl && (this._msectl.destroy(), this._msectl = null);
          }, e2.prototype.load = function() {
            var e3 = this;
            if (!this._mediaElement)
              throw new A.a("HTMLMediaElement must be attached before load()!");
            if (this._transmuxer)
              throw new A.a("MSEPlayer.load() has been called, please call unload() first!");
            this._hasPendingLoad || (this._config.deferLoadAfterSourceOpen && false === this._mseSourceOpened ? this._hasPendingLoad = true : (this._mediaElement.readyState > 0 && (this._requestSetTime = true, this._mediaElement.currentTime = 0), this._transmuxer = new E(this._mediaDataSource, this._config), this._transmuxer.on(v.a.INIT_SEGMENT, function(t2, i2) {
              e3._msectl.appendInitSegment(i2);
            }), this._transmuxer.on(v.a.MEDIA_SEGMENT, function(t2, i2) {
              if (e3._msectl.appendMediaSegment(i2), e3._config.lazyLoad && !e3._config.isLive) {
                var n2 = e3._mediaElement.currentTime;
                i2.info.endDts >= 1e3 * (n2 + e3._config.lazyLoadMaxDuration) && null == e3._progressChecker && (_.a.v(e3.TAG, "Maximum buffering duration exceeded, suspend transmuxing task"), e3._suspendTransmuxer());
              }
            }), this._transmuxer.on(v.a.LOADING_COMPLETE, function() {
              e3._msectl.endOfStream(), e3._emitter.emit(c.LOADING_COMPLETE);
            }), this._transmuxer.on(v.a.RECOVERED_EARLY_EOF, function() {
              e3._emitter.emit(c.RECOVERED_EARLY_EOF);
            }), this._transmuxer.on(v.a.IO_ERROR, function(t2, i2) {
              e3._emitter.emit(c.ERROR, T.NETWORK_ERROR, t2, i2);
            }), this._transmuxer.on(v.a.DEMUX_ERROR, function(t2, i2) {
              e3._emitter.emit(c.ERROR, T.MEDIA_ERROR, t2, { code: -1, msg: i2 });
            }), this._transmuxer.on(v.a.MEDIA_INFO, function(t2) {
              e3._mediaInfo = t2, e3._emitter.emit(c.MEDIA_INFO, Object.assign({}, t2));
            }), this._transmuxer.on(v.a.METADATA_ARRIVED, function(t2) {
              e3._emitter.emit(c.METADATA_ARRIVED, t2);
            }), this._transmuxer.on(v.a.SCRIPTDATA_ARRIVED, function(t2) {
              e3._emitter.emit(c.SCRIPTDATA_ARRIVED, t2);
            }), this._transmuxer.on(v.a.TIMED_ID3_METADATA_ARRIVED, function(t2) {
              e3._emitter.emit(c.TIMED_ID3_METADATA_ARRIVED, t2);
            }), this._transmuxer.on(v.a.PES_PRIVATE_DATA_DESCRIPTOR, function(t2) {
              e3._emitter.emit(c.PES_PRIVATE_DATA_DESCRIPTOR, t2);
            }), this._transmuxer.on(v.a.PES_PRIVATE_DATA_ARRIVED, function(t2) {
              e3._emitter.emit(c.PES_PRIVATE_DATA_ARRIVED, t2);
            }), this._transmuxer.on(v.a.STATISTICS_INFO, function(t2) {
              e3._statisticsInfo = e3._fillStatisticsInfo(t2), e3._emitter.emit(c.STATISTICS_INFO, Object.assign({}, e3._statisticsInfo));
            }), this._transmuxer.on(v.a.RECOMMEND_SEEKPOINT, function(t2) {
              e3._mediaElement && !e3._config.accurateSeek && (e3._requestSetTime = true, e3._mediaElement.currentTime = t2 / 1e3);
            }), this._transmuxer.open()));
          }, e2.prototype.unload = function() {
            this._mediaElement && this._mediaElement.pause(), this._msectl && this._msectl.seek(0), this._transmuxer && (this._transmuxer.close(), this._transmuxer.destroy(), this._transmuxer = null);
          }, e2.prototype.play = function() {
            return this._mediaElement.play();
          }, e2.prototype.pause = function() {
            this._mediaElement.pause();
          }, Object.defineProperty(e2.prototype, "type", { get: function() {
            return this._type;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "buffered", { get: function() {
            return this._mediaElement.buffered;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "duration", { get: function() {
            return this._mediaElement.duration;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "volume", { get: function() {
            return this._mediaElement.volume;
          }, set: function(e3) {
            this._mediaElement.volume = e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "muted", { get: function() {
            return this._mediaElement.muted;
          }, set: function(e3) {
            this._mediaElement.muted = e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "currentTime", { get: function() {
            return this._mediaElement ? this._mediaElement.currentTime : 0;
          }, set: function(e3) {
            this._mediaElement ? this._internalSeek(e3) : this._pendingSeekTime = e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "mediaInfo", { get: function() {
            return Object.assign({}, this._mediaInfo);
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "statisticsInfo", { get: function() {
            return null == this._statisticsInfo && (this._statisticsInfo = {}), this._statisticsInfo = this._fillStatisticsInfo(this._statisticsInfo), Object.assign({}, this._statisticsInfo);
          }, enumerable: false, configurable: true }), e2.prototype._fillStatisticsInfo = function(e3) {
            if (e3.playerType = this._type, !(this._mediaElement instanceof HTMLVideoElement))
              return e3;
            var t2 = true, i2 = 0, n2 = 0;
            if (this._mediaElement.getVideoPlaybackQuality) {
              var r2 = this._mediaElement.getVideoPlaybackQuality();
              i2 = r2.totalVideoFrames, n2 = r2.droppedVideoFrames;
            } else
              null != this._mediaElement.webkitDecodedFrameCount ? (i2 = this._mediaElement.webkitDecodedFrameCount, n2 = this._mediaElement.webkitDroppedFrameCount) : t2 = false;
            return t2 && (e3.decodedFrames = i2, e3.droppedFrames = n2), e3;
          }, e2.prototype._onmseUpdateEnd = function() {
            var e3 = this._mediaElement.buffered, t2 = this._mediaElement.currentTime;
            if (this._config.isLive && this._config.liveBufferLatencyChasing && e3.length > 0 && !this._mediaElement.paused) {
              var i2 = e3.end(e3.length - 1);
              if (i2 > this._config.liveBufferLatencyMaxLatency && i2 - t2 > this._config.liveBufferLatencyMaxLatency) {
                var n2 = i2 - this._config.liveBufferLatencyMinRemain;
                this.currentTime = n2;
              }
            }
            if (this._config.lazyLoad && !this._config.isLive) {
              for (var r2 = 0, s2 = 0; s2 < e3.length; s2++) {
                var a2 = e3.start(s2), o2 = e3.end(s2);
                if (a2 <= t2 && t2 < o2) {
                  a2, r2 = o2;
                  break;
                }
              }
              r2 >= t2 + this._config.lazyLoadMaxDuration && null == this._progressChecker && (_.a.v(this.TAG, "Maximum buffering duration exceeded, suspend transmuxing task"), this._suspendTransmuxer());
            }
          }, e2.prototype._onmseBufferFull = function() {
            _.a.v(this.TAG, "MSE SourceBuffer is full, suspend transmuxing task"), null == this._progressChecker && this._suspendTransmuxer();
          }, e2.prototype._suspendTransmuxer = function() {
            this._transmuxer && (this._transmuxer.pause(), null == this._progressChecker && (this._progressChecker = window.setInterval(this._checkProgressAndResume.bind(this), 1e3)));
          }, e2.prototype._checkProgressAndResume = function() {
            for (var e3 = this._mediaElement.currentTime, t2 = this._mediaElement.buffered, i2 = false, n2 = 0; n2 < t2.length; n2++) {
              var r2 = t2.start(n2), s2 = t2.end(n2);
              if (e3 >= r2 && e3 < s2) {
                e3 >= s2 - this._config.lazyLoadRecoverDuration && (i2 = true);
                break;
              }
            }
            i2 && (window.clearInterval(this._progressChecker), this._progressChecker = null, i2 && (_.a.v(this.TAG, "Continue loading from paused position"), this._transmuxer.resume()));
          }, e2.prototype._isTimepointBuffered = function(e3) {
            for (var t2 = this._mediaElement.buffered, i2 = 0; i2 < t2.length; i2++) {
              var n2 = t2.start(i2), r2 = t2.end(i2);
              if (e3 >= n2 && e3 < r2)
                return true;
            }
            return false;
          }, e2.prototype._internalSeek = function(e3) {
            var t2 = this._isTimepointBuffered(e3), i2 = false, n2 = 0;
            if (e3 < 1 && this._mediaElement.buffered.length > 0) {
              var r2 = this._mediaElement.buffered.start(0);
              (r2 < 1 && e3 < r2 || l.a.safari) && (i2 = true, n2 = l.a.safari ? 0.1 : r2);
            }
            if (i2)
              this._requestSetTime = true, this._mediaElement.currentTime = n2;
            else if (t2) {
              if (this._alwaysSeekKeyframe) {
                var s2 = this._msectl.getNearestKeyframe(Math.floor(1e3 * e3));
                this._requestSetTime = true, this._mediaElement.currentTime = null != s2 ? s2.dts / 1e3 : e3;
              } else
                this._requestSetTime = true, this._mediaElement.currentTime = e3;
              null != this._progressChecker && this._checkProgressAndResume();
            } else
              null != this._progressChecker && (window.clearInterval(this._progressChecker), this._progressChecker = null), this._msectl.seek(e3), this._transmuxer.seek(Math.floor(1e3 * e3)), this._config.accurateSeek && (this._requestSetTime = true, this._mediaElement.currentTime = e3);
          }, e2.prototype._checkAndApplyUnbufferedSeekpoint = function() {
            if (this._seekpointRecord)
              if (this._seekpointRecord.recordTime <= this._now() - 100) {
                var e3 = this._mediaElement.currentTime;
                this._seekpointRecord = null, this._isTimepointBuffered(e3) || (null != this._progressChecker && (window.clearTimeout(this._progressChecker), this._progressChecker = null), this._msectl.seek(e3), this._transmuxer.seek(Math.floor(1e3 * e3)), this._config.accurateSeek && (this._requestSetTime = true, this._mediaElement.currentTime = e3));
              } else
                window.setTimeout(this._checkAndApplyUnbufferedSeekpoint.bind(this), 50);
          }, e2.prototype._checkAndResumeStuckPlayback = function(e3) {
            var t2 = this._mediaElement;
            if (e3 || !this._receivedCanPlay || t2.readyState < 2) {
              var i2 = t2.buffered;
              i2.length > 0 && t2.currentTime < i2.start(0) && (_.a.w(this.TAG, "Playback seems stuck at " + t2.currentTime + ", seek to " + i2.start(0)), this._requestSetTime = true, this._mediaElement.currentTime = i2.start(0), this._mediaElement.removeEventListener("progress", this.e.onvProgress));
            } else
              this._mediaElement.removeEventListener("progress", this.e.onvProgress);
          }, e2.prototype._onvLoadedMetadata = function(e3) {
            null != this._pendingSeekTime && (this._mediaElement.currentTime = this._pendingSeekTime, this._pendingSeekTime = null);
          }, e2.prototype._onvSeeking = function(e3) {
            var t2 = this._mediaElement.currentTime, i2 = this._mediaElement.buffered;
            if (this._requestSetTime)
              this._requestSetTime = false;
            else {
              if (t2 < 1 && i2.length > 0) {
                var n2 = i2.start(0);
                if (n2 < 1 && t2 < n2 || l.a.safari)
                  return this._requestSetTime = true, void (this._mediaElement.currentTime = l.a.safari ? 0.1 : n2);
              }
              if (this._isTimepointBuffered(t2)) {
                if (this._alwaysSeekKeyframe) {
                  var r2 = this._msectl.getNearestKeyframe(Math.floor(1e3 * t2));
                  null != r2 && (this._requestSetTime = true, this._mediaElement.currentTime = r2.dts / 1e3);
                }
                null != this._progressChecker && this._checkProgressAndResume();
              } else
                this._seekpointRecord = { seekPoint: t2, recordTime: this._now() }, window.setTimeout(this._checkAndApplyUnbufferedSeekpoint.bind(this), 50);
            }
          }, e2.prototype._onvCanPlay = function(e3) {
            this._receivedCanPlay = true, this._mediaElement.removeEventListener("canplay", this.e.onvCanPlay);
          }, e2.prototype._onvStalled = function(e3) {
            this._checkAndResumeStuckPlayback(true);
          }, e2.prototype._onvProgress = function(e3) {
            this._checkAndResumeStuckPlayback();
          }, e2;
        }(), k = function() {
          function e2(e3, t2) {
            this.TAG = "NativePlayer", this._type = "NativePlayer", this._emitter = new u.a(), this._config = a(), "object" == typeof t2 && Object.assign(this._config, t2);
            var i2 = e3.type.toLowerCase();
            if ("mse" === i2 || "mpegts" === i2 || "m2ts" === i2 || "flv" === i2)
              throw new A.b("NativePlayer does't support mse/mpegts/m2ts/flv MediaDataSource input!");
            if (e3.hasOwnProperty("segments"))
              throw new A.b("NativePlayer(" + e3.type + ") doesn't support multipart playback!");
            this.e = { onvLoadedMetadata: this._onvLoadedMetadata.bind(this) }, this._pendingSeekTime = null, this._statisticsReporter = null, this._mediaDataSource = e3, this._mediaElement = null;
          }
          return e2.prototype.destroy = function() {
            this._mediaElement && (this.unload(), this.detachMediaElement()), this.e = null, this._mediaDataSource = null, this._emitter.removeAllListeners(), this._emitter = null;
          }, e2.prototype.on = function(e3, t2) {
            var i2 = this;
            e3 === c.MEDIA_INFO ? null != this._mediaElement && 0 !== this._mediaElement.readyState && Promise.resolve().then(function() {
              i2._emitter.emit(c.MEDIA_INFO, i2.mediaInfo);
            }) : e3 === c.STATISTICS_INFO && null != this._mediaElement && 0 !== this._mediaElement.readyState && Promise.resolve().then(function() {
              i2._emitter.emit(c.STATISTICS_INFO, i2.statisticsInfo);
            }), this._emitter.addListener(e3, t2);
          }, e2.prototype.off = function(e3, t2) {
            this._emitter.removeListener(e3, t2);
          }, e2.prototype.attachMediaElement = function(e3) {
            if (this._mediaElement = e3, e3.addEventListener("loadedmetadata", this.e.onvLoadedMetadata), null != this._pendingSeekTime)
              try {
                e3.currentTime = this._pendingSeekTime, this._pendingSeekTime = null;
              } catch (e4) {
              }
          }, e2.prototype.detachMediaElement = function() {
            this._mediaElement && (this._mediaElement.src = "", this._mediaElement.removeAttribute("src"), this._mediaElement.removeEventListener("loadedmetadata", this.e.onvLoadedMetadata), this._mediaElement = null), null != this._statisticsReporter && (window.clearInterval(this._statisticsReporter), this._statisticsReporter = null);
          }, e2.prototype.load = function() {
            if (!this._mediaElement)
              throw new A.a("HTMLMediaElement must be attached before load()!");
            this._mediaElement.src = this._mediaDataSource.url, this._mediaElement.readyState > 0 && (this._mediaElement.currentTime = 0), this._mediaElement.preload = "auto", this._mediaElement.load(), this._statisticsReporter = window.setInterval(this._reportStatisticsInfo.bind(this), this._config.statisticsInfoReportInterval);
          }, e2.prototype.unload = function() {
            this._mediaElement && (this._mediaElement.src = "", this._mediaElement.removeAttribute("src")), null != this._statisticsReporter && (window.clearInterval(this._statisticsReporter), this._statisticsReporter = null);
          }, e2.prototype.play = function() {
            return this._mediaElement.play();
          }, e2.prototype.pause = function() {
            this._mediaElement.pause();
          }, Object.defineProperty(e2.prototype, "type", { get: function() {
            return this._type;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "buffered", { get: function() {
            return this._mediaElement.buffered;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "duration", { get: function() {
            return this._mediaElement.duration;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "volume", { get: function() {
            return this._mediaElement.volume;
          }, set: function(e3) {
            this._mediaElement.volume = e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "muted", { get: function() {
            return this._mediaElement.muted;
          }, set: function(e3) {
            this._mediaElement.muted = e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "currentTime", { get: function() {
            return this._mediaElement ? this._mediaElement.currentTime : 0;
          }, set: function(e3) {
            this._mediaElement ? this._mediaElement.currentTime = e3 : this._pendingSeekTime = e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "mediaInfo", { get: function() {
            var e3 = { mimeType: (this._mediaElement instanceof HTMLAudioElement ? "audio/" : "video/") + this._mediaDataSource.type };
            return this._mediaElement && (e3.duration = Math.floor(1e3 * this._mediaElement.duration), this._mediaElement instanceof HTMLVideoElement && (e3.width = this._mediaElement.videoWidth, e3.height = this._mediaElement.videoHeight)), e3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "statisticsInfo", { get: function() {
            var e3 = { playerType: this._type, url: this._mediaDataSource.url };
            if (!(this._mediaElement instanceof HTMLVideoElement))
              return e3;
            var t2 = true, i2 = 0, n2 = 0;
            if (this._mediaElement.getVideoPlaybackQuality) {
              var r2 = this._mediaElement.getVideoPlaybackQuality();
              i2 = r2.totalVideoFrames, n2 = r2.droppedVideoFrames;
            } else
              null != this._mediaElement.webkitDecodedFrameCount ? (i2 = this._mediaElement.webkitDecodedFrameCount, n2 = this._mediaElement.webkitDroppedFrameCount) : t2 = false;
            return t2 && (e3.decodedFrames = i2, e3.droppedFrames = n2), e3;
          }, enumerable: false, configurable: true }), e2.prototype._onvLoadedMetadata = function(e3) {
            null != this._pendingSeekTime && (this._mediaElement.currentTime = this._pendingSeekTime, this._pendingSeekTime = null), this._emitter.emit(c.MEDIA_INFO, this.mediaInfo);
          }, e2.prototype._reportStatisticsInfo = function() {
            this._emitter.emit(c.STATISTICS_INFO, this.statisticsInfo);
          }, e2;
        }();
        n.a.install();
        var C = { createPlayer: function(e2, t2) {
          var i2 = e2;
          if (null == i2 || "object" != typeof i2)
            throw new A.b("MediaDataSource must be an javascript object!");
          if (!i2.hasOwnProperty("type"))
            throw new A.b("MediaDataSource must has type field to indicate video file type!");
          switch (i2.type) {
            case "mse":
            case "mpegts":
            case "m2ts":
            case "flv":
              return new D(i2, t2);
            default:
              return new k(i2, t2);
          }
        }, isSupported: function() {
          return o.supportMSEH264Playback();
        }, getFeatureList: function() {
          return o.getFeatureList();
        } };
        C.BaseLoader = h.a, C.LoaderStatus = h.c, C.LoaderErrors = h.b, C.Events = c, C.ErrorTypes = T, C.ErrorDetails = w, C.MSEPlayer = D, C.NativePlayer = k, C.LoggingControl = m.a, Object.defineProperty(C, "version", { enumerable: true, get: function() {
          return "1.6.10";
        } });
        t.default = C;
      }]);
    });
  }
});
export default require_mpegts();
/*! Bundled license information:

mpegts.js/dist/mpegts.js:
  (*!
   * @overview es6-promise - a tiny implementation of Promises/A+.
   * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
   * @license   Licensed under MIT license
   *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
   * @version   v4.2.8+1e68dce6
   *)
*/
//# sourceMappingURL=mpegts-EOH6P6MN.js.map
