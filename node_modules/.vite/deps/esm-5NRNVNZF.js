import {
  __assign,
  __awaiter,
  __extends,
  __generator,
  __read,
  __spreadArray,
  __values
} from "./chunk-N4FYP52A.js";
import "./chunk-LFBQMW2U.js";

// node_modules/office-viewer/esm/OpenXML.js
function getVal(element) {
  return element.getAttribute("w:val") || element.getAttribute("w14:val") || element.getAttribute("val") || "";
}
function getValNumber(element) {
  return parseInt(getVal(element), 10);
}
function normalizeBoolean(value, defaultValue) {
  if (defaultValue === void 0) {
    defaultValue = false;
  }
  if (typeof value === "boolean") {
    return value;
  }
  if (typeof value === "string") {
    switch (value) {
      case "1":
        return true;
      case "0":
        return false;
      case "on":
        return true;
      case "off":
        return false;
      case "true":
        return true;
      case "false":
        return false;
    }
    if (typeof value === "number") {
      return value !== 0;
    }
  }
  return defaultValue;
}
function getValBoolean(element, defaultValue) {
  if (defaultValue === void 0) {
    defaultValue = true;
  }
  return normalizeBoolean(getVal(element), defaultValue);
}
function getAttrBoolean(element, attr, defaultValue) {
  if (defaultValue === void 0) {
    defaultValue = true;
  }
  return normalizeBoolean(element.getAttribute(attr), defaultValue);
}
function getAttrNumber(element, attr, defaultValue) {
  if (defaultValue === void 0) {
    defaultValue = 0;
  }
  var value = element.getAttribute(attr);
  if (value) {
    return parseInt(value, 10);
  } else {
    return defaultValue;
  }
}
function getAttrPercent(element, attr) {
  var value = element.getAttribute(attr);
  if (value) {
    if (value.endsWith("%")) {
      return parseInt(value, 10) / 100;
    }
    var num = parseInt(value, 10);
    return num / 1e5;
  }
  return 1;
}
function getValHex(element) {
  return parseInt(getVal(element) || "0", 16);
}

// node_modules/office-viewer/esm/openxml/word/Font.js
function deobfuscate(data, guidKey) {
  var len = 16;
  var trimmed = guidKey.replace(/{|}|-/g, "");
  var numbers = new Array(len);
  for (var i = 0; i < len; i++)
    numbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);
  for (var i = 0; i < 32; i++)
    data[i] = data[i] ^ numbers[i % len];
  return data;
}
var Font = (
  /** @class */
  function() {
    function Font2() {
    }
    Font2.fromXML = function(word, element) {
      var e_1, _a2;
      var font = new Font2();
      font.name = element.getAttribute("w:name") || "";
      try {
        for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
          var child = _c.value;
          var tagName = child.tagName;
          switch (tagName) {
            case "w:family":
              font.family = getVal(child);
              break;
            case "w:altName":
              font.altName = getVal(child);
              break;
            case "w:panose1":
              break;
            case "w:charset":
            case "w:sig":
            case "w:pitch":
              break;
            case "w:embedRegular":
            case "w:embedBold":
            case "w:embedItalic":
            case "w:embedBoldItalic":
            case "w:embedSystemFonts":
            case "w:embedTrueTypeFonts":
              var id = child.getAttribute("r:id") || "";
              var fontKey = child.getAttribute("w:fontKey") || "";
              var fontURL = word.loadFont(id, fontKey);
              if (fontURL) {
                font.url = fontURL;
              }
              break;
            default:
              console.warn("parse Font: Unknown key", tagName, child);
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b2.return))
            _a2.call(_b2);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return font;
    };
    return Font2;
  }()
);

// node_modules/office-viewer/esm/openxml/word/FontTable.js
var FontTable = (
  /** @class */
  function() {
    function FontTable2() {
      this.fonts = [];
    }
    FontTable2.fromXML = function(word, doc) {
      var e_1, _a2;
      var fonts = Array.from(doc.getElementsByTagName("w:font"));
      var fontTable = new FontTable2();
      try {
        for (var fonts_1 = __values(fonts), fonts_1_1 = fonts_1.next(); !fonts_1_1.done; fonts_1_1 = fonts_1.next()) {
          var child = fonts_1_1.value;
          var font = Font.fromXML(word, child);
          fontTable.fonts.push(font);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (fonts_1_1 && !fonts_1_1.done && (_a2 = fonts_1.return))
            _a2.call(fonts_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return fontTable;
    };
    return FontTable2;
  }()
);

// node_modules/office-viewer/esm/parse/parseRelationship.js
function parseRelationship(element, part) {
  var id = element.getAttribute("Id") || "";
  var type = element.getAttribute("Type") || "";
  var target = element.getAttribute("Target") || "";
  var targetMode = element.getAttribute("TargetMode") || "";
  return {
    id,
    type,
    target,
    targetMode,
    part
  };
}
function parseRelationships(element, part) {
  var e_1, _a2;
  var relationships = {};
  var relationshipElements = element.getElementsByTagName("Relationship");
  try {
    for (var relationshipElements_1 = __values(relationshipElements), relationshipElements_1_1 = relationshipElements_1.next(); !relationshipElements_1_1.done; relationshipElements_1_1 = relationshipElements_1.next()) {
      var relationshipElement = relationshipElements_1_1.value;
      var relationship = parseRelationship(relationshipElement, part);
      relationships[relationship.id] = relationship;
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (relationshipElements_1_1 && !relationshipElements_1_1.done && (_a2 = relationshipElements_1.return))
        _a2.call(relationshipElements_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return relationships;
}

// node_modules/office-viewer/esm/openxml/ContentType.js
function parseContentType(doc) {
  var e_1, _a2;
  var types = { overrides: [] };
  var overrides = [].slice.call(doc.getElementsByTagName("Override"));
  try {
    for (var overrides_1 = __values(overrides), overrides_1_1 = overrides_1.next(); !overrides_1_1.done; overrides_1_1 = overrides_1.next()) {
      var item = overrides_1_1.value;
      types.overrides.push({
        partName: item.getAttribute("PartName"),
        contentType: item.getAttribute("ContentType")
      });
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (overrides_1_1 && !overrides_1_1.done && (_a2 = overrides_1.return))
        _a2.call(overrides_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return types;
}

// node_modules/office-viewer/esm/parse/parseSize.js
var ptToPx = 1.3333;
var LengthUsage = {
  Dxa: { mul: ptToPx * 0.05, unit: "px" },
  Emu: { mul: ptToPx * 1 / 12700, unit: "px" },
  FontSize: { mul: ptToPx * 0.5, unit: "px" },
  Border: { mul: ptToPx * 0.125, unit: "px" },
  Point: { mul: ptToPx * 1, unit: "px" },
  Percent: { mul: 0.02, unit: "%" },
  LineHeight: { mul: 1 / 240, unit: "" },
  VmlEmu: { mul: 1 / 12700, unit: "" }
};
function convertLength(val, usage) {
  if (usage === void 0) {
    usage = LengthUsage.Dxa;
  }
  if (val == null || /.+(p[xt]|[%])$/.test(val)) {
    return val;
  }
  return "".concat((parseInt(val) * usage.mul).toFixed(2)).concat(usage.unit);
}
function convertAngle(val) {
  return val ? parseInt(val) / 6e4 : 0;
}
function parseSize(element, attrName, usage) {
  if (usage === void 0) {
    usage = LengthUsage.Dxa;
  }
  var size = element.getAttribute(attrName);
  if (size) {
    return convertLength(String(size), usage);
  }
  return "";
}

// node_modules/office-viewer/esm/parse/parseCellMargin.js
function parseCellMargin(element, style) {
  var e_1, _a2;
  try {
    for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var child = _c.value;
      var tagName = child.tagName;
      switch (tagName) {
        case "w:left":
        case "w:start":
          style["padding-left"] = parseSize(child, "w:w");
          break;
        case "w:right":
        case "w:end":
          style["padding-right"] = parseSize(child, "w:w");
          break;
        case "w:top":
          style["padding-top"] = parseSize(child, "w:w");
          break;
        case "w:bottom":
          style["padding-bottom"] = parseSize(child, "w:w");
          break;
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
}

// node_modules/office-viewer/esm/parse/colorNameMap.js
var PresetColorMap = {
  aliceBlue: "#f0f8ff",
  antiqueWhite: "#faebd7",
  aqua: "#00ffff",
  aquamarine: "#7fffd4",
  azure: "#f0ffff",
  beige: "#f5f5dc",
  bisque: "#ffe4c4",
  black: "#000000",
  blanchedAlmond: "#ffebcd",
  blue: "#0000ff",
  blueViolet: "#8a2be2",
  brown: "#a52a2a",
  burlyWood: "#deb887",
  cadetBlue: "#5f9ea0",
  chartreuse: "#7fff00",
  chocolate: "#d2691e",
  coral: "#ff7f50",
  cornflowerBlue: "#6495ed",
  cornsilk: "#fff8dc",
  crimson: "#dc143c",
  cyan: "#00FFFF",
  darkBlue: "#00008B",
  dkBlue: "#00008B",
  darkCyan: "#008B8B",
  dkCyan: "#008B8B",
  darkGoldenrod: "#b8860b",
  dkGoldenrod: "#b8860b",
  darkGray: "#A9A9A9",
  dkGray: "#A9A9A9",
  darkGreen: "#006400",
  dkGreen: "#006400",
  darkGrey: "#a9a9a9",
  dkGrey: "#a9a9a9",
  darkKhaki: "#bdb76b",
  dkKhaki: "#bdb76b",
  darkMagenta: "#800080",
  dkMagenta: "#800080",
  darkOliveGreen: "#556b2f",
  dkOliveGreen: "#556b2f",
  darkOrange: "#ff8c00",
  dkOrange: "#ff8c00",
  darkOrchid: "#9932cc",
  dkOrchid: "#9932cc",
  darkRed: "#8B0000",
  dkRed: "#8B0000",
  darkSalmon: "#e9967a",
  dkSalmon: "#e9967a",
  darkSeaGreen: "#8fbc8f",
  dkSeaGreen: "#8fbc8f",
  darkSlateBlue: "#483d8b",
  dkSlateBlue: "#483d8b",
  darkSlateGray: "#2f4f4f",
  dkSlateGray: "#2f4f4f",
  darkSlateGrey: "#2f4f4f",
  dkSlateGrey: "#2f4f4f",
  darkTurquoise: "#00ced1",
  dkTurquoise: "#00ced1",
  darkViolet: "#9400d3",
  dkViolet: "#9400d3",
  darkYellow: "#808000",
  deepPink: "#ff1493",
  deepSkyBlue: "#00bfff",
  dimGray: "#696969",
  dimGrey: "#696969",
  dodgerBlue: "#1e90ff",
  firebrick: "#b22222",
  floralWhite: "#fffaf0",
  forestGreen: "#228b22",
  fuchsia: "#ff00ff",
  gainsboro: "#dcdcdc",
  ghostWhite: "#f8f8ff",
  gold: "#ffd700",
  goldenrod: "#daa520",
  gray: "#808080",
  green: "#008000",
  greenYellow: "#adff2f",
  grey: "#808080",
  honeydew: "#f0fff0",
  hotPink: "#ff69b4",
  indianRed: "#cd5c5c",
  indigo: "#4b0082",
  ivory: "#fffff0",
  khaki: "#f0e68c",
  lavender: "#e6e6fa",
  lavenderBlush: "#fff0f5",
  lawnGreen: "#7cfc00",
  lemonChiffon: "#fffacd",
  lightBlue: "#add8e6",
  ltBlue: "#add8e6",
  lightCoral: "#f08080",
  ltCoral: "#f08080",
  lightCyan: "#e0ffff",
  ltCyan: "#e0ffff",
  lightGoldenrodYellow: "#fafad2",
  ltGoldenrodYellow: "#fafad2",
  lightGray: "#D3D3D3",
  ltGray: "#D3D3D3",
  lightGreen: "#90ee90",
  ltGreen: "#90ee90",
  lightGrey: "#d3d3d3",
  ltGrey: "#d3d3d3",
  lightPink: "#ffb6c1",
  ltPink: "#ffb6c1",
  lightSalmon: "#ffa07a",
  ltSalmon: "#ffa07a",
  lightSeaGreen: "#20b2aa",
  ltSeaGreen: "#20b2aa",
  lightSkyBlue: "#87cefa",
  ltSkyBlue: "#87cefa",
  lightSlateGray: "#778899",
  ltSlateGray: "#778899",
  lightSlateGrey: "#778899",
  ltSlateGrey: "#778899",
  lightSteelBlue: "#b0c4de",
  ltSteelBlue: "#b0c4de",
  lightYellow: "#ffffe0",
  ltYellow: "#ffffe0",
  lime: "#00ff00",
  limeGreen: "#32cd32",
  linen: "#faf0e6",
  magenta: "#FF00FF",
  maroon: "#800000",
  mediumAquamarine: "#66cdaa",
  medAquamarine: "#66cdaa",
  mediumBlue: "#0000cd",
  medBlue: "#0000cd",
  mediumOrchid: "#ba55d3",
  medOrchid: "#ba55d3",
  mediumPurple: "#9370db",
  medPurple: "#9370db",
  mediumSeaGreen: "#3cb371",
  medSeaGreen: "#3cb371",
  mediumSlateBlue: "#7b68ee",
  medSlateBlue: "#7b68ee",
  mediumSpringGreen: "#00fa9a",
  medSpringGreen: "#00fa9a",
  mediumTurquoise: "#48d1cc",
  medTurquoise: "#48d1cc",
  mediumVioletRed: "#c71585",
  medVioletRed: "#c71585",
  midnightBlue: "#191970",
  mintCream: "#f5fffa",
  mistyRose: "#ffe4e1",
  moccasin: "#ffe4b5",
  navajoWhite: "#ffdead",
  navy: "#000080",
  none: "transparent",
  oldLace: "#fdf5e6",
  olive: "#808000",
  oliveDrab: "#6b8e23",
  orange: "#ffa500",
  orangeRed: "#ff4500",
  orchid: "#da70d6",
  paleGoldenrod: "#eee8aa",
  paleGreen: "#98fb98",
  paleTurquoise: "#afeeee",
  paleVioletRed: "#db7093",
  papayaWhip: "#ffefd5",
  peachPuff: "#ffdab9",
  peru: "#cd853f",
  pink: "#ffc0cb",
  plum: "#dda0dd",
  powderBlue: "#b0e0e6",
  purple: "#800080",
  rebeccaPurple: "#663399",
  red: "#ff0000",
  rosyBrown: "#bc8f8f",
  royalBlue: "#4169e1",
  saddleBrown: "#8b4513",
  salmon: "#fa8072",
  sandyBrown: "#f4a460",
  seaGreen: "#2e8b57",
  seaShell: "#fff5ee",
  sienna: "#a0522d",
  silver: "#c0c0c0",
  skyBlue: "#87ceeb",
  slateBlue: "#6a5acd",
  slateGray: "#708090",
  slateGrey: "#708090",
  snow: "#fffafa",
  springGreen: "#00ff7f",
  steelBlue: "#4682b4",
  tan: "#d2b48c",
  teal: "#008080",
  thistle: "#d8bfd8",
  tomato: "#ff6347",
  turquoise: "#40e0d0",
  violet: "#ee82ee",
  wheat: "#f5deb3",
  white: "#ffffff",
  whiteSmoke: "#f5f5f5",
  yellow: "#ffff00",
  yellowGreen: "#9acd32"
};

// node_modules/office-viewer/esm/parse/parseColor.js
var cssColors = ["black", "blue", "green", "red", "white", "yellow"];
function parseColorAttr(word, element, attrName, autoColor) {
  if (attrName === void 0) {
    attrName = "w:color";
  }
  if (autoColor === void 0) {
    autoColor = "black";
  }
  var color = element.getAttribute(attrName);
  if (color) {
    if (color == "auto") {
      return autoColor;
    } else if (cssColors.includes(color)) {
      return color;
    } else if (color in PresetColorMap) {
      return PresetColorMap[color];
    }
    return "#".concat(color);
  }
  var themeColor = element.getAttribute("w:themeColor");
  return themeColor ? word.getThemeColor(themeColor) : "";
}
function parseShdColor(word, element) {
  var color = element.getAttribute("w:fill") || "";
  var val = getVal(element);
  if (color === "auto") {
    color = "FFFFFF";
  }
  if (color.length === 6) {
    switch (val) {
      case "clear":
        return "#".concat(color);
      case "pct10":
        return colorPercent(color, 0.1);
      case "pct12":
        return colorPercent(color, 0.125);
      case "pct15":
        return colorPercent(color, 0.15);
      case "pct20":
        return colorPercent(color, 0.2);
      case "pct25":
        return colorPercent(color, 0.25);
      case "pct30":
        return colorPercent(color, 0.3);
      case "pct35":
        return colorPercent(color, 0.35);
      case "pct37":
        return colorPercent(color, 0.375);
      case "pct40":
        return colorPercent(color, 0.4);
      case "pct45":
        return colorPercent(color, 0.45);
      case "pct5":
        return colorPercent(color, 0.05);
      case "pct50":
        return colorPercent(color, 0.5);
      case "pct55":
        return colorPercent(color, 0.55);
      case "pct60":
        return colorPercent(color, 0.6);
      case "pct65":
        return colorPercent(color, 0.65);
      case "pct70":
        return colorPercent(color, 0.7);
      case "pct75":
        return colorPercent(color, 0.75);
      case "pct80":
        return colorPercent(color, 0.8);
      case "pct85":
        return colorPercent(color, 0.85);
      case "pct87":
        return colorPercent(color, 0.87);
      case "pct90":
        return colorPercent(color, 0.9);
      case "pct95":
        return colorPercent(color, 0.95);
      default:
        console.warn("unsupport shd val", val);
        return "#".concat(color);
    }
  }
  return "";
}
function colorPercent(color, percent) {
  if (color === "FFFFFF") {
    color = "000000";
  }
  var r = parseInt(color.substring(0, 2), 16);
  var g = parseInt(color.substring(2, 4), 16);
  var b = parseInt(color.substring(4, 6), 16);
  return "rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", ").concat(percent, ")");
}
function parseColor(word, element) {
  return parseColorAttr(word, element, "w:val");
}

// node_modules/office-viewer/esm/parse/parseBorder.js
var DEFAULT_BORDER_COLOR = "black";
function parseBorder(word, element) {
  var type = getVal(element);
  if (type === "nil" || type === "none") {
    return "none";
  }
  var color = parseColorAttr(word, element);
  var size = parseSize(element, "w:sz", LengthUsage.Border);
  return "".concat(size, " solid ").concat(color == "auto" ? DEFAULT_BORDER_COLOR : color);
}
function parseBorders(word, element, style) {
  var e_1, _a2;
  try {
    for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var child = _c.value;
      var tagName = child.tagName;
      switch (tagName) {
        case "w:start":
        case "w:left":
          style["border-left"] = parseBorder(word, child);
          break;
        case "w:end":
        case "w:right":
          style["border-right"] = parseBorder(word, child);
          break;
        case "w:top":
          style["border-top"] = parseBorder(word, child);
          break;
        case "w:bottom":
          style["border-bottom"] = parseBorder(word, child);
          break;
        default:
          break;
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
}

// node_modules/office-viewer/esm/parse/parseTextDirection.js
function parseTextDirection(element, style) {
  var val = element.getAttribute("w:val");
  switch (val) {
    case "lr":
    case "lrV":
    case "btLr":
    case "lrTb":
    case "lrTbV":
    case "tbLrV":
      style["direction"] = "ltr";
      break;
    case "rl":
    case "rlV":
    case "tbRl":
    case "tbRlV":
      style["direction"] = "rtl";
      break;
  }
}

// node_modules/office-viewer/esm/parse/parseTblWidth.js
function parseTblWidth(element) {
  var type = element.getAttribute("w:type");
  if (!type || type === "dxa") {
    return parseSize(element, "w:w");
  } else if (type === "pct") {
    return parseSize(element, "w:w", LengthUsage.Percent);
  } else if (type === "auto") {
    return "auto";
  } else {
    console.warn("parseTblWidth: ignore type", type, element);
  }
  return "";
}

// node_modules/office-viewer/esm/parse/parseInsideBorders.js
function parseInsideBorders(word, element) {
  var H;
  var insideH = element.getElementsByTagName("w:insideH").item(0);
  if (insideH) {
    H = parseBorder(word, insideH);
  }
  var V;
  var insideV = element.getElementsByTagName("w:insideV").item(0);
  if (insideV) {
    V = parseBorder(word, insideV);
  }
  return {
    H,
    V
  };
}

// node_modules/office-viewer/esm/parse/parseTcPr.js
function parseVAlign(element, style) {
  var vAlign = getVal(element);
  switch (vAlign) {
    case "bottom":
      style["vertical-align"] = "bottom";
      break;
    case "center":
      style["vertical-align"] = "middle";
      break;
    case "top":
      style["vertical-align"] = "top";
      break;
  }
}
function parseTblCellSpacing(element, style) {
  var width = parseTblWidth(element);
  if (width) {
    style["cell-spacing"] = width;
  }
}
function parseTcW(element, style) {
  var width = parseTblWidth(element);
  if (width) {
    style.width = width;
  }
}
function parseTcPr(word, element) {
  var e_1, _a2;
  var properties = {};
  var style = {};
  properties.cssStyle = style;
  try {
    for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var child = _c.value;
      var tagName = child.tagName;
      switch (tagName) {
        case "w:tcMar":
          parseCellMargin(child, style);
          break;
        case "w:shd":
          style["background-color"] = parseShdColor(word, child);
          break;
        case "w:tcW":
          parseTcW(child, style);
          break;
        case "w:noWrap":
          var noWrap = getValBoolean(child);
          if (noWrap) {
            style["white-space"] = "nowrap";
          }
          break;
        case "w:vAlign":
          parseVAlign(child, style);
          break;
        case "w:tcBorders":
          parseBorders(word, child, style);
          properties.insideBorder = parseInsideBorders(word, child);
          break;
        case "w:gridSpan":
          properties.gridSpan = getValNumber(child);
          break;
        case "w:vMerge":
          properties.vMerge = getVal(child) || "continue";
          break;
        case "w:textDirection":
          parseTextDirection(child, style);
          break;
        case "w:cnfStyle":
          break;
        case "w:hideMark":
          properties.hideMark = getValBoolean(child, true);
          break;
        default:
          console.warn("parseTcPr: ignore", tagName, child);
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return properties;
}

// node_modules/office-viewer/esm/util/color.js
function rgbToHsl(r, g, b) {
  r /= 255, g /= 255, b /= 255;
  var max2 = Math.max(r, g, b), min = Math.min(r, g, b);
  var h = 0, s, l = (max2 + min) / 2;
  if (max2 == min) {
    h = s = 0;
  } else {
    var d = max2 - min;
    s = l > 0.5 ? d / (2 - max2 - min) : d / (max2 + min);
    switch (max2) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
        break;
    }
    h /= 6;
  }
  return { h, s, l };
}
function hue2rgb(p, q, t) {
  if (t < 0)
    t += 1;
  if (t > 1)
    t -= 1;
  if (t < 1 / 6)
    return p + (q - p) * 6 * t;
  if (t < 1 / 2)
    return q;
  if (t < 2 / 3)
    return p + (q - p) * (2 / 3 - t) * 6;
  return p;
}
function hslToRgb(h, s, l) {
  if (h > 1) {
    h = h / 360;
  }
  var r, g, b;
  if (s == 0) {
    r = g = b = l;
  } else {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    r = hue2rgb(p, q, h + 1 / 3);
    g = hue2rgb(p, q, h);
    b = hue2rgb(p, q, h - 1 / 3);
  }
  return { r: r * 255, g: g * 255, b: b * 255 };
}
function pad2(c) {
  return c.length == 1 ? "0" + c : "" + c;
}
function rgbToHex(r, g, b) {
  var hex = [
    pad2(Math.round(r).toString(16)),
    pad2(Math.round(g).toString(16)),
    pad2(Math.round(b).toString(16))
  ];
  return hex.join("").toUpperCase();
}
function toValidColor(c) {
  return Math.min(Math.max(c, 0), 255);
}
var Color = (
  /** @class */
  function() {
    function Color2(input) {
      var m = input.match(/^#?([0-9a-f]{6})$/i);
      if (m) {
        this.r = parseInt(m[1].substring(0, 2), 16);
        this.g = parseInt(m[1].substring(2, 4), 16);
        this.b = parseInt(m[1].substring(4, 6), 16);
        this.isValid = true;
      }
    }
    Color2.fromHSL = function(h, s, l) {
      var rgb = hslToRgb(h, s, l);
      return new Color2("#".concat(rgbToHex(rgb.r, rgb.g, rgb.b)));
    };
    Color2.fromRGB = function(r, g, b) {
      var rgb = rgbToHex(r, g, b);
      return new Color2("#".concat(rgb));
    };
    Color2.prototype.lum = function(l) {
      return this.changeHsl(l, "l", "set");
    };
    Color2.prototype.lumMod = function(l) {
      return this.changeHsl(l, "l", "mod");
    };
    Color2.prototype.lumOff = function(l) {
      return this.changeHsl(l, "l", "off");
    };
    Color2.prototype.hue = function(h) {
      return this.changeHsl(h, "h", "set");
    };
    Color2.prototype.hueMod = function(h) {
      return this.changeHsl(h, "h", "mod");
    };
    Color2.prototype.hueOff = function(h) {
      return this.changeHsl(h, "h", "off");
    };
    Color2.prototype.sat = function(s) {
      return this.changeHsl(s, "s", "set");
    };
    Color2.prototype.satMod = function(s) {
      return this.changeHsl(s, "s", "mod");
    };
    Color2.prototype.satOff = function(s) {
      return this.changeHsl(s, "s", "off");
    };
    Color2.prototype.changeHsl = function(num, com, changeType) {
      var hsl = rgbToHsl(this.r, this.g, this.b);
      if (changeType === "set") {
        hsl[com] = num;
      } else if (changeType === "mod") {
        hsl[com] = hsl[com] * num;
      } else if (changeType === "off") {
        hsl[com] += hsl[com] * num;
      }
      var rgb = hslToRgb(hsl.h, hsl.s, hsl.l);
      this.r = rgb.r;
      this.g = rgb.g;
      this.b = rgb.b;
      return this;
    };
    Color2.prototype.comp = function() {
      var hsl = rgbToHsl(this.r, this.g, this.b);
      hsl.h = hsl.h + 0.5;
      if (hsl.h > 1) {
        hsl.h -= 1;
      }
      var rgb = hslToRgb(hsl.h, hsl.s, hsl.l);
      this.r = rgb.r;
      this.g = rgb.g;
      this.b = rgb.b;
      return this;
    };
    Color2.prototype.shade = function(s) {
      this.r = toValidColor(this.r - 256 * s);
      this.g = toValidColor(this.g - 256 * s);
      this.b = toValidColor(this.b - 256 * s);
    };
    Color2.prototype.tint = function(t) {
      this.r = toValidColor(this.r + 256 * t);
      this.g = toValidColor(this.g + 256 * t);
      this.b = toValidColor(this.b + 256 * t);
    };
    Color2.prototype.inv = function() {
      this.r = 255 - this.r;
      this.g = 255 - this.g;
      this.b = 255 - this.b;
      return this;
    };
    Color2.prototype.toHex = function() {
      return "#" + rgbToHex(this.r, this.g, this.b);
    };
    Color2.prototype.toRgba = function(alpha) {
      return "rgba(".concat(this.r, ", ").concat(this.g, ", ").concat(this.b, ", ").concat(alpha, ")");
    };
    return Color2;
  }()
);

// node_modules/office-viewer/esm/parse/modifyColor.js
function modifyColor(element, colorStr) {
  var e_1, _a2;
  var color = new Color(colorStr);
  if (color.isValid) {
    var alpha = 1;
    try {
      for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
        var child = _c.value;
        var tagName = child.tagName;
        switch (tagName) {
          case "a:alpha":
          case "w14:alpha":
            alpha = getAttrPercent(child, "val");
            break;
          case "a:blue":
            color.b = 256 * getAttrPercent(child, "val");
            break;
          case "a:blueMod":
            color.b = color.b * getAttrPercent(child, "val");
            break;
          case "a:blueOff":
            color.b += color.b * getAttrPercent(child, "val");
            break;
          case "a:comp":
            color.comp();
            break;
          case "a:green":
            color.g = 256 * getAttrPercent(child, "val");
            break;
          case "a:greenMod":
            color.g = color.g * getAttrPercent(child, "val");
            break;
          case "a:greenOff":
            color.g += color.g * getAttrPercent(child, "val");
            break;
          case "a:red":
            color.r = 256 * getAttrPercent(child, "val");
            break;
          case "a:redMod":
            color.r = color.r * getAttrPercent(child, "val");
            break;
          case "a:redOff":
            color.r += color.r * getAttrPercent(child, "val");
            break;
          case "a:lum":
            color.lum(getAttrPercent(child, "val"));
            break;
          case "a:lumMod":
            color.lumMod(getAttrPercent(child, "val"));
            break;
          case "a:lumOff":
            color.lumOff(getAttrPercent(child, "val"));
            break;
          case "a:hue":
            color.hue(convertAngle(child.getAttribute("hue")) / 360);
            break;
          case "a:hueMod":
            color.hueMod(getAttrPercent(child, "val"));
            break;
          case "a:hueOff":
            color.hueOff(getAttrPercent(child, "val"));
            break;
          case "a:sat":
            color.sat(getAttrPercent(child, "val"));
            break;
          case "a:satMod":
            color.satMod(getAttrPercent(child, "val"));
            break;
          case "a:satOff":
            color.satOff(getAttrPercent(child, "val"));
            break;
          case "a:shade":
            color.shade(getAttrPercent(child, "val"));
            break;
          case "a:tint":
            color.tint(getAttrPercent(child, "val"));
            break;
          default:
            console.log("unknown color modify", child);
            break;
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a2 = _b2.return))
          _a2.call(_b2);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    if (alpha !== 1) {
      return color.toRgba(alpha);
    }
    return color.toHex();
  }
  return colorStr;
}

// node_modules/office-viewer/esm/parse/parseChildColor.js
function parseChildColor(word, element) {
  var colorChild = element.firstElementChild;
  if (colorChild) {
    var colorType = colorChild.tagName;
    switch (colorType) {
      case "a:prstClr":
        var color = getVal(colorChild) || "";
        if (color in PresetColorMap) {
          return modifyColor(colorChild, PresetColorMap[color]);
        } else {
          console.warn("parseOutline: Unknown color ", color, colorChild);
        }
        break;
      case "a:srgbClr":
      case "a:scrgbClr":
      case "w14:srgbClr":
        var rgbColor = getVal(colorChild);
        if (rgbColor) {
          return modifyColor(colorChild, "#" + rgbColor);
        }
        var r = getAttrPercent(colorChild, "r");
        var g = getAttrPercent(colorChild, "g");
        var b = getAttrPercent(colorChild, "b");
        var scrgbColor = Color.fromRGB(r, g, b);
        return modifyColor(colorChild, scrgbColor.toHex());
      case "a:hslClr":
        var h = getAttrPercent(colorChild, "r");
        var s = getAttrPercent(colorChild, "g");
        var l = getAttrPercent(colorChild, "b");
        var val = getVal(colorChild);
        if (val) {
          return modifyColor(colorChild, "#" + val);
        }
        var hslColor = Color.fromHSL(h, s, l);
        return modifyColor(colorChild, hslColor.toHex());
      case "a:schemeClr":
      case "w14:schemeClr":
        var schemeClr = getVal(colorChild);
        if (schemeClr) {
          return modifyColor(colorChild, word.getThemeColor(schemeClr));
        } else {
          console.warn("parseOutline: Unknown schemeClr ", colorChild);
        }
        break;
      case "a:sysClr":
        return getVal(colorChild);
      default:
        console.warn("parseOutline: Unknown color type ", colorType, colorChild);
    }
  }
  return "";
}

// node_modules/office-viewer/esm/parse/parseInd.js
function parseInd(element, style) {
  var firstLine = parseSize(element, "w:firstLine");
  var hanging = parseSize(element, "w:hanging");
  var left = parseSize(element, "w:left");
  var start = parseSize(element, "w:start");
  var right = parseSize(element, "w:right");
  var end = parseSize(element, "w:end");
  if (firstLine) {
    style["text-indent"] = firstLine;
  }
  if (hanging) {
    style["text-indent"] = "-".concat(hanging);
  }
  if (left || start) {
    style["margin-left"] = left || start;
  }
  if (right || end) {
    style["margin-right"] = right || end;
  }
}

// node_modules/office-viewer/esm/parse/parseSpacing.js
function parseSpacing(word, element, style) {
  var before = parseSize(element, "w:before");
  var after = parseSize(element, "w:after");
  var lineRule = element.getAttribute("w:lineRule");
  if (before) {
    style["margin-top"] = before;
  }
  if (after) {
    style["margin-bottom"] = after;
  }
  var line = element.getAttribute("w:line");
  if (line) {
    if (word.renderOptions.forceLineHeight) {
      style["line-height"] = word.renderOptions.forceLineHeight;
      return;
    }
    var lineNum = parseInt(line, 10);
    var minLineHeight = word.renderOptions.minLineHeight || 1;
    switch (lineRule) {
      case "auto":
        var lineHeight = Math.max(minLineHeight, lineNum / 240);
        style["line-height"] = "".concat(lineHeight.toFixed(2));
        break;
      case "atLeast":
        break;
      default:
        var lineHeightMin = Math.max(minLineHeight, lineNum / 20);
        style["line-height"] = "".concat(lineHeightMin, "pt");
        break;
    }
  }
}

// node_modules/office-viewer/esm/parse/parseFont.js
function themeFont(font) {
  return "var(--docx-theme-font-".concat(font, ")");
}
function parseFont(word, element, style) {
  var e_1, _a2;
  var fonts = [];
  var fontMapping = word.renderOptions.fontMapping;
  try {
    for (var _b2 = __values(element.attributes), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var attribute = _c.value;
      var name_1 = attribute.name;
      var value = attribute.value;
      switch (name_1) {
        case "w:ascii":
        case "w:cs":
        case "w:eastAsia":
          if (fontMapping && value in fontMapping) {
            value = fontMapping[value];
          }
          if (value.indexOf(" ") === -1) {
            fonts.push(value);
          } else {
            fonts.push('"' + value + '"');
          }
          break;
        case "w:asciiTheme":
        case "w:csTheme":
        case "w:eastAsiaTheme":
          fonts.push(themeFont(value));
          break;
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  if (fonts.length) {
    style["font-family"] = Array.from(new Set(fonts)).join(", ");
  }
}

// node_modules/office-viewer/esm/parse/parseTrHeight.js
function parseTrHeight(child, style) {
  var height = parseSize(child, "w:val");
  var hRule = child.getAttribute("w:hRule");
  if (hRule === "exact") {
    style["height"] = height;
  } else if (hRule === "atLeast") {
    style["height"] = height;
    style["min-height"] = height;
  }
}

// node_modules/office-viewer/esm/parse/jcToTextAlign.js
function jcToTextAlign(jc) {
  switch (jc) {
    case "start":
    case "left":
      return "left";
    case "center":
      return "center";
    case "end":
    case "right":
      return "right";
    case "both":
    case "distribute":
      return "justify";
  }
  return jc;
}

// node_modules/office-viewer/esm/parse/parsePr.js
function parseUnderline(word, element, style) {
  var val = getVal(element);
  if (val == null)
    return;
  switch (val) {
    case "dash":
    case "dashDotDotHeavy":
    case "dashDotHeavy":
    case "dashedHeavy":
    case "dashLong":
    case "dashLongHeavy":
    case "dotDash":
    case "dotDotDash":
      style["text-decoration-style"] = "dashed";
      break;
    case "dotted":
    case "dottedHeavy":
      style["text-decoration-style"] = "dotted";
      break;
    case "double":
      style["text-decoration-style"] = "double";
      break;
    case "single":
    case "thick":
      style["text-decoration"] = "underline";
      break;
    case "wave":
    case "wavyDouble":
    case "wavyHeavy":
      style["text-decoration-style"] = "wavy";
      break;
    case "words":
      style["text-decoration"] = "underline";
      break;
    case "none":
      style["text-decoration"] = "none";
      break;
  }
  var color = parseColorAttr(word, element);
  if (color) {
    style["text-decoration-color"] = color;
  }
}
function parseFrame(element, style) {
  var e_1, _a2;
  try {
    for (var _b2 = __values(element.attributes), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var attribute = _c.value;
      var name_1 = attribute.name;
      var value = attribute.value;
      switch (name_1) {
        case "w:dropCap":
          if (value === "drop") {
            style["float"] = "left";
          }
          break;
        case "w:h":
          if (typeof value === "object" && !Array.isArray(value)) {
            style["height"] = parseSize(value, "w:h");
          }
          break;
        case "w:w":
          if (typeof value === "object" && !Array.isArray(value)) {
            style["width"] = parseSize(value, "w:w");
          }
          break;
        case "w:hAnchor":
        case "w:vAnchor":
        case "w:lines":
          break;
        case "w:wrap":
          if (value !== "around") {
            console.warn("parseFrame: w:wrap not support " + value);
          }
          break;
        default:
          console.warn("parseFrame: unknown attribute " + name_1, attribute);
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
}
function convertEm(em, style) {
  switch (em) {
    case "dot":
      style["text-emphasis"] = "filled";
      style["text-emphasis-position"] = "under right";
      break;
    case "comma":
      style["text-emphasis"] = "filled sesame";
      break;
    case "circle":
      style["text-emphasis"] = "open";
      break;
    case "underDot":
      style["text-emphasis"] = "filled";
      style["text-emphasis-position"] = "under right";
      break;
  }
}
function parsePr(word, element, type) {
  var e_2, _a2;
  var style = {};
  try {
    for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var child = _c.value;
      var tagName = child.tagName;
      switch (tagName) {
        case "w:sz":
        case "w:szCs":
          style["font-size"] = parseSize(child, "w:val", LengthUsage.FontSize);
          break;
        case "w:jc":
          style["text-align"] = jcToTextAlign(getVal(child));
          break;
        case "w:framePr":
          parseFrame(child, style);
          break;
        case "w:pBdr":
          parseBorders(word, child, style);
          break;
        case "w:ind":
          parseInd(child, style);
          break;
        case "w:color":
          style["color"] = parseColor(word, child);
          break;
        case "w:shd":
          if (!("background-color" in style)) {
            style["background-color"] = parseShdColor(word, child);
          }
          break;
        case "w:spacing":
          parseSpacing(word, child, style);
          break;
        case "w:highlight":
          style["background-color"] = parseColorAttr(word, child, "w:val", "yellow");
          break;
        case "w:vertAlign":
          var vertAlign = getVal(child);
          if (vertAlign === "superscript") {
            style["vertical-align"] = "super";
          } else if (vertAlign === "subscript") {
            style["vertical-align"] = "sub";
          }
          break;
        case "w:position":
          style["vertical-align"] = parseSize(child, "w:val", LengthUsage.FontSize);
          break;
        case "w:trHeight":
          parseTrHeight(child, style);
          break;
        case "w:strike":
        case "w:dstrike":
          style["text-decoration"] = getValBoolean(child) ? "line-through" : "none";
          break;
        case "w:b":
          style["font-weight"] = getValBoolean(child) ? "bold" : "normal";
          break;
        case "w:adjustRightInd":
          break;
        case "w:bCs":
        case "w:iCs":
          break;
        case "w:i":
          style["font-style"] = getValBoolean(child) ? "italic" : "normal";
          break;
        case "w:caps":
          style["text-transform"] = getValBoolean(child) ? "uppercase" : "normal";
          break;
        case "w:smallCaps":
          style["text-transform"] = getValBoolean(child) ? "lowercase" : "normal";
          break;
        case "w:u":
          parseUnderline(word, child, style);
          break;
        case "w:rFonts":
          parseFont(word, child, style);
          break;
        case "w:tblCellSpacing":
          style["border-spacing"] = parseSize(child, "w:w");
          style["border-collapse"] = "separate";
          break;
        case "w:bdr":
          style["border"] = parseBorder(word, child);
          break;
        case "w:vanish":
          if (getValBoolean(child)) {
            style["display"] = "none";
          }
          break;
        case "w:kern":
          break;
        case "w:pStyle":
          break;
        case "w:lang":
        case "w:noProof":
          break;
        case "w:keepLines":
        case "w:keepNext":
        case "w:widowControl":
        case "w:pageBreakBefore":
          break;
        case "w:outlineLvl":
          break;
        case "w:contextualSpacing":
          break;
        case "w:numPr":
          break;
        case "w:rPr":
          var reflection = child.getElementsByTagName("w14:reflection").item(0);
          if (reflection) {
            var reflectionDistance = parseSize(reflection, "w4:dist", LengthUsage.Emu) || "0px";
            style["-webkit-box-reflect"] = "below ".concat(reflectionDistance, " linear-gradient(transparent, white)");
          }
          break;
        case "w:rStyle":
          break;
        case "w:webHidden":
          style["display"] = "none";
          break;
        case "w:tabs":
          break;
        case "w:snapToGrid":
          break;
        case "w:topLinePunct":
          break;
        case "w:wordWrap":
          if (getValBoolean(child)) {
            style["word-break"] = "break-all";
          }
          break;
        case "w:textAlignment":
          var alignment = getVal(child);
          if (alignment === "center") {
            style["vertical-align"] = "middle";
          } else if (alignment !== "auto") {
            style["vertical-align"] = alignment;
          }
          break;
        case "w:textDirection":
          parseTextDirection(child, style);
          break;
        case "w:cnfStyle":
          break;
        case "w:bidi":
          if (getValBoolean(child, true)) {
            console.warn("w:bidi is not supported.");
          }
          break;
        case "w:autoSpaceDE":
        case "w:autoSpaceDN":
          break;
        case "w:kinsoku":
          break;
        case "w:overflowPunct":
          break;
        case "w:em":
          convertEm(getVal(child), style);
          break;
        case "w:w":
          var w = getValNumber(child);
          style["transform"] = "scaleX(".concat(w / 100, ")");
          style["display"] = "inline-block";
          break;
        case "w:outline":
          style["text-shadow"] = "-1px -1px 0 #AAA, 1px -1px 0 #AAA, -1px 1px 0 #AAA, 1px 1px 0 #AAA";
          break;
        case "w:shadown":
        case "w:imprint":
          if (getValBoolean(child, true)) {
            style["text-shadow"] = "1px 1px 2px rgba(0, 0, 0, 0.6)";
          }
          break;
        case "w14:shadow":
          var blurRad = parseSize(child, "w14:blurRad", LengthUsage.Emu) || "4px";
          var color = "rgba(0, 0, 0, 0.6)";
          var childColor = parseChildColor(word, child);
          if (childColor) {
            color = childColor;
          }
          style["text-shadow"] = "1px 1px ".concat(blurRad, " ").concat(color);
          break;
        case "w14:textOutline":
          var outlineWidth = parseSize(child, "w14:w", LengthUsage.Emu) || "1px";
          style["-webkit-text-stroke-width"] = outlineWidth;
          var outlineColor = "white";
          var fillColor = child.getElementsByTagName("w14:solidFill");
          if (fillColor.length > 0) {
            outlineColor = parseChildColor(word, fillColor.item(0)) || "white";
          }
          style["-webkit-text-stroke-color"] = outlineColor;
          break;
        case "w14:reflection":
          break;
        case "w14:textFill":
          break;
        case "w14:ligatures":
          break;
        default:
          console.warn("parsePr Unknown tagName", tagName, child);
      }
    }
  } catch (e_2_1) {
    e_2 = { error: e_2_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_2)
        throw e_2.error;
    }
  }
  return style;
}

// node_modules/office-viewer/esm/openxml/word/Bookmark.js
var BookmarkStart = (
  /** @class */
  function() {
    function BookmarkStart2(name) {
      this.name = name;
    }
    BookmarkStart2.fromXML = function(word, element) {
      var name = element.getAttribute("w:name");
      if (name) {
        return new BookmarkStart2(name);
      } else {
        console.warn("Bookmark without name");
        return new BookmarkStart2("unknown");
      }
    };
    return BookmarkStart2;
  }()
);

// node_modules/office-viewer/esm/openxml/word/Break.js
var Break = (
  /** @class */
  function() {
    function Break2() {
      this.type = "textWrapping";
    }
    Break2.fromXML = function(word, element) {
      return new Break2();
    };
    return Break2;
  }()
);

// node_modules/office-viewer/esm/openxml/drawing/Blip.js
var Blip = (
  /** @class */
  function() {
    function Blip2() {
    }
    Blip2.fromXML = function(word, element) {
      var blip = new Blip2();
      var embedId = element.getAttribute("r:embed") || "";
      var rel = word.getDocumentRels(embedId);
      if (rel) {
        blip.embled = rel;
        blip.src = word.loadImage(blip.embled);
      }
      return blip;
    };
    return Blip2;
  }()
);

// node_modules/office-viewer/esm/openxml/drawing/BlipFill.js
var BlipFill = (
  /** @class */
  function() {
    function BlipFill2() {
    }
    BlipFill2.fromXML = function(word, element) {
      var blipFill = new BlipFill2();
      var blip = element === null || element === void 0 ? void 0 : element.getElementsByTagName("a:blip").item(0);
      if (blip) {
        blipFill.blip = Blip.fromXML(word, blip);
      }
      return blipFill;
    };
    return BlipFill2;
  }()
);

// node_modules/office-viewer/esm/openxml/drawing/Transform.js
var Transform = (
  /** @class */
  function() {
    function Transform2() {
    }
    Transform2.fromXML = function(word, element) {
      var e_1, _a2;
      var transform = new Transform2();
      try {
        for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
          var child = _c.value;
          var tagName = child.tagName;
          switch (tagName) {
            case "a:off":
              transform.off = {
                x: parseSize(child, "x", LengthUsage.Emu),
                y: parseSize(child, "y", LengthUsage.Emu)
              };
              break;
            case "a:ext":
              transform.ext = {
                cx: parseSize(child, "cx", LengthUsage.Emu),
                cy: parseSize(child, "cy", LengthUsage.Emu)
              };
              break;
            case "a:chOff":
              transform.chOff = {
                x: parseSize(child, "x", LengthUsage.Emu),
                y: parseSize(child, "y", LengthUsage.Emu)
              };
              break;
            case "a:chExt":
              transform.chExt = {
                cx: parseSize(child, "cx", LengthUsage.Emu),
                cy: parseSize(child, "cy", LengthUsage.Emu)
              };
              break;
            default:
              console.warn("Transform: Unknown tag ", tagName, child);
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b2.return))
            _a2.call(_b2);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      var rot = element.getAttribute("rot");
      if (rot) {
        transform.rot = convertAngle(rot);
      }
      return transform;
    };
    return Transform2;
  }()
);

// node_modules/office-viewer/esm/parse/parseShape.js
function parsePts(element) {
  var e_1, _a2;
  var pts = [];
  try {
    for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var child = _c.value;
      var tagName = child.tagName;
      if (tagName === "a:pt" || tagName === "pt") {
        var x = child.getAttribute("x");
        var y = child.getAttribute("y");
        if (x && y) {
          pts.push({ x, y });
        }
      } else {
        console.warn("unknown pt", tagName, child);
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return pts;
}
function parsePath(element) {
  var e_2, _a2;
  var pathChild = [];
  try {
    for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var child = _c.value;
      var tagName = child.tagName;
      switch (tagName) {
        case "a:moveTo":
        case "moveTo":
          var moveToPt = parsePts(child);
          if (moveToPt.length) {
            var moveTo_1 = {
              type: "moveTo",
              pt: moveToPt[0]
            };
            pathChild.push(moveTo_1);
          }
          break;
        case "a:lnTo":
        case "lnTo":
          var lnToPt = parsePts(child);
          if (lnToPt.length) {
            var lnTo = {
              type: "lnTo",
              pt: lnToPt[0]
            };
            pathChild.push(lnTo);
          }
          break;
        case "a:quadBezTo":
        case "quadBezTo":
          var quadBezToPt = parsePts(child);
          if (quadBezToPt.length) {
            var quadBezTo = {
              type: "quadBezTo",
              pts: quadBezToPt
            };
            pathChild.push(quadBezTo);
          }
          break;
        case "a:cubicBezTo":
        case "cubicBezTo":
          var cubicBezToPt = parsePts(child);
          if (cubicBezToPt.length) {
            var cubicBezTo = {
              type: "cubicBezTo",
              pts: cubicBezToPt
            };
            pathChild.push(cubicBezTo);
          }
          break;
        case "a:arcTo":
        case "arcTo":
          var wR = child.getAttribute("wR");
          var hR = child.getAttribute("hR");
          var stAng = child.getAttribute("stAng");
          var swAng = child.getAttribute("swAng");
          if (wR && hR && stAng && swAng) {
            var arcTo = {
              type: "arcTo",
              wR,
              hR,
              stAng,
              swAng
            };
            pathChild.push(arcTo);
          }
          break;
        case "a:close":
        case "close":
          pathChild.push({
            type: "close"
          });
          break;
        default:
          console.warn("parsePath: unknown tag", tagName, child);
      }
    }
  } catch (e_2_1) {
    e_2 = { error: e_2_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_2)
        throw e_2.error;
    }
  }
  var path = { defines: pathChild };
  var fill = element.getAttribute("fill");
  if (fill) {
    path.fill = fill;
  }
  path.extrusionOk = getAttrBoolean(element, "extrusionOk", false);
  path.stroke = getAttrBoolean(element, "stroke", true);
  var w = element.getAttribute("w");
  if (w) {
    path.w = parseInt(w, 10);
  }
  var h = element.getAttribute("h");
  if (h) {
    path.h = parseInt(h, 10);
  }
  return path;
}
function parsePathLst(element) {
  var e_3, _a2;
  var pathLst = [];
  try {
    for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var child = _c.value;
      var tagName = child.tagName;
      switch (tagName) {
        case "a:path":
        case "path":
          pathLst.push(parsePath(child));
          break;
      }
    }
  } catch (e_3_1) {
    e_3 = { error: e_3_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_3)
        throw e_3.error;
    }
  }
  return pathLst;
}
function parseShapeGuide(element) {
  var e_4, _a2;
  var gds = [];
  try {
    for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var child = _c.value;
      var tagName = child.tagName;
      switch (tagName) {
        case "a:gd":
        case "gd":
          var name_1 = child.getAttribute("name");
          var fmla = child.getAttribute("fmla");
          if (name_1 && fmla) {
            var gd = {
              n: name_1,
              f: fmla
            };
            gds.push(gd);
          }
          break;
      }
    }
  } catch (e_4_1) {
    e_4 = { error: e_4_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_4)
        throw e_4.error;
    }
  }
  return gds;
}
function parseShape(element) {
  var e_5, _a2;
  var shape = {};
  try {
    for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var child = _c.value;
      var tagName = child.tagName;
      switch (tagName) {
        case "a:avLst":
        case "avLst":
          shape.avLst = parseShapeGuide(child);
          break;
        case "a:gdLst":
        case "gdLst":
          shape.gdLst = parseShapeGuide(child);
          break;
        case "a:rect":
        case "react":
          var rect = {
            b: child.getAttribute("b") || "",
            l: child.getAttribute("l") || "",
            r: child.getAttribute("r") || "",
            t: child.getAttribute("t") || ""
          };
          shape.rect = rect;
          break;
        case "a:pathLst":
        case "pathLst":
          shape.pathLst = parsePathLst(child);
          break;
      }
    }
  } catch (e_5_1) {
    e_5 = { error: e_5_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_5)
        throw e_5.error;
    }
  }
  return shape;
}

// node_modules/office-viewer/esm/openxml/drawing/Geom.js
var Geom = (
  /** @class */
  function() {
    function Geom2() {
    }
    Geom2.fromXML = function(word, element) {
      var e_1, _a2;
      var geom = new Geom2();
      geom.prst = element.getAttribute("prst");
      try {
        for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
          var child = _c.value;
          var tagName = child.tagName;
          switch (tagName) {
            case "a:avLst": {
              geom.avLst = parseShapeGuide(child);
            }
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b2.return))
            _a2.call(_b2);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return geom;
    };
    return Geom2;
  }()
);

// node_modules/office-viewer/esm/openxml/drawing/CustomGeom.js
var CustomGeom = (
  /** @class */
  function() {
    function CustomGeom2() {
    }
    CustomGeom2.fromXML = function(word, element) {
      var geom = new CustomGeom2();
      geom.shape = parseShape(element);
      return geom;
    };
    return CustomGeom2;
  }()
);

// node_modules/office-viewer/esm/openxml/drawing/ShapeProperties.js
function prstDashToCSSBorderType(prstDash) {
  var borderType = "solid";
  switch (prstDash) {
    case "dash":
    case "dashDot":
    case "lgDash":
    case "lgDashDot":
    case "lgDashDotDot":
    case "sysDash":
    case "sysDashDot":
    case "sysDashDotDot":
      borderType = "dashed";
      break;
    case "dot":
    case "sysDot":
      borderType = "dotted";
      break;
  }
  return borderType;
}
function parseOutline(word, element) {
  var e_1, _a2;
  var borderWidth = parseSize(element, "w", LengthUsage.Emu);
  var outline = {
    width: borderWidth
  };
  outline.style = "solid";
  try {
    for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var child = _c.value;
      var tagName = child.tagName;
      switch (tagName) {
        case "a:solidFill":
          outline.color = parseChildColor(word, child);
          break;
        case "a:noFill":
          outline.style = "none";
          break;
        case "a:round":
          outline.radius = "8%";
          break;
        case "a:prstDash":
          outline.style = prstDashToCSSBorderType(child.getAttribute("val"));
          break;
        default:
          console.warn("parseOutline: Unknown tag ", tagName, child);
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return outline;
}
var ShapePr = (
  /** @class */
  function() {
    function ShapePr2() {
    }
    ShapePr2.fromXML = function(word, element) {
      var e_2, _a2;
      var shapePr = new ShapePr2();
      if (element) {
        try {
          for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
            var child = _c.value;
            var tagName = child.tagName;
            switch (tagName) {
              case "a:xfrm":
                shapePr.xfrm = Transform.fromXML(word, child);
                break;
              case "a:prstGeom":
                shapePr.geom = Geom.fromXML(word, child);
                break;
              case "a:custGeom":
                shapePr.custGeom = CustomGeom.fromXML(word, child);
                break;
              case "a:ln":
                shapePr.outline = parseOutline(word, child);
                break;
              case "a:noFill":
                shapePr.noFill = true;
                break;
              case "a:solidFill":
                shapePr.fillColor = parseChildColor(word, child);
                break;
              default:
                console.warn("ShapePr: Unknown tag ", tagName, child);
            }
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a2 = _b2.return))
              _a2.call(_b2);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
      }
      return shapePr;
    };
    return ShapePr2;
  }()
);

// node_modules/office-viewer/esm/openxml/drawing/Pic.js
var Pic = (
  /** @class */
  function() {
    function Pic2() {
    }
    Pic2.fromXML = function(word, element) {
      var pic = new Pic2();
      var cNvPr = element === null || element === void 0 ? void 0 : element.getElementsByTagName("pic:cNvPr").item(0);
      if (cNvPr) {
        pic.alt = cNvPr.getAttribute("descr") || "";
        pic.altVar = cNvPr.getAttribute("descrVar") || "";
        var hidden = getAttrBoolean(cNvPr, "hidden", false);
        if (hidden) {
          return pic;
        }
      }
      pic.blipFill = BlipFill.fromXML(word, element === null || element === void 0 ? void 0 : element.getElementsByTagName("pic:blipFill").item(0));
      pic.spPr = ShapePr.fromXML(word, element === null || element === void 0 ? void 0 : element.getElementsByTagName("pic:spPr").item(0));
      return pic;
    };
    return Pic2;
  }()
);

// node_modules/office-viewer/esm/openxml/word/Table.js
var Table = (
  /** @class */
  function() {
    function Table2() {
      this.properties = {};
      this.tblGrid = [];
      this.trs = [];
    }
    return Table2;
  }()
);

// node_modules/office-viewer/esm/openxml/word/table/Tr.js
var Tr = (
  /** @class */
  function() {
    function Tr2() {
      this.properties = {};
      this.tcs = [];
    }
    return Tr2;
  }()
);

// node_modules/office-viewer/esm/openxml/word/table/Tc.js
var Tc = (
  /** @class */
  function() {
    function Tc2() {
      this.properties = {};
      this.children = [];
    }
    Tc2.prototype.add = function(child) {
      if (child) {
        this.children.push(child);
      }
    };
    return Tc2;
  }()
);

// node_modules/office-viewer/esm/parse/parseTc.js
function parseTc(word, element, currentCol, rowSpanMap) {
  var e_1, _a2;
  var tc = new Tc();
  try {
    for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var child = _c.value;
      var tagName = child.tagName;
      switch (tagName) {
        case "w:tcPr":
          tc.properties = parseTcPr(word, child);
          break;
        case "w:p":
          tc.add(Paragraph.fromXML(word, child));
          break;
        case "w:tbl":
          tc.add(parseTable(word, child));
          break;
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  var lastCol = rowSpanMap[currentCol.index];
  if (tc.properties.vMerge) {
    if (tc.properties.vMerge === "restart") {
      tc.properties.rowSpan = 1;
      rowSpanMap[currentCol.index] = tc;
    } else if (lastCol) {
      if (lastCol.properties && lastCol.properties.rowSpan) {
        lastCol.properties.rowSpan = lastCol.properties.rowSpan + 1;
        var colSpan_1 = tc.properties.gridSpan || 1;
        currentCol.index += colSpan_1;
        return null;
      } else {
        console.warn("Tc.fromXML: continue but not found lastCol", currentCol.index, tc, rowSpanMap);
      }
    }
  } else {
    delete rowSpanMap[currentCol.index];
  }
  var colSpan = tc.properties.gridSpan || 1;
  currentCol.index += colSpan;
  return tc;
}

// node_modules/office-viewer/esm/parse/parseTablePr.js
function parseTblJc(element, cssStyle) {
  var val = getVal(element);
  switch (val) {
    case "left":
    case "start":
      break;
    case "right":
    case "end":
      cssStyle["float"] = "right";
  }
}
function parseTblInd(element, style) {
  var width = parseTblWidth(element);
  if (width) {
    style["margin-left"] = width;
  }
}
function parseTblW(element, style) {
  var width = parseTblWidth(element);
  if (width) {
    style["width"] = width;
  }
}
function parseTblLook(child) {
  var tblLook = {};
  var tblLookVal = getValHex(child);
  if (getAttrBoolean(child, "firstRow", false) || tblLookVal & 32) {
    tblLook["firstRow"] = true;
  }
  if (getAttrBoolean(child, "lastRow", false) || tblLookVal & 64) {
    tblLook["lastRow"] = true;
  }
  if (getAttrBoolean(child, "firstColumn", false) || tblLookVal & 128) {
    tblLook["firstColumn"] = true;
  }
  if (getAttrBoolean(child, "lastColumn", false) || tblLookVal & 256) {
    tblLook["lastColumn"] = true;
  }
  if (getAttrBoolean(child, "noHBand", false) || tblLookVal & 512) {
    tblLook["noHBand"] = true;
  } else {
    tblLook["noHBand"] = false;
  }
  if (getAttrBoolean(child, "noVBand", false) || tblLookVal & 1024) {
    tblLook["noVBand"] = true;
  } else {
    tblLook["noVBand"] = false;
  }
  return tblLook;
}
function parseTblpPr(word, child, style) {
  if (typeof word.renderOptions.padding === "undefined") {
    var tplpX = parseSize(child, "w:tblpX");
    var tplpY = parseSize(child, "w:tblpY");
    style.top = tplpY;
    style.left = tplpX;
  }
}
function parseTblLayout(element, style) {
  var type = element.getAttribute("w:type");
  if (type === "fixed") {
    style["table-layout"] = "fixed";
  }
}
function parseTablePr(word, element) {
  var e_1, _a2;
  var properties = {};
  var tableStyle = {};
  var tcStyle = {};
  properties.tblLook = {};
  properties.cssStyle = tableStyle;
  properties.tcCSSStyle = tcStyle;
  try {
    for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var child = _c.value;
      var tagName = child.tagName;
      switch (tagName) {
        case "w:tblBorders":
          parseBorders(word, child, tableStyle);
          properties.insideBorder = parseInsideBorders(word, child);
          break;
        case "w:tcBorders":
          parseBorders(word, child, tableStyle);
          break;
        case "w:tblInd":
          parseTblInd(child, tableStyle);
          break;
        case "w:jc":
          parseTblJc(child, tableStyle);
          break;
        case "w:tblCellMar":
        case "w:tcMar":
          parseCellMargin(child, tcStyle);
          break;
        case "w:tblStyle":
          properties.pStyle = getVal(child);
          break;
        case "w:tblW":
          parseTblW(child, tableStyle);
          break;
        case "w:shd":
          tableStyle["background-color"] = parseShdColor(word, child);
          break;
        case "w:tblCaption":
          properties.tblCaption = getVal(child);
          break;
        case "w:tblCellSpacing":
          parseTblCellSpacing(child, tableStyle);
          break;
        case "w:tblLayout":
          parseTblLayout(child, tableStyle);
          break;
        case "w:tblLook":
          properties.tblLook = parseTblLook(child);
          break;
        case "w:tblStyleRowBandSize":
          properties.rowBandSize = getValNumber(child);
          break;
        case "w:tblStyleColBandSize":
          properties.colBandSize = getValNumber(child);
          break;
        case "w:tblpPr":
          parseTblpPr(word, child, tableStyle);
          break;
        default:
          console.warn("parseTableProperties unknown tag", tagName, child);
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return properties;
}

// node_modules/office-viewer/esm/parse/parseTrPr.js
function parseTrPr(word, element) {
  var e_1, _a2;
  var cssStyle = {};
  var tcStyle = {};
  try {
    for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var child = _c.value;
      var tagName = child.tagName;
      switch (tagName) {
        case "w:hidden":
          if (getValBoolean(child)) {
            cssStyle.display = "none";
          }
          break;
        case "w:trHeight":
          parseTrHeight(child, cssStyle);
          break;
        case "w:jc":
          cssStyle["text-align"] = jcToTextAlign(getVal(child));
          break;
        case "w:cantSplit":
          break;
        case "w:tblPrEx":
          var tablePr = parseTablePr(word, child);
          Object.assign(cssStyle, tablePr.cssStyle);
          break;
        case "w:tblCellSpacing":
          parseTblCellSpacing(child, tcStyle);
          break;
        case "w:cnfStyle":
          break;
        default:
          console.warn("Tr: Unknown tag ", tagName, child);
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return {
    cssStyle
  };
}

// node_modules/office-viewer/esm/parse/mergeSdt.js
function flattenSdtArray(arr) {
  var e_1, _a2;
  var returnArray = arr.slice();
  var index2 = 0;
  var needRecursion = false;
  try {
    for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {
      var child = arr_1_1.value;
      var tagName = child.tagName;
      switch (tagName) {
        case "w:smartTag":
        case "w:customXml":
          var customXMLChildren = [].slice.call(child.children);
          returnArray.splice.apply(returnArray, __spreadArray([index2, 1], __read(customXMLChildren), false));
          index2 = index2 + customXMLChildren.length;
          continue;
        case "w:sdt":
          var sdtContent = child.getElementsByTagName("w:sdtContent").item(0);
          var childSdt = child.getElementsByTagName("w:sdt").item(0);
          if (childSdt) {
            needRecursion = true;
          }
          if (sdtContent) {
            var sdtContentChildren = [].slice.call(sdtContent.children);
            returnArray.splice.apply(returnArray, __spreadArray([index2, 1], __read(sdtContentChildren), false));
            index2 = index2 + sdtContentChildren.length;
            continue;
          }
          break;
      }
      index2 = index2 + 1;
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (arr_1_1 && !arr_1_1.done && (_a2 = arr_1.return))
        _a2.call(arr_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  if (needRecursion) {
    return flattenSdtArray(returnArray);
  }
  return returnArray;
}
function mergeSdt(element) {
  var arr = [].slice.call(element.children);
  return flattenSdtArray(arr);
}

// node_modules/office-viewer/esm/parse/parseTr.js
function parseTr(word, element, rowSpanMap) {
  var e_1, _a2;
  var tr = new Tr();
  var currentCol = {
    index: 0
  };
  try {
    for (var _b2 = __values(mergeSdt(element)), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var child = _c.value;
      var tagName = child.tagName;
      switch (tagName) {
        case "w:tc":
          var tc = parseTc(word, child, currentCol, rowSpanMap);
          if (tc) {
            tr.tcs.push(tc);
          }
          break;
        case "w:trPr":
          tr.properties = parseTrPr(word, child);
          break;
        case "w:tblPrEx":
          var tablePr = parseTablePr(word, child);
          Object.assign(tr.properties.cssStyle || {}, tablePr.cssStyle);
          break;
        default:
          console.warn("Tr: Unknown tag ", tagName, child);
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return tr;
}

// node_modules/office-viewer/esm/parse/parseTable.js
function parseTblGrid(element) {
  var e_1, _a2;
  var gridCol = [];
  var gridColElements = element.getElementsByTagName("w:gridCol");
  try {
    for (var gridColElements_1 = __values(gridColElements), gridColElements_1_1 = gridColElements_1.next(); !gridColElements_1_1.done; gridColElements_1_1 = gridColElements_1.next()) {
      var gridColElement = gridColElements_1_1.value;
      var w = parseSize(gridColElement, "w:w");
      gridCol.push({ w });
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (gridColElements_1_1 && !gridColElements_1_1.done && (_a2 = gridColElements_1.return))
        _a2.call(gridColElements_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return gridCol;
}
function parseTable(word, element) {
  var e_2, _a2;
  var table = new Table();
  var rowSpanMap = {};
  try {
    for (var _b2 = __values(mergeSdt(element)), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var child = _c.value;
      var tagName = child.tagName;
      switch (tagName) {
        case "w:tblPr":
          table.properties = parseTablePr(word, child);
          break;
        case "w:tr":
          table.trs.push(parseTr(word, child, rowSpanMap));
          break;
        case "w:tblGrid":
          table.tblGrid = parseTblGrid(child);
          break;
        default:
          console.warn("Table.fromXML unknown tag", tagName, child);
      }
    }
  } catch (e_2_1) {
    e_2 = { error: e_2_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_2)
        throw e_2.error;
    }
  }
  return table;
}

// node_modules/office-viewer/esm/openxml/word/wps/WPSStyle.js
var WPSStyle = (
  /** @class */
  function() {
    function WPSStyle2() {
    }
    WPSStyle2.fromXML = function(word, element) {
      var e_1, _a2;
      var wpsStyle = new WPSStyle2();
      try {
        for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
          var child = _c.value;
          var tagName = child.tagName;
          switch (tagName) {
            case "a:fillRef":
              wpsStyle.fillColor = parseChildColor(word, child);
              break;
            case "a:lnRef":
              wpsStyle.lineColor = parseChildColor(word, child);
              break;
            case "a:fontRef":
              wpsStyle.fontColor = parseChildColor(word, child);
              break;
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b2.return))
            _a2.call(_b2);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return wpsStyle;
    };
    return WPSStyle2;
  }()
);

// node_modules/office-viewer/esm/openxml/word/wps/WPS.js
function parseBodyPr(element, style) {
  var e_1, _a2;
  try {
    for (var _b2 = __values(element.attributes), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var attribute = _c.value;
      var name_1 = attribute.name;
      var value = attribute.value;
      switch (name_1) {
        case "numCol":
          if (value !== "1") {
            style["column-count"] = value;
          }
          break;
        case "vert":
          var val = value;
          switch (val) {
            case "vert":
              style["writing-mode"] = "vertical-rl";
              style["text-orientation"] = "sideways";
              break;
            case "vert270":
            case "eaVert":
              style["writing-mode"] = "vertical-rl";
              style["text-orientation"] = "mixed";
              break;
            default:
              break;
          }
          break;
        case "anchor":
          var anchor = value;
          switch (anchor) {
            case "b":
              style["vertical-align"] = "bottom";
              break;
            case "t":
              style["vertical-align"] = "top";
              break;
            case "ctr":
              style["vertical-align"] = "middle";
              break;
          }
          break;
        case "rot":
          var rot = convertAngle(value);
          if (rot) {
            style["transform"] = "rotate(".concat(rot, "deg)");
          }
          break;
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
}
var WPS = (
  /** @class */
  function() {
    function WPS2() {
      this.style = {};
    }
    WPS2.fromXML = function(word, element) {
      var e_2, _a2, e_3, _b2;
      var wps = new WPS2();
      wps.txbxContent = [];
      try {
        for (var _c = __values(element.children), _d = _c.next(); !_d.done; _d = _c.next()) {
          var child = _d.value;
          var tagName = child.tagName;
          switch (tagName) {
            case "wps:cNvSpPr":
            case "wps:cNvPr":
              break;
            case "wps:spPr":
              wps.spPr = ShapePr.fromXML(word, child);
              break;
            case "wps:txbx":
              var txbxContent = child.firstElementChild;
              if (txbxContent) {
                try {
                  for (var _e = (e_3 = void 0, __values(txbxContent.children)), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var txbxContentChild = _f.value;
                    var txbxContentTagName = txbxContentChild.tagName;
                    switch (txbxContentTagName) {
                      case "w:p":
                        wps.txbxContent.push(Paragraph.fromXML(word, txbxContentChild));
                        break;
                      case "w:tbl":
                        wps.txbxContent.push(parseTable(word, txbxContentChild));
                        break;
                    }
                  }
                } catch (e_3_1) {
                  e_3 = { error: e_3_1 };
                } finally {
                  try {
                    if (_f && !_f.done && (_b2 = _e.return))
                      _b2.call(_e);
                  } finally {
                    if (e_3)
                      throw e_3.error;
                  }
                }
              } else {
                console.warn("unknown wps:txbx", child);
              }
              break;
            case "wps:style":
              wps.wpsStyle = WPSStyle.fromXML(word, child);
              break;
            case "wps:bodyPr":
              parseBodyPr(child, wps.style);
              break;
            default:
              console.warn("WPS: Unknown tag ", tagName, child);
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (_d && !_d.done && (_a2 = _c.return))
            _a2.call(_c);
        } finally {
          if (e_2)
            throw e_2.error;
        }
      }
      return wps;
    };
    return WPS2;
  }()
);

// node_modules/office-viewer/esm/openxml/drawing/diagram/Diagram.js
var Diagram = (
  /** @class */
  function() {
    function Diagram2() {
    }
    Diagram2.fromXML = function(word, relidsElement) {
      var diagram = new Diagram2();
      var dmId = relidsElement.getAttribute("r:dm");
      if (dmId) {
        var dmRel = word.getDocumentRels(dmId);
        if (dmRel) {
          var dm = word.loadWordRelXML(dmRel);
          console.log(dm);
        }
      }
      return diagram;
    };
    return Diagram2;
  }()
);

// node_modules/office-viewer/esm/openxml/word/wps/WPG.js
var WPG = (
  /** @class */
  function() {
    function WPG2() {
    }
    WPG2.fromXML = function(word, element) {
      var e_1, _a2;
      var wpg = new WPG2();
      var wps = [];
      wpg.wps = wps;
      wpg.wpg = [];
      try {
        for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
          var child = _c.value;
          var tagName = child.tagName;
          switch (tagName) {
            case "wpg:cNvGrpSpPr":
              break;
            case "wpg:grpSpPr":
              wpg.spPr = ShapePr.fromXML(word, child);
              break;
            case "wps:wsp":
              wps.push(WPS.fromXML(word, child));
              break;
            case "pic:pic":
              wpg.pic = Pic.fromXML(word, child);
              break;
            case "wpg:grpSp":
              wpg.wpg.push(WPG2.fromXML(word, child));
              break;
            default:
              console.warn("WPS: Unknown tag ", tagName, child);
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b2.return))
            _a2.call(_b2);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return wpg;
    };
    return WPG2;
  }()
);

// node_modules/office-viewer/esm/openxml/drawing/Drawing.js
var Position;
(function(Position2) {
  Position2["inline"] = "inline";
  Position2["anchor"] = "anchor";
})(Position || (Position = {}));
function parseAnchor(element) {
  var simplePos = getAttrBoolean(element, "simplePos", false);
  var hidden = getAttrBoolean(element, "hidden", false);
  var behindDoc = getAttrBoolean(element, "behindDoc", false);
  return {
    simplePos,
    hidden,
    behindDoc
  };
}
var Drawing = (
  /** @class */
  function() {
    function Drawing2() {
      this.position = Position.inline;
    }
    Drawing2.fromXML = function(word, element) {
      var e_1, _a2;
      var _b2;
      var drawing = new Drawing2();
      var containerStyle = {};
      drawing.containerStyle = containerStyle;
      var position = element.firstElementChild;
      if (position) {
        if (position.tagName === "wp:anchor") {
          drawing.position = Position.anchor;
          drawing.anchor = parseAnchor(position);
          var relativeHeight = getAttrNumber(position, "relativeHeight", 1);
          containerStyle["z-index"] = relativeHeight;
        }
        try {
          for (var _c = __values(position.children), _d = _c.next(); !_d.done; _d = _c.next()) {
            var child = _d.value;
            var tagName = child.tagName;
            switch (tagName) {
              case "wp:simplePos":
                if ((_b2 = drawing.anchor) === null || _b2 === void 0 ? void 0 : _b2.simplePos) {
                  containerStyle["position"] = "absolute";
                  containerStyle["x"] = parseSize(child, "x", LengthUsage.Emu);
                  containerStyle["y"] = parseSize(child, "y", LengthUsage.Emu);
                }
                break;
              case "wp:positionH":
                var relativeFromH = child.getAttribute("relativeFrom");
                if (relativeFromH === "column" || relativeFromH === "page" || relativeFromH === "margin") {
                  var positionType = child.firstElementChild;
                  if (positionType) {
                    var positionTypeTagName = positionType.tagName;
                    containerStyle["position"] = "absolute";
                    if (positionTypeTagName === "wp:posOffset") {
                      containerStyle["left"] = convertLength(positionType.innerHTML, LengthUsage.Emu);
                    } else {
                      containerStyle["left"] = "0";
                      console.warn("unsupport positionType", positionTypeTagName);
                    }
                  }
                } else {
                  console.warn("unsupport positionH relativeFrom", relativeFromH);
                }
                break;
              case "wp:positionV":
                var relativeFromV = child.getAttribute("relativeFrom");
                if (relativeFromV === "paragraph" || relativeFromV === "page") {
                  drawing.relativeFromV = relativeFromV;
                  var positionType = child.firstElementChild;
                  if (positionType) {
                    var positionTypeTagName = positionType.tagName;
                    containerStyle["position"] = "absolute";
                    if (positionTypeTagName === "wp:posOffset") {
                      containerStyle["top"] = convertLength(positionType.innerHTML, LengthUsage.Emu);
                    } else {
                      containerStyle["top"] = "0";
                      console.warn("unsupport positionType", positionTypeTagName);
                    }
                  }
                } else {
                  console.warn("unsupport positionV relativeFrom", relativeFromV);
                }
                break;
              case "wp:docPr":
                drawing.id = child.getAttribute("id") || void 0;
                drawing.name = child.getAttribute("name") || void 0;
                break;
              case "wp:cNvGraphicFramePr":
                break;
              case "a:graphic":
                var graphicData = child.firstElementChild;
                var graphicDataChild = graphicData === null || graphicData === void 0 ? void 0 : graphicData.firstElementChild;
                if (graphicDataChild) {
                  var graphicDataChildTagName = graphicDataChild.tagName;
                  switch (graphicDataChildTagName) {
                    case "pic:pic":
                      drawing.pic = Pic.fromXML(word, graphicDataChild);
                      break;
                    case "wps:wsp":
                      drawing.wps = WPS.fromXML(word, graphicDataChild);
                      break;
                    case "wpg:wgp":
                      drawing.wpg = WPG.fromXML(word, graphicDataChild);
                      break;
                    case "dgm:relIds":
                      drawing.diagram = Diagram.fromXML(word, graphicDataChild);
                      break;
                    default:
                      console.warn("unknown graphicData child tag", graphicDataChild);
                  }
                }
                break;
              case "wp:extent":
                containerStyle["width"] = parseSize(child, "cx", LengthUsage.Emu);
                containerStyle["height"] = parseSize(child, "cy", LengthUsage.Emu);
                break;
              case "wp:effectExtent":
                break;
              case "wp:wrapNone":
                break;
              case "wp14:sizeRelH":
              case "wp14:sizeRelV":
                break;
              default:
                console.warn("drawing unknown tag", tagName);
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_d && !_d.done && (_a2 = _c.return))
              _a2.call(_c);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      }
      return drawing;
    };
    return Drawing2;
  }()
);

// node_modules/office-viewer/esm/openxml/word/InstrText.js
var InstrText = (
  /** @class */
  function() {
    function InstrText2(text) {
      this.text = text;
    }
    return InstrText2;
  }()
);

// node_modules/office-viewer/esm/openxml/word/NoBreakHyphen.js
var NoBreakHyphen = (
  /** @class */
  function() {
    function NoBreakHyphen2() {
    }
    return NoBreakHyphen2;
  }()
);

// node_modules/office-viewer/esm/openxml/word/Pict.js
var Pict = (
  /** @class */
  function() {
    function Pict2() {
    }
    Pict2.fromXML = function(word, element) {
      var pict = new Pict2();
      var imagedataElement = element.getElementsByTagName("v:imagedata").item(0);
      if (imagedataElement) {
        var rId = imagedataElement.getAttribute("r:id") || "";
        var rel = word.getDocumentRels(rId);
        if (rel) {
          pict.src = word.loadImage(rel);
        }
      }
      return pict;
    };
    return Pict2;
  }()
);

// node_modules/office-viewer/esm/openxml/word/Ruby.js
var RubyBase = (
  /** @class */
  function() {
    function RubyBase2() {
    }
    RubyBase2.fromXML = function(word, element) {
      var e_1, _a2;
      var rubyBase = new RubyBase2();
      rubyBase.children = [];
      try {
        for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
          var child = _c.value;
          var tagName = child.tagName;
          switch (tagName) {
            case "w:r":
              var run = Run.fromXML(word, child);
              if (run) {
                rubyBase.children.push(run);
              }
              break;
            default:
              console.warn("parse Ruby: Unknown key", tagName, child);
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b2.return))
            _a2.call(_b2);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return rubyBase;
    };
    return RubyBase2;
  }()
);
(function(_super) {
  __extends(RubyText, _super);
  function RubyText() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return RubyText;
})(RubyBase);
var Ruby = (
  /** @class */
  function() {
    function Ruby2() {
    }
    Ruby2.fromXML = function(word, element) {
      var e_2, _a2;
      var ruby = new Ruby2();
      try {
        for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
          var child = _c.value;
          var tagName = child.tagName;
          switch (tagName) {
            case "w:rubyPr":
              break;
            case "w:rt":
              ruby.rt = RubyBase.fromXML(word, child);
              break;
            case "w:rubyBase":
              ruby.rubyBase = RubyBase.fromXML(word, child);
              break;
            default:
              console.warn("parse Ruby: Unknown key", tagName, child);
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b2.return))
            _a2.call(_b2);
        } finally {
          if (e_2)
            throw e_2.error;
        }
      }
      return ruby;
    };
    return Ruby2;
  }()
);

// node_modules/office-viewer/esm/openxml/word/Separator.js
var Separator = (
  /** @class */
  function() {
    function Separator2() {
    }
    return Separator2;
  }()
);

// node_modules/office-viewer/esm/openxml/word/SoftHyphen.js
var SoftHyphen = (
  /** @class */
  function() {
    function SoftHyphen2() {
    }
    return SoftHyphen2;
  }()
);

// node_modules/office-viewer/esm/openxml/word/Sym.js
var Sym = (
  /** @class */
  function() {
    function Sym2() {
    }
    Sym2.parseXML = function(element) {
      var sym = new Sym2();
      sym.font = element.getAttribute("w:font") || "";
      sym.char = element.getAttribute("w:char") || "";
      return sym;
    };
    return Sym2;
  }()
);

// node_modules/office-viewer/esm/openxml/word/Tab.js
var Tab = (
  /** @class */
  function() {
    function Tab2() {
    }
    Tab2.fromXML = function(word, element) {
      var tab = new Tab2();
      tab.pos = parseSize(element, "w:pos");
      tab.type = getVal(element);
      tab.leader = element.getAttribute("w:leader");
      return tab;
    };
    return Tab2;
  }()
);

// node_modules/office-viewer/esm/openxml/word/Run.js
var Text = (
  /** @class */
  function() {
    function Text2(text) {
      this.preserveSpace = false;
      this.text = String(text);
    }
    return Text2;
  }()
);
var Run = (
  /** @class */
  function() {
    function Run2() {
      this.properties = {};
      this.children = [];
    }
    Run2.prototype.addChild = function(child) {
      if (child) {
        this.children.push(child);
      }
    };
    Run2.parseRunPr = function(word, element) {
      var cssStyle = parsePr(word, element);
      var rStyle;
      var rStyleElement = element.getElementsByTagName("w:rStyle").item(0);
      if (rStyleElement) {
        rStyle = getVal(rStyleElement);
      }
      return { cssStyle, rStyle };
    };
    Run2.fromXML = function(word, element) {
      var e_1, _a2;
      var run = new Run2();
      try {
        for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
          var child = _c.value;
          var tagName = child.tagName;
          switch (tagName) {
            case "w:t":
              var textContent = child.textContent || "";
              var text = new Text(textContent);
              run.addChild(text);
              break;
            case "w:rPr":
              run.properties = Run2.parseRunPr(word, child);
              break;
            case "w:br":
            case "w:cr":
              run.addChild(Break.fromXML(word, child));
              break;
            case "w:drawing":
              run.addChild(Drawing.fromXML(word, child));
              break;
            case "w:tab":
              run.addChild(Tab.fromXML(word, child));
              break;
            case "w:fldChar":
              run.fldChar = child.getAttribute("w:fldCharType");
              break;
            case "w:instrText":
              run.addChild(new InstrText(child.textContent || ""));
              break;
            case "w:lastRenderedPageBreak":
              var pageBreak = new Break();
              pageBreak.type = "page";
              run.addChild(pageBreak);
              break;
            case "w:pict":
              run.addChild(Pict.fromXML(word, child));
              break;
            case "w:ruby":
              run.addChild(Ruby.fromXML(word, child));
              break;
            case "w:sym":
              run.addChild(Sym.parseXML(child));
              break;
            case "mc:AlternateContent":
              var drawingChild = child.getElementsByTagName("w:drawing").item(0);
              if (drawingChild) {
                run.addChild(Drawing.fromXML(word, drawingChild));
              }
              break;
            case "w:softHyphen":
              run.addChild(new SoftHyphen());
              break;
            case "w:noBreakHyphen":
              run.addChild(new NoBreakHyphen());
              break;
            case "w:separator":
              run.addChild(new Separator());
              break;
            case "w:continuationSeparator":
              break;
            default:
              console.warn("parse Run: Unknown key", tagName, child);
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b2.return))
            _a2.call(_b2);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return run;
    };
    return Run2;
  }()
);

// node_modules/office-viewer/esm/openxml/word/Hyperlink.js
var Hyperlink = (
  /** @class */
  function() {
    function Hyperlink2() {
      this.children = [];
    }
    Hyperlink2.prototype.addChild = function(Run2) {
      this.children.push(Run2);
    };
    Hyperlink2.fromXML = function(word, element) {
      var e_1, _a2;
      var hyperlink = new Hyperlink2();
      var rId = element.getAttribute("r:id");
      if (rId) {
        var rel = word.getDocumentRels(rId);
        if (rel) {
          hyperlink.relation = rel;
        }
      }
      var anchor = element.getAttribute("w:anchor");
      if (anchor) {
        hyperlink.anchor = anchor;
      }
      var tooltip = element.getAttribute("w:tooltip");
      if (tooltip) {
        hyperlink.tooltip = tooltip;
      }
      try {
        for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
          var child = _c.value;
          var tagName = child.tagName;
          switch (tagName) {
            case "w:r":
              hyperlink.addChild(Run.fromXML(word, child));
              break;
            default:
              console.warn("parse Hyperlink: Unknown key", tagName, child);
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b2.return))
            _a2.call(_b2);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return hyperlink;
    };
    return Hyperlink2;
  }()
);

// node_modules/office-viewer/esm/openxml/word/numbering/NumberProperties.js
var NumberPr = (
  /** @class */
  function() {
    function NumberPr2() {
    }
    NumberPr2.fromXML = function(word, element) {
      var numPr = new NumberPr2();
      var ilvl = element.getElementsByTagName("w:ilvl").item(0);
      if (ilvl) {
        numPr.ilvl = getVal(ilvl);
      }
      var numId = element.getElementsByTagName("w:numId").item(0);
      if (numId) {
        numPr.numId = getVal(numId);
      }
      return numPr;
    };
    return NumberPr2;
  }()
);

// node_modules/office-viewer/esm/openxml/word/InlineText.js
var InlineText = (
  /** @class */
  function() {
    function InlineText2() {
      this.children = [];
    }
    InlineText2.prototype.addChild = function(child) {
      this.children.push(child);
    };
    InlineText2.fromXML = function(word, element) {
      var e_1, _a2;
      var smartTag = new InlineText2();
      try {
        for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
          var child = _c.value;
          var tagName = child.tagName;
          switch (tagName) {
            case "w:r":
              smartTag.addChild(Run.fromXML(word, child));
              break;
            case "w:hyperlink":
              smartTag.addChild(Hyperlink.fromXML(word, child));
              break;
            case "w:bookmarkStart":
              smartTag.addChild(BookmarkStart.fromXML(word, child));
            case "w:bookmarkEnd":
              break;
            case "w:proofErr":
            case "w:noProof":
              break;
            case "w:smartTagPr":
              break;
            case "w:del":
              break;
            default:
              console.warn("parse Inline: Unknown key", tagName, child);
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b2.return))
            _a2.call(_b2);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return smartTag;
    };
    return InlineText2;
  }()
);

// node_modules/office-viewer/esm/openxml/word/FldSimple.js
var FldSimple = (
  /** @class */
  function() {
    function FldSimple2() {
    }
    FldSimple2.fromXML = function(word, element) {
      var fldSimple = new FldSimple2();
      fldSimple.inlineText = InlineText.fromXML(word, element);
      fldSimple.instr = element.getAttribute("w:instr") || "";
      return fldSimple;
    };
    return FldSimple2;
  }()
);

// node_modules/office-viewer/esm/openxml/math/OMath.js
var OMath = (
  /** @class */
  function() {
    function OMath2() {
    }
    OMath2.fromXML = function(word, element) {
      var math = new OMath2();
      math.element = element;
      return math;
    };
    return OMath2;
  }()
);

// node_modules/office-viewer/esm/openxml/word/Paragraph.js
function parseAutoSpace(element) {
  var autoSpaceDE = element.getElementsByTagName("w:autoSpaceDE").item(0);
  var autoSpaceDN = element.getElementsByTagName("w:autoSpaceDN").item(0);
  return !!autoSpaceDE || !!autoSpaceDN;
}
var Paragraph = (
  /** @class */
  function() {
    function Paragraph2() {
      this.properties = {};
      this.children = [];
      this.fldSimples = [];
    }
    Paragraph2.prototype.addChild = function(child) {
      this.children.push(child);
    };
    Paragraph2.parseParagraphPr = function(word, element) {
      var e_1, _a2;
      var cssStyle = parsePr(word, element);
      var pStyle;
      var pStyleTag = element.getElementsByTagName("w:pStyle").item(0);
      if (pStyleTag) {
        pStyle = getVal(pStyleTag);
      }
      var numPr;
      var numPrTag = element.getElementsByTagName("w:numPr").item(0);
      if (numPrTag) {
        numPr = NumberPr.fromXML(word, numPrTag);
      }
      var tabs = [];
      var tabElements = element.getElementsByTagName("w:tab");
      try {
        for (var tabElements_1 = __values(tabElements), tabElements_1_1 = tabElements_1.next(); !tabElements_1_1.done; tabElements_1_1 = tabElements_1.next()) {
          var tabElement = tabElements_1_1.value;
          tabs.push(Tab.fromXML(word, tabElement));
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (tabElements_1_1 && !tabElements_1_1.done && (_a2 = tabElements_1.return))
            _a2.call(tabElements_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      var autoSpace = parseAutoSpace(element);
      return { cssStyle, pStyle, numPr, tabs, autoSpace };
    };
    Paragraph2.fromXML = function(word, element) {
      var e_2, _a2;
      var paragraph = new Paragraph2();
      paragraph.fldSimples = [];
      paragraph.paraId = element.getAttribute("w14:paraId") || "";
      try {
        for (var _b2 = __values(mergeSdt(element)), _c = _b2.next(); !_c.done; _c = _b2.next()) {
          var child = _c.value;
          var tagName = child.tagName;
          switch (tagName) {
            case "w:pPr":
              paragraph.properties = Paragraph2.parseParagraphPr(word, child);
              break;
            case "w:r":
              paragraph.addChild(Run.fromXML(word, child));
              break;
            case "w:hyperlink":
              paragraph.addChild(Hyperlink.fromXML(word, child));
              break;
            case "w:bookmarkStart":
              paragraph.addChild(BookmarkStart.fromXML(word, child));
            case "w:bookmarkEnd":
              break;
            case "w:proofErr":
            case "w:noProof":
              break;
            case "w:del":
            case "w:moveTo":
            case "w:moveFrom":
              break;
            case "w:fldSimple":
              paragraph.fldSimples.push(FldSimple.fromXML(word, child));
              break;
            case "m:oMathPara":
            case "m:oMath":
              paragraph.addChild(OMath.fromXML(word, child));
              break;
            default:
              console.warn("parse Paragraph: Unknown key", tagName, child);
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b2.return))
            _a2.call(_b2);
        } finally {
          if (e_2)
            throw e_2.error;
        }
      }
      return paragraph;
    };
    return Paragraph2;
  }()
);

// node_modules/office-viewer/esm/openxml/Style.js
function parseDefaultStyle(word, element) {
  var defaultStyle = {};
  if (!element) {
    return defaultStyle;
  }
  var rPrDefault = element.getElementsByTagName("w:rPrDefault").item(0);
  if (rPrDefault) {
    var rPr = rPrDefault.getElementsByTagName("w:rPr").item(0);
    if (rPr) {
      defaultStyle.rPr = Run.parseRunPr(word, rPr);
    }
  }
  var pPrDefault = element.getElementsByTagName("w:pPrDefault").item(0);
  if (pPrDefault) {
    var pPr = pPrDefault.getElementsByTagName("w:pPr").item(0);
    if (pPr) {
      defaultStyle.pPr = Paragraph.parseParagraphPr(word, pPr);
    }
  }
  return defaultStyle;
}
function parseTblStylePr(word, element) {
  var e_1, _a2;
  var style = {};
  try {
    for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var child = _c.value;
      var tag = child.tagName;
      switch (tag) {
        case "w:rPr":
          style.rPr = Run.parseRunPr(word, child);
          break;
        case "w:pPr":
          style.pPr = Paragraph.parseParagraphPr(word, child);
          break;
        case "w:tblPr":
          style.tblPr = parseTablePr(word, child);
          break;
        case "w:tcPr":
          style.tcPr = parseTcPr(word, child);
          break;
        case "w:trPr":
          style.trPr = parseTrPr(word, child);
          break;
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return style;
}
function parseStyle(word, element) {
  var e_2, _a2;
  var style = {};
  style.id = element.getAttribute("w:styleId") || "";
  style.type = element.getAttribute("w:type");
  style.tblStylePr = {};
  Object.assign(style, parseTblStylePr(word, element));
  try {
    for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var child = _c.value;
      var tag = child.tagName;
      switch (tag) {
        case "w:name":
          style.name = getVal(child);
          break;
        case "w:basedOn":
          style.basedOn = getVal(child);
          break;
        case "w:rPr":
        case "w:pPr":
        case "w:tblPr":
        case "w:tcPr":
        case "w:trPr":
          break;
        case "w:tblStylePr":
          var type = child.getAttribute("w:type");
          style.tblStylePr[type] = parseTblStylePr(word, child);
          break;
        case "w:next":
        case "w:link":
        case "w:unhideWhenUsed":
        case "w:qFormat":
        case "w:rsid":
        case "w:uiPriority":
        case "w:semiHidden":
        case "w:autoRedefine":
          break;
        default:
          console.warn("parseStyle Unknown tag", tag, child);
      }
    }
  } catch (e_2_1) {
    e_2 = { error: e_2_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_2)
        throw e_2.error;
    }
  }
  return style;
}
function parseStyles(word, doc) {
  var e_3, _a2;
  var styles = {
    styleMap: {}
  };
  var stylesElement = Array.from(doc.getElementsByTagName("w:style"));
  try {
    for (var stylesElement_1 = __values(stylesElement), stylesElement_1_1 = stylesElement_1.next(); !stylesElement_1_1.done; stylesElement_1_1 = stylesElement_1.next()) {
      var styleElement = stylesElement_1_1.value;
      var style = parseStyle(word, styleElement);
      if (style.id) {
        styles.styleMap[style.id] = style;
      }
    }
  } catch (e_3_1) {
    e_3 = { error: e_3_1 };
  } finally {
    try {
      if (stylesElement_1_1 && !stylesElement_1_1.done && (_a2 = stylesElement_1.return))
        _a2.call(stylesElement_1);
    } finally {
      if (e_3)
        throw e_3.error;
    }
  }
  styles.defaultStyle = parseDefaultStyle(word, doc.getElementsByTagName("w:docDefaults").item(0));
  return styles;
}

// node_modules/office-viewer/esm/openxml/Theme.js
var ClrScheme = (
  /** @class */
  function() {
    function ClrScheme2() {
      this.colors = {};
    }
    return ClrScheme2;
  }()
);
function parseClrScheme(doc) {
  var e_1, _a2;
  var scheme = new ClrScheme();
  if (!doc) {
    return scheme;
  }
  scheme.name = doc.getAttribute("name") || "";
  try {
    for (var _b2 = __values(doc.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var child = _c.value;
      var colorName = child.tagName.replace("a:", "");
      var clr = child.firstElementChild;
      if (clr) {
        var clrName = clr.nodeName.replace("a:", "");
        if (clrName === "sysClr") {
          scheme.colors[colorName] = clr.getAttribute("lastClr") || "";
        } else if (clrName === "srgbClr") {
          scheme.colors[colorName] = "#" + clr.getAttribute("val") || "";
        } else if (clrName === "scrgbClr") {
          var r = getAttrPercent(child, "r") * 256;
          var g = getAttrPercent(child, "g") * 256;
          var b = getAttrPercent(child, "b") * 256;
          scheme.colors[colorName] = "rgb(".concat(r, ", ").concat(g, ", ").concat(b, ")");
        } else if (clrName === "hslClr") {
          var h = convertAngle(child.getAttribute("hue"));
          var s = getAttrPercent(child, "sat") * 100;
          var l = getAttrPercent(child, "lum") * 100;
          scheme.colors[colorName] = "hsl(".concat(h, ", ").concat(s, "%, ").concat(l, "%)");
        } else if (clrName === "prstClr") {
          scheme.colors[colorName] = getVal(child);
        } else {
          console.error("unknown clr name", clrName);
        }
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return scheme;
}
function parseFontScheme(doc) {
  var scheme = {};
  return scheme;
}
function parseFmtScheme(data) {
  var scheme = {};
  return scheme;
}
function parseThemeElements(element) {
  var themeElements = {};
  if (element) {
    themeElements.clrScheme = parseClrScheme(element.getElementsByTagName("a:clrScheme").item(0));
    themeElements.fontScheme = parseFontScheme(element.getElementsByTagName("a:fontScheme").item(0));
    themeElements.fmtScheme = parseFmtScheme(element.getElementsByTagName("a:fmtScheme").item(0));
  }
  return themeElements;
}
function parseTheme(doc) {
  var theme = {};
  theme.themeElements = parseThemeElements(doc.getElementsByTagName("a:themeElements").item(0));
  return theme;
}

// node_modules/office-viewer/esm/util/dom.js
function styleToText(style) {
  if (style === void 0) {
    style = {};
  }
  var text = "";
  for (var key in style) {
    var value = style[key];
    if (value != null && value !== "") {
      text += "".concat(key, ": ").concat(value, ";\n");
    }
  }
  return text;
}
function applyStyle(el, style) {
  if (!style) {
    return;
  }
  for (var key in style) {
    var value = style[key];
    if (value != null && value !== "") {
      el.style.setProperty(key, String(value));
    }
  }
}
function createElement(tagName) {
  return document.createElement(tagName);
}
function createSVGElement(tagName) {
  return document.createElementNS("http://www.w3.org/2000/svg", tagName);
}
function appendChild(parent, child) {
  if (parent && child) {
    parent.appendChild(child);
  }
}
function removeChild(parent, child) {
  if (parent && child) {
    parent.removeChild(child);
  }
}
function addClassName(el, className) {
  if (el && className) {
    el.classList.add(className);
  }
}
function addClassNames(el, classNames) {
  var _a2;
  if (el && classNames) {
    (_a2 = el.classList).add.apply(_a2, __spreadArray([], __read(classNames), false));
  }
}

// node_modules/office-viewer/esm/render/renderBr.js
function renderBr(word, brak) {
  if (brak.type === "page") {
    word.breakPage = true;
  }
  var br = createElement("br");
  return br;
}

// node_modules/office-viewer/esm/render/renderStyle.js
function generateDefaultStyle(word) {
  var _a2;
  var styles = word.styles;
  var defaultStyle = styles.defaultStyle;
  var defaultPStyle = "";
  if (defaultStyle === null || defaultStyle === void 0 ? void 0 : defaultStyle.pPr) {
    defaultPStyle = styleToText(defaultStyle.pPr.cssStyle);
  }
  var defaultRStyle = "";
  if (defaultStyle === null || defaultStyle === void 0 ? void 0 : defaultStyle.rPr) {
    defaultRStyle = styleToText(defaultStyle.rPr.cssStyle);
  }
  var hyphens = ((_a2 = word.settings) === null || _a2 === void 0 ? void 0 : _a2.autoHyphenation) ? "hyphens: auto;" : "";
  var classPrefix = word.getClassPrefix();
  return "\n\n\n  /** docDefaults **/\n  .".concat(classPrefix, " {\n    --docx-theme-font-minorHAnsi: Calibri,  Helvetica, Arial, 'Helvetica Neue';\n    --docx-theme-font-minorEastAsia: 'PingFang SC', 'Microsoft YaHei', 'Hiragino Sans GB', 'STHeiti',\n    'Microsoft YaHei';\n  }\n\n  .").concat(classPrefix, " p {\n    margin: 0;\n    padding: 0;\n    line-height: 1.5;\n    ").concat(hyphens, "\n  }\n\n  .").concat(classPrefix, " .justify {\n    text-align-last: left;\n  }\n\n  .").concat(classPrefix, " table {\n    border-spacing: 0;\n  }\n\n  .").concat(classPrefix, " .").concat(classPrefix, "-p {\n    ").concat(defaultPStyle, "\n  }\n\n  .").concat(classPrefix, " .").concat(classPrefix, "-r {\n    overflow-wrap: break-word;\n    ").concat(defaultRStyle, "\n  }\n  ");
}
function generateTableStyle(classPrefix, styleDisplayId, style) {
  var tblStyleText = "";
  var tblPr = style.tblPr;
  var tcPr = style.tcPr;
  if (tblPr) {
    var tblStyle = styleToText(tblPr.cssStyle);
    var tblTcStyle = styleToText(tblPr.tcCSSStyle);
    tblStyleText += "\n .".concat(classPrefix, " .").concat(styleDisplayId, " {\n  border-collapse: collapse;\n  ").concat(tblStyle, "\n }\n\n .").concat(classPrefix, " .").concat(styleDisplayId, " > tbody > tr > td {\n  ").concat(tblTcStyle, "\n }\n ");
    if (tblPr.insideBorder) {
      var insideBorder = tblPr.insideBorder;
      if (insideBorder.H) {
        tblStyleText += "\n      .".concat(classPrefix, " .").concat(styleDisplayId, " > tbody > tr > td {\n        border-top: ").concat(insideBorder.H, ";\n      }");
      }
      if (insideBorder.V) {
        tblStyleText += "\n      .".concat(classPrefix, " .").concat(styleDisplayId, " > tbody > tr > td {\n        border-left: ").concat(insideBorder.V, ";\n      }");
      }
    }
  }
  if (tcPr) {
    var tcStyle = styleToText(tcPr.cssStyle);
    tblStyleText += "\n    .".concat(classPrefix, " .").concat(styleDisplayId, " > tbody > tr > td {\n     ").concat(tcStyle, "\n    }\n    ");
  }
  return tblStyleText;
}
function genTblOverrideStyle(tblPrefix, classPrefix, overrideType, tblStylePrStyle) {
  var _a2, _b2, _c, _d, _e, _f;
  var styleText = "";
  var trStyle = styleToText((_a2 = tblStylePrStyle.trPr) === null || _a2 === void 0 ? void 0 : _a2.cssStyle);
  var enableType = "";
  switch (overrideType) {
    case "firstCol":
      enableType = "enable-firstColumn";
      break;
    case "lastCol":
      enableType = "enable-lastColumn";
      break;
    case "firstRow":
      enableType = "enable-firstRow";
      break;
    case "lastRow":
      enableType = "enable-lastRow";
      break;
    case "band1Horz":
    case "band2Horz":
      enableType = "enable-hBand";
      break;
    case "band1Vert":
    case "band2Vert":
      enableType = "enable-vBand";
      break;
  }
  if (trStyle) {
    styleText += "\n    ".concat(tblPrefix, ".").concat(enableType, " > tbody > tr.").concat(overrideType, "{\n       ").concat(trStyle, "\n    }\n    ");
  }
  var tcStyle = styleToText((_b2 = tblStylePrStyle.tcPr) === null || _b2 === void 0 ? void 0 : _b2.cssStyle);
  if (tcStyle) {
    styleText += "\n    ".concat(tblPrefix, ".").concat(enableType, " > tbody > tr > td.").concat(overrideType, " {\n       ").concat(tcStyle, "\n    }\n    ");
    if ((_c = tblStylePrStyle.tcPr) === null || _c === void 0 ? void 0 : _c.insideBorder) {
      var insideBorder = (_d = tblStylePrStyle.tcPr) === null || _d === void 0 ? void 0 : _d.insideBorder;
      if (insideBorder.H) {
        styleText += "\n          ".concat(tblPrefix, ".").concat(enableType, " > tbody > tr > td.").concat(overrideType, " {\n            border-top: ").concat(insideBorder.H, ";\n          }");
      }
      if (insideBorder.V) {
        if (insideBorder.V === "none") {
          styleText += "\n          ".concat(tblPrefix, ".").concat(enableType, " > tbody > tr > td.").concat(overrideType, " {\n            border-left: none;\n            border-right: none;\n          }");
        } else {
          styleText += "\n          ".concat(tblPrefix, ".").concat(enableType, " > tbody > tr > td.").concat(overrideType, " {\n            border-left: ").concat(insideBorder.V, ";\n          }");
        }
      }
    }
  }
  var pStyle = styleToText((_e = tblStylePrStyle.pPr) === null || _e === void 0 ? void 0 : _e.cssStyle);
  if (pStyle) {
    styleText += "\n    ".concat(tblPrefix, ".").concat(enableType, " > tbody > tr > td.").concat(overrideType, " > .").concat(classPrefix, "-p {\n       ").concat(pStyle, "\n    }\n    ");
  }
  var rStyle = styleToText((_f = tblStylePrStyle.rPr) === null || _f === void 0 ? void 0 : _f.cssStyle);
  if (rStyle) {
    styleText += "\n    ".concat(tblPrefix, ".").concat(enableType, " > tbody > tr > td.").concat(overrideType, " > .").concat(classPrefix, "-p > .").concat(classPrefix, "-r {\n       ").concat(rStyle, "\n    }\n    ");
  }
  return styleText;
}
var overrideTypeOrder = /* @__PURE__ */ new Set([
  "wholeTable",
  "band1Horz",
  "band2Horz",
  "band1Vert",
  "band2Vert",
  "firstCol",
  "firstRow",
  "lastCol",
  "lastRow",
  "neCell",
  "nwCell",
  "seCell",
  "swCell"
]);
function genOverrideTblStylePr(classPrefix, styleDisplayId, tblStylePr) {
  var e_1, _a2;
  if (!tblStylePr) {
    return "";
  }
  var tblStylePrText = "";
  var stylePrefix = ".".concat(classPrefix, " .").concat(styleDisplayId);
  try {
    for (var overrideTypeOrder_1 = __values(overrideTypeOrder), overrideTypeOrder_1_1 = overrideTypeOrder_1.next(); !overrideTypeOrder_1_1.done; overrideTypeOrder_1_1 = overrideTypeOrder_1.next()) {
      var overrideType = overrideTypeOrder_1_1.value;
      if (overrideType in tblStylePr) {
        var overrideStylePr = tblStylePr[overrideType];
        tblStylePrText += genTblOverrideStyle(stylePrefix, classPrefix, overrideType, overrideStylePr);
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (overrideTypeOrder_1_1 && !overrideTypeOrder_1_1.done && (_a2 = overrideTypeOrder_1.return))
        _a2.call(overrideTypeOrder_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return tblStylePrText;
}
function generateStyle(word) {
  var styles = word.styles;
  var styleMap = styles.styleMap;
  var classPrefix = word.getClassPrefix();
  var styleResult = "";
  for (var styleId in styleMap) {
    var styleDisplayId = word.getStyleIdDisplayName(styleId);
    var styleData = styleMap[styleId];
    var pPr = styleData.pPr;
    var pStyleText = "";
    if (pPr) {
      var pStyle = styleToText(pPr.cssStyle);
      pStyleText = "\n      .".concat(classPrefix, " .").concat(styleDisplayId, " {\n        ").concat(pStyle, "\n      }\n      ");
    }
    var rStyleText = "";
    if (styleData.rPr) {
      var rStyle = styleToText(styleData.rPr.cssStyle);
      rStyleText = "\n      .".concat(classPrefix, " .").concat(styleDisplayId, " > .").concat(classPrefix, "-r {\n        ").concat(rStyle, "\n      }\n      ");
    }
    var tblStyleText = generateTableStyle(classPrefix, styleDisplayId, styleData);
    var tblStylePr = genOverrideTblStylePr(classPrefix, styleDisplayId, styleData.tblStylePr);
    styleResult += "\n    ".concat(pStyleText, "\n    ").concat(rStyleText, "\n    ").concat(tblStyleText, "\n    ").concat(tblStylePr, "\n    ");
  }
  return styleResult;
}
function renderStyle(word) {
  var style = createElement("style");
  var docDefaults = generateDefaultStyle(word);
  var styleText = generateStyle(word);
  style.textContent = "\n  ".concat(docDefaults, "\n\n  ").concat(styleText, "\n  ");
  return style;
}

// node_modules/office-viewer/esm/render/setElementStyle.js
function setElementStyle(word, element, properties) {
  if (!properties) {
    return;
  }
  if (properties.cssStyle) {
    applyStyle(element, properties.cssStyle);
    if (properties.cssStyle["text-align"] === "justify") {
      addClassName(element, "justify");
    }
  }
  if (properties.pStyle) {
    addClassNames(element, word.getStyleClassName(properties.pStyle));
  }
  if (properties.rStyle) {
    addClassNames(element, word.getStyleClassName(properties.rStyle));
  }
}

// node_modules/office-viewer/esm/render/renderTable.js
function setTdClassName(rowIndex, colIndex, rowLength, colLength, element, rowBandSize, colBandSize) {
  if (rowIndex === 0 && colIndex === 0) {
    element.classList.add("nwCell");
  }
  if (rowIndex === 0 && colIndex === colLength - 1) {
    element.classList.add("neCell");
  }
  if (rowIndex === rowLength - 1 && colIndex === 0) {
    element.classList.add("swCell");
  }
  if (rowIndex === rowLength - 1 && colIndex === colLength - 1) {
    element.classList.add("seCell");
  }
  if (rowIndex === 0) {
    element.classList.add("firstRow");
  }
  if (rowIndex === rowLength - 1) {
    element.classList.add("lastRow");
  }
  if (colIndex === 0) {
    element.classList.add("firstCol");
  }
  if (colIndex === colLength - 1) {
    element.classList.add("lastCol");
  }
  if (isOdd(rowIndex + 1)) {
    element.classList.add("band1Horz");
  }
  if (!isOdd(rowIndex + 1)) {
    element.classList.add("band2Horz");
  }
  if (isOdd(colIndex + 1)) {
    element.classList.add("band1Vert");
  }
  if (!isOdd(colIndex + 1)) {
    element.classList.add("band2Vert");
  }
}
function isOdd(num, size) {
  return !(num % 2);
}
function renderTable(word, table) {
  var e_1, _a2, e_2, _b2, e_3, _c;
  var tableEl = document.createElement("table");
  var properties = table.properties;
  if (properties.tblCaption) {
    var caption = document.createElement("caption");
    caption.textContent = properties.tblCaption;
    tableEl.appendChild(caption);
  }
  if (properties.tblLook) {
    for (var key in properties.tblLook) {
      if (key === "noHBand") {
        if (!properties.tblLook[key]) {
          addClassName(tableEl, "enable-hBand");
        }
      } else if (key === "noVBand") {
        if (!properties.tblLook[key]) {
          addClassName(tableEl, "enable-vBand");
        }
      } else if (properties.tblLook[key]) {
        addClassName(tableEl, "enable-" + key);
      }
    }
  }
  setElementStyle(word, tableEl, properties);
  var customClass = word.genClassName();
  tableEl.classList.add(customClass);
  word.appendStyle(generateTableStyle(word.getClassPrefix(), customClass, { tblPr: properties }));
  var tbody = document.createElement("tbody");
  tableEl.appendChild(tbody);
  var rowIndex = 0;
  try {
    for (var _d = __values(table.trs), _e = _d.next(); !_e.done; _e = _d.next()) {
      var tr = _e.value;
      var trEl = document.createElement("tr");
      tbody.appendChild(trEl);
      var colIndex = 0;
      try {
        for (var _f = (e_2 = void 0, __values(tr.tcs)), _g = _f.next(); !_g.done; _g = _f.next()) {
          var tc = _g.value;
          var tdEl = document.createElement("td");
          trEl.appendChild(tdEl);
          setTdClassName(rowIndex, colIndex, table.trs.length, tr.tcs.length, tdEl, properties.rowBandSize, properties.colBandSize);
          if (tr.properties.tcStyle) {
            applyStyle(tdEl, tr.properties.tcStyle);
          }
          var tcPr = tc.properties;
          setElementStyle(word, tdEl, tcPr);
          if (tcPr.gridSpan) {
            tdEl.colSpan = tcPr.gridSpan;
          }
          if (tcPr.rowSpan) {
            tdEl.rowSpan = tcPr.rowSpan;
          }
          var renderSpace = true;
          if (tcPr.hideMark) {
            renderSpace = false;
          }
          try {
            for (var _h = (e_3 = void 0, __values(tc.children)), _j = _h.next(); !_j.done; _j = _h.next()) {
              var tcChild = _j.value;
              if (tcChild instanceof Paragraph) {
                var p = renderParagraph(word, tcChild, renderSpace);
                appendChild(tdEl, p);
              } else if (tcChild instanceof Table) {
                renderSpace = false;
                appendChild(tdEl, renderTable(word, tcChild));
              } else {
                console.warn("unknown child type: " + tcChild);
              }
            }
          } catch (e_3_1) {
            e_3 = { error: e_3_1 };
          } finally {
            try {
              if (_j && !_j.done && (_c = _h.return))
                _c.call(_h);
            } finally {
              if (e_3)
                throw e_3.error;
            }
          }
          if (tcPr.rowSpan) {
            colIndex += tcPr.rowSpan;
          } else {
            colIndex++;
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (_g && !_g.done && (_b2 = _f.return))
            _b2.call(_f);
        } finally {
          if (e_2)
            throw e_2.error;
        }
      }
      rowIndex++;
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_e && !_e.done && (_a2 = _d.return))
        _a2.call(_d);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return tableEl;
}

// node_modules/office-viewer/esm/openxml/drawing/presetShape.js
var presetShape = {
  accentBorderCallout1: {
    avLst: [
      {
        n: "adj1",
        f: "val 18750"
      },
      {
        n: "adj2",
        f: "val -8333"
      },
      {
        n: "adj3",
        f: "val 112500"
      },
      {
        n: "adj4",
        f: "val -38333"
      }
    ],
    gdLst: [
      {
        n: "y1",
        f: "*/ h adj1 100000"
      },
      {
        n: "x1",
        f: "*/ w adj2 100000"
      },
      {
        n: "y2",
        f: "*/ h adj3 100000"
      },
      {
        n: "x2",
        f: "*/ w adj4 100000"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "t"
            }
          },
          {
            type: "close"
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "b"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  accentBorderCallout2: {
    avLst: [
      {
        n: "adj1",
        f: "val 18750"
      },
      {
        n: "adj2",
        f: "val -8333"
      },
      {
        n: "adj3",
        f: "val 18750"
      },
      {
        n: "adj4",
        f: "val -16667"
      },
      {
        n: "adj5",
        f: "val 112500"
      },
      {
        n: "adj6",
        f: "val -46667"
      }
    ],
    gdLst: [
      {
        n: "y1",
        f: "*/ h adj1 100000"
      },
      {
        n: "x1",
        f: "*/ w adj2 100000"
      },
      {
        n: "y2",
        f: "*/ h adj3 100000"
      },
      {
        n: "x2",
        f: "*/ w adj4 100000"
      },
      {
        n: "y3",
        f: "*/ h adj5 100000"
      },
      {
        n: "x3",
        f: "*/ w adj6 100000"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "t"
            }
          },
          {
            type: "close"
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "b"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y3"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  accentBorderCallout3: {
    avLst: [
      {
        n: "adj1",
        f: "val 18750"
      },
      {
        n: "adj2",
        f: "val -8333"
      },
      {
        n: "adj3",
        f: "val 18750"
      },
      {
        n: "adj4",
        f: "val -16667"
      },
      {
        n: "adj5",
        f: "val 100000"
      },
      {
        n: "adj6",
        f: "val -16667"
      },
      {
        n: "adj7",
        f: "val 112963"
      },
      {
        n: "adj8",
        f: "val -8333"
      }
    ],
    gdLst: [
      {
        n: "y1",
        f: "*/ h adj1 100000"
      },
      {
        n: "x1",
        f: "*/ w adj2 100000"
      },
      {
        n: "y2",
        f: "*/ h adj3 100000"
      },
      {
        n: "x2",
        f: "*/ w adj4 100000"
      },
      {
        n: "y3",
        f: "*/ h adj5 100000"
      },
      {
        n: "x3",
        f: "*/ w adj6 100000"
      },
      {
        n: "y4",
        f: "*/ h adj7 100000"
      },
      {
        n: "x4",
        f: "*/ w adj8 100000"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "t"
            }
          },
          {
            type: "close"
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "b"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y4"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  accentCallout1: {
    avLst: [
      {
        n: "adj1",
        f: "val 18750"
      },
      {
        n: "adj2",
        f: "val -8333"
      },
      {
        n: "adj3",
        f: "val 112500"
      },
      {
        n: "adj4",
        f: "val -38333"
      }
    ],
    gdLst: [
      {
        n: "y1",
        f: "*/ h adj1 100000"
      },
      {
        n: "x1",
        f: "*/ w adj2 100000"
      },
      {
        n: "y2",
        f: "*/ h adj3 100000"
      },
      {
        n: "x2",
        f: "*/ w adj4 100000"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "t"
            }
          },
          {
            type: "close"
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "b"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  accentCallout2: {
    avLst: [
      {
        n: "adj1",
        f: "val 18750"
      },
      {
        n: "adj2",
        f: "val -8333"
      },
      {
        n: "adj3",
        f: "val 18750"
      },
      {
        n: "adj4",
        f: "val -16667"
      },
      {
        n: "adj5",
        f: "val 112500"
      },
      {
        n: "adj6",
        f: "val -46667"
      }
    ],
    gdLst: [
      {
        n: "y1",
        f: "*/ h adj1 100000"
      },
      {
        n: "x1",
        f: "*/ w adj2 100000"
      },
      {
        n: "y2",
        f: "*/ h adj3 100000"
      },
      {
        n: "x2",
        f: "*/ w adj4 100000"
      },
      {
        n: "y3",
        f: "*/ h adj5 100000"
      },
      {
        n: "x3",
        f: "*/ w adj6 100000"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "t"
            }
          },
          {
            type: "close"
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "b"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y3"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  accentCallout3: {
    avLst: [
      {
        n: "adj1",
        f: "val 18750"
      },
      {
        n: "adj2",
        f: "val -8333"
      },
      {
        n: "adj3",
        f: "val 18750"
      },
      {
        n: "adj4",
        f: "val -16667"
      },
      {
        n: "adj5",
        f: "val 100000"
      },
      {
        n: "adj6",
        f: "val -16667"
      },
      {
        n: "adj7",
        f: "val 112963"
      },
      {
        n: "adj8",
        f: "val -8333"
      }
    ],
    gdLst: [
      {
        n: "y1",
        f: "*/ h adj1 100000"
      },
      {
        n: "x1",
        f: "*/ w adj2 100000"
      },
      {
        n: "y2",
        f: "*/ h adj3 100000"
      },
      {
        n: "x2",
        f: "*/ w adj4 100000"
      },
      {
        n: "y3",
        f: "*/ h adj5 100000"
      },
      {
        n: "x3",
        f: "*/ w adj6 100000"
      },
      {
        n: "y4",
        f: "*/ h adj7 100000"
      },
      {
        n: "x4",
        f: "*/ w adj8 100000"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "t"
            }
          },
          {
            type: "close"
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "b"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y4"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  actionButtonBackPrevious: {
    gdLst: [
      {
        n: "dx2",
        f: "*/ ss 3 8"
      },
      {
        n: "g9",
        f: "+- vc 0 dx2"
      },
      {
        n: "g10",
        f: "+- vc dx2 0"
      },
      {
        n: "g11",
        f: "+- hc 0 dx2"
      },
      {
        n: "g12",
        f: "+- hc dx2 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "g11",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g10"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "g11",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g10"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "darken",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "g11",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g10"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  actionButtonBeginning: {
    gdLst: [
      {
        n: "dx2",
        f: "*/ ss 3 8"
      },
      {
        n: "g9",
        f: "+- vc 0 dx2"
      },
      {
        n: "g10",
        f: "+- vc dx2 0"
      },
      {
        n: "g11",
        f: "+- hc 0 dx2"
      },
      {
        n: "g12",
        f: "+- hc dx2 0"
      },
      {
        n: "g13",
        f: "*/ ss 3 4"
      },
      {
        n: "g14",
        f: "*/ g13 1 8"
      },
      {
        n: "g15",
        f: "*/ g13 1 4"
      },
      {
        n: "g16",
        f: "+- g11 g14 0"
      },
      {
        n: "g17",
        f: "+- g11 g15 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "g17",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g10"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "g16",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g16",
              y: "g10"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "g17",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g10"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "g16",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g16",
              y: "g10"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "darken",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "g17",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g10"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "g16",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g16",
              y: "g10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g9"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  actionButtonBlank: {
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  actionButtonDocument: {
    gdLst: [
      {
        n: "dx2",
        f: "*/ ss 3 8"
      },
      {
        n: "g9",
        f: "+- vc 0 dx2"
      },
      {
        n: "g10",
        f: "+- vc dx2 0"
      },
      {
        n: "dx1",
        f: "*/ ss 9 32"
      },
      {
        n: "g11",
        f: "+- hc 0 dx1"
      },
      {
        n: "g12",
        f: "+- hc dx1 0"
      },
      {
        n: "g13",
        f: "*/ ss 3 16"
      },
      {
        n: "g14",
        f: "+- g12 0 g13"
      },
      {
        n: "g15",
        f: "+- g9 g13 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "g11",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g14",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g15"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g10"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "g11",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g14",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g14",
              y: "g15"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g15"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g10"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "darkenLess",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "g14",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g14",
              y: "g15"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g15"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "darken",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "g11",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g14",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g15"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g10"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "g12",
              y: "g15"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g14",
              y: "g15"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g14",
              y: "g9"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  actionButtonEnd: {
    gdLst: [
      {
        n: "dx2",
        f: "*/ ss 3 8"
      },
      {
        n: "g9",
        f: "+- vc 0 dx2"
      },
      {
        n: "g10",
        f: "+- vc dx2 0"
      },
      {
        n: "g11",
        f: "+- hc 0 dx2"
      },
      {
        n: "g12",
        f: "+- hc dx2 0"
      },
      {
        n: "g13",
        f: "*/ ss 3 4"
      },
      {
        n: "g14",
        f: "*/ g13 3 4"
      },
      {
        n: "g15",
        f: "*/ g13 7 8"
      },
      {
        n: "g16",
        f: "+- g11 g14 0"
      },
      {
        n: "g17",
        f: "+- g11 g15 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "g16",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g10"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "g17",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g17",
              y: "g10"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "g16",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g10"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "g17",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g17",
              y: "g10"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "darken",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "g16",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g9"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "g17",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g17",
              y: "g10"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  actionButtonForwardNext: {
    gdLst: [
      {
        n: "dx2",
        f: "*/ ss 3 8"
      },
      {
        n: "g9",
        f: "+- vc 0 dx2"
      },
      {
        n: "g10",
        f: "+- vc dx2 0"
      },
      {
        n: "g11",
        f: "+- hc 0 dx2"
      },
      {
        n: "g12",
        f: "+- hc dx2 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "g12",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g10"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "g12",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g10"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "darken",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "g12",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g9"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  actionButtonHelp: {
    gdLst: [
      {
        n: "dx2",
        f: "*/ ss 3 8"
      },
      {
        n: "g9",
        f: "+- vc 0 dx2"
      },
      {
        n: "g11",
        f: "+- hc 0 dx2"
      },
      {
        n: "g13",
        f: "*/ ss 3 4"
      },
      {
        n: "g14",
        f: "*/ g13 1 7"
      },
      {
        n: "g15",
        f: "*/ g13 3 14"
      },
      {
        n: "g16",
        f: "*/ g13 2 7"
      },
      {
        n: "g19",
        f: "*/ g13 3 7"
      },
      {
        n: "g20",
        f: "*/ g13 4 7"
      },
      {
        n: "g21",
        f: "*/ g13 17 28"
      },
      {
        n: "g23",
        f: "*/ g13 21 28"
      },
      {
        n: "g24",
        f: "*/ g13 11 14"
      },
      {
        n: "g27",
        f: "+- g9 g16 0"
      },
      {
        n: "g29",
        f: "+- g9 g21 0"
      },
      {
        n: "g30",
        f: "+- g9 g23 0"
      },
      {
        n: "g31",
        f: "+- g9 g24 0"
      },
      {
        n: "g33",
        f: "+- g11 g15 0"
      },
      {
        n: "g36",
        f: "+- g11 g19 0"
      },
      {
        n: "g37",
        f: "+- g11 g20 0"
      },
      {
        n: "g41",
        f: "*/ g13 1 14"
      },
      {
        n: "g42",
        f: "*/ g13 3 28"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "g33",
              y: "g27"
            }
          },
          {
            type: "arcTo",
            wR: "g16",
            hR: "g16",
            stAng: "cd2",
            swAng: "cd2"
          },
          {
            type: "arcTo",
            wR: "g14",
            hR: "g15",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "g41",
            hR: "g42",
            stAng: "3cd4",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "g37",
              y: "g30"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g36",
              y: "g30"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g36",
              y: "g29"
            }
          },
          {
            type: "arcTo",
            wR: "g14",
            hR: "g15",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "g41",
            hR: "g42",
            stAng: "cd4",
            swAng: "-5400000"
          },
          {
            type: "arcTo",
            wR: "g14",
            hR: "g14",
            stAng: "0",
            swAng: "-10800000"
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "hc",
              y: "g31"
            }
          },
          {
            type: "arcTo",
            wR: "g42",
            hR: "g42",
            stAng: "3cd4",
            swAng: "21600000"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "g33",
              y: "g27"
            }
          },
          {
            type: "arcTo",
            wR: "g16",
            hR: "g16",
            stAng: "cd2",
            swAng: "cd2"
          },
          {
            type: "arcTo",
            wR: "g14",
            hR: "g15",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "g41",
            hR: "g42",
            stAng: "3cd4",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "g37",
              y: "g30"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g36",
              y: "g30"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g36",
              y: "g29"
            }
          },
          {
            type: "arcTo",
            wR: "g14",
            hR: "g15",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "g41",
            hR: "g42",
            stAng: "cd4",
            swAng: "-5400000"
          },
          {
            type: "arcTo",
            wR: "g14",
            hR: "g14",
            stAng: "0",
            swAng: "-10800000"
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "hc",
              y: "g31"
            }
          },
          {
            type: "arcTo",
            wR: "g42",
            hR: "g42",
            stAng: "3cd4",
            swAng: "21600000"
          },
          {
            type: "close"
          }
        ],
        fill: "darken",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "g33",
              y: "g27"
            }
          },
          {
            type: "arcTo",
            wR: "g16",
            hR: "g16",
            stAng: "cd2",
            swAng: "cd2"
          },
          {
            type: "arcTo",
            wR: "g14",
            hR: "g15",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "g41",
            hR: "g42",
            stAng: "3cd4",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "g37",
              y: "g30"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g36",
              y: "g30"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g36",
              y: "g29"
            }
          },
          {
            type: "arcTo",
            wR: "g14",
            hR: "g15",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "g41",
            hR: "g42",
            stAng: "cd4",
            swAng: "-5400000"
          },
          {
            type: "arcTo",
            wR: "g14",
            hR: "g14",
            stAng: "0",
            swAng: "-10800000"
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "hc",
              y: "g31"
            }
          },
          {
            type: "arcTo",
            wR: "g42",
            hR: "g42",
            stAng: "3cd4",
            swAng: "21600000"
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  actionButtonHome: {
    gdLst: [
      {
        n: "dx2",
        f: "*/ ss 3 8"
      },
      {
        n: "g9",
        f: "+- vc 0 dx2"
      },
      {
        n: "g10",
        f: "+- vc dx2 0"
      },
      {
        n: "g11",
        f: "+- hc 0 dx2"
      },
      {
        n: "g12",
        f: "+- hc dx2 0"
      },
      {
        n: "g13",
        f: "*/ ss 3 4"
      },
      {
        n: "g14",
        f: "*/ g13 1 16"
      },
      {
        n: "g15",
        f: "*/ g13 1 8"
      },
      {
        n: "g16",
        f: "*/ g13 3 16"
      },
      {
        n: "g17",
        f: "*/ g13 5 16"
      },
      {
        n: "g18",
        f: "*/ g13 7 16"
      },
      {
        n: "g19",
        f: "*/ g13 9 16"
      },
      {
        n: "g20",
        f: "*/ g13 11 16"
      },
      {
        n: "g21",
        f: "*/ g13 3 4"
      },
      {
        n: "g22",
        f: "*/ g13 13 16"
      },
      {
        n: "g23",
        f: "*/ g13 7 8"
      },
      {
        n: "g24",
        f: "+- g9 g14 0"
      },
      {
        n: "g25",
        f: "+- g9 g16 0"
      },
      {
        n: "g26",
        f: "+- g9 g17 0"
      },
      {
        n: "g27",
        f: "+- g9 g21 0"
      },
      {
        n: "g28",
        f: "+- g11 g15 0"
      },
      {
        n: "g29",
        f: "+- g11 g18 0"
      },
      {
        n: "g30",
        f: "+- g11 g19 0"
      },
      {
        n: "g31",
        f: "+- g11 g20 0"
      },
      {
        n: "g32",
        f: "+- g11 g22 0"
      },
      {
        n: "g33",
        f: "+- g11 g23 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "hc",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g28",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g28",
              y: "g10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g33",
              y: "g10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g33",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g32",
              y: "g26"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g32",
              y: "g24"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g31",
              y: "g24"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g31",
              y: "g25"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "g32",
              y: "g26"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g32",
              y: "g24"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g31",
              y: "g24"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g31",
              y: "g25"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "g28",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g28",
              y: "g10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g29",
              y: "g10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g29",
              y: "g27"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g30",
              y: "g27"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g30",
              y: "g10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g33",
              y: "g10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g33",
              y: "vc"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "darkenLess",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "hc",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "vc"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "g29",
              y: "g27"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g30",
              y: "g27"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g30",
              y: "g10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g29",
              y: "g10"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "darken",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "hc",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g31",
              y: "g25"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g31",
              y: "g24"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g32",
              y: "g24"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g32",
              y: "g26"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g33",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g33",
              y: "g10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g28",
              y: "g10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g28",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "vc"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "g31",
              y: "g25"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g32",
              y: "g26"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "g33",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g28",
              y: "vc"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "g29",
              y: "g10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g29",
              y: "g27"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g30",
              y: "g27"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g30",
              y: "g10"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  actionButtonInformation: {
    gdLst: [
      {
        n: "dx2",
        f: "*/ ss 3 8"
      },
      {
        n: "g9",
        f: "+- vc 0 dx2"
      },
      {
        n: "g11",
        f: "+- hc 0 dx2"
      },
      {
        n: "g13",
        f: "*/ ss 3 4"
      },
      {
        n: "g14",
        f: "*/ g13 1 32"
      },
      {
        n: "g17",
        f: "*/ g13 5 16"
      },
      {
        n: "g18",
        f: "*/ g13 3 8"
      },
      {
        n: "g19",
        f: "*/ g13 13 32"
      },
      {
        n: "g20",
        f: "*/ g13 19 32"
      },
      {
        n: "g22",
        f: "*/ g13 11 16"
      },
      {
        n: "g23",
        f: "*/ g13 13 16"
      },
      {
        n: "g24",
        f: "*/ g13 7 8"
      },
      {
        n: "g25",
        f: "+- g9 g14 0"
      },
      {
        n: "g28",
        f: "+- g9 g17 0"
      },
      {
        n: "g29",
        f: "+- g9 g18 0"
      },
      {
        n: "g30",
        f: "+- g9 g23 0"
      },
      {
        n: "g31",
        f: "+- g9 g24 0"
      },
      {
        n: "g32",
        f: "+- g11 g17 0"
      },
      {
        n: "g34",
        f: "+- g11 g19 0"
      },
      {
        n: "g35",
        f: "+- g11 g20 0"
      },
      {
        n: "g37",
        f: "+- g11 g22 0"
      },
      {
        n: "g38",
        f: "*/ g13 3 32"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "hc",
              y: "g9"
            }
          },
          {
            type: "arcTo",
            wR: "dx2",
            hR: "dx2",
            stAng: "3cd4",
            swAng: "21600000"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "hc",
              y: "g9"
            }
          },
          {
            type: "arcTo",
            wR: "dx2",
            hR: "dx2",
            stAng: "3cd4",
            swAng: "21600000"
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "hc",
              y: "g25"
            }
          },
          {
            type: "arcTo",
            wR: "g38",
            hR: "g38",
            stAng: "3cd4",
            swAng: "21600000"
          },
          {
            type: "moveTo",
            pt: {
              x: "g32",
              y: "g28"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g32",
              y: "g29"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g34",
              y: "g29"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g34",
              y: "g30"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g32",
              y: "g30"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g32",
              y: "g31"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g37",
              y: "g31"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g37",
              y: "g30"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g35",
              y: "g30"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g35",
              y: "g28"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "darken",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "hc",
              y: "g25"
            }
          },
          {
            type: "arcTo",
            wR: "g38",
            hR: "g38",
            stAng: "3cd4",
            swAng: "21600000"
          },
          {
            type: "moveTo",
            pt: {
              x: "g32",
              y: "g28"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g35",
              y: "g28"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g35",
              y: "g30"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g37",
              y: "g30"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g37",
              y: "g31"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g32",
              y: "g31"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g32",
              y: "g30"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g34",
              y: "g30"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g34",
              y: "g29"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g32",
              y: "g29"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "lighten",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "hc",
              y: "g9"
            }
          },
          {
            type: "arcTo",
            wR: "dx2",
            hR: "dx2",
            stAng: "3cd4",
            swAng: "21600000"
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "hc",
              y: "g25"
            }
          },
          {
            type: "arcTo",
            wR: "g38",
            hR: "g38",
            stAng: "3cd4",
            swAng: "21600000"
          },
          {
            type: "moveTo",
            pt: {
              x: "g32",
              y: "g28"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g35",
              y: "g28"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g35",
              y: "g30"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g37",
              y: "g30"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g37",
              y: "g31"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g32",
              y: "g31"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g32",
              y: "g30"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g34",
              y: "g30"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g34",
              y: "g29"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g32",
              y: "g29"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  actionButtonMovie: {
    gdLst: [
      {
        n: "dx2",
        f: "*/ ss 3 8"
      },
      {
        n: "g9",
        f: "+- vc 0 dx2"
      },
      {
        n: "g10",
        f: "+- vc dx2 0"
      },
      {
        n: "g11",
        f: "+- hc 0 dx2"
      },
      {
        n: "g12",
        f: "+- hc dx2 0"
      },
      {
        n: "g13",
        f: "*/ ss 3 4"
      },
      {
        n: "g14",
        f: "*/ g13 1455 21600"
      },
      {
        n: "g15",
        f: "*/ g13 1905 21600"
      },
      {
        n: "g16",
        f: "*/ g13 2325 21600"
      },
      {
        n: "g17",
        f: "*/ g13 16155 21600"
      },
      {
        n: "g18",
        f: "*/ g13 17010 21600"
      },
      {
        n: "g19",
        f: "*/ g13 19335 21600"
      },
      {
        n: "g20",
        f: "*/ g13 19725 21600"
      },
      {
        n: "g21",
        f: "*/ g13 20595 21600"
      },
      {
        n: "g22",
        f: "*/ g13 5280 21600"
      },
      {
        n: "g23",
        f: "*/ g13 5730 21600"
      },
      {
        n: "g24",
        f: "*/ g13 6630 21600"
      },
      {
        n: "g25",
        f: "*/ g13 7492 21600"
      },
      {
        n: "g26",
        f: "*/ g13 9067 21600"
      },
      {
        n: "g27",
        f: "*/ g13 9555 21600"
      },
      {
        n: "g28",
        f: "*/ g13 13342 21600"
      },
      {
        n: "g29",
        f: "*/ g13 14580 21600"
      },
      {
        n: "g30",
        f: "*/ g13 15592 21600"
      },
      {
        n: "g31",
        f: "+- g11 g14 0"
      },
      {
        n: "g32",
        f: "+- g11 g15 0"
      },
      {
        n: "g33",
        f: "+- g11 g16 0"
      },
      {
        n: "g34",
        f: "+- g11 g17 0"
      },
      {
        n: "g35",
        f: "+- g11 g18 0"
      },
      {
        n: "g36",
        f: "+- g11 g19 0"
      },
      {
        n: "g37",
        f: "+- g11 g20 0"
      },
      {
        n: "g38",
        f: "+- g11 g21 0"
      },
      {
        n: "g39",
        f: "+- g9 g22 0"
      },
      {
        n: "g40",
        f: "+- g9 g23 0"
      },
      {
        n: "g41",
        f: "+- g9 g24 0"
      },
      {
        n: "g42",
        f: "+- g9 g25 0"
      },
      {
        n: "g43",
        f: "+- g9 g26 0"
      },
      {
        n: "g44",
        f: "+- g9 g27 0"
      },
      {
        n: "g45",
        f: "+- g9 g28 0"
      },
      {
        n: "g46",
        f: "+- g9 g29 0"
      },
      {
        n: "g47",
        f: "+- g9 g30 0"
      },
      {
        n: "g48",
        f: "+- g9 g31 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "g11",
              y: "g39"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g44"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g31",
              y: "g44"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g32",
              y: "g43"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g33",
              y: "g43"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g33",
              y: "g47"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g35",
              y: "g47"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g35",
              y: "g45"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g36",
              y: "g45"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g38",
              y: "g46"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g46"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g41"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g38",
              y: "g41"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g37",
              y: "g42"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g35",
              y: "g42"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g35",
              y: "g41"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g34",
              y: "g40"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g32",
              y: "g40"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g31",
              y: "g39"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "g11",
              y: "g39"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g44"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g31",
              y: "g44"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g32",
              y: "g43"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g33",
              y: "g43"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g33",
              y: "g47"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g35",
              y: "g47"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g35",
              y: "g45"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g36",
              y: "g45"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g38",
              y: "g46"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g46"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g41"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g38",
              y: "g41"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g37",
              y: "g42"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g35",
              y: "g42"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g35",
              y: "g41"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g34",
              y: "g40"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g32",
              y: "g40"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g31",
              y: "g39"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "darken",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "g11",
              y: "g39"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g31",
              y: "g39"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g32",
              y: "g40"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g34",
              y: "g40"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g35",
              y: "g41"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g35",
              y: "g42"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g37",
              y: "g42"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g38",
              y: "g41"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g41"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g46"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g38",
              y: "g46"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g36",
              y: "g45"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g35",
              y: "g45"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g35",
              y: "g47"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g33",
              y: "g47"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g33",
              y: "g43"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g32",
              y: "g43"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g31",
              y: "g44"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g44"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  actionButtonReturn: {
    gdLst: [
      {
        n: "dx2",
        f: "*/ ss 3 8"
      },
      {
        n: "g9",
        f: "+- vc 0 dx2"
      },
      {
        n: "g10",
        f: "+- vc dx2 0"
      },
      {
        n: "g11",
        f: "+- hc 0 dx2"
      },
      {
        n: "g12",
        f: "+- hc dx2 0"
      },
      {
        n: "g13",
        f: "*/ ss 3 4"
      },
      {
        n: "g14",
        f: "*/ g13 7 8"
      },
      {
        n: "g15",
        f: "*/ g13 3 4"
      },
      {
        n: "g16",
        f: "*/ g13 5 8"
      },
      {
        n: "g17",
        f: "*/ g13 3 8"
      },
      {
        n: "g18",
        f: "*/ g13 1 4"
      },
      {
        n: "g19",
        f: "+- g9 g15 0"
      },
      {
        n: "g20",
        f: "+- g9 g16 0"
      },
      {
        n: "g21",
        f: "+- g9 g18 0"
      },
      {
        n: "g22",
        f: "+- g11 g14 0"
      },
      {
        n: "g23",
        f: "+- g11 g15 0"
      },
      {
        n: "g24",
        f: "+- g11 g16 0"
      },
      {
        n: "g25",
        f: "+- g11 g17 0"
      },
      {
        n: "g26",
        f: "+- g11 g18 0"
      },
      {
        n: "g27",
        f: "*/ g13 1 8"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "g12",
              y: "g21"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g23",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "g21"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g24",
              y: "g21"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g24",
              y: "g20"
            }
          },
          {
            type: "arcTo",
            wR: "g27",
            hR: "g27",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "g25",
              y: "g19"
            }
          },
          {
            type: "arcTo",
            wR: "g27",
            hR: "g27",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "g26",
              y: "g21"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g21"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g20"
            }
          },
          {
            type: "arcTo",
            wR: "g17",
            hR: "g17",
            stAng: "cd2",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "g10"
            }
          },
          {
            type: "arcTo",
            wR: "g17",
            hR: "g17",
            stAng: "cd4",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "g22",
              y: "g21"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "g12",
              y: "g21"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g23",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "g21"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g24",
              y: "g21"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g24",
              y: "g20"
            }
          },
          {
            type: "arcTo",
            wR: "g27",
            hR: "g27",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "g25",
              y: "g19"
            }
          },
          {
            type: "arcTo",
            wR: "g27",
            hR: "g27",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "g26",
              y: "g21"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g21"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g20"
            }
          },
          {
            type: "arcTo",
            wR: "g17",
            hR: "g17",
            stAng: "cd2",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "g10"
            }
          },
          {
            type: "arcTo",
            wR: "g17",
            hR: "g17",
            stAng: "cd4",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "g22",
              y: "g21"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "darken",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "g12",
              y: "g21"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g22",
              y: "g21"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g22",
              y: "g20"
            }
          },
          {
            type: "arcTo",
            wR: "g17",
            hR: "g17",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "g25",
              y: "g10"
            }
          },
          {
            type: "arcTo",
            wR: "g17",
            hR: "g17",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g21"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g26",
              y: "g21"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g26",
              y: "g20"
            }
          },
          {
            type: "arcTo",
            wR: "g27",
            hR: "g27",
            stAng: "cd2",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "g19"
            }
          },
          {
            type: "arcTo",
            wR: "g27",
            hR: "g27",
            stAng: "cd4",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "g24",
              y: "g21"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "g21"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g23",
              y: "g9"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  actionButtonSound: {
    gdLst: [
      {
        n: "dx2",
        f: "*/ ss 3 8"
      },
      {
        n: "g9",
        f: "+- vc 0 dx2"
      },
      {
        n: "g10",
        f: "+- vc dx2 0"
      },
      {
        n: "g11",
        f: "+- hc 0 dx2"
      },
      {
        n: "g12",
        f: "+- hc dx2 0"
      },
      {
        n: "g13",
        f: "*/ ss 3 4"
      },
      {
        n: "g14",
        f: "*/ g13 1 8"
      },
      {
        n: "g15",
        f: "*/ g13 5 16"
      },
      {
        n: "g16",
        f: "*/ g13 5 8"
      },
      {
        n: "g17",
        f: "*/ g13 11 16"
      },
      {
        n: "g18",
        f: "*/ g13 3 4"
      },
      {
        n: "g19",
        f: "*/ g13 7 8"
      },
      {
        n: "g20",
        f: "+- g9 g14 0"
      },
      {
        n: "g21",
        f: "+- g9 g15 0"
      },
      {
        n: "g22",
        f: "+- g9 g17 0"
      },
      {
        n: "g23",
        f: "+- g9 g19 0"
      },
      {
        n: "g24",
        f: "+- g11 g15 0"
      },
      {
        n: "g25",
        f: "+- g11 g16 0"
      },
      {
        n: "g26",
        f: "+- g11 g18 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "g11",
              y: "g21"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g22"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g24",
              y: "g22"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g25",
              y: "g10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g25",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g24",
              y: "g21"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "g11",
              y: "g21"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g22"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g24",
              y: "g22"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g25",
              y: "g10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g25",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g24",
              y: "g21"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "darken",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "g11",
              y: "g21"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g24",
              y: "g21"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g25",
              y: "g9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g25",
              y: "g10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g24",
              y: "g22"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g11",
              y: "g22"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "g26",
              y: "g21"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g20"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "g26",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "vc"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "g26",
              y: "g22"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "g12",
              y: "g23"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  arc: {
    avLst: [
      {
        n: "adj1",
        f: "val 16200000"
      },
      {
        n: "adj2",
        f: "val 0"
      }
    ],
    gdLst: [
      {
        n: "stAng",
        f: "pin 0 adj1 21599999"
      },
      {
        n: "enAng",
        f: "pin 0 adj2 21599999"
      },
      {
        n: "sw11",
        f: "+- enAng 0 stAng"
      },
      {
        n: "sw12",
        f: "+- sw11 21600000 0"
      },
      {
        n: "swAng",
        f: "?: sw11 sw11 sw12"
      },
      {
        n: "wt1",
        f: "sin wd2 stAng"
      },
      {
        n: "ht1",
        f: "cos hd2 stAng"
      },
      {
        n: "dx1",
        f: "cat2 wd2 ht1 wt1"
      },
      {
        n: "dy1",
        f: "sat2 hd2 ht1 wt1"
      },
      {
        n: "wt2",
        f: "sin wd2 enAng"
      },
      {
        n: "ht2",
        f: "cos hd2 enAng"
      },
      {
        n: "dx2",
        f: "cat2 wd2 ht2 wt2"
      },
      {
        n: "dy2",
        f: "sat2 hd2 ht2 wt2"
      },
      {
        n: "x1",
        f: "+- hc dx1 0"
      },
      {
        n: "y1",
        f: "+- vc dy1 0"
      },
      {
        n: "x2",
        f: "+- hc dx2 0"
      },
      {
        n: "y2",
        f: "+- vc dy2 0"
      },
      {
        n: "sw0",
        f: "+- 21600000 0 stAng"
      },
      {
        n: "da1",
        f: "+- swAng 0 sw0"
      },
      {
        n: "g1",
        f: "max x1 x2"
      },
      {
        n: "ir",
        f: "?: da1 r g1"
      },
      {
        n: "sw1",
        f: "+- cd4 0 stAng"
      },
      {
        n: "sw2",
        f: "+- 27000000 0 stAng"
      },
      {
        n: "sw3",
        f: "?: sw1 sw1 sw2"
      },
      {
        n: "da2",
        f: "+- swAng 0 sw3"
      },
      {
        n: "g5",
        f: "max y1 y2"
      },
      {
        n: "ib",
        f: "?: da2 b g5"
      },
      {
        n: "sw4",
        f: "+- cd2 0 stAng"
      },
      {
        n: "sw5",
        f: "+- 32400000 0 stAng"
      },
      {
        n: "sw6",
        f: "?: sw4 sw4 sw5"
      },
      {
        n: "da3",
        f: "+- swAng 0 sw6"
      },
      {
        n: "g9",
        f: "min x1 x2"
      },
      {
        n: "il",
        f: "?: da3 l g9"
      },
      {
        n: "sw7",
        f: "+- 3cd4 0 stAng"
      },
      {
        n: "sw8",
        f: "+- 37800000 0 stAng"
      },
      {
        n: "sw9",
        f: "?: sw7 sw7 sw8"
      },
      {
        n: "da4",
        f: "+- swAng 0 sw9"
      },
      {
        n: "g13",
        f: "min y1 y2"
      },
      {
        n: "it",
        f: "?: da4 t g13"
      },
      {
        n: "cang1",
        f: "+- stAng 0 cd4"
      },
      {
        n: "cang2",
        f: "+- enAng cd4 0"
      },
      {
        n: "cang3",
        f: "+/ cang1 cang2 2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "stAng",
            swAng: "swAng"
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "vc"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "stAng",
            swAng: "swAng"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  bentArrow: {
    avLst: [
      {
        n: "adj1",
        f: "val 25000"
      },
      {
        n: "adj2",
        f: "val 25000"
      },
      {
        n: "adj3",
        f: "val 25000"
      },
      {
        n: "adj4",
        f: "val 43750"
      }
    ],
    gdLst: [
      {
        n: "a2",
        f: "pin 0 adj2 50000"
      },
      {
        n: "maxAdj1",
        f: "*/ a2 2 1"
      },
      {
        n: "a1",
        f: "pin 0 adj1 maxAdj1"
      },
      {
        n: "a3",
        f: "pin 0 adj3 50000"
      },
      {
        n: "th",
        f: "*/ ss a1 100000"
      },
      {
        n: "aw2",
        f: "*/ ss a2 100000"
      },
      {
        n: "th2",
        f: "*/ th 1 2"
      },
      {
        n: "dh2",
        f: "+- aw2 0 th2"
      },
      {
        n: "ah",
        f: "*/ ss a3 100000"
      },
      {
        n: "bw",
        f: "+- r 0 ah"
      },
      {
        n: "bh",
        f: "+- b 0 dh2"
      },
      {
        n: "bs",
        f: "min bw bh"
      },
      {
        n: "maxAdj4",
        f: "*/ 100000 bs ss"
      },
      {
        n: "a4",
        f: "pin 0 adj4 maxAdj4"
      },
      {
        n: "bd",
        f: "*/ ss a4 100000"
      },
      {
        n: "bd3",
        f: "+- bd 0 th"
      },
      {
        n: "bd2",
        f: "max bd3 0"
      },
      {
        n: "x3",
        f: "+- th bd2 0"
      },
      {
        n: "x4",
        f: "+- r 0 ah"
      },
      {
        n: "y3",
        f: "+- dh2 th 0"
      },
      {
        n: "y4",
        f: "+- y3 dh2 0"
      },
      {
        n: "y5",
        f: "+- dh2 bd 0"
      },
      {
        n: "y6",
        f: "+- y3 bd2 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "y5"
            }
          },
          {
            type: "arcTo",
            wR: "bd",
            hR: "bd",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "dh2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "aw2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y3"
            }
          },
          {
            type: "arcTo",
            wR: "bd2",
            hR: "bd2",
            stAng: "3cd4",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "th",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  bentConnector2: {
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  bentConnector3: {
    avLst: [
      {
        n: "adj1",
        f: "val 50000"
      }
    ],
    gdLst: [
      {
        n: "x1",
        f: "*/ w adj1 100000"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  bentConnector4: {
    avLst: [
      {
        n: "adj1",
        f: "val 50000"
      },
      {
        n: "adj2",
        f: "val 50000"
      }
    ],
    gdLst: [
      {
        n: "x1",
        f: "*/ w adj1 100000"
      },
      {
        n: "x2",
        f: "+/ x1 r 2"
      },
      {
        n: "y2",
        f: "*/ h adj2 100000"
      },
      {
        n: "y1",
        f: "+/ t y2 2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  bentConnector5: {
    avLst: [
      {
        n: "adj1",
        f: "val 50000"
      },
      {
        n: "adj2",
        f: "val 50000"
      },
      {
        n: "adj3",
        f: "val 50000"
      }
    ],
    gdLst: [
      {
        n: "x1",
        f: "*/ w adj1 100000"
      },
      {
        n: "x3",
        f: "*/ w adj3 100000"
      },
      {
        n: "x2",
        f: "+/ x1 x3 2"
      },
      {
        n: "y2",
        f: "*/ h adj2 100000"
      },
      {
        n: "y1",
        f: "+/ t y2 2"
      },
      {
        n: "y3",
        f: "+/ b y2 2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  bentUpArrow: {
    avLst: [
      {
        n: "adj1",
        f: "val 25000"
      },
      {
        n: "adj2",
        f: "val 25000"
      },
      {
        n: "adj3",
        f: "val 25000"
      }
    ],
    gdLst: [
      {
        n: "a1",
        f: "pin 0 adj1 50000"
      },
      {
        n: "a2",
        f: "pin 0 adj2 50000"
      },
      {
        n: "a3",
        f: "pin 0 adj3 50000"
      },
      {
        n: "y1",
        f: "*/ ss a3 100000"
      },
      {
        n: "dx1",
        f: "*/ ss a2 50000"
      },
      {
        n: "x1",
        f: "+- r 0 dx1"
      },
      {
        n: "dx3",
        f: "*/ ss a2 100000"
      },
      {
        n: "x3",
        f: "+- r 0 dx3"
      },
      {
        n: "dx2",
        f: "*/ ss a1 200000"
      },
      {
        n: "x2",
        f: "+- x3 0 dx2"
      },
      {
        n: "x4",
        f: "+- x3 dx2 0"
      },
      {
        n: "dy2",
        f: "*/ ss a1 100000"
      },
      {
        n: "y2",
        f: "+- b 0 dy2"
      },
      {
        n: "x0",
        f: "*/ x4 1 2"
      },
      {
        n: "y3",
        f: "+/ y2 b 2"
      },
      {
        n: "y15",
        f: "+/ y1 b 2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  bevel: {
    avLst: [
      {
        n: "adj",
        f: "val 12500"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 50000"
      },
      {
        n: "x1",
        f: "*/ ss a 100000"
      },
      {
        n: "x2",
        f: "+- r 0 x1"
      },
      {
        n: "y2",
        f: "+- b 0 x1"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "x1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "x1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "x1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "x1"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "lightenLess",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "darkenLess",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "x1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "lighten",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "x1"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "darken",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "x1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "x1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "x1"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "x1"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  blockArc: {
    avLst: [
      {
        n: "adj1",
        f: "val 10800000"
      },
      {
        n: "adj2",
        f: "val 0"
      },
      {
        n: "adj3",
        f: "val 25000"
      }
    ],
    gdLst: [
      {
        n: "stAng",
        f: "pin 0 adj1 21599999"
      },
      {
        n: "istAng",
        f: "pin 0 adj2 21599999"
      },
      {
        n: "a3",
        f: "pin 0 adj3 50000"
      },
      {
        n: "sw11",
        f: "+- istAng 0 stAng"
      },
      {
        n: "sw12",
        f: "+- sw11 21600000 0"
      },
      {
        n: "swAng",
        f: "?: sw11 sw11 sw12"
      },
      {
        n: "iswAng",
        f: "+- 0 0 swAng"
      },
      {
        n: "wt1",
        f: "sin wd2 stAng"
      },
      {
        n: "ht1",
        f: "cos hd2 stAng"
      },
      {
        n: "wt3",
        f: "sin wd2 istAng"
      },
      {
        n: "ht3",
        f: "cos hd2 istAng"
      },
      {
        n: "dx1",
        f: "cat2 wd2 ht1 wt1"
      },
      {
        n: "dy1",
        f: "sat2 hd2 ht1 wt1"
      },
      {
        n: "dx3",
        f: "cat2 wd2 ht3 wt3"
      },
      {
        n: "dy3",
        f: "sat2 hd2 ht3 wt3"
      },
      {
        n: "x1",
        f: "+- hc dx1 0"
      },
      {
        n: "y1",
        f: "+- vc dy1 0"
      },
      {
        n: "x3",
        f: "+- hc dx3 0"
      },
      {
        n: "y3",
        f: "+- vc dy3 0"
      },
      {
        n: "dr",
        f: "*/ ss a3 100000"
      },
      {
        n: "iwd2",
        f: "+- wd2 0 dr"
      },
      {
        n: "ihd2",
        f: "+- hd2 0 dr"
      },
      {
        n: "wt2",
        f: "sin iwd2 istAng"
      },
      {
        n: "ht2",
        f: "cos ihd2 istAng"
      },
      {
        n: "wt4",
        f: "sin iwd2 stAng"
      },
      {
        n: "ht4",
        f: "cos ihd2 stAng"
      },
      {
        n: "dx2",
        f: "cat2 iwd2 ht2 wt2"
      },
      {
        n: "dy2",
        f: "sat2 ihd2 ht2 wt2"
      },
      {
        n: "dx4",
        f: "cat2 iwd2 ht4 wt4"
      },
      {
        n: "dy4",
        f: "sat2 ihd2 ht4 wt4"
      },
      {
        n: "x2",
        f: "+- hc dx2 0"
      },
      {
        n: "y2",
        f: "+- vc dy2 0"
      },
      {
        n: "x4",
        f: "+- hc dx4 0"
      },
      {
        n: "y4",
        f: "+- vc dy4 0"
      },
      {
        n: "sw0",
        f: "+- 21600000 0 stAng"
      },
      {
        n: "da1",
        f: "+- swAng 0 sw0"
      },
      {
        n: "g1",
        f: "max x1 x2"
      },
      {
        n: "g2",
        f: "max x3 x4"
      },
      {
        n: "g3",
        f: "max g1 g2"
      },
      {
        n: "ir",
        f: "?: da1 r g3"
      },
      {
        n: "sw1",
        f: "+- cd4 0 stAng"
      },
      {
        n: "sw2",
        f: "+- 27000000 0 stAng"
      },
      {
        n: "sw3",
        f: "?: sw1 sw1 sw2"
      },
      {
        n: "da2",
        f: "+- swAng 0 sw3"
      },
      {
        n: "g5",
        f: "max y1 y2"
      },
      {
        n: "g6",
        f: "max y3 y4"
      },
      {
        n: "g7",
        f: "max g5 g6"
      },
      {
        n: "ib",
        f: "?: da2 b g7"
      },
      {
        n: "sw4",
        f: "+- cd2 0 stAng"
      },
      {
        n: "sw5",
        f: "+- 32400000 0 stAng"
      },
      {
        n: "sw6",
        f: "?: sw4 sw4 sw5"
      },
      {
        n: "da3",
        f: "+- swAng 0 sw6"
      },
      {
        n: "g9",
        f: "min x1 x2"
      },
      {
        n: "g10",
        f: "min x3 x4"
      },
      {
        n: "g11",
        f: "min g9 g10"
      },
      {
        n: "il",
        f: "?: da3 l g11"
      },
      {
        n: "sw7",
        f: "+- 3cd4 0 stAng"
      },
      {
        n: "sw8",
        f: "+- 37800000 0 stAng"
      },
      {
        n: "sw9",
        f: "?: sw7 sw7 sw8"
      },
      {
        n: "da4",
        f: "+- swAng 0 sw9"
      },
      {
        n: "g13",
        f: "min y1 y2"
      },
      {
        n: "g14",
        f: "min y3 y4"
      },
      {
        n: "g15",
        f: "min g13 g14"
      },
      {
        n: "it",
        f: "?: da4 t g15"
      },
      {
        n: "x5",
        f: "+/ x1 x4 2"
      },
      {
        n: "y5",
        f: "+/ y1 y4 2"
      },
      {
        n: "x6",
        f: "+/ x3 x2 2"
      },
      {
        n: "y6",
        f: "+/ y3 y2 2"
      },
      {
        n: "cang1",
        f: "+- stAng 0 cd4"
      },
      {
        n: "cang2",
        f: "+- istAng cd4 0"
      },
      {
        n: "cang3",
        f: "+/ cang1 cang2 2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "stAng",
            swAng: "swAng"
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "arcTo",
            wR: "iwd2",
            hR: "ihd2",
            stAng: "istAng",
            swAng: "iswAng"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  borderCallout1: {
    avLst: [
      {
        n: "adj1",
        f: "val 18750"
      },
      {
        n: "adj2",
        f: "val -8333"
      },
      {
        n: "adj3",
        f: "val 112500"
      },
      {
        n: "adj4",
        f: "val -38333"
      }
    ],
    gdLst: [
      {
        n: "y1",
        f: "*/ h adj1 100000"
      },
      {
        n: "x1",
        f: "*/ w adj2 100000"
      },
      {
        n: "y2",
        f: "*/ h adj3 100000"
      },
      {
        n: "x2",
        f: "*/ w adj4 100000"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  borderCallout2: {
    avLst: [
      {
        n: "adj1",
        f: "val 18750"
      },
      {
        n: "adj2",
        f: "val -8333"
      },
      {
        n: "adj3",
        f: "val 18750"
      },
      {
        n: "adj4",
        f: "val -16667"
      },
      {
        n: "adj5",
        f: "val 112500"
      },
      {
        n: "adj6",
        f: "val -46667"
      }
    ],
    gdLst: [
      {
        n: "y1",
        f: "*/ h adj1 100000"
      },
      {
        n: "x1",
        f: "*/ w adj2 100000"
      },
      {
        n: "y2",
        f: "*/ h adj3 100000"
      },
      {
        n: "x2",
        f: "*/ w adj4 100000"
      },
      {
        n: "y3",
        f: "*/ h adj5 100000"
      },
      {
        n: "x3",
        f: "*/ w adj6 100000"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y3"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  borderCallout3: {
    avLst: [
      {
        n: "adj1",
        f: "val 18750"
      },
      {
        n: "adj2",
        f: "val -8333"
      },
      {
        n: "adj3",
        f: "val 18750"
      },
      {
        n: "adj4",
        f: "val -16667"
      },
      {
        n: "adj5",
        f: "val 100000"
      },
      {
        n: "adj6",
        f: "val -16667"
      },
      {
        n: "adj7",
        f: "val 112963"
      },
      {
        n: "adj8",
        f: "val -8333"
      }
    ],
    gdLst: [
      {
        n: "y1",
        f: "*/ h adj1 100000"
      },
      {
        n: "x1",
        f: "*/ w adj2 100000"
      },
      {
        n: "y2",
        f: "*/ h adj3 100000"
      },
      {
        n: "x2",
        f: "*/ w adj4 100000"
      },
      {
        n: "y3",
        f: "*/ h adj5 100000"
      },
      {
        n: "x3",
        f: "*/ w adj6 100000"
      },
      {
        n: "y4",
        f: "*/ h adj7 100000"
      },
      {
        n: "x4",
        f: "*/ w adj8 100000"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y4"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  bracePair: {
    avLst: [
      {
        n: "adj",
        f: "val 8333"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 25000"
      },
      {
        n: "x1",
        f: "*/ ss a 100000"
      },
      {
        n: "x2",
        f: "*/ ss a 50000"
      },
      {
        n: "x3",
        f: "+- r 0 x2"
      },
      {
        n: "x4",
        f: "+- r 0 x1"
      },
      {
        n: "y2",
        f: "+- vc 0 x1"
      },
      {
        n: "y3",
        f: "+- vc x1 0"
      },
      {
        n: "y4",
        f: "+- b 0 x1"
      },
      {
        n: "it",
        f: "*/ x1 29289 100000"
      },
      {
        n: "il",
        f: "+- x1 it 0"
      },
      {
        n: "ir",
        f: "+- r 0 il"
      },
      {
        n: "ib",
        f: "+- b 0 it"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x2",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y3"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "0",
            swAng: "-5400000"
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "cd4",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "x1"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y2"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "cd2",
            swAng: "-5400000"
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "3cd4",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y4"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x2",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y3"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "0",
            swAng: "-5400000"
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "cd4",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "x1"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "moveTo",
            pt: {
              x: "x3",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y2"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "cd2",
            swAng: "-5400000"
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "3cd4",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y4"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "0",
            swAng: "cd4"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  bracketPair: {
    avLst: [
      {
        n: "adj",
        f: "val 16667"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 50000"
      },
      {
        n: "x1",
        f: "*/ ss a 100000"
      },
      {
        n: "x2",
        f: "+- r 0 x1"
      },
      {
        n: "y2",
        f: "+- b 0 x1"
      },
      {
        n: "il",
        f: "*/ x1 29289 100000"
      },
      {
        n: "ir",
        f: "+- r 0 il"
      },
      {
        n: "ib",
        f: "+- b 0 il"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "x1"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y2"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "x1"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "moveTo",
            pt: {
              x: "x2",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y2"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "0",
            swAng: "cd4"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  callout1: {
    avLst: [
      {
        n: "adj1",
        f: "val 18750"
      },
      {
        n: "adj2",
        f: "val -8333"
      },
      {
        n: "adj3",
        f: "val 112500"
      },
      {
        n: "adj4",
        f: "val -38333"
      }
    ],
    gdLst: [
      {
        n: "y1",
        f: "*/ h adj1 100000"
      },
      {
        n: "x1",
        f: "*/ w adj2 100000"
      },
      {
        n: "y2",
        f: "*/ h adj3 100000"
      },
      {
        n: "x2",
        f: "*/ w adj4 100000"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  callout2: {
    avLst: [
      {
        n: "adj1",
        f: "val 18750"
      },
      {
        n: "adj2",
        f: "val -8333"
      },
      {
        n: "adj3",
        f: "val 18750"
      },
      {
        n: "adj4",
        f: "val -16667"
      },
      {
        n: "adj5",
        f: "val 112500"
      },
      {
        n: "adj6",
        f: "val -46667"
      }
    ],
    gdLst: [
      {
        n: "y1",
        f: "*/ h adj1 100000"
      },
      {
        n: "x1",
        f: "*/ w adj2 100000"
      },
      {
        n: "y2",
        f: "*/ h adj3 100000"
      },
      {
        n: "x2",
        f: "*/ w adj4 100000"
      },
      {
        n: "y3",
        f: "*/ h adj5 100000"
      },
      {
        n: "x3",
        f: "*/ w adj6 100000"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y3"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  callout3: {
    avLst: [
      {
        n: "adj1",
        f: "val 18750"
      },
      {
        n: "adj2",
        f: "val -8333"
      },
      {
        n: "adj3",
        f: "val 18750"
      },
      {
        n: "adj4",
        f: "val -16667"
      },
      {
        n: "adj5",
        f: "val 100000"
      },
      {
        n: "adj6",
        f: "val -16667"
      },
      {
        n: "adj7",
        f: "val 112963"
      },
      {
        n: "adj8",
        f: "val -8333"
      }
    ],
    gdLst: [
      {
        n: "y1",
        f: "*/ h adj1 100000"
      },
      {
        n: "x1",
        f: "*/ w adj2 100000"
      },
      {
        n: "y2",
        f: "*/ h adj3 100000"
      },
      {
        n: "x2",
        f: "*/ w adj4 100000"
      },
      {
        n: "y3",
        f: "*/ h adj5 100000"
      },
      {
        n: "x3",
        f: "*/ w adj6 100000"
      },
      {
        n: "y4",
        f: "*/ h adj7 100000"
      },
      {
        n: "x4",
        f: "*/ w adj8 100000"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y4"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  can: {
    avLst: [
      {
        n: "adj",
        f: "val 25000"
      }
    ],
    gdLst: [
      {
        n: "maxAdj",
        f: "*/ 50000 h ss"
      },
      {
        n: "a",
        f: "pin 0 adj maxAdj"
      },
      {
        n: "y1",
        f: "*/ ss a 200000"
      },
      {
        n: "y2",
        f: "+- y1 y1 0"
      },
      {
        n: "y3",
        f: "+- b 0 y1"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "y1",
            stAng: "cd2",
            swAng: "-10800000"
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y3"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "y1",
            stAng: "0",
            swAng: "cd2"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "y1",
            stAng: "cd2",
            swAng: "cd2"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "y1",
            stAng: "0",
            swAng: "cd2"
          },
          {
            type: "close"
          }
        ],
        fill: "lighten",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "r",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "y1",
            stAng: "0",
            swAng: "cd2"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "y1",
            stAng: "cd2",
            swAng: "cd2"
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y3"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "y1",
            stAng: "0",
            swAng: "cd2"
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "y1"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  chartPlus: {
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "5",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "5",
              y: "10"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "10",
              y: "5"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true,
        w: 10,
        h: 10
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "0",
              y: "10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "10",
              y: "10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "10",
              y: "0"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false,
        w: 10,
        h: 10
      }
    ]
  },
  chartStar: {
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "10",
              y: "10"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "10",
              y: "0"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "5",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "5",
              y: "10"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true,
        w: 10,
        h: 10
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "0",
              y: "10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "10",
              y: "10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "10",
              y: "0"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false,
        w: 10,
        h: 10
      }
    ]
  },
  chartX: {
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "10",
              y: "10"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "10",
              y: "0"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true,
        w: 10,
        h: 10
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "0",
              y: "10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "10",
              y: "10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "10",
              y: "0"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false,
        w: 10,
        h: 10
      }
    ]
  },
  chevron: {
    avLst: [
      {
        n: "adj",
        f: "val 50000"
      }
    ],
    gdLst: [
      {
        n: "maxAdj",
        f: "*/ 100000 w ss"
      },
      {
        n: "a",
        f: "pin 0 adj maxAdj"
      },
      {
        n: "x1",
        f: "*/ ss a 100000"
      },
      {
        n: "x2",
        f: "+- r 0 x1"
      },
      {
        n: "x3",
        f: "*/ x2 1 2"
      },
      {
        n: "dx",
        f: "+- x2 0 x1"
      },
      {
        n: "il",
        f: "?: dx x1 l"
      },
      {
        n: "ir",
        f: "?: dx x2 r"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "vc"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  chord: {
    avLst: [
      {
        n: "adj1",
        f: "val 2700000"
      },
      {
        n: "adj2",
        f: "val 16200000"
      }
    ],
    gdLst: [
      {
        n: "stAng",
        f: "pin 0 adj1 21599999"
      },
      {
        n: "enAng",
        f: "pin 0 adj2 21599999"
      },
      {
        n: "sw1",
        f: "+- enAng 0 stAng"
      },
      {
        n: "sw2",
        f: "+- sw1 21600000 0"
      },
      {
        n: "swAng",
        f: "?: sw1 sw1 sw2"
      },
      {
        n: "wt1",
        f: "sin wd2 stAng"
      },
      {
        n: "ht1",
        f: "cos hd2 stAng"
      },
      {
        n: "dx1",
        f: "cat2 wd2 ht1 wt1"
      },
      {
        n: "dy1",
        f: "sat2 hd2 ht1 wt1"
      },
      {
        n: "wt2",
        f: "sin wd2 enAng"
      },
      {
        n: "ht2",
        f: "cos hd2 enAng"
      },
      {
        n: "dx2",
        f: "cat2 wd2 ht2 wt2"
      },
      {
        n: "dy2",
        f: "sat2 hd2 ht2 wt2"
      },
      {
        n: "x1",
        f: "+- hc dx1 0"
      },
      {
        n: "y1",
        f: "+- vc dy1 0"
      },
      {
        n: "x2",
        f: "+- hc dx2 0"
      },
      {
        n: "y2",
        f: "+- vc dy2 0"
      },
      {
        n: "x3",
        f: "+/ x1 x2 2"
      },
      {
        n: "y3",
        f: "+/ y1 y2 2"
      },
      {
        n: "midAng0",
        f: "*/ swAng 1 2"
      },
      {
        n: "midAng",
        f: "+- stAng midAng0 cd2"
      },
      {
        n: "idx",
        f: "cos wd2 2700000"
      },
      {
        n: "idy",
        f: "sin hd2 2700000"
      },
      {
        n: "il",
        f: "+- hc 0 idx"
      },
      {
        n: "ir",
        f: "+- hc idx 0"
      },
      {
        n: "it",
        f: "+- vc 0 idy"
      },
      {
        n: "ib",
        f: "+- vc idy 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "stAng",
            swAng: "swAng"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  circularArrow: {
    avLst: [
      {
        n: "adj1",
        f: "val 12500"
      },
      {
        n: "adj2",
        f: "val 1142319"
      },
      {
        n: "adj3",
        f: "val 20457681"
      },
      {
        n: "adj4",
        f: "val 10800000"
      },
      {
        n: "adj5",
        f: "val 12500"
      }
    ],
    gdLst: [
      {
        n: "a5",
        f: "pin 0 adj5 25000"
      },
      {
        n: "maxAdj1",
        f: "*/ a5 2 1"
      },
      {
        n: "a1",
        f: "pin 0 adj1 maxAdj1"
      },
      {
        n: "enAng",
        f: "pin 1 adj3 21599999"
      },
      {
        n: "stAng",
        f: "pin 0 adj4 21599999"
      },
      {
        n: "th",
        f: "*/ ss a1 100000"
      },
      {
        n: "thh",
        f: "*/ ss a5 100000"
      },
      {
        n: "th2",
        f: "*/ th 1 2"
      },
      {
        n: "rw1",
        f: "+- wd2 th2 thh"
      },
      {
        n: "rh1",
        f: "+- hd2 th2 thh"
      },
      {
        n: "rw2",
        f: "+- rw1 0 th"
      },
      {
        n: "rh2",
        f: "+- rh1 0 th"
      },
      {
        n: "rw3",
        f: "+- rw2 th2 0"
      },
      {
        n: "rh3",
        f: "+- rh2 th2 0"
      },
      {
        n: "wtH",
        f: "sin rw3 enAng"
      },
      {
        n: "htH",
        f: "cos rh3 enAng"
      },
      {
        n: "dxH",
        f: "cat2 rw3 htH wtH"
      },
      {
        n: "dyH",
        f: "sat2 rh3 htH wtH"
      },
      {
        n: "xH",
        f: "+- hc dxH 0"
      },
      {
        n: "yH",
        f: "+- vc dyH 0"
      },
      {
        n: "rI",
        f: "min rw2 rh2"
      },
      {
        n: "u1",
        f: "*/ dxH dxH 1"
      },
      {
        n: "u2",
        f: "*/ dyH dyH 1"
      },
      {
        n: "u3",
        f: "*/ rI rI 1"
      },
      {
        n: "u4",
        f: "+- u1 0 u3"
      },
      {
        n: "u5",
        f: "+- u2 0 u3"
      },
      {
        n: "u6",
        f: "*/ u4 u5 u1"
      },
      {
        n: "u7",
        f: "*/ u6 1 u2"
      },
      {
        n: "u8",
        f: "+- 1 0 u7"
      },
      {
        n: "u9",
        f: "sqrt u8"
      },
      {
        n: "u10",
        f: "*/ u4 1 dxH"
      },
      {
        n: "u11",
        f: "*/ u10 1 dyH"
      },
      {
        n: "u12",
        f: "+/ 1 u9 u11"
      },
      {
        n: "u13",
        f: "at2 1 u12"
      },
      {
        n: "u14",
        f: "+- u13 21600000 0"
      },
      {
        n: "u15",
        f: "?: u13 u13 u14"
      },
      {
        n: "u16",
        f: "+- u15 0 enAng"
      },
      {
        n: "u17",
        f: "+- u16 21600000 0"
      },
      {
        n: "u18",
        f: "?: u16 u16 u17"
      },
      {
        n: "u19",
        f: "+- u18 0 cd2"
      },
      {
        n: "u20",
        f: "+- u18 0 21600000"
      },
      {
        n: "u21",
        f: "?: u19 u20 u18"
      },
      {
        n: "maxAng",
        f: "abs u21"
      },
      {
        n: "aAng",
        f: "pin 0 adj2 maxAng"
      },
      {
        n: "ptAng",
        f: "+- enAng aAng 0"
      },
      {
        n: "wtA",
        f: "sin rw3 ptAng"
      },
      {
        n: "htA",
        f: "cos rh3 ptAng"
      },
      {
        n: "dxA",
        f: "cat2 rw3 htA wtA"
      },
      {
        n: "dyA",
        f: "sat2 rh3 htA wtA"
      },
      {
        n: "xA",
        f: "+- hc dxA 0"
      },
      {
        n: "yA",
        f: "+- vc dyA 0"
      },
      {
        n: "wtE",
        f: "sin rw1 stAng"
      },
      {
        n: "htE",
        f: "cos rh1 stAng"
      },
      {
        n: "dxE",
        f: "cat2 rw1 htE wtE"
      },
      {
        n: "dyE",
        f: "sat2 rh1 htE wtE"
      },
      {
        n: "xE",
        f: "+- hc dxE 0"
      },
      {
        n: "yE",
        f: "+- vc dyE 0"
      },
      {
        n: "dxG",
        f: "cos thh ptAng"
      },
      {
        n: "dyG",
        f: "sin thh ptAng"
      },
      {
        n: "xG",
        f: "+- xH dxG 0"
      },
      {
        n: "yG",
        f: "+- yH dyG 0"
      },
      {
        n: "dxB",
        f: "cos thh ptAng"
      },
      {
        n: "dyB",
        f: "sin thh ptAng"
      },
      {
        n: "xB",
        f: "+- xH 0 dxB 0"
      },
      {
        n: "yB",
        f: "+- yH 0 dyB 0"
      },
      {
        n: "sx1",
        f: "+- xB 0 hc"
      },
      {
        n: "sy1",
        f: "+- yB 0 vc"
      },
      {
        n: "sx2",
        f: "+- xG 0 hc"
      },
      {
        n: "sy2",
        f: "+- yG 0 vc"
      },
      {
        n: "rO",
        f: "min rw1 rh1"
      },
      {
        n: "x1O",
        f: "*/ sx1 rO rw1"
      },
      {
        n: "y1O",
        f: "*/ sy1 rO rh1"
      },
      {
        n: "x2O",
        f: "*/ sx2 rO rw1"
      },
      {
        n: "y2O",
        f: "*/ sy2 rO rh1"
      },
      {
        n: "dxO",
        f: "+- x2O 0 x1O"
      },
      {
        n: "dyO",
        f: "+- y2O 0 y1O"
      },
      {
        n: "dO",
        f: "mod dxO dyO 0"
      },
      {
        n: "q1",
        f: "*/ x1O y2O 1"
      },
      {
        n: "q2",
        f: "*/ x2O y1O 1"
      },
      {
        n: "DO",
        f: "+- q1 0 q2"
      },
      {
        n: "q3",
        f: "*/ rO rO 1"
      },
      {
        n: "q4",
        f: "*/ dO dO 1"
      },
      {
        n: "q5",
        f: "*/ q3 q4 1"
      },
      {
        n: "q6",
        f: "*/ DO DO 1"
      },
      {
        n: "q7",
        f: "+- q5 0 q6"
      },
      {
        n: "q8",
        f: "max q7 0"
      },
      {
        n: "sdelO",
        f: "sqrt q8"
      },
      {
        n: "ndyO",
        f: "*/ dyO -1 1"
      },
      {
        n: "sdyO",
        f: "?: ndyO -1 1"
      },
      {
        n: "q9",
        f: "*/ sdyO dxO 1"
      },
      {
        n: "q10",
        f: "*/ q9 sdelO 1"
      },
      {
        n: "q11",
        f: "*/ DO dyO 1"
      },
      {
        n: "dxF1",
        f: "+/ q11 q10 q4"
      },
      {
        n: "q12",
        f: "+- q11 0 q10"
      },
      {
        n: "dxF2",
        f: "*/ q12 1 q4"
      },
      {
        n: "adyO",
        f: "abs dyO"
      },
      {
        n: "q13",
        f: "*/ adyO sdelO 1"
      },
      {
        n: "q14",
        f: "*/ DO dxO -1"
      },
      {
        n: "dyF1",
        f: "+/ q14 q13 q4"
      },
      {
        n: "q15",
        f: "+- q14 0 q13"
      },
      {
        n: "dyF2",
        f: "*/ q15 1 q4"
      },
      {
        n: "q16",
        f: "+- x2O 0 dxF1"
      },
      {
        n: "q17",
        f: "+- x2O 0 dxF2"
      },
      {
        n: "q18",
        f: "+- y2O 0 dyF1"
      },
      {
        n: "q19",
        f: "+- y2O 0 dyF2"
      },
      {
        n: "q20",
        f: "mod q16 q18 0"
      },
      {
        n: "q21",
        f: "mod q17 q19 0"
      },
      {
        n: "q22",
        f: "+- q21 0 q20"
      },
      {
        n: "dxF",
        f: "?: q22 dxF1 dxF2"
      },
      {
        n: "dyF",
        f: "?: q22 dyF1 dyF2"
      },
      {
        n: "sdxF",
        f: "*/ dxF rw1 rO"
      },
      {
        n: "sdyF",
        f: "*/ dyF rh1 rO"
      },
      {
        n: "xF",
        f: "+- hc sdxF 0"
      },
      {
        n: "yF",
        f: "+- vc sdyF 0"
      },
      {
        n: "x1I",
        f: "*/ sx1 rI rw2"
      },
      {
        n: "y1I",
        f: "*/ sy1 rI rh2"
      },
      {
        n: "x2I",
        f: "*/ sx2 rI rw2"
      },
      {
        n: "y2I",
        f: "*/ sy2 rI rh2"
      },
      {
        n: "dxI",
        f: "+- x2I 0 x1I"
      },
      {
        n: "dyI",
        f: "+- y2I 0 y1I"
      },
      {
        n: "dI",
        f: "mod dxI dyI 0"
      },
      {
        n: "v1",
        f: "*/ x1I y2I 1"
      },
      {
        n: "v2",
        f: "*/ x2I y1I 1"
      },
      {
        n: "DI",
        f: "+- v1 0 v2"
      },
      {
        n: "v3",
        f: "*/ rI rI 1"
      },
      {
        n: "v4",
        f: "*/ dI dI 1"
      },
      {
        n: "v5",
        f: "*/ v3 v4 1"
      },
      {
        n: "v6",
        f: "*/ DI DI 1"
      },
      {
        n: "v7",
        f: "+- v5 0 v6"
      },
      {
        n: "v8",
        f: "max v7 0"
      },
      {
        n: "sdelI",
        f: "sqrt v8"
      },
      {
        n: "v9",
        f: "*/ sdyO dxI 1"
      },
      {
        n: "v10",
        f: "*/ v9 sdelI 1"
      },
      {
        n: "v11",
        f: "*/ DI dyI 1"
      },
      {
        n: "dxC1",
        f: "+/ v11 v10 v4"
      },
      {
        n: "v12",
        f: "+- v11 0 v10"
      },
      {
        n: "dxC2",
        f: "*/ v12 1 v4"
      },
      {
        n: "adyI",
        f: "abs dyI"
      },
      {
        n: "v13",
        f: "*/ adyI sdelI 1"
      },
      {
        n: "v14",
        f: "*/ DI dxI -1"
      },
      {
        n: "dyC1",
        f: "+/ v14 v13 v4"
      },
      {
        n: "v15",
        f: "+- v14 0 v13"
      },
      {
        n: "dyC2",
        f: "*/ v15 1 v4"
      },
      {
        n: "v16",
        f: "+- x1I 0 dxC1"
      },
      {
        n: "v17",
        f: "+- x1I 0 dxC2"
      },
      {
        n: "v18",
        f: "+- y1I 0 dyC1"
      },
      {
        n: "v19",
        f: "+- y1I 0 dyC2"
      },
      {
        n: "v20",
        f: "mod v16 v18 0"
      },
      {
        n: "v21",
        f: "mod v17 v19 0"
      },
      {
        n: "v22",
        f: "+- v21 0 v20"
      },
      {
        n: "dxC",
        f: "?: v22 dxC1 dxC2"
      },
      {
        n: "dyC",
        f: "?: v22 dyC1 dyC2"
      },
      {
        n: "sdxC",
        f: "*/ dxC rw2 rI"
      },
      {
        n: "sdyC",
        f: "*/ dyC rh2 rI"
      },
      {
        n: "xC",
        f: "+- hc sdxC 0"
      },
      {
        n: "yC",
        f: "+- vc sdyC 0"
      },
      {
        n: "ist0",
        f: "at2 sdxC sdyC"
      },
      {
        n: "ist1",
        f: "+- ist0 21600000 0"
      },
      {
        n: "istAng",
        f: "?: ist0 ist0 ist1"
      },
      {
        n: "isw1",
        f: "+- stAng 0 istAng"
      },
      {
        n: "isw2",
        f: "+- isw1 0 21600000"
      },
      {
        n: "iswAng",
        f: "?: isw1 isw2 isw1"
      },
      {
        n: "p1",
        f: "+- xF 0 xC"
      },
      {
        n: "p2",
        f: "+- yF 0 yC"
      },
      {
        n: "p3",
        f: "mod p1 p2 0"
      },
      {
        n: "p4",
        f: "*/ p3 1 2"
      },
      {
        n: "p5",
        f: "+- p4 0 thh"
      },
      {
        n: "xGp",
        f: "?: p5 xF xG"
      },
      {
        n: "yGp",
        f: "?: p5 yF yG"
      },
      {
        n: "xBp",
        f: "?: p5 xC xB"
      },
      {
        n: "yBp",
        f: "?: p5 yC yB"
      },
      {
        n: "en0",
        f: "at2 sdxF sdyF"
      },
      {
        n: "en1",
        f: "+- en0 21600000 0"
      },
      {
        n: "en2",
        f: "?: en0 en0 en1"
      },
      {
        n: "sw0",
        f: "+- en2 0 stAng"
      },
      {
        n: "sw1",
        f: "+- sw0 21600000 0"
      },
      {
        n: "swAng",
        f: "?: sw0 sw0 sw1"
      },
      {
        n: "wtI",
        f: "sin rw3 stAng"
      },
      {
        n: "htI",
        f: "cos rh3 stAng"
      },
      {
        n: "dxI",
        f: "cat2 rw3 htI wtI"
      },
      {
        n: "dyI",
        f: "sat2 rh3 htI wtI"
      },
      {
        n: "xI",
        f: "+- hc dxI 0"
      },
      {
        n: "yI",
        f: "+- vc dyI 0"
      },
      {
        n: "aI",
        f: "+- stAng 0 cd4"
      },
      {
        n: "aA",
        f: "+- ptAng cd4 0"
      },
      {
        n: "aB",
        f: "+- ptAng cd2 0"
      },
      {
        n: "idx",
        f: "cos rw1 2700000"
      },
      {
        n: "idy",
        f: "sin rh1 2700000"
      },
      {
        n: "il",
        f: "+- hc 0 idx"
      },
      {
        n: "ir",
        f: "+- hc idx 0"
      },
      {
        n: "it",
        f: "+- vc 0 idy"
      },
      {
        n: "ib",
        f: "+- vc idy 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "xE",
              y: "yE"
            }
          },
          {
            type: "arcTo",
            wR: "rw1",
            hR: "rh1",
            stAng: "stAng",
            swAng: "swAng"
          },
          {
            type: "lnTo",
            pt: {
              x: "xGp",
              y: "yGp"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xA",
              y: "yA"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xBp",
              y: "yBp"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xC",
              y: "yC"
            }
          },
          {
            type: "arcTo",
            wR: "rw2",
            hR: "rh2",
            stAng: "istAng",
            swAng: "iswAng"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  cloud: {
    gdLst: [
      {
        n: "il",
        f: "*/ w 2977 21600"
      },
      {
        n: "it",
        f: "*/ h 3262 21600"
      },
      {
        n: "ir",
        f: "*/ w 17087 21600"
      },
      {
        n: "ib",
        f: "*/ h 17337 21600"
      },
      {
        n: "g27",
        f: "*/ w 67 21600"
      },
      {
        n: "g28",
        f: "*/ h 21577 21600"
      },
      {
        n: "g29",
        f: "*/ w 21582 21600"
      },
      {
        n: "g30",
        f: "*/ h 1235 21600"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "3900",
              y: "14370"
            }
          },
          {
            type: "arcTo",
            wR: "6753",
            hR: "9190",
            stAng: "-11429249",
            swAng: "7426832"
          },
          {
            type: "arcTo",
            wR: "5333",
            hR: "7267",
            stAng: "-8646143",
            swAng: "5396714"
          },
          {
            type: "arcTo",
            wR: "4365",
            hR: "5945",
            stAng: "-8748475",
            swAng: "5983381"
          },
          {
            type: "arcTo",
            wR: "4857",
            hR: "6595",
            stAng: "-7859164",
            swAng: "7034504"
          },
          {
            type: "arcTo",
            wR: "5333",
            hR: "7273",
            stAng: "-4722533",
            swAng: "6541615"
          },
          {
            type: "arcTo",
            wR: "6775",
            hR: "9220",
            stAng: "-2776035",
            swAng: "7816140"
          },
          {
            type: "arcTo",
            wR: "5785",
            hR: "7867",
            stAng: "37501",
            swAng: "6842000"
          },
          {
            type: "arcTo",
            wR: "6752",
            hR: "9215",
            stAng: "1347096",
            swAng: "6910353"
          },
          {
            type: "arcTo",
            wR: "7720",
            hR: "10543",
            stAng: "3974558",
            swAng: "4542661"
          },
          {
            type: "arcTo",
            wR: "4360",
            hR: "5918",
            stAng: "-16496525",
            swAng: "8804134"
          },
          {
            type: "arcTo",
            wR: "4345",
            hR: "5945",
            stAng: "-14809710",
            swAng: "9151131"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true,
        w: 43200,
        h: 43200
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "4693",
              y: "26177"
            }
          },
          {
            type: "arcTo",
            wR: "4345",
            hR: "5945",
            stAng: "5204520",
            swAng: "1585770"
          },
          {
            type: "moveTo",
            pt: {
              x: "6928",
              y: "34899"
            }
          },
          {
            type: "arcTo",
            wR: "4360",
            hR: "5918",
            stAng: "4416628",
            swAng: "686848"
          },
          {
            type: "moveTo",
            pt: {
              x: "16478",
              y: "39090"
            }
          },
          {
            type: "arcTo",
            wR: "6752",
            hR: "9215",
            stAng: "8257449",
            swAng: "844866"
          },
          {
            type: "moveTo",
            pt: {
              x: "28827",
              y: "34751"
            }
          },
          {
            type: "arcTo",
            wR: "6752",
            hR: "9215",
            stAng: "387196",
            swAng: "959901"
          },
          {
            type: "moveTo",
            pt: {
              x: "34129",
              y: "22954"
            }
          },
          {
            type: "arcTo",
            wR: "5785",
            hR: "7867",
            stAng: "-4217541",
            swAng: "4255042"
          },
          {
            type: "moveTo",
            pt: {
              x: "41798",
              y: "15354"
            }
          },
          {
            type: "arcTo",
            wR: "5333",
            hR: "7273",
            stAng: "1819082",
            swAng: "1665090"
          },
          {
            type: "moveTo",
            pt: {
              x: "38324",
              y: "5426"
            }
          },
          {
            type: "arcTo",
            wR: "4857",
            hR: "6595",
            stAng: "-824660",
            swAng: "891534"
          },
          {
            type: "moveTo",
            pt: {
              x: "29078",
              y: "3952"
            }
          },
          {
            type: "arcTo",
            wR: "4857",
            hR: "6595",
            stAng: "-8950887",
            swAng: "1091722"
          },
          {
            type: "moveTo",
            pt: {
              x: "22141",
              y: "4720"
            }
          },
          {
            type: "arcTo",
            wR: "4365",
            hR: "5945",
            stAng: "-9809656",
            swAng: "1061181"
          },
          {
            type: "moveTo",
            pt: {
              x: "14000",
              y: "5192"
            }
          },
          {
            type: "arcTo",
            wR: "6753",
            hR: "9190",
            stAng: "-4002417",
            swAng: "739161"
          },
          {
            type: "moveTo",
            pt: {
              x: "4127",
              y: "15789"
            }
          },
          {
            type: "arcTo",
            wR: "6753",
            hR: "9190",
            stAng: "9459261",
            swAng: "711490"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true,
        w: 43200,
        h: 43200
      }
    ]
  },
  cloudCallout: {
    avLst: [
      {
        n: "adj1",
        f: "val -20833"
      },
      {
        n: "adj2",
        f: "val 62500"
      }
    ],
    gdLst: [
      {
        n: "dxPos",
        f: "*/ w adj1 100000"
      },
      {
        n: "dyPos",
        f: "*/ h adj2 100000"
      },
      {
        n: "xPos",
        f: "+- hc dxPos 0"
      },
      {
        n: "yPos",
        f: "+- vc dyPos 0"
      },
      {
        n: "ht",
        f: "cat2 hd2 dxPos dyPos"
      },
      {
        n: "wt",
        f: "sat2 wd2 dxPos dyPos"
      },
      {
        n: "g2",
        f: "cat2 wd2 ht wt"
      },
      {
        n: "g3",
        f: "sat2 hd2 ht wt"
      },
      {
        n: "g4",
        f: "+- hc g2 0"
      },
      {
        n: "g5",
        f: "+- vc g3 0"
      },
      {
        n: "g6",
        f: "+- g4 0 xPos"
      },
      {
        n: "g7",
        f: "+- g5 0 yPos"
      },
      {
        n: "g8",
        f: "mod g6 g7 0"
      },
      {
        n: "g9",
        f: "*/ ss 6600 21600"
      },
      {
        n: "g10",
        f: "+- g8 0 g9"
      },
      {
        n: "g11",
        f: "*/ g10 1 3"
      },
      {
        n: "g12",
        f: "*/ ss 1800 21600"
      },
      {
        n: "g13",
        f: "+- g11 g12 0"
      },
      {
        n: "g14",
        f: "*/ g13 g6 g8"
      },
      {
        n: "g15",
        f: "*/ g13 g7 g8"
      },
      {
        n: "g16",
        f: "+- g14 xPos 0"
      },
      {
        n: "g17",
        f: "+- g15 yPos 0"
      },
      {
        n: "g18",
        f: "*/ ss 4800 21600"
      },
      {
        n: "g19",
        f: "*/ g11 2 1"
      },
      {
        n: "g20",
        f: "+- g18 g19 0"
      },
      {
        n: "g21",
        f: "*/ g20 g6 g8"
      },
      {
        n: "g22",
        f: "*/ g20 g7 g8"
      },
      {
        n: "g23",
        f: "+- g21 xPos 0"
      },
      {
        n: "g24",
        f: "+- g22 yPos 0"
      },
      {
        n: "g25",
        f: "*/ ss 1200 21600"
      },
      {
        n: "g26",
        f: "*/ ss 600 21600"
      },
      {
        n: "x23",
        f: "+- xPos g26 0"
      },
      {
        n: "x24",
        f: "+- g16 g25 0"
      },
      {
        n: "x25",
        f: "+- g23 g12 0"
      },
      {
        n: "il",
        f: "*/ w 2977 21600"
      },
      {
        n: "it",
        f: "*/ h 3262 21600"
      },
      {
        n: "ir",
        f: "*/ w 17087 21600"
      },
      {
        n: "ib",
        f: "*/ h 17337 21600"
      },
      {
        n: "g27",
        f: "*/ w 67 21600"
      },
      {
        n: "g28",
        f: "*/ h 21577 21600"
      },
      {
        n: "g29",
        f: "*/ w 21582 21600"
      },
      {
        n: "g30",
        f: "*/ h 1235 21600"
      },
      {
        n: "pang",
        f: "at2 dxPos dyPos"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "3900",
              y: "14370"
            }
          },
          {
            type: "arcTo",
            wR: "6753",
            hR: "9190",
            stAng: "-11429249",
            swAng: "7426832"
          },
          {
            type: "arcTo",
            wR: "5333",
            hR: "7267",
            stAng: "-8646143",
            swAng: "5396714"
          },
          {
            type: "arcTo",
            wR: "4365",
            hR: "5945",
            stAng: "-8748475",
            swAng: "5983381"
          },
          {
            type: "arcTo",
            wR: "4857",
            hR: "6595",
            stAng: "-7859164",
            swAng: "7034504"
          },
          {
            type: "arcTo",
            wR: "5333",
            hR: "7273",
            stAng: "-4722533",
            swAng: "6541615"
          },
          {
            type: "arcTo",
            wR: "6775",
            hR: "9220",
            stAng: "-2776035",
            swAng: "7816140"
          },
          {
            type: "arcTo",
            wR: "5785",
            hR: "7867",
            stAng: "37501",
            swAng: "6842000"
          },
          {
            type: "arcTo",
            wR: "6752",
            hR: "9215",
            stAng: "1347096",
            swAng: "6910353"
          },
          {
            type: "arcTo",
            wR: "7720",
            hR: "10543",
            stAng: "3974558",
            swAng: "4542661"
          },
          {
            type: "arcTo",
            wR: "4360",
            hR: "5918",
            stAng: "-16496525",
            swAng: "8804134"
          },
          {
            type: "arcTo",
            wR: "4345",
            hR: "5945",
            stAng: "-14809710",
            swAng: "9151131"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true,
        w: 43200,
        h: 43200
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x23",
              y: "yPos"
            }
          },
          {
            type: "arcTo",
            wR: "g26",
            hR: "g26",
            stAng: "0",
            swAng: "21600000"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x24",
              y: "g17"
            }
          },
          {
            type: "arcTo",
            wR: "g25",
            hR: "g25",
            stAng: "0",
            swAng: "21600000"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x25",
              y: "g24"
            }
          },
          {
            type: "arcTo",
            wR: "g12",
            hR: "g12",
            stAng: "0",
            swAng: "21600000"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "4693",
              y: "26177"
            }
          },
          {
            type: "arcTo",
            wR: "4345",
            hR: "5945",
            stAng: "5204520",
            swAng: "1585770"
          },
          {
            type: "moveTo",
            pt: {
              x: "6928",
              y: "34899"
            }
          },
          {
            type: "arcTo",
            wR: "4360",
            hR: "5918",
            stAng: "4416628",
            swAng: "686848"
          },
          {
            type: "moveTo",
            pt: {
              x: "16478",
              y: "39090"
            }
          },
          {
            type: "arcTo",
            wR: "6752",
            hR: "9215",
            stAng: "8257449",
            swAng: "844866"
          },
          {
            type: "moveTo",
            pt: {
              x: "28827",
              y: "34751"
            }
          },
          {
            type: "arcTo",
            wR: "6752",
            hR: "9215",
            stAng: "387196",
            swAng: "959901"
          },
          {
            type: "moveTo",
            pt: {
              x: "34129",
              y: "22954"
            }
          },
          {
            type: "arcTo",
            wR: "5785",
            hR: "7867",
            stAng: "-4217541",
            swAng: "4255042"
          },
          {
            type: "moveTo",
            pt: {
              x: "41798",
              y: "15354"
            }
          },
          {
            type: "arcTo",
            wR: "5333",
            hR: "7273",
            stAng: "1819082",
            swAng: "1665090"
          },
          {
            type: "moveTo",
            pt: {
              x: "38324",
              y: "5426"
            }
          },
          {
            type: "arcTo",
            wR: "4857",
            hR: "6595",
            stAng: "-824660",
            swAng: "891534"
          },
          {
            type: "moveTo",
            pt: {
              x: "29078",
              y: "3952"
            }
          },
          {
            type: "arcTo",
            wR: "4857",
            hR: "6595",
            stAng: "-8950887",
            swAng: "1091722"
          },
          {
            type: "moveTo",
            pt: {
              x: "22141",
              y: "4720"
            }
          },
          {
            type: "arcTo",
            wR: "4365",
            hR: "5945",
            stAng: "-9809656",
            swAng: "1061181"
          },
          {
            type: "moveTo",
            pt: {
              x: "14000",
              y: "5192"
            }
          },
          {
            type: "arcTo",
            wR: "6753",
            hR: "9190",
            stAng: "-4002417",
            swAng: "739161"
          },
          {
            type: "moveTo",
            pt: {
              x: "4127",
              y: "15789"
            }
          },
          {
            type: "arcTo",
            wR: "6753",
            hR: "9190",
            stAng: "9459261",
            swAng: "711490"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true,
        w: 43200,
        h: 43200
      }
    ]
  },
  corner: {
    avLst: [
      {
        n: "adj1",
        f: "val 50000"
      },
      {
        n: "adj2",
        f: "val 50000"
      }
    ],
    gdLst: [
      {
        n: "maxAdj1",
        f: "*/ 100000 h ss"
      },
      {
        n: "maxAdj2",
        f: "*/ 100000 w ss"
      },
      {
        n: "a1",
        f: "pin 0 adj1 maxAdj1"
      },
      {
        n: "a2",
        f: "pin 0 adj2 maxAdj2"
      },
      {
        n: "x1",
        f: "*/ ss a2 100000"
      },
      {
        n: "dy1",
        f: "*/ ss a1 100000"
      },
      {
        n: "y1",
        f: "+- b 0 dy1"
      },
      {
        n: "cx1",
        f: "*/ x1 1 2"
      },
      {
        n: "cy1",
        f: "+/ y1 b 2"
      },
      {
        n: "d",
        f: "+- w 0 h"
      },
      {
        n: "it",
        f: "?: d y1 t"
      },
      {
        n: "ir",
        f: "?: d r x1"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  cornerTabs: {
    gdLst: [
      {
        n: "md",
        f: "mod w h 0"
      },
      {
        n: "dx",
        f: "*/ 1 md 20"
      },
      {
        n: "y1",
        f: "+- 0 b dx"
      },
      {
        n: "x1",
        f: "+- 0 r dx"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "dx",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "dx"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "dx",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "dx"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "r",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  cube: {
    avLst: [
      {
        n: "adj",
        f: "val 25000"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 100000"
      },
      {
        n: "y1",
        f: "*/ ss a 100000"
      },
      {
        n: "y4",
        f: "+- b 0 y1"
      },
      {
        n: "y2",
        f: "*/ y4 1 2"
      },
      {
        n: "y3",
        f: "+/ y1 b 2"
      },
      {
        n: "x4",
        f: "+- r 0 y1"
      },
      {
        n: "x2",
        f: "*/ x4 1 2"
      },
      {
        n: "x3",
        f: "+/ y1 r 2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x4",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "darkenLess",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "y1",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y1"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "lightenLess",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "y1",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "x4",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "b"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  curvedConnector2: {
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "wd2",
                y: "t"
              },
              {
                x: "r",
                y: "hd2"
              },
              {
                x: "r",
                y: "b"
              }
            ]
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  curvedConnector3: {
    avLst: [
      {
        n: "adj1",
        f: "val 50000"
      }
    ],
    gdLst: [
      {
        n: "x2",
        f: "*/ w adj1 100000"
      },
      {
        n: "x1",
        f: "+/ l x2 2"
      },
      {
        n: "x3",
        f: "+/ r x2 2"
      },
      {
        n: "y3",
        f: "*/ h 3 4"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "x1",
                y: "t"
              },
              {
                x: "x2",
                y: "hd4"
              },
              {
                x: "x2",
                y: "vc"
              }
            ]
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "x2",
                y: "y3"
              },
              {
                x: "x3",
                y: "b"
              },
              {
                x: "r",
                y: "b"
              }
            ]
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  curvedConnector4: {
    avLst: [
      {
        n: "adj1",
        f: "val 50000"
      },
      {
        n: "adj2",
        f: "val 50000"
      }
    ],
    gdLst: [
      {
        n: "x2",
        f: "*/ w adj1 100000"
      },
      {
        n: "x1",
        f: "+/ l x2 2"
      },
      {
        n: "x3",
        f: "+/ r x2 2"
      },
      {
        n: "x4",
        f: "+/ x2 x3 2"
      },
      {
        n: "x5",
        f: "+/ x3 r 2"
      },
      {
        n: "y4",
        f: "*/ h adj2 100000"
      },
      {
        n: "y1",
        f: "+/ t y4 2"
      },
      {
        n: "y2",
        f: "+/ t y1 2"
      },
      {
        n: "y3",
        f: "+/ y1 y4 2"
      },
      {
        n: "y5",
        f: "+/ b y4 2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "x1",
                y: "t"
              },
              {
                x: "x2",
                y: "y2"
              },
              {
                x: "x2",
                y: "y1"
              }
            ]
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "x2",
                y: "y3"
              },
              {
                x: "x4",
                y: "y4"
              },
              {
                x: "x3",
                y: "y4"
              }
            ]
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "x5",
                y: "y4"
              },
              {
                x: "r",
                y: "y5"
              },
              {
                x: "r",
                y: "b"
              }
            ]
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  curvedConnector5: {
    avLst: [
      {
        n: "adj1",
        f: "val 50000"
      },
      {
        n: "adj2",
        f: "val 50000"
      },
      {
        n: "adj3",
        f: "val 50000"
      }
    ],
    gdLst: [
      {
        n: "x3",
        f: "*/ w adj1 100000"
      },
      {
        n: "x6",
        f: "*/ w adj3 100000"
      },
      {
        n: "x1",
        f: "+/ x3 x6 2"
      },
      {
        n: "x2",
        f: "+/ l x3 2"
      },
      {
        n: "x4",
        f: "+/ x3 x1 2"
      },
      {
        n: "x5",
        f: "+/ x6 x1 2"
      },
      {
        n: "x7",
        f: "+/ x6 r 2"
      },
      {
        n: "y4",
        f: "*/ h adj2 100000"
      },
      {
        n: "y1",
        f: "+/ t y4 2"
      },
      {
        n: "y2",
        f: "+/ t y1 2"
      },
      {
        n: "y3",
        f: "+/ y1 y4 2"
      },
      {
        n: "y5",
        f: "+/ b y4 2"
      },
      {
        n: "y6",
        f: "+/ y5 y4 2"
      },
      {
        n: "y7",
        f: "+/ y5 b 2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "x2",
                y: "t"
              },
              {
                x: "x3",
                y: "y2"
              },
              {
                x: "x3",
                y: "y1"
              }
            ]
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "x3",
                y: "y3"
              },
              {
                x: "x4",
                y: "y4"
              },
              {
                x: "x1",
                y: "y4"
              }
            ]
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "x5",
                y: "y4"
              },
              {
                x: "x6",
                y: "y6"
              },
              {
                x: "x6",
                y: "y5"
              }
            ]
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "x6",
                y: "y7"
              },
              {
                x: "x7",
                y: "b"
              },
              {
                x: "r",
                y: "b"
              }
            ]
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  curvedDownArrow: {
    avLst: [
      {
        n: "adj1",
        f: "val 25000"
      },
      {
        n: "adj2",
        f: "val 50000"
      },
      {
        n: "adj3",
        f: "val 25000"
      }
    ],
    gdLst: [
      {
        n: "maxAdj2",
        f: "*/ 50000 w ss"
      },
      {
        n: "a2",
        f: "pin 0 adj2 maxAdj2"
      },
      {
        n: "a1",
        f: "pin 0 adj1 100000"
      },
      {
        n: "th",
        f: "*/ ss a1 100000"
      },
      {
        n: "aw",
        f: "*/ ss a2 100000"
      },
      {
        n: "q1",
        f: "+/ th aw 4"
      },
      {
        n: "wR",
        f: "+- wd2 0 q1"
      },
      {
        n: "q7",
        f: "*/ wR 2 1"
      },
      {
        n: "q8",
        f: "*/ q7 q7 1"
      },
      {
        n: "q9",
        f: "*/ th th 1"
      },
      {
        n: "q10",
        f: "+- q8 0 q9"
      },
      {
        n: "q11",
        f: "sqrt q10"
      },
      {
        n: "idy",
        f: "*/ q11 h q7"
      },
      {
        n: "maxAdj3",
        f: "*/ 100000 idy ss"
      },
      {
        n: "a3",
        f: "pin 0 adj3 maxAdj3"
      },
      {
        n: "ah",
        f: "*/ ss adj3 100000"
      },
      {
        n: "x3",
        f: "+- wR th 0"
      },
      {
        n: "q2",
        f: "*/ h h 1"
      },
      {
        n: "q3",
        f: "*/ ah ah 1"
      },
      {
        n: "q4",
        f: "+- q2 0 q3"
      },
      {
        n: "q5",
        f: "sqrt q4"
      },
      {
        n: "dx",
        f: "*/ q5 wR h"
      },
      {
        n: "x5",
        f: "+- wR dx 0"
      },
      {
        n: "x7",
        f: "+- x3 dx 0"
      },
      {
        n: "q6",
        f: "+- aw 0 th"
      },
      {
        n: "dh",
        f: "*/ q6 1 2"
      },
      {
        n: "x4",
        f: "+- x5 0 dh"
      },
      {
        n: "x8",
        f: "+- x7 dh 0"
      },
      {
        n: "aw2",
        f: "*/ aw 1 2"
      },
      {
        n: "x6",
        f: "+- r 0 aw2"
      },
      {
        n: "y1",
        f: "+- b 0 ah"
      },
      {
        n: "swAng",
        f: "at2 ah dx"
      },
      {
        n: "mswAng",
        f: "+- 0 0 swAng"
      },
      {
        n: "iy",
        f: "+- b 0 idy"
      },
      {
        n: "ix",
        f: "+/ wR x3 2"
      },
      {
        n: "q12",
        f: "*/ th 1 2"
      },
      {
        n: "dang2",
        f: "at2 idy q12"
      },
      {
        n: "stAng",
        f: "+- 3cd4 swAng 0"
      },
      {
        n: "stAng2",
        f: "+- 3cd4 0 dang2"
      },
      {
        n: "swAng2",
        f: "+- dang2 0 cd4"
      },
      {
        n: "swAng3",
        f: "+- cd4 dang2 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x6",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wR",
            hR: "h",
            stAng: "stAng",
            swAng: "mswAng"
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "wR",
            hR: "h",
            stAng: "3cd4",
            swAng: "swAng"
          },
          {
            type: "lnTo",
            pt: {
              x: "x8",
              y: "y1"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "ix",
              y: "iy"
            }
          },
          {
            type: "arcTo",
            wR: "wR",
            hR: "h",
            stAng: "stAng2",
            swAng: "swAng2"
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "wR",
            hR: "h",
            stAng: "cd2",
            swAng: "swAng3"
          },
          {
            type: "close"
          }
        ],
        fill: "darkenLess",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "ix",
              y: "iy"
            }
          },
          {
            type: "arcTo",
            wR: "wR",
            hR: "h",
            stAng: "stAng2",
            swAng: "swAng2"
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "wR",
            hR: "h",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "wR",
            hR: "h",
            stAng: "3cd4",
            swAng: "swAng"
          },
          {
            type: "lnTo",
            pt: {
              x: "x8",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wR",
            hR: "h",
            stAng: "stAng",
            swAng: "mswAng"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  curvedLeftArrow: {
    avLst: [
      {
        n: "adj1",
        f: "val 25000"
      },
      {
        n: "adj2",
        f: "val 50000"
      },
      {
        n: "adj3",
        f: "val 25000"
      }
    ],
    gdLst: [
      {
        n: "maxAdj2",
        f: "*/ 50000 h ss"
      },
      {
        n: "a2",
        f: "pin 0 adj2 maxAdj2"
      },
      {
        n: "a1",
        f: "pin 0 adj1 a2"
      },
      {
        n: "th",
        f: "*/ ss a1 100000"
      },
      {
        n: "aw",
        f: "*/ ss a2 100000"
      },
      {
        n: "q1",
        f: "+/ th aw 4"
      },
      {
        n: "hR",
        f: "+- hd2 0 q1"
      },
      {
        n: "q7",
        f: "*/ hR 2 1"
      },
      {
        n: "q8",
        f: "*/ q7 q7 1"
      },
      {
        n: "q9",
        f: "*/ th th 1"
      },
      {
        n: "q10",
        f: "+- q8 0 q9"
      },
      {
        n: "q11",
        f: "sqrt q10"
      },
      {
        n: "idx",
        f: "*/ q11 w q7"
      },
      {
        n: "maxAdj3",
        f: "*/ 100000 idx ss"
      },
      {
        n: "a3",
        f: "pin 0 adj3 maxAdj3"
      },
      {
        n: "ah",
        f: "*/ ss a3 100000"
      },
      {
        n: "y3",
        f: "+- hR th 0"
      },
      {
        n: "q2",
        f: "*/ w w 1"
      },
      {
        n: "q3",
        f: "*/ ah ah 1"
      },
      {
        n: "q4",
        f: "+- q2 0 q3"
      },
      {
        n: "q5",
        f: "sqrt q4"
      },
      {
        n: "dy",
        f: "*/ q5 hR w"
      },
      {
        n: "y5",
        f: "+- hR dy 0"
      },
      {
        n: "y7",
        f: "+- y3 dy 0"
      },
      {
        n: "q6",
        f: "+- aw 0 th"
      },
      {
        n: "dh",
        f: "*/ q6 1 2"
      },
      {
        n: "y4",
        f: "+- y5 0 dh"
      },
      {
        n: "y8",
        f: "+- y7 dh 0"
      },
      {
        n: "aw2",
        f: "*/ aw 1 2"
      },
      {
        n: "y6",
        f: "+- b 0 aw2"
      },
      {
        n: "x1",
        f: "+- l ah 0"
      },
      {
        n: "swAng",
        f: "at2 ah dy"
      },
      {
        n: "mswAng",
        f: "+- 0 0 swAng"
      },
      {
        n: "ix",
        f: "+- l idx 0"
      },
      {
        n: "iy",
        f: "+/ hR y3 2"
      },
      {
        n: "q12",
        f: "*/ th 1 2"
      },
      {
        n: "dang2",
        f: "at2 idx q12"
      },
      {
        n: "swAng2",
        f: "+- dang2 0 swAng"
      },
      {
        n: "swAng3",
        f: "+- swAng dang2 0"
      },
      {
        n: "stAng3",
        f: "+- 0 0 dang2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "y6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y5"
            }
          },
          {
            type: "arcTo",
            wR: "w",
            hR: "hR",
            stAng: "swAng",
            swAng: "swAng2"
          },
          {
            type: "arcTo",
            wR: "w",
            hR: "hR",
            stAng: "stAng3",
            swAng: "swAng3"
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y8"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "r",
              y: "y3"
            }
          },
          {
            type: "arcTo",
            wR: "w",
            hR: "hR",
            stAng: "0",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "w",
            hR: "hR",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "close"
          }
        ],
        fill: "darkenLess",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "r",
              y: "y3"
            }
          },
          {
            type: "arcTo",
            wR: "w",
            hR: "hR",
            stAng: "0",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "w",
            hR: "hR",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y3"
            }
          },
          {
            type: "arcTo",
            wR: "w",
            hR: "hR",
            stAng: "0",
            swAng: "swAng"
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y8"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "y6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y5"
            }
          },
          {
            type: "arcTo",
            wR: "w",
            hR: "hR",
            stAng: "swAng",
            swAng: "swAng2"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  curvedRightArrow: {
    avLst: [
      {
        n: "adj1",
        f: "val 25000"
      },
      {
        n: "adj2",
        f: "val 50000"
      },
      {
        n: "adj3",
        f: "val 25000"
      }
    ],
    gdLst: [
      {
        n: "maxAdj2",
        f: "*/ 50000 h ss"
      },
      {
        n: "a2",
        f: "pin 0 adj2 maxAdj2"
      },
      {
        n: "a1",
        f: "pin 0 adj1 a2"
      },
      {
        n: "th",
        f: "*/ ss a1 100000"
      },
      {
        n: "aw",
        f: "*/ ss a2 100000"
      },
      {
        n: "q1",
        f: "+/ th aw 4"
      },
      {
        n: "hR",
        f: "+- hd2 0 q1"
      },
      {
        n: "q7",
        f: "*/ hR 2 1"
      },
      {
        n: "q8",
        f: "*/ q7 q7 1"
      },
      {
        n: "q9",
        f: "*/ th th 1"
      },
      {
        n: "q10",
        f: "+- q8 0 q9"
      },
      {
        n: "q11",
        f: "sqrt q10"
      },
      {
        n: "idx",
        f: "*/ q11 w q7"
      },
      {
        n: "maxAdj3",
        f: "*/ 100000 idx ss"
      },
      {
        n: "a3",
        f: "pin 0 adj3 maxAdj3"
      },
      {
        n: "ah",
        f: "*/ ss a3 100000"
      },
      {
        n: "y3",
        f: "+- hR th 0"
      },
      {
        n: "q2",
        f: "*/ w w 1"
      },
      {
        n: "q3",
        f: "*/ ah ah 1"
      },
      {
        n: "q4",
        f: "+- q2 0 q3"
      },
      {
        n: "q5",
        f: "sqrt q4"
      },
      {
        n: "dy",
        f: "*/ q5 hR w"
      },
      {
        n: "y5",
        f: "+- hR dy 0"
      },
      {
        n: "y7",
        f: "+- y3 dy 0"
      },
      {
        n: "q6",
        f: "+- aw 0 th"
      },
      {
        n: "dh",
        f: "*/ q6 1 2"
      },
      {
        n: "y4",
        f: "+- y5 0 dh"
      },
      {
        n: "y8",
        f: "+- y7 dh 0"
      },
      {
        n: "aw2",
        f: "*/ aw 1 2"
      },
      {
        n: "y6",
        f: "+- b 0 aw2"
      },
      {
        n: "x1",
        f: "+- r 0 ah"
      },
      {
        n: "swAng",
        f: "at2 ah dy"
      },
      {
        n: "stAng",
        f: "+- cd2 0 swAng"
      },
      {
        n: "mswAng",
        f: "+- 0 0 swAng"
      },
      {
        n: "ix",
        f: "+- r 0 idx"
      },
      {
        n: "iy",
        f: "+/ hR y3 2"
      },
      {
        n: "q12",
        f: "*/ th 1 2"
      },
      {
        n: "dang2",
        f: "at2 idx q12"
      },
      {
        n: "swAng2",
        f: "+- dang2 0 cd4"
      },
      {
        n: "swAng3",
        f: "+- cd4 dang2 0"
      },
      {
        n: "stAng3",
        f: "+- cd2 0 dang2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "hR"
            }
          },
          {
            type: "arcTo",
            wR: "w",
            hR: "hR",
            stAng: "cd2",
            swAng: "mswAng"
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y8"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y7"
            }
          },
          {
            type: "arcTo",
            wR: "w",
            hR: "hR",
            stAng: "stAng",
            swAng: "swAng"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "r",
              y: "th"
            }
          },
          {
            type: "arcTo",
            wR: "w",
            hR: "hR",
            stAng: "3cd4",
            swAng: "swAng2"
          },
          {
            type: "arcTo",
            wR: "w",
            hR: "hR",
            stAng: "stAng3",
            swAng: "swAng3"
          },
          {
            type: "close"
          }
        ],
        fill: "darkenLess",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "hR"
            }
          },
          {
            type: "arcTo",
            wR: "w",
            hR: "hR",
            stAng: "cd2",
            swAng: "mswAng"
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y8"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y7"
            }
          },
          {
            type: "arcTo",
            wR: "w",
            hR: "hR",
            stAng: "stAng",
            swAng: "swAng"
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "hR"
            }
          },
          {
            type: "arcTo",
            wR: "w",
            hR: "hR",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "th"
            }
          },
          {
            type: "arcTo",
            wR: "w",
            hR: "hR",
            stAng: "3cd4",
            swAng: "swAng2"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  curvedUpArrow: {
    avLst: [
      {
        n: "adj1",
        f: "val 25000"
      },
      {
        n: "adj2",
        f: "val 50000"
      },
      {
        n: "adj3",
        f: "val 25000"
      }
    ],
    gdLst: [
      {
        n: "maxAdj2",
        f: "*/ 50000 w ss"
      },
      {
        n: "a2",
        f: "pin 0 adj2 maxAdj2"
      },
      {
        n: "a1",
        f: "pin 0 adj1 100000"
      },
      {
        n: "th",
        f: "*/ ss a1 100000"
      },
      {
        n: "aw",
        f: "*/ ss a2 100000"
      },
      {
        n: "q1",
        f: "+/ th aw 4"
      },
      {
        n: "wR",
        f: "+- wd2 0 q1"
      },
      {
        n: "q7",
        f: "*/ wR 2 1"
      },
      {
        n: "q8",
        f: "*/ q7 q7 1"
      },
      {
        n: "q9",
        f: "*/ th th 1"
      },
      {
        n: "q10",
        f: "+- q8 0 q9"
      },
      {
        n: "q11",
        f: "sqrt q10"
      },
      {
        n: "idy",
        f: "*/ q11 h q7"
      },
      {
        n: "maxAdj3",
        f: "*/ 100000 idy ss"
      },
      {
        n: "a3",
        f: "pin 0 adj3 maxAdj3"
      },
      {
        n: "ah",
        f: "*/ ss adj3 100000"
      },
      {
        n: "x3",
        f: "+- wR th 0"
      },
      {
        n: "q2",
        f: "*/ h h 1"
      },
      {
        n: "q3",
        f: "*/ ah ah 1"
      },
      {
        n: "q4",
        f: "+- q2 0 q3"
      },
      {
        n: "q5",
        f: "sqrt q4"
      },
      {
        n: "dx",
        f: "*/ q5 wR h"
      },
      {
        n: "x5",
        f: "+- wR dx 0"
      },
      {
        n: "x7",
        f: "+- x3 dx 0"
      },
      {
        n: "q6",
        f: "+- aw 0 th"
      },
      {
        n: "dh",
        f: "*/ q6 1 2"
      },
      {
        n: "x4",
        f: "+- x5 0 dh"
      },
      {
        n: "x8",
        f: "+- x7 dh 0"
      },
      {
        n: "aw2",
        f: "*/ aw 1 2"
      },
      {
        n: "x6",
        f: "+- r 0 aw2"
      },
      {
        n: "y1",
        f: "+- t ah 0"
      },
      {
        n: "swAng",
        f: "at2 ah dx"
      },
      {
        n: "mswAng",
        f: "+- 0 0 swAng"
      },
      {
        n: "iy",
        f: "+- t idy 0"
      },
      {
        n: "ix",
        f: "+/ wR x3 2"
      },
      {
        n: "q12",
        f: "*/ th 1 2"
      },
      {
        n: "dang2",
        f: "at2 idy q12"
      },
      {
        n: "swAng2",
        f: "+- dang2 0 swAng"
      },
      {
        n: "mswAng2",
        f: "+- 0 0 swAng2"
      },
      {
        n: "stAng3",
        f: "+- cd4 0 swAng"
      },
      {
        n: "swAng3",
        f: "+- swAng dang2 0"
      },
      {
        n: "stAng2",
        f: "+- cd4 0 dang2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x6",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x8",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x7",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wR",
            hR: "h",
            stAng: "stAng3",
            swAng: "swAng3"
          },
          {
            type: "arcTo",
            wR: "wR",
            hR: "h",
            stAng: "stAng2",
            swAng: "swAng2"
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y1"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "wR",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "wR",
            hR: "h",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "th",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "wR",
            hR: "h",
            stAng: "cd2",
            swAng: "-5400000"
          },
          {
            type: "close"
          }
        ],
        fill: "darkenLess",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "ix",
              y: "iy"
            }
          },
          {
            type: "arcTo",
            wR: "wR",
            hR: "h",
            stAng: "stAng2",
            swAng: "swAng2"
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x8",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x7",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wR",
            hR: "h",
            stAng: "stAng3",
            swAng: "swAng"
          },
          {
            type: "lnTo",
            pt: {
              x: "wR",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "wR",
            hR: "h",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "th",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "wR",
            hR: "h",
            stAng: "cd2",
            swAng: "-5400000"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  decagon: {
    avLst: [
      {
        n: "vf",
        f: "val 105146"
      }
    ],
    gdLst: [
      {
        n: "shd2",
        f: "*/ hd2 vf 100000"
      },
      {
        n: "dx1",
        f: "cos wd2 2160000"
      },
      {
        n: "dx2",
        f: "cos wd2 4320000"
      },
      {
        n: "x1",
        f: "+- hc 0 dx1"
      },
      {
        n: "x2",
        f: "+- hc 0 dx2"
      },
      {
        n: "x3",
        f: "+- hc dx2 0"
      },
      {
        n: "x4",
        f: "+- hc dx1 0"
      },
      {
        n: "dy1",
        f: "sin shd2 4320000"
      },
      {
        n: "dy2",
        f: "sin shd2 2160000"
      },
      {
        n: "y1",
        f: "+- vc 0 dy1"
      },
      {
        n: "y2",
        f: "+- vc 0 dy2"
      },
      {
        n: "y3",
        f: "+- vc dy2 0"
      },
      {
        n: "y4",
        f: "+- vc dy1 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y3"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  diagStripe: {
    avLst: [
      {
        n: "adj",
        f: "val 50000"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 100000"
      },
      {
        n: "x2",
        f: "*/ w a 100000"
      },
      {
        n: "x1",
        f: "*/ x2 1 2"
      },
      {
        n: "x3",
        f: "+/ x2 r 2"
      },
      {
        n: "y2",
        f: "*/ h a 100000"
      },
      {
        n: "y1",
        f: "*/ y2 1 2"
      },
      {
        n: "y3",
        f: "+/ y2 b 2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  diamond: {
    gdLst: [
      {
        n: "ir",
        f: "*/ w 3 4"
      },
      {
        n: "ib",
        f: "*/ h 3 4"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  dodecagon: {
    gdLst: [
      {
        n: "x1",
        f: "*/ w 2894 21600"
      },
      {
        n: "x2",
        f: "*/ w 7906 21600"
      },
      {
        n: "x3",
        f: "*/ w 13694 21600"
      },
      {
        n: "x4",
        f: "*/ w 18706 21600"
      },
      {
        n: "y1",
        f: "*/ h 2894 21600"
      },
      {
        n: "y2",
        f: "*/ h 7906 21600"
      },
      {
        n: "y3",
        f: "*/ h 13694 21600"
      },
      {
        n: "y4",
        f: "*/ h 18706 21600"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "y3"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  donut: {
    avLst: [
      {
        n: "adj",
        f: "val 25000"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 50000"
      },
      {
        n: "dr",
        f: "*/ ss a 100000"
      },
      {
        n: "iwd2",
        f: "+- wd2 0 dr"
      },
      {
        n: "ihd2",
        f: "+- hd2 0 dr"
      },
      {
        n: "idx",
        f: "cos wd2 2700000"
      },
      {
        n: "idy",
        f: "sin hd2 2700000"
      },
      {
        n: "il",
        f: "+- hc 0 idx"
      },
      {
        n: "ir",
        f: "+- hc idx 0"
      },
      {
        n: "it",
        f: "+- vc 0 idy"
      },
      {
        n: "ib",
        f: "+- vc idy 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "dr",
              y: "vc"
            }
          },
          {
            type: "arcTo",
            wR: "iwd2",
            hR: "ihd2",
            stAng: "cd2",
            swAng: "-5400000"
          },
          {
            type: "arcTo",
            wR: "iwd2",
            hR: "ihd2",
            stAng: "cd4",
            swAng: "-5400000"
          },
          {
            type: "arcTo",
            wR: "iwd2",
            hR: "ihd2",
            stAng: "0",
            swAng: "-5400000"
          },
          {
            type: "arcTo",
            wR: "iwd2",
            hR: "ihd2",
            stAng: "3cd4",
            swAng: "-5400000"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  doubleWave: {
    avLst: [
      {
        n: "adj1",
        f: "val 6250"
      },
      {
        n: "adj2",
        f: "val 0"
      }
    ],
    gdLst: [
      {
        n: "a1",
        f: "pin 0 adj1 12500"
      },
      {
        n: "a2",
        f: "pin -10000 adj2 10000"
      },
      {
        n: "y1",
        f: "*/ h a1 100000"
      },
      {
        n: "dy2",
        f: "*/ y1 10 3"
      },
      {
        n: "y2",
        f: "+- y1 0 dy2"
      },
      {
        n: "y3",
        f: "+- y1 dy2 0"
      },
      {
        n: "y4",
        f: "+- b 0 y1"
      },
      {
        n: "y5",
        f: "+- y4 0 dy2"
      },
      {
        n: "y6",
        f: "+- y4 dy2 0"
      },
      {
        n: "dx1",
        f: "*/ w a2 100000"
      },
      {
        n: "of2",
        f: "*/ w a2 50000"
      },
      {
        n: "x1",
        f: "abs dx1"
      },
      {
        n: "dx2",
        f: "?: of2 0 of2"
      },
      {
        n: "x2",
        f: "+- l 0 dx2"
      },
      {
        n: "dx8",
        f: "?: of2 of2 0"
      },
      {
        n: "x8",
        f: "+- r 0 dx8"
      },
      {
        n: "dx3",
        f: "+/ dx2 x8 6"
      },
      {
        n: "x3",
        f: "+- x2 dx3 0"
      },
      {
        n: "dx4",
        f: "+/ dx2 x8 3"
      },
      {
        n: "x4",
        f: "+- x2 dx4 0"
      },
      {
        n: "x5",
        f: "+/ x2 x8 2"
      },
      {
        n: "x6",
        f: "+- x5 dx3 0"
      },
      {
        n: "x7",
        f: "+/ x6 x8 2"
      },
      {
        n: "x9",
        f: "+- l dx8 0"
      },
      {
        n: "x15",
        f: "+- r dx2 0"
      },
      {
        n: "x10",
        f: "+- x9 dx3 0"
      },
      {
        n: "x11",
        f: "+- x9 dx4 0"
      },
      {
        n: "x12",
        f: "+/ x9 x15 2"
      },
      {
        n: "x13",
        f: "+- x12 dx3 0"
      },
      {
        n: "x14",
        f: "+/ x13 x15 2"
      },
      {
        n: "x16",
        f: "+- r 0 x1"
      },
      {
        n: "xAdj",
        f: "+- hc dx1 0"
      },
      {
        n: "il",
        f: "max x2 x9"
      },
      {
        n: "ir",
        f: "min x8 x15"
      },
      {
        n: "it",
        f: "*/ h a1 50000"
      },
      {
        n: "ib",
        f: "+- b 0 it"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x2",
              y: "y1"
            }
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "x3",
                y: "y2"
              },
              {
                x: "x4",
                y: "y3"
              },
              {
                x: "x5",
                y: "y1"
              }
            ]
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "x6",
                y: "y2"
              },
              {
                x: "x7",
                y: "y3"
              },
              {
                x: "x8",
                y: "y1"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "x15",
              y: "y4"
            }
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "x14",
                y: "y6"
              },
              {
                x: "x13",
                y: "y5"
              },
              {
                x: "x12",
                y: "y4"
              }
            ]
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "x11",
                y: "y6"
              },
              {
                x: "x10",
                y: "y5"
              },
              {
                x: "x9",
                y: "y4"
              }
            ]
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  downArrow: {
    avLst: [
      {
        n: "adj1",
        f: "val 50000"
      },
      {
        n: "adj2",
        f: "val 50000"
      }
    ],
    gdLst: [
      {
        n: "maxAdj2",
        f: "*/ 100000 h ss"
      },
      {
        n: "a1",
        f: "pin 0 adj1 100000"
      },
      {
        n: "a2",
        f: "pin 0 adj2 maxAdj2"
      },
      {
        n: "dy1",
        f: "*/ ss a2 100000"
      },
      {
        n: "y1",
        f: "+- b 0 dy1"
      },
      {
        n: "dx1",
        f: "*/ w a1 200000"
      },
      {
        n: "x1",
        f: "+- hc 0 dx1"
      },
      {
        n: "x2",
        f: "+- hc dx1 0"
      },
      {
        n: "dy2",
        f: "*/ x1 dy1 wd2"
      },
      {
        n: "y2",
        f: "+- y1 dy2 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  downArrowCallout: {
    avLst: [
      {
        n: "adj1",
        f: "val 25000"
      },
      {
        n: "adj2",
        f: "val 25000"
      },
      {
        n: "adj3",
        f: "val 25000"
      },
      {
        n: "adj4",
        f: "val 64977"
      }
    ],
    gdLst: [
      {
        n: "maxAdj2",
        f: "*/ 50000 w ss"
      },
      {
        n: "a2",
        f: "pin 0 adj2 maxAdj2"
      },
      {
        n: "maxAdj1",
        f: "*/ a2 2 1"
      },
      {
        n: "a1",
        f: "pin 0 adj1 maxAdj1"
      },
      {
        n: "maxAdj3",
        f: "*/ 100000 h ss"
      },
      {
        n: "a3",
        f: "pin 0 adj3 maxAdj3"
      },
      {
        n: "q2",
        f: "*/ a3 ss h"
      },
      {
        n: "maxAdj4",
        f: "+- 100000 0 q2"
      },
      {
        n: "a4",
        f: "pin 0 adj4 maxAdj4"
      },
      {
        n: "dx1",
        f: "*/ ss a2 100000"
      },
      {
        n: "dx2",
        f: "*/ ss a1 200000"
      },
      {
        n: "x1",
        f: "+- hc 0 dx1"
      },
      {
        n: "x2",
        f: "+- hc 0 dx2"
      },
      {
        n: "x3",
        f: "+- hc dx2 0"
      },
      {
        n: "x4",
        f: "+- hc dx1 0"
      },
      {
        n: "dy3",
        f: "*/ ss a3 100000"
      },
      {
        n: "y3",
        f: "+- b 0 dy3"
      },
      {
        n: "y2",
        f: "*/ h a4 100000"
      },
      {
        n: "y1",
        f: "*/ y2 1 2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "y2"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  ellipse: {
    gdLst: [
      {
        n: "idx",
        f: "cos wd2 2700000"
      },
      {
        n: "idy",
        f: "sin hd2 2700000"
      },
      {
        n: "il",
        f: "+- hc 0 idx"
      },
      {
        n: "ir",
        f: "+- hc idx 0"
      },
      {
        n: "it",
        f: "+- vc 0 idy"
      },
      {
        n: "ib",
        f: "+- vc idy 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  ellipseRibbon: {
    avLst: [
      {
        n: "adj1",
        f: "val 25000"
      },
      {
        n: "adj2",
        f: "val 50000"
      },
      {
        n: "adj3",
        f: "val 12500"
      }
    ],
    gdLst: [
      {
        n: "a1",
        f: "pin 0 adj1 100000"
      },
      {
        n: "a2",
        f: "pin 25000 adj2 75000"
      },
      {
        n: "q10",
        f: "+- 100000 0 a1"
      },
      {
        n: "q11",
        f: "*/ q10 1 2"
      },
      {
        n: "q12",
        f: "+- a1 0 q11"
      },
      {
        n: "minAdj3",
        f: "max 0 q12"
      },
      {
        n: "a3",
        f: "pin minAdj3 adj3 a1"
      },
      {
        n: "dx2",
        f: "*/ w a2 200000"
      },
      {
        n: "x2",
        f: "+- hc 0 dx2"
      },
      {
        n: "x3",
        f: "+- x2 wd8 0"
      },
      {
        n: "x4",
        f: "+- r 0 x3"
      },
      {
        n: "x5",
        f: "+- r 0 x2"
      },
      {
        n: "x6",
        f: "+- r 0 wd8"
      },
      {
        n: "dy1",
        f: "*/ h a3 100000"
      },
      {
        n: "f1",
        f: "*/ 4 dy1 w"
      },
      {
        n: "q1",
        f: "*/ x3 x3 w"
      },
      {
        n: "q2",
        f: "+- x3 0 q1"
      },
      {
        n: "y1",
        f: "*/ f1 q2 1"
      },
      {
        n: "cx1",
        f: "*/ x3 1 2"
      },
      {
        n: "cy1",
        f: "*/ f1 cx1 1"
      },
      {
        n: "cx2",
        f: "+- r 0 cx1"
      },
      {
        n: "q1",
        f: "*/ h a1 100000"
      },
      {
        n: "dy3",
        f: "+- q1 0 dy1"
      },
      {
        n: "q3",
        f: "*/ x2 x2 w"
      },
      {
        n: "q4",
        f: "+- x2 0 q3"
      },
      {
        n: "q5",
        f: "*/ f1 q4 1"
      },
      {
        n: "y3",
        f: "+- q5 dy3 0"
      },
      {
        n: "q6",
        f: "+- dy1 dy3 y3"
      },
      {
        n: "q7",
        f: "+- q6 dy1 0"
      },
      {
        n: "cy3",
        f: "+- q7 dy3 0"
      },
      {
        n: "rh",
        f: "+- b 0 q1"
      },
      {
        n: "q8",
        f: "*/ dy1 14 16"
      },
      {
        n: "y2",
        f: "+/ q8 rh 2"
      },
      {
        n: "y5",
        f: "+- q5 rh 0"
      },
      {
        n: "y6",
        f: "+- y3 rh 0"
      },
      {
        n: "cx4",
        f: "*/ x2 1 2"
      },
      {
        n: "q9",
        f: "*/ f1 cx4 1"
      },
      {
        n: "cy4",
        f: "+- q9 rh 0"
      },
      {
        n: "cx5",
        f: "+- r 0 cx4"
      },
      {
        n: "cy6",
        f: "+- cy3 rh 0"
      },
      {
        n: "y7",
        f: "+- y1 dy3 0"
      },
      {
        n: "cy7",
        f: "+- q1 q1 y7"
      },
      {
        n: "y8",
        f: "+- b 0 dy1"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "cx1",
                y: "cy1"
              },
              {
                x: "x3",
                y: "y1"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y3"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "hc",
                y: "cy3"
              },
              {
                x: "x5",
                y: "y3"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y1"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "cx2",
                y: "cy1"
              },
              {
                x: "r",
                y: "t"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "rh"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "cx5",
                y: "cy4"
              },
              {
                x: "x5",
                y: "y5"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y6"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "hc",
                y: "cy6"
              },
              {
                x: "x2",
                y: "y6"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y5"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "cx4",
                y: "cy4"
              },
              {
                x: "l",
                y: "rh"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "wd8",
              y: "y2"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x3",
              y: "y7"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y3"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "hc",
                y: "cy3"
              },
              {
                x: "x5",
                y: "y3"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y7"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "hc",
                y: "cy7"
              },
              {
                x: "x3",
                y: "y7"
              }
            ]
          },
          {
            type: "close"
          }
        ],
        fill: "darkenLess",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "cx1",
                y: "cy1"
              },
              {
                x: "x3",
                y: "y1"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y3"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "hc",
                y: "cy3"
              },
              {
                x: "x5",
                y: "y3"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y1"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "cx2",
                y: "cy1"
              },
              {
                x: "r",
                y: "t"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "rh"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "cx5",
                y: "cy4"
              },
              {
                x: "x5",
                y: "y5"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y6"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "hc",
                y: "cy6"
              },
              {
                x: "x2",
                y: "y6"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y5"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "cx4",
                y: "cy4"
              },
              {
                x: "l",
                y: "rh"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "wd8",
              y: "y2"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "x2",
              y: "y5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y3"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "x5",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y5"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "x3",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y7"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "x4",
              y: "y7"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y1"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  ellipseRibbon2: {
    avLst: [
      {
        n: "adj1",
        f: "val 25000"
      },
      {
        n: "adj2",
        f: "val 50000"
      },
      {
        n: "adj3",
        f: "val 12500"
      }
    ],
    gdLst: [
      {
        n: "a1",
        f: "pin 0 adj1 100000"
      },
      {
        n: "a2",
        f: "pin 25000 adj2 75000"
      },
      {
        n: "q10",
        f: "+- 100000 0 a1"
      },
      {
        n: "q11",
        f: "*/ q10 1 2"
      },
      {
        n: "q12",
        f: "+- a1 0 q11"
      },
      {
        n: "minAdj3",
        f: "max 0 q12"
      },
      {
        n: "a3",
        f: "pin minAdj3 adj3 a1"
      },
      {
        n: "dx2",
        f: "*/ w a2 200000"
      },
      {
        n: "x2",
        f: "+- hc 0 dx2"
      },
      {
        n: "x3",
        f: "+- x2 wd8 0"
      },
      {
        n: "x4",
        f: "+- r 0 x3"
      },
      {
        n: "x5",
        f: "+- r 0 x2"
      },
      {
        n: "x6",
        f: "+- r 0 wd8"
      },
      {
        n: "dy1",
        f: "*/ h a3 100000"
      },
      {
        n: "f1",
        f: "*/ 4 dy1 w"
      },
      {
        n: "q1",
        f: "*/ x3 x3 w"
      },
      {
        n: "q2",
        f: "+- x3 0 q1"
      },
      {
        n: "u1",
        f: "*/ f1 q2 1"
      },
      {
        n: "y1",
        f: "+- b 0 u1"
      },
      {
        n: "cx1",
        f: "*/ x3 1 2"
      },
      {
        n: "cu1",
        f: "*/ f1 cx1 1"
      },
      {
        n: "cy1",
        f: "+- b 0 cu1"
      },
      {
        n: "cx2",
        f: "+- r 0 cx1"
      },
      {
        n: "q1",
        f: "*/ h a1 100000"
      },
      {
        n: "dy3",
        f: "+- q1 0 dy1"
      },
      {
        n: "q3",
        f: "*/ x2 x2 w"
      },
      {
        n: "q4",
        f: "+- x2 0 q3"
      },
      {
        n: "q5",
        f: "*/ f1 q4 1"
      },
      {
        n: "u3",
        f: "+- q5 dy3 0"
      },
      {
        n: "y3",
        f: "+- b 0 u3"
      },
      {
        n: "q6",
        f: "+- dy1 dy3 u3"
      },
      {
        n: "q7",
        f: "+- q6 dy1 0"
      },
      {
        n: "cu3",
        f: "+- q7 dy3 0"
      },
      {
        n: "cy3",
        f: "+- b 0 cu3"
      },
      {
        n: "rh",
        f: "+- b 0 q1"
      },
      {
        n: "q8",
        f: "*/ dy1 14 16"
      },
      {
        n: "u2",
        f: "+/ q8 rh 2"
      },
      {
        n: "y2",
        f: "+- b 0 u2"
      },
      {
        n: "u5",
        f: "+- q5 rh 0"
      },
      {
        n: "y5",
        f: "+- b 0 u5"
      },
      {
        n: "u6",
        f: "+- u3 rh 0"
      },
      {
        n: "y6",
        f: "+- b 0 u6"
      },
      {
        n: "cx4",
        f: "*/ x2 1 2"
      },
      {
        n: "q9",
        f: "*/ f1 cx4 1"
      },
      {
        n: "cu4",
        f: "+- q9 rh 0"
      },
      {
        n: "cy4",
        f: "+- b 0 cu4"
      },
      {
        n: "cx5",
        f: "+- r 0 cx4"
      },
      {
        n: "cu6",
        f: "+- cu3 rh 0"
      },
      {
        n: "cy6",
        f: "+- b 0 cu6"
      },
      {
        n: "u7",
        f: "+- u1 dy3 0"
      },
      {
        n: "y7",
        f: "+- b 0 u7"
      },
      {
        n: "cu7",
        f: "+- q1 q1 u7"
      },
      {
        n: "cy7",
        f: "+- b 0 cu7"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "cx1",
                y: "cy1"
              },
              {
                x: "x3",
                y: "y1"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y3"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "hc",
                y: "cy3"
              },
              {
                x: "x5",
                y: "y3"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y1"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "cx2",
                y: "cy1"
              },
              {
                x: "r",
                y: "b"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "q1"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "cx5",
                y: "cy4"
              },
              {
                x: "x5",
                y: "y5"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y6"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "hc",
                y: "cy6"
              },
              {
                x: "x2",
                y: "y6"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y5"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "cx4",
                y: "cy4"
              },
              {
                x: "l",
                y: "q1"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "wd8",
              y: "y2"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x3",
              y: "y7"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y3"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "hc",
                y: "cy3"
              },
              {
                x: "x5",
                y: "y3"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y7"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "hc",
                y: "cy7"
              },
              {
                x: "x3",
                y: "y7"
              }
            ]
          },
          {
            type: "close"
          }
        ],
        fill: "darkenLess",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "wd8",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "q1"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "cx4",
                y: "cy4"
              },
              {
                x: "x2",
                y: "y5"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y6"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "hc",
                y: "cy6"
              },
              {
                x: "x5",
                y: "y6"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y5"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "cx5",
                y: "cy4"
              },
              {
                x: "r",
                y: "q1"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "cx2",
                y: "cy1"
              },
              {
                x: "x4",
                y: "y1"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y3"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "hc",
                y: "cy3"
              },
              {
                x: "x2",
                y: "y3"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y1"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "cx1",
                y: "cy1"
              },
              {
                x: "l",
                y: "b"
              }
            ]
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "x2",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y5"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "x5",
              y: "y5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y3"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "x3",
              y: "y7"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y1"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "x4",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y7"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  flowChartAlternateProcess: {
    gdLst: [
      {
        n: "x2",
        f: "+- r 0 ssd6"
      },
      {
        n: "y2",
        f: "+- b 0 ssd6"
      },
      {
        n: "il",
        f: "*/ ssd6 29289 100000"
      },
      {
        n: "ir",
        f: "+- r 0 il"
      },
      {
        n: "ib",
        f: "+- b 0 il"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "ssd6"
            }
          },
          {
            type: "arcTo",
            wR: "ssd6",
            hR: "ssd6",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "ssd6",
            hR: "ssd6",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y2"
            }
          },
          {
            type: "arcTo",
            wR: "ssd6",
            hR: "ssd6",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "ssd6",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "ssd6",
            hR: "ssd6",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  flowChartCollate: {
    gdLst: [
      {
        n: "ir",
        f: "*/ w 3 4"
      },
      {
        n: "ib",
        f: "*/ h 3 4"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "2",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "2",
              y: "2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "0",
              y: "2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "1"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true,
        w: 2,
        h: 2
      }
    ]
  },
  flowChartConnector: {
    gdLst: [
      {
        n: "idx",
        f: "cos wd2 2700000"
      },
      {
        n: "idy",
        f: "sin hd2 2700000"
      },
      {
        n: "il",
        f: "+- hc 0 idx"
      },
      {
        n: "ir",
        f: "+- hc idx 0"
      },
      {
        n: "it",
        f: "+- vc 0 idy"
      },
      {
        n: "ib",
        f: "+- vc idy 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  flowChartDecision: {
    gdLst: [
      {
        n: "ir",
        f: "*/ w 3 4"
      },
      {
        n: "ib",
        f: "*/ h 3 4"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "2",
              y: "1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "2"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true,
        w: 2,
        h: 2
      }
    ]
  },
  flowChartDelay: {
    gdLst: [
      {
        n: "idx",
        f: "cos wd2 2700000"
      },
      {
        n: "idy",
        f: "sin hd2 2700000"
      },
      {
        n: "ir",
        f: "+- hc idx 0"
      },
      {
        n: "it",
        f: "+- vc 0 idy"
      },
      {
        n: "ib",
        f: "+- vc idy 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "3cd4",
            swAng: "cd2"
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  flowChartDisplay: {
    gdLst: [
      {
        n: "x2",
        f: "*/ w 5 6"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "5",
              y: "0"
            }
          },
          {
            type: "arcTo",
            wR: "1",
            hR: "3",
            stAng: "3cd4",
            swAng: "cd2"
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "6"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true,
        w: 6,
        h: 6
      }
    ]
  },
  flowChartDocument: {
    gdLst: [
      {
        n: "y1",
        f: "*/ h 17322 21600"
      },
      {
        n: "y2",
        f: "*/ h 20172 21600"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "21600",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "21600",
              y: "17322"
            }
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "10800",
                y: "17322"
              },
              {
                x: "10800",
                y: "23922"
              },
              {
                x: "0",
                y: "20172"
              }
            ]
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true,
        w: 21600,
        h: 21600
      }
    ]
  },
  flowChartExtract: {
    gdLst: [
      {
        n: "x2",
        f: "*/ w 3 4"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "2",
              y: "2"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true,
        w: 2,
        h: 2
      }
    ]
  },
  flowChartInputOutput: {
    gdLst: [
      {
        n: "x3",
        f: "*/ w 2 5"
      },
      {
        n: "x4",
        f: "*/ w 3 5"
      },
      {
        n: "x5",
        f: "*/ w 4 5"
      },
      {
        n: "x6",
        f: "*/ w 9 10"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "5",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "4",
              y: "5"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true,
        w: 5,
        h: 5
      }
    ]
  },
  flowChartInternalStorage: {
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "0",
              y: "1"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false,
        w: 1,
        h: 1
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "1",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "8"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "8",
              y: "1"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true,
        w: 8,
        h: 8
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "0",
              y: "1"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true,
        w: 1,
        h: 1
      }
    ]
  },
  flowChartMagneticDisk: {
    gdLst: [
      {
        n: "y3",
        f: "*/ h 5 6"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "1"
            }
          },
          {
            type: "arcTo",
            wR: "3",
            hR: "1",
            stAng: "cd2",
            swAng: "cd2"
          },
          {
            type: "lnTo",
            pt: {
              x: "6",
              y: "5"
            }
          },
          {
            type: "arcTo",
            wR: "3",
            hR: "1",
            stAng: "0",
            swAng: "cd2"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false,
        w: 6,
        h: 6
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "6",
              y: "1"
            }
          },
          {
            type: "arcTo",
            wR: "3",
            hR: "1",
            stAng: "0",
            swAng: "cd2"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true,
        w: 6,
        h: 6
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "1"
            }
          },
          {
            type: "arcTo",
            wR: "3",
            hR: "1",
            stAng: "cd2",
            swAng: "cd2"
          },
          {
            type: "lnTo",
            pt: {
              x: "6",
              y: "5"
            }
          },
          {
            type: "arcTo",
            wR: "3",
            hR: "1",
            stAng: "0",
            swAng: "cd2"
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true,
        w: 6,
        h: 6
      }
    ]
  },
  flowChartMagneticDrum: {
    gdLst: [
      {
        n: "x2",
        f: "*/ w 2 3"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "1",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "5",
              y: "0"
            }
          },
          {
            type: "arcTo",
            wR: "1",
            hR: "3",
            stAng: "3cd4",
            swAng: "cd2"
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "6"
            }
          },
          {
            type: "arcTo",
            wR: "1",
            hR: "3",
            stAng: "cd4",
            swAng: "cd2"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false,
        w: 6,
        h: 6
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "5",
              y: "6"
            }
          },
          {
            type: "arcTo",
            wR: "1",
            hR: "3",
            stAng: "cd4",
            swAng: "cd2"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true,
        w: 6,
        h: 6
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "1",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "5",
              y: "0"
            }
          },
          {
            type: "arcTo",
            wR: "1",
            hR: "3",
            stAng: "3cd4",
            swAng: "cd2"
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "6"
            }
          },
          {
            type: "arcTo",
            wR: "1",
            hR: "3",
            stAng: "cd4",
            swAng: "cd2"
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true,
        w: 6,
        h: 6
      }
    ]
  },
  flowChartMagneticTape: {
    gdLst: [
      {
        n: "idx",
        f: "cos wd2 2700000"
      },
      {
        n: "idy",
        f: "sin hd2 2700000"
      },
      {
        n: "il",
        f: "+- hc 0 idx"
      },
      {
        n: "ir",
        f: "+- hc idx 0"
      },
      {
        n: "it",
        f: "+- vc 0 idy"
      },
      {
        n: "ib",
        f: "+- vc idy 0"
      },
      {
        n: "ang1",
        f: "at2 w h"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "hc",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "0",
            swAng: "ang1"
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "ib"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  flowChartManualInput: {
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "5",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "5",
              y: "5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "0",
              y: "5"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true,
        w: 5,
        h: 5
      }
    ]
  },
  flowChartManualOperation: {
    gdLst: [
      {
        n: "x3",
        f: "*/ w 4 5"
      },
      {
        n: "x4",
        f: "*/ w 9 10"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "5",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "4",
              y: "5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "5"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true,
        w: 5,
        h: 5
      }
    ]
  },
  flowChartMerge: {
    gdLst: [
      {
        n: "x2",
        f: "*/ w 3 4"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "2",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "2"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true,
        w: 2,
        h: 2
      }
    ]
  },
  flowChartMultidocument: {
    gdLst: [
      {
        n: "y2",
        f: "*/ h 3675 21600"
      },
      {
        n: "y8",
        f: "*/ h 20782 21600"
      },
      {
        n: "x3",
        f: "*/ w 9298 21600"
      },
      {
        n: "x4",
        f: "*/ w 12286 21600"
      },
      {
        n: "x5",
        f: "*/ w 18595 21600"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "20782"
            }
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "9298",
                y: "23542"
              },
              {
                x: "9298",
                y: "18022"
              },
              {
                x: "18595",
                y: "18022"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "18595",
              y: "3675"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "0",
              y: "3675"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "1532",
              y: "3675"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1532",
              y: "1815"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "20000",
              y: "1815"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "20000",
              y: "16252"
            }
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "19298",
                y: "16252"
              },
              {
                x: "18595",
                y: "16352"
              },
              {
                x: "18595",
                y: "16352"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "18595",
              y: "3675"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "2972",
              y: "1815"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "2972",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "21600",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "21600",
              y: "14392"
            }
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "20800",
                y: "14392"
              },
              {
                x: "20000",
                y: "14467"
              },
              {
                x: "20000",
                y: "14467"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "20000",
              y: "1815"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false,
        w: 21600,
        h: 21600
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "3675"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "18595",
              y: "3675"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "18595",
              y: "18022"
            }
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "9298",
                y: "18022"
              },
              {
                x: "9298",
                y: "23542"
              },
              {
                x: "0",
                y: "20782"
              }
            ]
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "1532",
              y: "3675"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1532",
              y: "1815"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "20000",
              y: "1815"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "20000",
              y: "16252"
            }
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "19298",
                y: "16252"
              },
              {
                x: "18595",
                y: "16352"
              },
              {
                x: "18595",
                y: "16352"
              }
            ]
          },
          {
            type: "moveTo",
            pt: {
              x: "2972",
              y: "1815"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "2972",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "21600",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "21600",
              y: "14392"
            }
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "20800",
                y: "14392"
              },
              {
                x: "20000",
                y: "14467"
              },
              {
                x: "20000",
                y: "14467"
              }
            ]
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true,
        w: 21600,
        h: 21600
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "20782"
            }
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "9298",
                y: "23542"
              },
              {
                x: "9298",
                y: "18022"
              },
              {
                x: "18595",
                y: "18022"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "18595",
              y: "16352"
            }
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "18595",
                y: "16352"
              },
              {
                x: "19298",
                y: "16252"
              },
              {
                x: "20000",
                y: "16252"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "20000",
              y: "14467"
            }
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "20000",
                y: "14467"
              },
              {
                x: "20800",
                y: "14392"
              },
              {
                x: "21600",
                y: "14392"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "21600",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "2972",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "2972",
              y: "1815"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1532",
              y: "1815"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1532",
              y: "3675"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "0",
              y: "3675"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: false,
        w: 21600,
        h: 21600
      }
    ]
  },
  flowChartOfflineStorage: {
    gdLst: [
      {
        n: "x4",
        f: "*/ w 3 4"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "2",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "2"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false,
        w: 2,
        h: 2
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "2",
              y: "4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "3",
              y: "4"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true,
        w: 5,
        h: 5
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "2",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "2"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: true,
        stroke: true,
        w: 2,
        h: 2
      }
    ]
  },
  flowChartOffpageConnector: {
    gdLst: [
      {
        n: "y1",
        f: "*/ h 4 5"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "10",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "10",
              y: "8"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "5",
              y: "10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "0",
              y: "8"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true,
        w: 10,
        h: 10
      }
    ]
  },
  flowChartOnlineStorage: {
    gdLst: [
      {
        n: "x2",
        f: "*/ w 5 6"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "1",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "6",
              y: "0"
            }
          },
          {
            type: "arcTo",
            wR: "1",
            hR: "3",
            stAng: "3cd4",
            swAng: "-10800000"
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "6"
            }
          },
          {
            type: "arcTo",
            wR: "1",
            hR: "3",
            stAng: "cd4",
            swAng: "cd2"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true,
        w: 6,
        h: 6
      }
    ]
  },
  flowChartOr: {
    gdLst: [
      {
        n: "idx",
        f: "cos wd2 2700000"
      },
      {
        n: "idy",
        f: "sin hd2 2700000"
      },
      {
        n: "il",
        f: "+- hc 0 idx"
      },
      {
        n: "ir",
        f: "+- hc idx 0"
      },
      {
        n: "it",
        f: "+- vc 0 idy"
      },
      {
        n: "ib",
        f: "+- vc idy 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "hc",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "b"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "vc"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  flowChartPredefinedProcess: {
    gdLst: [
      {
        n: "x2",
        f: "*/ w 7 8"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "0",
              y: "1"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false,
        w: 1,
        h: 1
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "1",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "8"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "7",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "7",
              y: "8"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true,
        w: 8,
        h: 8
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "0",
              y: "1"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true,
        w: 1,
        h: 1
      }
    ]
  },
  flowChartPreparation: {
    gdLst: [
      {
        n: "x2",
        f: "*/ w 4 5"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "2",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "8",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "10",
              y: "5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "8",
              y: "10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "2",
              y: "10"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true,
        w: 10,
        h: 10
      }
    ]
  },
  flowChartProcess: {
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "0",
              y: "1"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true,
        w: 1,
        h: 1
      }
    ]
  },
  flowChartPunchedCard: {
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "5",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "5",
              y: "5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "0",
              y: "5"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true,
        w: 5,
        h: 5
      }
    ]
  },
  flowChartPunchedTape: {
    gdLst: [
      {
        n: "y2",
        f: "*/ h 9 10"
      },
      {
        n: "ib",
        f: "*/ h 4 5"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "2"
            }
          },
          {
            type: "arcTo",
            wR: "5",
            hR: "2",
            stAng: "cd2",
            swAng: "-10800000"
          },
          {
            type: "arcTo",
            wR: "5",
            hR: "2",
            stAng: "cd2",
            swAng: "cd2"
          },
          {
            type: "lnTo",
            pt: {
              x: "20",
              y: "18"
            }
          },
          {
            type: "arcTo",
            wR: "5",
            hR: "2",
            stAng: "0",
            swAng: "-10800000"
          },
          {
            type: "arcTo",
            wR: "5",
            hR: "2",
            stAng: "0",
            swAng: "cd2"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true,
        w: 20,
        h: 20
      }
    ]
  },
  flowChartSort: {
    gdLst: [
      {
        n: "ir",
        f: "*/ w 3 4"
      },
      {
        n: "ib",
        f: "*/ h 3 4"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "2",
              y: "1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "2"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false,
        w: 2,
        h: 2
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "2",
              y: "1"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true,
        w: 2,
        h: 2
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "0",
              y: "1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "2",
              y: "1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1",
              y: "2"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true,
        w: 2,
        h: 2
      }
    ]
  },
  flowChartSummingJunction: {
    gdLst: [
      {
        n: "idx",
        f: "cos wd2 2700000"
      },
      {
        n: "idy",
        f: "sin hd2 2700000"
      },
      {
        n: "il",
        f: "+- hc 0 idx"
      },
      {
        n: "ir",
        f: "+- hc idx 0"
      },
      {
        n: "it",
        f: "+- vc 0 idy"
      },
      {
        n: "ib",
        f: "+- vc idy 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "il",
              y: "it"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "ir",
              y: "ib"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "ir",
              y: "it"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "il",
              y: "ib"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  flowChartTerminator: {
    gdLst: [
      {
        n: "il",
        f: "*/ w 1018 21600"
      },
      {
        n: "ir",
        f: "*/ w 20582 21600"
      },
      {
        n: "it",
        f: "*/ h 3163 21600"
      },
      {
        n: "ib",
        f: "*/ h 18437 21600"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "3475",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "18125",
              y: "0"
            }
          },
          {
            type: "arcTo",
            wR: "3475",
            hR: "10800",
            stAng: "3cd4",
            swAng: "cd2"
          },
          {
            type: "lnTo",
            pt: {
              x: "3475",
              y: "21600"
            }
          },
          {
            type: "arcTo",
            wR: "3475",
            hR: "10800",
            stAng: "cd4",
            swAng: "cd2"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true,
        w: 21600,
        h: 21600
      }
    ]
  },
  foldedCorner: {
    avLst: [
      {
        n: "adj",
        f: "val 16667"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 50000"
      },
      {
        n: "dy2",
        f: "*/ ss a 100000"
      },
      {
        n: "dy1",
        f: "*/ dy2 1 5"
      },
      {
        n: "x1",
        f: "+- r 0 dy2"
      },
      {
        n: "x2",
        f: "+- x1 dy1 0"
      },
      {
        n: "y2",
        f: "+- b 0 dy2"
      },
      {
        n: "y1",
        f: "+- y2 dy1 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y2"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "darkenLess",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y2"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  frame: {
    avLst: [
      {
        n: "adj1",
        f: "val 12500"
      }
    ],
    gdLst: [
      {
        n: "a1",
        f: "pin 0 adj1 50000"
      },
      {
        n: "x1",
        f: "*/ ss a1 100000"
      },
      {
        n: "x4",
        f: "+- r 0 x1"
      },
      {
        n: "y4",
        f: "+- b 0 x1"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "x1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "x1"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  funnel: {
    gdLst: [
      {
        n: "d",
        f: "*/ ss 1 20"
      },
      {
        n: "rw2",
        f: "+- wd2 0 d"
      },
      {
        n: "rh2",
        f: "+- hd4 0 d"
      },
      {
        n: "t1",
        f: "cos wd2 480000"
      },
      {
        n: "t2",
        f: "sin hd4 480000"
      },
      {
        n: "da",
        f: "at2 t1 t2"
      },
      {
        n: "2da",
        f: "*/ da 2 1"
      },
      {
        n: "stAng1",
        f: "+- cd2 0 da"
      },
      {
        n: "swAng1",
        f: "+- cd2 2da 0"
      },
      {
        n: "swAng3",
        f: "+- cd2 0 2da"
      },
      {
        n: "rw3",
        f: "*/ wd2 1 4"
      },
      {
        n: "rh3",
        f: "*/ hd4 1 4"
      },
      {
        n: "ct1",
        f: "cos hd4 stAng1"
      },
      {
        n: "st1",
        f: "sin wd2 stAng1"
      },
      {
        n: "m1",
        f: "mod ct1 st1 0"
      },
      {
        n: "n1",
        f: "*/ wd2 hd4 m1"
      },
      {
        n: "dx1",
        f: "cos n1 stAng1"
      },
      {
        n: "dy1",
        f: "sin n1 stAng1"
      },
      {
        n: "x1",
        f: "+- hc dx1 0"
      },
      {
        n: "y1",
        f: "+- hd4 dy1 0"
      },
      {
        n: "ct3",
        f: "cos rh3 da"
      },
      {
        n: "st3",
        f: "sin rw3 da"
      },
      {
        n: "m3",
        f: "mod ct3 st3 0"
      },
      {
        n: "n3",
        f: "*/ rw3 rh3 m3"
      },
      {
        n: "dx3",
        f: "cos n3 da"
      },
      {
        n: "dy3",
        f: "sin n3 da"
      },
      {
        n: "x3",
        f: "+- hc dx3 0"
      },
      {
        n: "vc3",
        f: "+- b 0 rh3"
      },
      {
        n: "y2",
        f: "+- vc3 dy3 0"
      },
      {
        n: "x2",
        f: "+- wd2 0 rw2"
      },
      {
        n: "cd",
        f: "*/ cd2 2 1"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd4",
            stAng: "stAng1",
            swAng: "swAng1"
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y2"
            }
          },
          {
            type: "arcTo",
            wR: "rw3",
            hR: "rh3",
            stAng: "da",
            swAng: "swAng3"
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "x2",
              y: "hd4"
            }
          },
          {
            type: "arcTo",
            wR: "rw2",
            hR: "rh2",
            stAng: "cd2",
            swAng: "-21600000"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  gear6: {
    avLst: [
      {
        n: "adj1",
        f: "val 15000"
      },
      {
        n: "adj2",
        f: "val 3526"
      }
    ],
    gdLst: [
      {
        n: "a1",
        f: "pin 0 adj1 20000"
      },
      {
        n: "a2",
        f: "pin 0 adj2 5358"
      },
      {
        n: "th",
        f: "*/ ss a1 100000"
      },
      {
        n: "lFD",
        f: "*/ ss a2 100000"
      },
      {
        n: "th2",
        f: "*/ th 1 2"
      },
      {
        n: "l2",
        f: "*/ lFD 1 2"
      },
      {
        n: "l3",
        f: "+- th2 l2 0"
      },
      {
        n: "rh",
        f: "+- hd2 0 th"
      },
      {
        n: "rw",
        f: "+- wd2 0 th"
      },
      {
        n: "dr",
        f: "+- rw 0 rh"
      },
      {
        n: "maxr",
        f: "?: dr rh rw"
      },
      {
        n: "ha",
        f: "at2 maxr l3"
      },
      {
        n: "aA1",
        f: "+- 19800000 0 ha"
      },
      {
        n: "aD1",
        f: "+- 19800000 ha 0"
      },
      {
        n: "ta11",
        f: "cos rw aA1"
      },
      {
        n: "ta12",
        f: "sin rh aA1"
      },
      {
        n: "bA1",
        f: "at2 ta11 ta12"
      },
      {
        n: "cta1",
        f: "cos rh bA1"
      },
      {
        n: "sta1",
        f: "sin rw bA1"
      },
      {
        n: "ma1",
        f: "mod cta1 sta1 0"
      },
      {
        n: "na1",
        f: "*/ rw rh ma1"
      },
      {
        n: "dxa1",
        f: "cos na1 bA1"
      },
      {
        n: "dya1",
        f: "sin na1 bA1"
      },
      {
        n: "xA1",
        f: "+- hc dxa1 0"
      },
      {
        n: "yA1",
        f: "+- vc dya1 0"
      },
      {
        n: "td11",
        f: "cos rw aD1"
      },
      {
        n: "td12",
        f: "sin rh aD1"
      },
      {
        n: "bD1",
        f: "at2 td11 td12"
      },
      {
        n: "ctd1",
        f: "cos rh bD1"
      },
      {
        n: "std1",
        f: "sin rw bD1"
      },
      {
        n: "md1",
        f: "mod ctd1 std1 0"
      },
      {
        n: "nd1",
        f: "*/ rw rh md1"
      },
      {
        n: "dxd1",
        f: "cos nd1 bD1"
      },
      {
        n: "dyd1",
        f: "sin nd1 bD1"
      },
      {
        n: "xD1",
        f: "+- hc dxd1 0"
      },
      {
        n: "yD1",
        f: "+- vc dyd1 0"
      },
      {
        n: "xAD1",
        f: "+- xA1 0 xD1"
      },
      {
        n: "yAD1",
        f: "+- yA1 0 yD1"
      },
      {
        n: "lAD1",
        f: "mod xAD1 yAD1 0"
      },
      {
        n: "a1",
        f: "at2 yAD1 xAD1"
      },
      {
        n: "dxF1",
        f: "sin lFD a1"
      },
      {
        n: "dyF1",
        f: "cos lFD a1"
      },
      {
        n: "xF1",
        f: "+- xD1 dxF1 0"
      },
      {
        n: "yF1",
        f: "+- yD1 dyF1 0"
      },
      {
        n: "xE1",
        f: "+- xA1 0 dxF1"
      },
      {
        n: "yE1",
        f: "+- yA1 0 dyF1"
      },
      {
        n: "yC1t",
        f: "sin th a1"
      },
      {
        n: "xC1t",
        f: "cos th a1"
      },
      {
        n: "yC1",
        f: "+- yF1 yC1t 0"
      },
      {
        n: "xC1",
        f: "+- xF1 0 xC1t"
      },
      {
        n: "yB1",
        f: "+- yE1 yC1t 0"
      },
      {
        n: "xB1",
        f: "+- xE1 0 xC1t"
      },
      {
        n: "aD6",
        f: "+- 3cd4 ha 0"
      },
      {
        n: "td61",
        f: "cos rw aD6"
      },
      {
        n: "td62",
        f: "sin rh aD6"
      },
      {
        n: "bD6",
        f: "at2 td61 td62"
      },
      {
        n: "ctd6",
        f: "cos rh bD6"
      },
      {
        n: "std6",
        f: "sin rw bD6"
      },
      {
        n: "md6",
        f: "mod ctd6 std6 0"
      },
      {
        n: "nd6",
        f: "*/ rw rh md6"
      },
      {
        n: "dxd6",
        f: "cos nd6 bD6"
      },
      {
        n: "dyd6",
        f: "sin nd6 bD6"
      },
      {
        n: "xD6",
        f: "+- hc dxd6 0"
      },
      {
        n: "yD6",
        f: "+- vc dyd6 0"
      },
      {
        n: "xA6",
        f: "+- hc 0 dxd6"
      },
      {
        n: "xF6",
        f: "+- xD6 0 lFD"
      },
      {
        n: "xE6",
        f: "+- xA6 lFD 0"
      },
      {
        n: "yC6",
        f: "+- yD6 0 th"
      },
      {
        n: "swAng1",
        f: "+- bA1 0 bD6"
      },
      {
        n: "aA2",
        f: "+- 1800000 0 ha"
      },
      {
        n: "aD2",
        f: "+- 1800000 ha 0"
      },
      {
        n: "ta21",
        f: "cos rw aA2"
      },
      {
        n: "ta22",
        f: "sin rh aA2"
      },
      {
        n: "bA2",
        f: "at2 ta21 ta22"
      },
      {
        n: "yA2",
        f: "+- h 0 yD1"
      },
      {
        n: "td21",
        f: "cos rw aD2"
      },
      {
        n: "td22",
        f: "sin rh aD2"
      },
      {
        n: "bD2",
        f: "at2 td21 td22"
      },
      {
        n: "yD2",
        f: "+- h 0 yA1"
      },
      {
        n: "yC2",
        f: "+- h 0 yB1"
      },
      {
        n: "yB2",
        f: "+- h 0 yC1"
      },
      {
        n: "xB2",
        f: "val xC1"
      },
      {
        n: "swAng2",
        f: "+- bA2 0 bD1"
      },
      {
        n: "aD3",
        f: "+- cd4 ha 0"
      },
      {
        n: "td31",
        f: "cos rw aD3"
      },
      {
        n: "td32",
        f: "sin rh aD3"
      },
      {
        n: "bD3",
        f: "at2 td31 td32"
      },
      {
        n: "yD3",
        f: "+- h 0 yD6"
      },
      {
        n: "yB3",
        f: "+- h 0 yC6"
      },
      {
        n: "aD4",
        f: "+- 9000000 ha 0"
      },
      {
        n: "td41",
        f: "cos rw aD4"
      },
      {
        n: "td42",
        f: "sin rh aD4"
      },
      {
        n: "bD4",
        f: "at2 td41 td42"
      },
      {
        n: "xD4",
        f: "+- w 0 xD1"
      },
      {
        n: "xC4",
        f: "+- w 0 xC1"
      },
      {
        n: "xB4",
        f: "+- w 0 xB1"
      },
      {
        n: "aD5",
        f: "+- 12600000 ha 0"
      },
      {
        n: "td51",
        f: "cos rw aD5"
      },
      {
        n: "td52",
        f: "sin rh aD5"
      },
      {
        n: "bD5",
        f: "at2 td51 td52"
      },
      {
        n: "xD5",
        f: "+- w 0 xA1"
      },
      {
        n: "xC5",
        f: "+- w 0 xB1"
      },
      {
        n: "xB5",
        f: "+- w 0 xC1"
      },
      {
        n: "xCxn1",
        f: "+/ xB1 xC1 2"
      },
      {
        n: "yCxn1",
        f: "+/ yB1 yC1 2"
      },
      {
        n: "yCxn2",
        f: "+- b 0 yCxn1"
      },
      {
        n: "xCxn4",
        f: "+/ r 0 xCxn1"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "xA1",
              y: "yA1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xB1",
              y: "yB1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xC1",
              y: "yC1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xD1",
              y: "yD1"
            }
          },
          {
            type: "arcTo",
            wR: "rw",
            hR: "rh",
            stAng: "bD1",
            swAng: "swAng2"
          },
          {
            type: "lnTo",
            pt: {
              x: "xC1",
              y: "yB2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xB1",
              y: "yC2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xA1",
              y: "yD2"
            }
          },
          {
            type: "arcTo",
            wR: "rw",
            hR: "rh",
            stAng: "bD2",
            swAng: "swAng1"
          },
          {
            type: "lnTo",
            pt: {
              x: "xF6",
              y: "yB3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xE6",
              y: "yB3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xA6",
              y: "yD3"
            }
          },
          {
            type: "arcTo",
            wR: "rw",
            hR: "rh",
            stAng: "bD3",
            swAng: "swAng1"
          },
          {
            type: "lnTo",
            pt: {
              x: "xB4",
              y: "yC2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xC4",
              y: "yB2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xD4",
              y: "yA2"
            }
          },
          {
            type: "arcTo",
            wR: "rw",
            hR: "rh",
            stAng: "bD4",
            swAng: "swAng2"
          },
          {
            type: "lnTo",
            pt: {
              x: "xB5",
              y: "yC1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xC5",
              y: "yB1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xD5",
              y: "yA1"
            }
          },
          {
            type: "arcTo",
            wR: "rw",
            hR: "rh",
            stAng: "bD5",
            swAng: "swAng1"
          },
          {
            type: "lnTo",
            pt: {
              x: "xE6",
              y: "yC6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xF6",
              y: "yC6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xD6",
              y: "yD6"
            }
          },
          {
            type: "arcTo",
            wR: "rw",
            hR: "rh",
            stAng: "bD6",
            swAng: "swAng1"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  gear9: {
    avLst: [
      {
        n: "adj1",
        f: "val 10000"
      },
      {
        n: "adj2",
        f: "val 1763"
      }
    ],
    gdLst: [
      {
        n: "a1",
        f: "pin 0 adj1 20000"
      },
      {
        n: "a2",
        f: "pin 0 adj2 2679"
      },
      {
        n: "th",
        f: "*/ ss a1 100000"
      },
      {
        n: "lFD",
        f: "*/ ss a2 100000"
      },
      {
        n: "th2",
        f: "*/ th 1 2"
      },
      {
        n: "l2",
        f: "*/ lFD 1 2"
      },
      {
        n: "l3",
        f: "+- th2 l2 0"
      },
      {
        n: "rh",
        f: "+- hd2 0 th"
      },
      {
        n: "rw",
        f: "+- wd2 0 th"
      },
      {
        n: "dr",
        f: "+- rw 0 rh"
      },
      {
        n: "maxr",
        f: "?: dr rh rw"
      },
      {
        n: "ha",
        f: "at2 maxr l3"
      },
      {
        n: "aA1",
        f: "+- 18600000 0 ha"
      },
      {
        n: "aD1",
        f: "+- 18600000 ha 0"
      },
      {
        n: "ta11",
        f: "cos rw aA1"
      },
      {
        n: "ta12",
        f: "sin rh aA1"
      },
      {
        n: "bA1",
        f: "at2 ta11 ta12"
      },
      {
        n: "cta1",
        f: "cos rh bA1"
      },
      {
        n: "sta1",
        f: "sin rw bA1"
      },
      {
        n: "ma1",
        f: "mod cta1 sta1 0"
      },
      {
        n: "na1",
        f: "*/ rw rh ma1"
      },
      {
        n: "dxa1",
        f: "cos na1 bA1"
      },
      {
        n: "dya1",
        f: "sin na1 bA1"
      },
      {
        n: "xA1",
        f: "+- hc dxa1 0"
      },
      {
        n: "yA1",
        f: "+- vc dya1 0"
      },
      {
        n: "td11",
        f: "cos rw aD1"
      },
      {
        n: "td12",
        f: "sin rh aD1"
      },
      {
        n: "bD1",
        f: "at2 td11 td12"
      },
      {
        n: "ctd1",
        f: "cos rh bD1"
      },
      {
        n: "std1",
        f: "sin rw bD1"
      },
      {
        n: "md1",
        f: "mod ctd1 std1 0"
      },
      {
        n: "nd1",
        f: "*/ rw rh md1"
      },
      {
        n: "dxd1",
        f: "cos nd1 bD1"
      },
      {
        n: "dyd1",
        f: "sin nd1 bD1"
      },
      {
        n: "xD1",
        f: "+- hc dxd1 0"
      },
      {
        n: "yD1",
        f: "+- vc dyd1 0"
      },
      {
        n: "xAD1",
        f: "+- xA1 0 xD1"
      },
      {
        n: "yAD1",
        f: "+- yA1 0 yD1"
      },
      {
        n: "lAD1",
        f: "mod xAD1 yAD1 0"
      },
      {
        n: "a1",
        f: "at2 yAD1 xAD1"
      },
      {
        n: "dxF1",
        f: "sin lFD a1"
      },
      {
        n: "dyF1",
        f: "cos lFD a1"
      },
      {
        n: "xF1",
        f: "+- xD1 dxF1 0"
      },
      {
        n: "yF1",
        f: "+- yD1 dyF1 0"
      },
      {
        n: "xE1",
        f: "+- xA1 0 dxF1"
      },
      {
        n: "yE1",
        f: "+- yA1 0 dyF1"
      },
      {
        n: "yC1t",
        f: "sin th a1"
      },
      {
        n: "xC1t",
        f: "cos th a1"
      },
      {
        n: "yC1",
        f: "+- yF1 yC1t 0"
      },
      {
        n: "xC1",
        f: "+- xF1 0 xC1t"
      },
      {
        n: "yB1",
        f: "+- yE1 yC1t 0"
      },
      {
        n: "xB1",
        f: "+- xE1 0 xC1t"
      },
      {
        n: "aA2",
        f: "+- 21000000 0 ha"
      },
      {
        n: "aD2",
        f: "+- 21000000 ha 0"
      },
      {
        n: "ta21",
        f: "cos rw aA2"
      },
      {
        n: "ta22",
        f: "sin rh aA2"
      },
      {
        n: "bA2",
        f: "at2 ta21 ta22"
      },
      {
        n: "cta2",
        f: "cos rh bA2"
      },
      {
        n: "sta2",
        f: "sin rw bA2"
      },
      {
        n: "ma2",
        f: "mod cta2 sta2 0"
      },
      {
        n: "na2",
        f: "*/ rw rh ma2"
      },
      {
        n: "dxa2",
        f: "cos na2 bA2"
      },
      {
        n: "dya2",
        f: "sin na2 bA2"
      },
      {
        n: "xA2",
        f: "+- hc dxa2 0"
      },
      {
        n: "yA2",
        f: "+- vc dya2 0"
      },
      {
        n: "td21",
        f: "cos rw aD2"
      },
      {
        n: "td22",
        f: "sin rh aD2"
      },
      {
        n: "bD2",
        f: "at2 td21 td22"
      },
      {
        n: "ctd2",
        f: "cos rh bD2"
      },
      {
        n: "std2",
        f: "sin rw bD2"
      },
      {
        n: "md2",
        f: "mod ctd2 std2 0"
      },
      {
        n: "nd2",
        f: "*/ rw rh md2"
      },
      {
        n: "dxd2",
        f: "cos nd2 bD2"
      },
      {
        n: "dyd2",
        f: "sin nd2 bD2"
      },
      {
        n: "xD2",
        f: "+- hc dxd2 0"
      },
      {
        n: "yD2",
        f: "+- vc dyd2 0"
      },
      {
        n: "xAD2",
        f: "+- xA2 0 xD2"
      },
      {
        n: "yAD2",
        f: "+- yA2 0 yD2"
      },
      {
        n: "lAD2",
        f: "mod xAD2 yAD2 0"
      },
      {
        n: "a2",
        f: "at2 yAD2 xAD2"
      },
      {
        n: "dxF2",
        f: "sin lFD a2"
      },
      {
        n: "dyF2",
        f: "cos lFD a2"
      },
      {
        n: "xF2",
        f: "+- xD2 dxF2 0"
      },
      {
        n: "yF2",
        f: "+- yD2 dyF2 0"
      },
      {
        n: "xE2",
        f: "+- xA2 0 dxF2"
      },
      {
        n: "yE2",
        f: "+- yA2 0 dyF2"
      },
      {
        n: "yC2t",
        f: "sin th a2"
      },
      {
        n: "xC2t",
        f: "cos th a2"
      },
      {
        n: "yC2",
        f: "+- yF2 yC2t 0"
      },
      {
        n: "xC2",
        f: "+- xF2 0 xC2t"
      },
      {
        n: "yB2",
        f: "+- yE2 yC2t 0"
      },
      {
        n: "xB2",
        f: "+- xE2 0 xC2t"
      },
      {
        n: "swAng1",
        f: "+- bA2 0 bD1"
      },
      {
        n: "aA3",
        f: "+- 1800000 0 ha"
      },
      {
        n: "aD3",
        f: "+- 1800000 ha 0"
      },
      {
        n: "ta31",
        f: "cos rw aA3"
      },
      {
        n: "ta32",
        f: "sin rh aA3"
      },
      {
        n: "bA3",
        f: "at2 ta31 ta32"
      },
      {
        n: "cta3",
        f: "cos rh bA3"
      },
      {
        n: "sta3",
        f: "sin rw bA3"
      },
      {
        n: "ma3",
        f: "mod cta3 sta3 0"
      },
      {
        n: "na3",
        f: "*/ rw rh ma3"
      },
      {
        n: "dxa3",
        f: "cos na3 bA3"
      },
      {
        n: "dya3",
        f: "sin na3 bA3"
      },
      {
        n: "xA3",
        f: "+- hc dxa3 0"
      },
      {
        n: "yA3",
        f: "+- vc dya3 0"
      },
      {
        n: "td31",
        f: "cos rw aD3"
      },
      {
        n: "td32",
        f: "sin rh aD3"
      },
      {
        n: "bD3",
        f: "at2 td31 td32"
      },
      {
        n: "ctd3",
        f: "cos rh bD3"
      },
      {
        n: "std3",
        f: "sin rw bD3"
      },
      {
        n: "md3",
        f: "mod ctd3 std3 0"
      },
      {
        n: "nd3",
        f: "*/ rw rh md3"
      },
      {
        n: "dxd3",
        f: "cos nd3 bD3"
      },
      {
        n: "dyd3",
        f: "sin nd3 bD3"
      },
      {
        n: "xD3",
        f: "+- hc dxd3 0"
      },
      {
        n: "yD3",
        f: "+- vc dyd3 0"
      },
      {
        n: "xAD3",
        f: "+- xA3 0 xD3"
      },
      {
        n: "yAD3",
        f: "+- yA3 0 yD3"
      },
      {
        n: "lAD3",
        f: "mod xAD3 yAD3 0"
      },
      {
        n: "a3",
        f: "at2 yAD3 xAD3"
      },
      {
        n: "dxF3",
        f: "sin lFD a3"
      },
      {
        n: "dyF3",
        f: "cos lFD a3"
      },
      {
        n: "xF3",
        f: "+- xD3 dxF3 0"
      },
      {
        n: "yF3",
        f: "+- yD3 dyF3 0"
      },
      {
        n: "xE3",
        f: "+- xA3 0 dxF3"
      },
      {
        n: "yE3",
        f: "+- yA3 0 dyF3"
      },
      {
        n: "yC3t",
        f: "sin th a3"
      },
      {
        n: "xC3t",
        f: "cos th a3"
      },
      {
        n: "yC3",
        f: "+- yF3 yC3t 0"
      },
      {
        n: "xC3",
        f: "+- xF3 0 xC3t"
      },
      {
        n: "yB3",
        f: "+- yE3 yC3t 0"
      },
      {
        n: "xB3",
        f: "+- xE3 0 xC3t"
      },
      {
        n: "swAng2",
        f: "+- bA3 0 bD2"
      },
      {
        n: "aA4",
        f: "+- 4200000 0 ha"
      },
      {
        n: "aD4",
        f: "+- 4200000 ha 0"
      },
      {
        n: "ta41",
        f: "cos rw aA4"
      },
      {
        n: "ta42",
        f: "sin rh aA4"
      },
      {
        n: "bA4",
        f: "at2 ta41 ta42"
      },
      {
        n: "cta4",
        f: "cos rh bA4"
      },
      {
        n: "sta4",
        f: "sin rw bA4"
      },
      {
        n: "ma4",
        f: "mod cta4 sta4 0"
      },
      {
        n: "na4",
        f: "*/ rw rh ma4"
      },
      {
        n: "dxa4",
        f: "cos na4 bA4"
      },
      {
        n: "dya4",
        f: "sin na4 bA4"
      },
      {
        n: "xA4",
        f: "+- hc dxa4 0"
      },
      {
        n: "yA4",
        f: "+- vc dya4 0"
      },
      {
        n: "td41",
        f: "cos rw aD4"
      },
      {
        n: "td42",
        f: "sin rh aD4"
      },
      {
        n: "bD4",
        f: "at2 td41 td42"
      },
      {
        n: "ctd4",
        f: "cos rh bD4"
      },
      {
        n: "std4",
        f: "sin rw bD4"
      },
      {
        n: "md4",
        f: "mod ctd4 std4 0"
      },
      {
        n: "nd4",
        f: "*/ rw rh md4"
      },
      {
        n: "dxd4",
        f: "cos nd4 bD4"
      },
      {
        n: "dyd4",
        f: "sin nd4 bD4"
      },
      {
        n: "xD4",
        f: "+- hc dxd4 0"
      },
      {
        n: "yD4",
        f: "+- vc dyd4 0"
      },
      {
        n: "xAD4",
        f: "+- xA4 0 xD4"
      },
      {
        n: "yAD4",
        f: "+- yA4 0 yD4"
      },
      {
        n: "lAD4",
        f: "mod xAD4 yAD4 0"
      },
      {
        n: "a4",
        f: "at2 yAD4 xAD4"
      },
      {
        n: "dxF4",
        f: "sin lFD a4"
      },
      {
        n: "dyF4",
        f: "cos lFD a4"
      },
      {
        n: "xF4",
        f: "+- xD4 dxF4 0"
      },
      {
        n: "yF4",
        f: "+- yD4 dyF4 0"
      },
      {
        n: "xE4",
        f: "+- xA4 0 dxF4"
      },
      {
        n: "yE4",
        f: "+- yA4 0 dyF4"
      },
      {
        n: "yC4t",
        f: "sin th a4"
      },
      {
        n: "xC4t",
        f: "cos th a4"
      },
      {
        n: "yC4",
        f: "+- yF4 yC4t 0"
      },
      {
        n: "xC4",
        f: "+- xF4 0 xC4t"
      },
      {
        n: "yB4",
        f: "+- yE4 yC4t 0"
      },
      {
        n: "xB4",
        f: "+- xE4 0 xC4t"
      },
      {
        n: "swAng3",
        f: "+- bA4 0 bD3"
      },
      {
        n: "aA5",
        f: "+- 6600000 0 ha"
      },
      {
        n: "aD5",
        f: "+- 6600000 ha 0"
      },
      {
        n: "ta51",
        f: "cos rw aA5"
      },
      {
        n: "ta52",
        f: "sin rh aA5"
      },
      {
        n: "bA5",
        f: "at2 ta51 ta52"
      },
      {
        n: "td51",
        f: "cos rw aD5"
      },
      {
        n: "td52",
        f: "sin rh aD5"
      },
      {
        n: "bD5",
        f: "at2 td51 td52"
      },
      {
        n: "xD5",
        f: "+- w 0 xA4"
      },
      {
        n: "xC5",
        f: "+- w 0 xB4"
      },
      {
        n: "xB5",
        f: "+- w 0 xC4"
      },
      {
        n: "swAng4",
        f: "+- bA5 0 bD4"
      },
      {
        n: "aD6",
        f: "+- 9000000 ha 0"
      },
      {
        n: "td61",
        f: "cos rw aD6"
      },
      {
        n: "td62",
        f: "sin rh aD6"
      },
      {
        n: "bD6",
        f: "at2 td61 td62"
      },
      {
        n: "xD6",
        f: "+- w 0 xA3"
      },
      {
        n: "xC6",
        f: "+- w 0 xB3"
      },
      {
        n: "xB6",
        f: "+- w 0 xC3"
      },
      {
        n: "aD7",
        f: "+- 11400000 ha 0"
      },
      {
        n: "td71",
        f: "cos rw aD7"
      },
      {
        n: "td72",
        f: "sin rh aD7"
      },
      {
        n: "bD7",
        f: "at2 td71 td72"
      },
      {
        n: "xD7",
        f: "+- w 0 xA2"
      },
      {
        n: "xC7",
        f: "+- w 0 xB2"
      },
      {
        n: "xB7",
        f: "+- w 0 xC2"
      },
      {
        n: "aD8",
        f: "+- 13800000 ha 0"
      },
      {
        n: "td81",
        f: "cos rw aD8"
      },
      {
        n: "td82",
        f: "sin rh aD8"
      },
      {
        n: "bD8",
        f: "at2 td81 td82"
      },
      {
        n: "xA8",
        f: "+- w 0 xD1"
      },
      {
        n: "xD8",
        f: "+- w 0 xA1"
      },
      {
        n: "xC8",
        f: "+- w 0 xB1"
      },
      {
        n: "xB8",
        f: "+- w 0 xC1"
      },
      {
        n: "aA9",
        f: "+- 3cd4 0 ha"
      },
      {
        n: "aD9",
        f: "+- 3cd4 ha 0"
      },
      {
        n: "td91",
        f: "cos rw aD9"
      },
      {
        n: "td92",
        f: "sin rh aD9"
      },
      {
        n: "bD9",
        f: "at2 td91 td92"
      },
      {
        n: "ctd9",
        f: "cos rh bD9"
      },
      {
        n: "std9",
        f: "sin rw bD9"
      },
      {
        n: "md9",
        f: "mod ctd9 std9 0"
      },
      {
        n: "nd9",
        f: "*/ rw rh md9"
      },
      {
        n: "dxd9",
        f: "cos nd9 bD9"
      },
      {
        n: "dyd9",
        f: "sin nd9 bD9"
      },
      {
        n: "xD9",
        f: "+- hc dxd9 0"
      },
      {
        n: "yD9",
        f: "+- vc dyd9 0"
      },
      {
        n: "ta91",
        f: "cos rw aA9"
      },
      {
        n: "ta92",
        f: "sin rh aA9"
      },
      {
        n: "bA9",
        f: "at2 ta91 ta92"
      },
      {
        n: "xA9",
        f: "+- hc 0 dxd9"
      },
      {
        n: "xF9",
        f: "+- xD9 0 lFD"
      },
      {
        n: "xE9",
        f: "+- xA9 lFD 0"
      },
      {
        n: "yC9",
        f: "+- yD9 0 th"
      },
      {
        n: "swAng5",
        f: "+- bA9 0 bD8"
      },
      {
        n: "xCxn1",
        f: "+/ xB1 xC1 2"
      },
      {
        n: "yCxn1",
        f: "+/ yB1 yC1 2"
      },
      {
        n: "xCxn2",
        f: "+/ xB2 xC2 2"
      },
      {
        n: "yCxn2",
        f: "+/ yB2 yC2 2"
      },
      {
        n: "xCxn3",
        f: "+/ xB3 xC3 2"
      },
      {
        n: "yCxn3",
        f: "+/ yB3 yC3 2"
      },
      {
        n: "xCxn4",
        f: "+/ xB4 xC4 2"
      },
      {
        n: "yCxn4",
        f: "+/ yB4 yC4 2"
      },
      {
        n: "xCxn5",
        f: "+/ r 0 xCxn4"
      },
      {
        n: "xCxn6",
        f: "+/ r 0 xCxn3"
      },
      {
        n: "xCxn7",
        f: "+/ r 0 xCxn2"
      },
      {
        n: "xCxn8",
        f: "+/ r 0 xCxn1"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "xA1",
              y: "yA1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xB1",
              y: "yB1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xC1",
              y: "yC1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xD1",
              y: "yD1"
            }
          },
          {
            type: "arcTo",
            wR: "rw",
            hR: "rh",
            stAng: "bD1",
            swAng: "swAng1"
          },
          {
            type: "lnTo",
            pt: {
              x: "xB2",
              y: "yB2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xC2",
              y: "yC2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xD2",
              y: "yD2"
            }
          },
          {
            type: "arcTo",
            wR: "rw",
            hR: "rh",
            stAng: "bD2",
            swAng: "swAng2"
          },
          {
            type: "lnTo",
            pt: {
              x: "xB3",
              y: "yB3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xC3",
              y: "yC3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xD3",
              y: "yD3"
            }
          },
          {
            type: "arcTo",
            wR: "rw",
            hR: "rh",
            stAng: "bD3",
            swAng: "swAng3"
          },
          {
            type: "lnTo",
            pt: {
              x: "xB4",
              y: "yB4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xC4",
              y: "yC4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xD4",
              y: "yD4"
            }
          },
          {
            type: "arcTo",
            wR: "rw",
            hR: "rh",
            stAng: "bD4",
            swAng: "swAng4"
          },
          {
            type: "lnTo",
            pt: {
              x: "xB5",
              y: "yC4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xC5",
              y: "yB4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xD5",
              y: "yA4"
            }
          },
          {
            type: "arcTo",
            wR: "rw",
            hR: "rh",
            stAng: "bD5",
            swAng: "swAng3"
          },
          {
            type: "lnTo",
            pt: {
              x: "xB6",
              y: "yC3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xC6",
              y: "yB3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xD6",
              y: "yA3"
            }
          },
          {
            type: "arcTo",
            wR: "rw",
            hR: "rh",
            stAng: "bD6",
            swAng: "swAng2"
          },
          {
            type: "lnTo",
            pt: {
              x: "xB7",
              y: "yC2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xC7",
              y: "yB2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xD7",
              y: "yA2"
            }
          },
          {
            type: "arcTo",
            wR: "rw",
            hR: "rh",
            stAng: "bD7",
            swAng: "swAng1"
          },
          {
            type: "lnTo",
            pt: {
              x: "xB8",
              y: "yC1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xC8",
              y: "yB1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xD8",
              y: "yA1"
            }
          },
          {
            type: "arcTo",
            wR: "rw",
            hR: "rh",
            stAng: "bD8",
            swAng: "swAng5"
          },
          {
            type: "lnTo",
            pt: {
              x: "xE9",
              y: "yC9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xF9",
              y: "yC9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xD9",
              y: "yD9"
            }
          },
          {
            type: "arcTo",
            wR: "rw",
            hR: "rh",
            stAng: "bD9",
            swAng: "swAng5"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  halfFrame: {
    avLst: [
      {
        n: "adj1",
        f: "val 33333"
      },
      {
        n: "adj2",
        f: "val 33333"
      }
    ],
    gdLst: [
      {
        n: "maxAdj2",
        f: "*/ 100000 w ss"
      },
      {
        n: "a2",
        f: "pin 0 adj2 maxAdj2"
      },
      {
        n: "x1",
        f: "*/ ss a2 100000"
      },
      {
        n: "g1",
        f: "*/ h x1 w"
      },
      {
        n: "g2",
        f: "+- h 0 g1"
      },
      {
        n: "maxAdj1",
        f: "*/ 100000 g2 ss"
      },
      {
        n: "a1",
        f: "pin 0 adj1 maxAdj1"
      },
      {
        n: "y1",
        f: "*/ ss a1 100000"
      },
      {
        n: "dx2",
        f: "*/ y1 w h"
      },
      {
        n: "x2",
        f: "+- r 0 dx2"
      },
      {
        n: "dy2",
        f: "*/ x1 h w"
      },
      {
        n: "y2",
        f: "+- b 0 dy2"
      },
      {
        n: "cx1",
        f: "*/ x1 1 2"
      },
      {
        n: "cy1",
        f: "+/ y2 b 2"
      },
      {
        n: "cx2",
        f: "+/ x2 r 2"
      },
      {
        n: "cy2",
        f: "*/ y1 1 2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  heart: {
    gdLst: [
      {
        n: "dx1",
        f: "*/ w 49 48"
      },
      {
        n: "dx2",
        f: "*/ w 10 48"
      },
      {
        n: "x1",
        f: "+- hc 0 dx1"
      },
      {
        n: "x2",
        f: "+- hc 0 dx2"
      },
      {
        n: "x3",
        f: "+- hc dx2 0"
      },
      {
        n: "x4",
        f: "+- hc dx1 0"
      },
      {
        n: "y1",
        f: "+- t 0 hd3"
      },
      {
        n: "il",
        f: "*/ w 1 6"
      },
      {
        n: "ir",
        f: "*/ w 5 6"
      },
      {
        n: "ib",
        f: "*/ h 2 3"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "hc",
              y: "hd4"
            }
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "x3",
                y: "y1"
              },
              {
                x: "x4",
                y: "hd4"
              },
              {
                x: "hc",
                y: "b"
              }
            ]
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "x1",
                y: "hd4"
              },
              {
                x: "x2",
                y: "y1"
              },
              {
                x: "hc",
                y: "hd4"
              }
            ]
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  heptagon: {
    avLst: [
      {
        n: "hf",
        f: "val 102572"
      },
      {
        n: "vf",
        f: "val 105210"
      }
    ],
    gdLst: [
      {
        n: "swd2",
        f: "*/ wd2 hf 100000"
      },
      {
        n: "shd2",
        f: "*/ hd2 vf 100000"
      },
      {
        n: "svc",
        f: "*/ vc  vf 100000"
      },
      {
        n: "dx1",
        f: "*/ swd2 97493 100000"
      },
      {
        n: "dx2",
        f: "*/ swd2 78183 100000"
      },
      {
        n: "dx3",
        f: "*/ swd2 43388 100000"
      },
      {
        n: "dy1",
        f: "*/ shd2 62349 100000"
      },
      {
        n: "dy2",
        f: "*/ shd2 22252 100000"
      },
      {
        n: "dy3",
        f: "*/ shd2 90097 100000"
      },
      {
        n: "x1",
        f: "+- hc 0 dx1"
      },
      {
        n: "x2",
        f: "+- hc 0 dx2"
      },
      {
        n: "x3",
        f: "+- hc 0 dx3"
      },
      {
        n: "x4",
        f: "+- hc dx3 0"
      },
      {
        n: "x5",
        f: "+- hc dx2 0"
      },
      {
        n: "x6",
        f: "+- hc dx1 0"
      },
      {
        n: "y1",
        f: "+- svc 0 dy1"
      },
      {
        n: "y2",
        f: "+- svc dy2 0"
      },
      {
        n: "y3",
        f: "+- svc dy3 0"
      },
      {
        n: "ib",
        f: "+- b 0 y1"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y3"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  hexagon: {
    avLst: [
      {
        n: "adj",
        f: "val 25000"
      },
      {
        n: "vf",
        f: "val 115470"
      }
    ],
    gdLst: [
      {
        n: "maxAdj",
        f: "*/ 50000 w ss"
      },
      {
        n: "a",
        f: "pin 0 adj maxAdj"
      },
      {
        n: "shd2",
        f: "*/ hd2 vf 100000"
      },
      {
        n: "x1",
        f: "*/ ss a 100000"
      },
      {
        n: "x2",
        f: "+- r 0 x1"
      },
      {
        n: "dy1",
        f: "sin shd2 3600000"
      },
      {
        n: "y1",
        f: "+- vc 0 dy1"
      },
      {
        n: "y2",
        f: "+- vc dy1 0"
      },
      {
        n: "q1",
        f: "*/ maxAdj -1 2"
      },
      {
        n: "q2",
        f: "+- a q1 0"
      },
      {
        n: "q3",
        f: "?: q2 4 2"
      },
      {
        n: "q4",
        f: "?: q2 3 2"
      },
      {
        n: "q5",
        f: "?: q2 q1 0"
      },
      {
        n: "q6",
        f: "+/ a q5 q1"
      },
      {
        n: "q7",
        f: "*/ q6 q4 -1"
      },
      {
        n: "q8",
        f: "+- q3 q7 0"
      },
      {
        n: "il",
        f: "*/ w q8 24"
      },
      {
        n: "it",
        f: "*/ h q8 24"
      },
      {
        n: "ir",
        f: "+- r 0 il"
      },
      {
        n: "ib",
        f: "+- b 0 it"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  homePlate: {
    avLst: [
      {
        n: "adj",
        f: "val 50000"
      }
    ],
    gdLst: [
      {
        n: "maxAdj",
        f: "*/ 100000 w ss"
      },
      {
        n: "a",
        f: "pin 0 adj maxAdj"
      },
      {
        n: "dx1",
        f: "*/ ss a 100000"
      },
      {
        n: "x1",
        f: "+- r 0 dx1"
      },
      {
        n: "ir",
        f: "+/ x1 r 2"
      },
      {
        n: "x2",
        f: "*/ x1 1 2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  horizontalScroll: {
    avLst: [
      {
        n: "adj",
        f: "val 12500"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 25000"
      },
      {
        n: "ch",
        f: "*/ ss a 100000"
      },
      {
        n: "ch2",
        f: "*/ ch 1 2"
      },
      {
        n: "ch4",
        f: "*/ ch 1 4"
      },
      {
        n: "y3",
        f: "+- ch ch2 0"
      },
      {
        n: "y4",
        f: "+- ch ch 0"
      },
      {
        n: "y6",
        f: "+- b 0 ch"
      },
      {
        n: "y7",
        f: "+- b 0 ch2"
      },
      {
        n: "y5",
        f: "+- y6 0 ch2"
      },
      {
        n: "x3",
        f: "+- r 0 ch"
      },
      {
        n: "x4",
        f: "+- r 0 ch2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "r",
              y: "ch2"
            }
          },
          {
            type: "arcTo",
            wR: "ch2",
            hR: "ch2",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "ch2"
            }
          },
          {
            type: "arcTo",
            wR: "ch4",
            hR: "ch4",
            stAng: "0",
            swAng: "cd2"
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "ch"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "ch2",
              y: "ch"
            }
          },
          {
            type: "arcTo",
            wR: "ch2",
            hR: "ch2",
            stAng: "3cd4",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "y7"
            }
          },
          {
            type: "arcTo",
            wR: "ch2",
            hR: "ch2",
            stAng: "cd2",
            swAng: "-10800000"
          },
          {
            type: "lnTo",
            pt: {
              x: "ch",
              y: "y6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y6"
            }
          },
          {
            type: "arcTo",
            wR: "ch2",
            hR: "ch2",
            stAng: "cd4",
            swAng: "-5400000"
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "ch2",
              y: "y4"
            }
          },
          {
            type: "arcTo",
            wR: "ch2",
            hR: "ch2",
            stAng: "cd4",
            swAng: "-5400000"
          },
          {
            type: "arcTo",
            wR: "ch4",
            hR: "ch4",
            stAng: "0",
            swAng: "-10800000"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "ch2",
              y: "y4"
            }
          },
          {
            type: "arcTo",
            wR: "ch2",
            hR: "ch2",
            stAng: "cd4",
            swAng: "-5400000"
          },
          {
            type: "arcTo",
            wR: "ch4",
            hR: "ch4",
            stAng: "0",
            swAng: "-10800000"
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "x4",
              y: "ch"
            }
          },
          {
            type: "arcTo",
            wR: "ch2",
            hR: "ch2",
            stAng: "cd4",
            swAng: "-16200000"
          },
          {
            type: "arcTo",
            wR: "ch4",
            hR: "ch4",
            stAng: "cd2",
            swAng: "-10800000"
          },
          {
            type: "close"
          }
        ],
        fill: "darkenLess",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "y3"
            }
          },
          {
            type: "arcTo",
            wR: "ch2",
            hR: "ch2",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "ch"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "ch2"
            }
          },
          {
            type: "arcTo",
            wR: "ch2",
            hR: "ch2",
            stAng: "cd2",
            swAng: "cd2"
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y5"
            }
          },
          {
            type: "arcTo",
            wR: "ch2",
            hR: "ch2",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "ch",
              y: "y6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "ch",
              y: "y7"
            }
          },
          {
            type: "arcTo",
            wR: "ch2",
            hR: "ch2",
            stAng: "0",
            swAng: "cd2"
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "x3",
              y: "ch"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "ch"
            }
          },
          {
            type: "arcTo",
            wR: "ch2",
            hR: "ch2",
            stAng: "cd4",
            swAng: "-5400000"
          },
          {
            type: "moveTo",
            pt: {
              x: "x4",
              y: "ch"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "ch2"
            }
          },
          {
            type: "arcTo",
            wR: "ch4",
            hR: "ch4",
            stAng: "0",
            swAng: "cd2"
          },
          {
            type: "moveTo",
            pt: {
              x: "ch2",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "ch2",
              y: "y3"
            }
          },
          {
            type: "arcTo",
            wR: "ch4",
            hR: "ch4",
            stAng: "cd2",
            swAng: "cd2"
          },
          {
            type: "arcTo",
            wR: "ch2",
            hR: "ch2",
            stAng: "0",
            swAng: "cd2"
          },
          {
            type: "moveTo",
            pt: {
              x: "ch",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "ch",
              y: "y6"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  irregularSeal1: {
    gdLst: [
      {
        n: "x5",
        f: "*/ w 4627 21600"
      },
      {
        n: "x12",
        f: "*/ w 8485 21600"
      },
      {
        n: "x21",
        f: "*/ w 16702 21600"
      },
      {
        n: "x24",
        f: "*/ w 14522 21600"
      },
      {
        n: "y3",
        f: "*/ h 6320 21600"
      },
      {
        n: "y6",
        f: "*/ h 8615 21600"
      },
      {
        n: "y9",
        f: "*/ h 13937 21600"
      },
      {
        n: "y18",
        f: "*/ h 13290 21600"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "10800",
              y: "5800"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "14522",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "14155",
              y: "5325"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "18380",
              y: "4457"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "16702",
              y: "7315"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "21097",
              y: "8137"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "17607",
              y: "10475"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "21600",
              y: "13290"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "16837",
              y: "12942"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "18145",
              y: "18095"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "14020",
              y: "14457"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "13247",
              y: "19737"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "10532",
              y: "14935"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "8485",
              y: "21600"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "7715",
              y: "15627"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "4762",
              y: "17617"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "5667",
              y: "13937"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "135",
              y: "14587"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "3722",
              y: "11775"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "0",
              y: "8615"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "4627",
              y: "7617"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "370",
              y: "2295"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "7312",
              y: "6320"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "8352",
              y: "2295"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true,
        w: 21600,
        h: 21600
      }
    ]
  },
  irregularSeal2: {
    gdLst: [
      {
        n: "x2",
        f: "*/ w 9722 21600"
      },
      {
        n: "x5",
        f: "*/ w 5372 21600"
      },
      {
        n: "x16",
        f: "*/ w 11612 21600"
      },
      {
        n: "x19",
        f: "*/ w 14640 21600"
      },
      {
        n: "y2",
        f: "*/ h 1887 21600"
      },
      {
        n: "y3",
        f: "*/ h 6382 21600"
      },
      {
        n: "y8",
        f: "*/ h 12877 21600"
      },
      {
        n: "y14",
        f: "*/ h 19712 21600"
      },
      {
        n: "y16",
        f: "*/ h 18842 21600"
      },
      {
        n: "y17",
        f: "*/ h 15935 21600"
      },
      {
        n: "y24",
        f: "*/ h 6645 21600"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "11462",
              y: "4342"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "14790",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "14525",
              y: "5777"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "18007",
              y: "3172"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "16380",
              y: "6532"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "21600",
              y: "6645"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "16985",
              y: "9402"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "18270",
              y: "11290"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "16380",
              y: "12310"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "18877",
              y: "15632"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "14640",
              y: "14350"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "14942",
              y: "17370"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "12180",
              y: "15935"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "11612",
              y: "18842"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "9872",
              y: "17370"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "8700",
              y: "19712"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "7527",
              y: "18125"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "4917",
              y: "21600"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "4805",
              y: "18240"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1285",
              y: "17825"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "3330",
              y: "15370"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "0",
              y: "12877"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "3935",
              y: "11592"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "1172",
              y: "8270"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "5372",
              y: "7817"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "4502",
              y: "3625"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "8550",
              y: "6382"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "9722",
              y: "1887"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true,
        w: 21600,
        h: 21600
      }
    ]
  },
  leftArrow: {
    avLst: [
      {
        n: "adj1",
        f: "val 50000"
      },
      {
        n: "adj2",
        f: "val 50000"
      }
    ],
    gdLst: [
      {
        n: "maxAdj2",
        f: "*/ 100000 w ss"
      },
      {
        n: "a1",
        f: "pin 0 adj1 100000"
      },
      {
        n: "a2",
        f: "pin 0 adj2 maxAdj2"
      },
      {
        n: "dx2",
        f: "*/ ss a2 100000"
      },
      {
        n: "x2",
        f: "+- l dx2 0"
      },
      {
        n: "dy1",
        f: "*/ h a1 200000"
      },
      {
        n: "y1",
        f: "+- vc 0 dy1"
      },
      {
        n: "y2",
        f: "+- vc dy1 0"
      },
      {
        n: "dx1",
        f: "*/ y1 dx2 hd2"
      },
      {
        n: "x1",
        f: "+- x2  0 dx1"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  leftArrowCallout: {
    avLst: [
      {
        n: "adj1",
        f: "val 25000"
      },
      {
        n: "adj2",
        f: "val 25000"
      },
      {
        n: "adj3",
        f: "val 25000"
      },
      {
        n: "adj4",
        f: "val 64977"
      }
    ],
    gdLst: [
      {
        n: "maxAdj2",
        f: "*/ 50000 h ss"
      },
      {
        n: "a2",
        f: "pin 0 adj2 maxAdj2"
      },
      {
        n: "maxAdj1",
        f: "*/ a2 2 1"
      },
      {
        n: "a1",
        f: "pin 0 adj1 maxAdj1"
      },
      {
        n: "maxAdj3",
        f: "*/ 100000 w ss"
      },
      {
        n: "a3",
        f: "pin 0 adj3 maxAdj3"
      },
      {
        n: "q2",
        f: "*/ a3 ss w"
      },
      {
        n: "maxAdj4",
        f: "+- 100000 0 q2"
      },
      {
        n: "a4",
        f: "pin 0 adj4 maxAdj4"
      },
      {
        n: "dy1",
        f: "*/ ss a2 100000"
      },
      {
        n: "dy2",
        f: "*/ ss a1 200000"
      },
      {
        n: "y1",
        f: "+- vc 0 dy1"
      },
      {
        n: "y2",
        f: "+- vc 0 dy2"
      },
      {
        n: "y3",
        f: "+- vc dy2 0"
      },
      {
        n: "y4",
        f: "+- vc dy1 0"
      },
      {
        n: "x1",
        f: "*/ ss a3 100000"
      },
      {
        n: "dx2",
        f: "*/ w a4 100000"
      },
      {
        n: "x2",
        f: "+- r 0 dx2"
      },
      {
        n: "x3",
        f: "+/ x2 r 2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y4"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  leftBrace: {
    avLst: [
      {
        n: "adj1",
        f: "val 8333"
      },
      {
        n: "adj2",
        f: "val 50000"
      }
    ],
    gdLst: [
      {
        n: "a2",
        f: "pin 0 adj2 100000"
      },
      {
        n: "q1",
        f: "+- 100000 0 a2"
      },
      {
        n: "q2",
        f: "min q1 a2"
      },
      {
        n: "q3",
        f: "*/ q2 1 2"
      },
      {
        n: "maxAdj1",
        f: "*/ q3 h ss"
      },
      {
        n: "a1",
        f: "pin 0 adj1 maxAdj1"
      },
      {
        n: "y1",
        f: "*/ ss a1 100000"
      },
      {
        n: "y3",
        f: "*/ h a2 100000"
      },
      {
        n: "y4",
        f: "+- y3 y1 0"
      },
      {
        n: "dx1",
        f: "cos wd2 2700000"
      },
      {
        n: "dy1",
        f: "sin y1 2700000"
      },
      {
        n: "il",
        f: "+- r 0 dx1"
      },
      {
        n: "it",
        f: "+- y1 0 dy1"
      },
      {
        n: "ib",
        f: "+- b dy1 y1"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "y1",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "y4"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "y1",
            stAng: "0",
            swAng: "-5400000"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "y1",
            stAng: "cd4",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "y1",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "y1",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "y4"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "y1",
            stAng: "0",
            swAng: "-5400000"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "y1",
            stAng: "cd4",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "y1",
            stAng: "cd2",
            swAng: "cd4"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  leftBracket: {
    avLst: [
      {
        n: "adj",
        f: "val 8333"
      }
    ],
    gdLst: [
      {
        n: "maxAdj",
        f: "*/ 50000 h ss"
      },
      {
        n: "a",
        f: "pin 0 adj maxAdj"
      },
      {
        n: "y1",
        f: "*/ ss a 100000"
      },
      {
        n: "y2",
        f: "+- b 0 y1"
      },
      {
        n: "dx1",
        f: "cos w 2700000"
      },
      {
        n: "dy1",
        f: "sin y1 2700000"
      },
      {
        n: "il",
        f: "+- r 0 dx1"
      },
      {
        n: "it",
        f: "+- y1 0 dy1"
      },
      {
        n: "ib",
        f: "+- b dy1 y1"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "w",
            hR: "y1",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "w",
            hR: "y1",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "w",
            hR: "y1",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "w",
            hR: "y1",
            stAng: "cd2",
            swAng: "cd4"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  leftCircularArrow: {
    avLst: [
      {
        n: "adj1",
        f: "val 12500"
      },
      {
        n: "adj2",
        f: "val -1142319"
      },
      {
        n: "adj3",
        f: "val 1142319"
      },
      {
        n: "adj4",
        f: "val 10800000"
      },
      {
        n: "adj5",
        f: "val 12500"
      }
    ],
    gdLst: [
      {
        n: "a5",
        f: "pin 0 adj5 25000"
      },
      {
        n: "maxAdj1",
        f: "*/ a5 2 1"
      },
      {
        n: "a1",
        f: "pin 0 adj1 maxAdj1"
      },
      {
        n: "enAng",
        f: "pin 1 adj3 21599999"
      },
      {
        n: "stAng",
        f: "pin 0 adj4 21599999"
      },
      {
        n: "th",
        f: "*/ ss a1 100000"
      },
      {
        n: "thh",
        f: "*/ ss a5 100000"
      },
      {
        n: "th2",
        f: "*/ th 1 2"
      },
      {
        n: "rw1",
        f: "+- wd2 th2 thh"
      },
      {
        n: "rh1",
        f: "+- hd2 th2 thh"
      },
      {
        n: "rw2",
        f: "+- rw1 0 th"
      },
      {
        n: "rh2",
        f: "+- rh1 0 th"
      },
      {
        n: "rw3",
        f: "+- rw2 th2 0"
      },
      {
        n: "rh3",
        f: "+- rh2 th2 0"
      },
      {
        n: "wtH",
        f: "sin rw3 enAng"
      },
      {
        n: "htH",
        f: "cos rh3 enAng"
      },
      {
        n: "dxH",
        f: "cat2 rw3 htH wtH"
      },
      {
        n: "dyH",
        f: "sat2 rh3 htH wtH"
      },
      {
        n: "xH",
        f: "+- hc dxH 0"
      },
      {
        n: "yH",
        f: "+- vc dyH 0"
      },
      {
        n: "rI",
        f: "min rw2 rh2"
      },
      {
        n: "u1",
        f: "*/ dxH dxH 1"
      },
      {
        n: "u2",
        f: "*/ dyH dyH 1"
      },
      {
        n: "u3",
        f: "*/ rI rI 1"
      },
      {
        n: "u4",
        f: "+- u1 0 u3"
      },
      {
        n: "u5",
        f: "+- u2 0 u3"
      },
      {
        n: "u6",
        f: "*/ u4 u5 u1"
      },
      {
        n: "u7",
        f: "*/ u6 1 u2"
      },
      {
        n: "u8",
        f: "+- 1 0 u7"
      },
      {
        n: "u9",
        f: "sqrt u8"
      },
      {
        n: "u10",
        f: "*/ u4 1 dxH"
      },
      {
        n: "u11",
        f: "*/ u10 1 dyH"
      },
      {
        n: "u12",
        f: "+/ 1 u9 u11"
      },
      {
        n: "u13",
        f: "at2 1 u12"
      },
      {
        n: "u14",
        f: "+- u13 21600000 0"
      },
      {
        n: "u15",
        f: "?: u13 u13 u14"
      },
      {
        n: "u16",
        f: "+- u15 0 enAng"
      },
      {
        n: "u17",
        f: "+- u16 21600000 0"
      },
      {
        n: "u18",
        f: "?: u16 u16 u17"
      },
      {
        n: "u19",
        f: "+- u18 0 cd2"
      },
      {
        n: "u20",
        f: "+- u18 0 21600000"
      },
      {
        n: "u21",
        f: "?: u19 u20 u18"
      },
      {
        n: "u22",
        f: "abs u21"
      },
      {
        n: "minAng",
        f: "*/ u22 -1 1"
      },
      {
        n: "u23",
        f: "abs adj2"
      },
      {
        n: "a2",
        f: "*/ u23 -1 1"
      },
      {
        n: "aAng",
        f: "pin minAng a2 0"
      },
      {
        n: "ptAng",
        f: "+- enAng aAng 0"
      },
      {
        n: "wtA",
        f: "sin rw3 ptAng"
      },
      {
        n: "htA",
        f: "cos rh3 ptAng"
      },
      {
        n: "dxA",
        f: "cat2 rw3 htA wtA"
      },
      {
        n: "dyA",
        f: "sat2 rh3 htA wtA"
      },
      {
        n: "xA",
        f: "+- hc dxA 0"
      },
      {
        n: "yA",
        f: "+- vc dyA 0"
      },
      {
        n: "wtE",
        f: "sin rw1 stAng"
      },
      {
        n: "htE",
        f: "cos rh1 stAng"
      },
      {
        n: "dxE",
        f: "cat2 rw1 htE wtE"
      },
      {
        n: "dyE",
        f: "sat2 rh1 htE wtE"
      },
      {
        n: "xE",
        f: "+- hc dxE 0"
      },
      {
        n: "yE",
        f: "+- vc dyE 0"
      },
      {
        n: "wtD",
        f: "sin rw2 stAng"
      },
      {
        n: "htD",
        f: "cos rh2 stAng"
      },
      {
        n: "dxD",
        f: "cat2 rw2 htD wtD"
      },
      {
        n: "dyD",
        f: "sat2 rh2 htD wtD"
      },
      {
        n: "xD",
        f: "+- hc dxD 0"
      },
      {
        n: "yD",
        f: "+- vc dyD 0"
      },
      {
        n: "dxG",
        f: "cos thh ptAng"
      },
      {
        n: "dyG",
        f: "sin thh ptAng"
      },
      {
        n: "xG",
        f: "+- xH dxG 0"
      },
      {
        n: "yG",
        f: "+- yH dyG 0"
      },
      {
        n: "dxB",
        f: "cos thh ptAng"
      },
      {
        n: "dyB",
        f: "sin thh ptAng"
      },
      {
        n: "xB",
        f: "+- xH 0 dxB 0"
      },
      {
        n: "yB",
        f: "+- yH 0 dyB 0"
      },
      {
        n: "sx1",
        f: "+- xB 0 hc"
      },
      {
        n: "sy1",
        f: "+- yB 0 vc"
      },
      {
        n: "sx2",
        f: "+- xG 0 hc"
      },
      {
        n: "sy2",
        f: "+- yG 0 vc"
      },
      {
        n: "rO",
        f: "min rw1 rh1"
      },
      {
        n: "x1O",
        f: "*/ sx1 rO rw1"
      },
      {
        n: "y1O",
        f: "*/ sy1 rO rh1"
      },
      {
        n: "x2O",
        f: "*/ sx2 rO rw1"
      },
      {
        n: "y2O",
        f: "*/ sy2 rO rh1"
      },
      {
        n: "dxO",
        f: "+- x2O 0 x1O"
      },
      {
        n: "dyO",
        f: "+- y2O 0 y1O"
      },
      {
        n: "dO",
        f: "mod dxO dyO 0"
      },
      {
        n: "q1",
        f: "*/ x1O y2O 1"
      },
      {
        n: "q2",
        f: "*/ x2O y1O 1"
      },
      {
        n: "DO",
        f: "+- q1 0 q2"
      },
      {
        n: "q3",
        f: "*/ rO rO 1"
      },
      {
        n: "q4",
        f: "*/ dO dO 1"
      },
      {
        n: "q5",
        f: "*/ q3 q4 1"
      },
      {
        n: "q6",
        f: "*/ DO DO 1"
      },
      {
        n: "q7",
        f: "+- q5 0 q6"
      },
      {
        n: "q8",
        f: "max q7 0"
      },
      {
        n: "sdelO",
        f: "sqrt q8"
      },
      {
        n: "ndyO",
        f: "*/ dyO -1 1"
      },
      {
        n: "sdyO",
        f: "?: ndyO -1 1"
      },
      {
        n: "q9",
        f: "*/ sdyO dxO 1"
      },
      {
        n: "q10",
        f: "*/ q9 sdelO 1"
      },
      {
        n: "q11",
        f: "*/ DO dyO 1"
      },
      {
        n: "dxF1",
        f: "+/ q11 q10 q4"
      },
      {
        n: "q12",
        f: "+- q11 0 q10"
      },
      {
        n: "dxF2",
        f: "*/ q12 1 q4"
      },
      {
        n: "adyO",
        f: "abs dyO"
      },
      {
        n: "q13",
        f: "*/ adyO sdelO 1"
      },
      {
        n: "q14",
        f: "*/ DO dxO -1"
      },
      {
        n: "dyF1",
        f: "+/ q14 q13 q4"
      },
      {
        n: "q15",
        f: "+- q14 0 q13"
      },
      {
        n: "dyF2",
        f: "*/ q15 1 q4"
      },
      {
        n: "q16",
        f: "+- x2O 0 dxF1"
      },
      {
        n: "q17",
        f: "+- x2O 0 dxF2"
      },
      {
        n: "q18",
        f: "+- y2O 0 dyF1"
      },
      {
        n: "q19",
        f: "+- y2O 0 dyF2"
      },
      {
        n: "q20",
        f: "mod q16 q18 0"
      },
      {
        n: "q21",
        f: "mod q17 q19 0"
      },
      {
        n: "q22",
        f: "+- q21 0 q20"
      },
      {
        n: "dxF",
        f: "?: q22 dxF1 dxF2"
      },
      {
        n: "dyF",
        f: "?: q22 dyF1 dyF2"
      },
      {
        n: "sdxF",
        f: "*/ dxF rw1 rO"
      },
      {
        n: "sdyF",
        f: "*/ dyF rh1 rO"
      },
      {
        n: "xF",
        f: "+- hc sdxF 0"
      },
      {
        n: "yF",
        f: "+- vc sdyF 0"
      },
      {
        n: "x1I",
        f: "*/ sx1 rI rw2"
      },
      {
        n: "y1I",
        f: "*/ sy1 rI rh2"
      },
      {
        n: "x2I",
        f: "*/ sx2 rI rw2"
      },
      {
        n: "y2I",
        f: "*/ sy2 rI rh2"
      },
      {
        n: "dxI",
        f: "+- x2I 0 x1I"
      },
      {
        n: "dyI",
        f: "+- y2I 0 y1I"
      },
      {
        n: "dI",
        f: "mod dxI dyI 0"
      },
      {
        n: "v1",
        f: "*/ x1I y2I 1"
      },
      {
        n: "v2",
        f: "*/ x2I y1I 1"
      },
      {
        n: "DI",
        f: "+- v1 0 v2"
      },
      {
        n: "v3",
        f: "*/ rI rI 1"
      },
      {
        n: "v4",
        f: "*/ dI dI 1"
      },
      {
        n: "v5",
        f: "*/ v3 v4 1"
      },
      {
        n: "v6",
        f: "*/ DI DI 1"
      },
      {
        n: "v7",
        f: "+- v5 0 v6"
      },
      {
        n: "v8",
        f: "max v7 0"
      },
      {
        n: "sdelI",
        f: "sqrt v8"
      },
      {
        n: "v9",
        f: "*/ sdyO dxI 1"
      },
      {
        n: "v10",
        f: "*/ v9 sdelI 1"
      },
      {
        n: "v11",
        f: "*/ DI dyI 1"
      },
      {
        n: "dxC1",
        f: "+/ v11 v10 v4"
      },
      {
        n: "v12",
        f: "+- v11 0 v10"
      },
      {
        n: "dxC2",
        f: "*/ v12 1 v4"
      },
      {
        n: "adyI",
        f: "abs dyI"
      },
      {
        n: "v13",
        f: "*/ adyI sdelI 1"
      },
      {
        n: "v14",
        f: "*/ DI dxI -1"
      },
      {
        n: "dyC1",
        f: "+/ v14 v13 v4"
      },
      {
        n: "v15",
        f: "+- v14 0 v13"
      },
      {
        n: "dyC2",
        f: "*/ v15 1 v4"
      },
      {
        n: "v16",
        f: "+- x1I 0 dxC1"
      },
      {
        n: "v17",
        f: "+- x1I 0 dxC2"
      },
      {
        n: "v18",
        f: "+- y1I 0 dyC1"
      },
      {
        n: "v19",
        f: "+- y1I 0 dyC2"
      },
      {
        n: "v20",
        f: "mod v16 v18 0"
      },
      {
        n: "v21",
        f: "mod v17 v19 0"
      },
      {
        n: "v22",
        f: "+- v21 0 v20"
      },
      {
        n: "dxC",
        f: "?: v22 dxC1 dxC2"
      },
      {
        n: "dyC",
        f: "?: v22 dyC1 dyC2"
      },
      {
        n: "sdxC",
        f: "*/ dxC rw2 rI"
      },
      {
        n: "sdyC",
        f: "*/ dyC rh2 rI"
      },
      {
        n: "xC",
        f: "+- hc sdxC 0"
      },
      {
        n: "yC",
        f: "+- vc sdyC 0"
      },
      {
        n: "ist0",
        f: "at2 sdxC sdyC"
      },
      {
        n: "ist1",
        f: "+- ist0 21600000 0"
      },
      {
        n: "istAng0",
        f: "?: ist0 ist0 ist1"
      },
      {
        n: "isw1",
        f: "+- stAng 0 istAng0"
      },
      {
        n: "isw2",
        f: "+- isw1 21600000 0"
      },
      {
        n: "iswAng0",
        f: "?: isw1 isw1 isw2"
      },
      {
        n: "istAng",
        f: "+- istAng0 iswAng0 0"
      },
      {
        n: "iswAng",
        f: "+- 0 0 iswAng0"
      },
      {
        n: "p1",
        f: "+- xF 0 xC"
      },
      {
        n: "p2",
        f: "+- yF 0 yC"
      },
      {
        n: "p3",
        f: "mod p1 p2 0"
      },
      {
        n: "p4",
        f: "*/ p3 1 2"
      },
      {
        n: "p5",
        f: "+- p4 0 thh"
      },
      {
        n: "xGp",
        f: "?: p5 xF xG"
      },
      {
        n: "yGp",
        f: "?: p5 yF yG"
      },
      {
        n: "xBp",
        f: "?: p5 xC xB"
      },
      {
        n: "yBp",
        f: "?: p5 yC yB"
      },
      {
        n: "en0",
        f: "at2 sdxF sdyF"
      },
      {
        n: "en1",
        f: "+- en0 21600000 0"
      },
      {
        n: "en2",
        f: "?: en0 en0 en1"
      },
      {
        n: "sw0",
        f: "+- en2 0 stAng"
      },
      {
        n: "sw1",
        f: "+- sw0 0 21600000"
      },
      {
        n: "swAng",
        f: "?: sw0 sw1 sw0"
      },
      {
        n: "stAng0",
        f: "+- stAng swAng 0"
      },
      {
        n: "swAng0",
        f: "+- 0 0 swAng"
      },
      {
        n: "wtI",
        f: "sin rw3 stAng"
      },
      {
        n: "htI",
        f: "cos rh3 stAng"
      },
      {
        n: "dxI",
        f: "cat2 rw3 htI wtI"
      },
      {
        n: "dyI",
        f: "sat2 rh3 htI wtI"
      },
      {
        n: "xI",
        f: "+- hc dxI 0"
      },
      {
        n: "yI",
        f: "+- vc dyI 0"
      },
      {
        n: "aI",
        f: "+- stAng cd4 0"
      },
      {
        n: "aA",
        f: "+- ptAng 0 cd4"
      },
      {
        n: "aB",
        f: "+- ptAng cd2 0"
      },
      {
        n: "idx",
        f: "cos rw1 2700000"
      },
      {
        n: "idy",
        f: "sin rh1 2700000"
      },
      {
        n: "il",
        f: "+- hc 0 idx"
      },
      {
        n: "ir",
        f: "+- hc idx 0"
      },
      {
        n: "it",
        f: "+- vc 0 idy"
      },
      {
        n: "ib",
        f: "+- vc idy 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "xE",
              y: "yE"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xD",
              y: "yD"
            }
          },
          {
            type: "arcTo",
            wR: "rw2",
            hR: "rh2",
            stAng: "istAng",
            swAng: "iswAng"
          },
          {
            type: "lnTo",
            pt: {
              x: "xBp",
              y: "yBp"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xA",
              y: "yA"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xGp",
              y: "yGp"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xF",
              y: "yF"
            }
          },
          {
            type: "arcTo",
            wR: "rw1",
            hR: "rh1",
            stAng: "stAng0",
            swAng: "swAng0"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  leftRightArrow: {
    avLst: [
      {
        n: "adj1",
        f: "val 50000"
      },
      {
        n: "adj2",
        f: "val 50000"
      }
    ],
    gdLst: [
      {
        n: "maxAdj2",
        f: "*/ 50000 w ss"
      },
      {
        n: "a1",
        f: "pin 0 adj1 100000"
      },
      {
        n: "a2",
        f: "pin 0 adj2 maxAdj2"
      },
      {
        n: "x2",
        f: "*/ ss a2 100000"
      },
      {
        n: "x3",
        f: "+- r 0 x2"
      },
      {
        n: "dy",
        f: "*/ h a1 200000"
      },
      {
        n: "y1",
        f: "+- vc 0 dy"
      },
      {
        n: "y2",
        f: "+- vc dy 0"
      },
      {
        n: "dx1",
        f: "*/ y1 x2 hd2"
      },
      {
        n: "x1",
        f: "+- x2 0 dx1"
      },
      {
        n: "x4",
        f: "+- x3 dx1 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  leftRightArrowCallout: {
    avLst: [
      {
        n: "adj1",
        f: "val 25000"
      },
      {
        n: "adj2",
        f: "val 25000"
      },
      {
        n: "adj3",
        f: "val 25000"
      },
      {
        n: "adj4",
        f: "val 48123"
      }
    ],
    gdLst: [
      {
        n: "maxAdj2",
        f: "*/ 50000 h ss"
      },
      {
        n: "a2",
        f: "pin 0 adj2 maxAdj2"
      },
      {
        n: "maxAdj1",
        f: "*/ a2 2 1"
      },
      {
        n: "a1",
        f: "pin 0 adj1 maxAdj1"
      },
      {
        n: "maxAdj3",
        f: "*/ 50000 w ss"
      },
      {
        n: "a3",
        f: "pin 0 adj3 maxAdj3"
      },
      {
        n: "q2",
        f: "*/ a3 ss wd2"
      },
      {
        n: "maxAdj4",
        f: "+- 100000 0 q2"
      },
      {
        n: "a4",
        f: "pin 0 adj4 maxAdj4"
      },
      {
        n: "dy1",
        f: "*/ ss a2 100000"
      },
      {
        n: "dy2",
        f: "*/ ss a1 200000"
      },
      {
        n: "y1",
        f: "+- vc 0 dy1"
      },
      {
        n: "y2",
        f: "+- vc 0 dy2"
      },
      {
        n: "y3",
        f: "+- vc dy2 0"
      },
      {
        n: "y4",
        f: "+- vc dy1 0"
      },
      {
        n: "x1",
        f: "*/ ss a3 100000"
      },
      {
        n: "x4",
        f: "+- r 0 x1"
      },
      {
        n: "dx2",
        f: "*/ w a4 200000"
      },
      {
        n: "x2",
        f: "+- hc 0 dx2"
      },
      {
        n: "x3",
        f: "+- hc dx2 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y4"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  leftRightCircularArrow: {
    avLst: [
      {
        n: "adj1",
        f: "val 12500"
      },
      {
        n: "adj2",
        f: "val 1142319"
      },
      {
        n: "adj3",
        f: "val 20457681"
      },
      {
        n: "adj4",
        f: "val 11942319"
      },
      {
        n: "adj5",
        f: "val 12500"
      }
    ],
    gdLst: [
      {
        n: "a5",
        f: "pin 0 adj5 25000"
      },
      {
        n: "maxAdj1",
        f: "*/ a5 2 1"
      },
      {
        n: "a1",
        f: "pin 0 adj1 maxAdj1"
      },
      {
        n: "enAng",
        f: "pin 1 adj3 21599999"
      },
      {
        n: "stAng",
        f: "pin 0 adj4 21599999"
      },
      {
        n: "th",
        f: "*/ ss a1 100000"
      },
      {
        n: "thh",
        f: "*/ ss a5 100000"
      },
      {
        n: "th2",
        f: "*/ th 1 2"
      },
      {
        n: "rw1",
        f: "+- wd2 th2 thh"
      },
      {
        n: "rh1",
        f: "+- hd2 th2 thh"
      },
      {
        n: "rw2",
        f: "+- rw1 0 th"
      },
      {
        n: "rh2",
        f: "+- rh1 0 th"
      },
      {
        n: "rw3",
        f: "+- rw2 th2 0"
      },
      {
        n: "rh3",
        f: "+- rh2 th2 0"
      },
      {
        n: "wtH",
        f: "sin rw3 enAng"
      },
      {
        n: "htH",
        f: "cos rh3 enAng"
      },
      {
        n: "dxH",
        f: "cat2 rw3 htH wtH"
      },
      {
        n: "dyH",
        f: "sat2 rh3 htH wtH"
      },
      {
        n: "xH",
        f: "+- hc dxH 0"
      },
      {
        n: "yH",
        f: "+- vc dyH 0"
      },
      {
        n: "rI",
        f: "min rw2 rh2"
      },
      {
        n: "u1",
        f: "*/ dxH dxH 1"
      },
      {
        n: "u2",
        f: "*/ dyH dyH 1"
      },
      {
        n: "u3",
        f: "*/ rI rI 1"
      },
      {
        n: "u4",
        f: "+- u1 0 u3"
      },
      {
        n: "u5",
        f: "+- u2 0 u3"
      },
      {
        n: "u6",
        f: "*/ u4 u5 u1"
      },
      {
        n: "u7",
        f: "*/ u6 1 u2"
      },
      {
        n: "u8",
        f: "+- 1 0 u7"
      },
      {
        n: "u9",
        f: "sqrt u8"
      },
      {
        n: "u10",
        f: "*/ u4 1 dxH"
      },
      {
        n: "u11",
        f: "*/ u10 1 dyH"
      },
      {
        n: "u12",
        f: "+/ 1 u9 u11"
      },
      {
        n: "u13",
        f: "at2 1 u12"
      },
      {
        n: "u14",
        f: "+- u13 21600000 0"
      },
      {
        n: "u15",
        f: "?: u13 u13 u14"
      },
      {
        n: "u16",
        f: "+- u15 0 enAng"
      },
      {
        n: "u17",
        f: "+- u16 21600000 0"
      },
      {
        n: "u18",
        f: "?: u16 u16 u17"
      },
      {
        n: "u19",
        f: "+- u18 0 cd2"
      },
      {
        n: "u20",
        f: "+- u18 0 21600000"
      },
      {
        n: "u21",
        f: "?: u19 u20 u18"
      },
      {
        n: "maxAng",
        f: "abs u21"
      },
      {
        n: "aAng",
        f: "pin 0 adj2 maxAng"
      },
      {
        n: "ptAng",
        f: "+- enAng aAng 0"
      },
      {
        n: "wtA",
        f: "sin rw3 ptAng"
      },
      {
        n: "htA",
        f: "cos rh3 ptAng"
      },
      {
        n: "dxA",
        f: "cat2 rw3 htA wtA"
      },
      {
        n: "dyA",
        f: "sat2 rh3 htA wtA"
      },
      {
        n: "xA",
        f: "+- hc dxA 0"
      },
      {
        n: "yA",
        f: "+- vc dyA 0"
      },
      {
        n: "dxG",
        f: "cos thh ptAng"
      },
      {
        n: "dyG",
        f: "sin thh ptAng"
      },
      {
        n: "xG",
        f: "+- xH dxG 0"
      },
      {
        n: "yG",
        f: "+- yH dyG 0"
      },
      {
        n: "dxB",
        f: "cos thh ptAng"
      },
      {
        n: "dyB",
        f: "sin thh ptAng"
      },
      {
        n: "xB",
        f: "+- xH 0 dxB 0"
      },
      {
        n: "yB",
        f: "+- yH 0 dyB 0"
      },
      {
        n: "sx1",
        f: "+- xB 0 hc"
      },
      {
        n: "sy1",
        f: "+- yB 0 vc"
      },
      {
        n: "sx2",
        f: "+- xG 0 hc"
      },
      {
        n: "sy2",
        f: "+- yG 0 vc"
      },
      {
        n: "rO",
        f: "min rw1 rh1"
      },
      {
        n: "x1O",
        f: "*/ sx1 rO rw1"
      },
      {
        n: "y1O",
        f: "*/ sy1 rO rh1"
      },
      {
        n: "x2O",
        f: "*/ sx2 rO rw1"
      },
      {
        n: "y2O",
        f: "*/ sy2 rO rh1"
      },
      {
        n: "dxO",
        f: "+- x2O 0 x1O"
      },
      {
        n: "dyO",
        f: "+- y2O 0 y1O"
      },
      {
        n: "dO",
        f: "mod dxO dyO 0"
      },
      {
        n: "q1",
        f: "*/ x1O y2O 1"
      },
      {
        n: "q2",
        f: "*/ x2O y1O 1"
      },
      {
        n: "DO",
        f: "+- q1 0 q2"
      },
      {
        n: "q3",
        f: "*/ rO rO 1"
      },
      {
        n: "q4",
        f: "*/ dO dO 1"
      },
      {
        n: "q5",
        f: "*/ q3 q4 1"
      },
      {
        n: "q6",
        f: "*/ DO DO 1"
      },
      {
        n: "q7",
        f: "+- q5 0 q6"
      },
      {
        n: "q8",
        f: "max q7 0"
      },
      {
        n: "sdelO",
        f: "sqrt q8"
      },
      {
        n: "ndyO",
        f: "*/ dyO -1 1"
      },
      {
        n: "sdyO",
        f: "?: ndyO -1 1"
      },
      {
        n: "q9",
        f: "*/ sdyO dxO 1"
      },
      {
        n: "q10",
        f: "*/ q9 sdelO 1"
      },
      {
        n: "q11",
        f: "*/ DO dyO 1"
      },
      {
        n: "dxF1",
        f: "+/ q11 q10 q4"
      },
      {
        n: "q12",
        f: "+- q11 0 q10"
      },
      {
        n: "dxF2",
        f: "*/ q12 1 q4"
      },
      {
        n: "adyO",
        f: "abs dyO"
      },
      {
        n: "q13",
        f: "*/ adyO sdelO 1"
      },
      {
        n: "q14",
        f: "*/ DO dxO -1"
      },
      {
        n: "dyF1",
        f: "+/ q14 q13 q4"
      },
      {
        n: "q15",
        f: "+- q14 0 q13"
      },
      {
        n: "dyF2",
        f: "*/ q15 1 q4"
      },
      {
        n: "q16",
        f: "+- x2O 0 dxF1"
      },
      {
        n: "q17",
        f: "+- x2O 0 dxF2"
      },
      {
        n: "q18",
        f: "+- y2O 0 dyF1"
      },
      {
        n: "q19",
        f: "+- y2O 0 dyF2"
      },
      {
        n: "q20",
        f: "mod q16 q18 0"
      },
      {
        n: "q21",
        f: "mod q17 q19 0"
      },
      {
        n: "q22",
        f: "+- q21 0 q20"
      },
      {
        n: "dxF",
        f: "?: q22 dxF1 dxF2"
      },
      {
        n: "dyF",
        f: "?: q22 dyF1 dyF2"
      },
      {
        n: "sdxF",
        f: "*/ dxF rw1 rO"
      },
      {
        n: "sdyF",
        f: "*/ dyF rh1 rO"
      },
      {
        n: "xF",
        f: "+- hc sdxF 0"
      },
      {
        n: "yF",
        f: "+- vc sdyF 0"
      },
      {
        n: "x1I",
        f: "*/ sx1 rI rw2"
      },
      {
        n: "y1I",
        f: "*/ sy1 rI rh2"
      },
      {
        n: "x2I",
        f: "*/ sx2 rI rw2"
      },
      {
        n: "y2I",
        f: "*/ sy2 rI rh2"
      },
      {
        n: "dxI",
        f: "+- x2I 0 x1I"
      },
      {
        n: "dyI",
        f: "+- y2I 0 y1I"
      },
      {
        n: "dI",
        f: "mod dxI dyI 0"
      },
      {
        n: "v1",
        f: "*/ x1I y2I 1"
      },
      {
        n: "v2",
        f: "*/ x2I y1I 1"
      },
      {
        n: "DI",
        f: "+- v1 0 v2"
      },
      {
        n: "v3",
        f: "*/ rI rI 1"
      },
      {
        n: "v4",
        f: "*/ dI dI 1"
      },
      {
        n: "v5",
        f: "*/ v3 v4 1"
      },
      {
        n: "v6",
        f: "*/ DI DI 1"
      },
      {
        n: "v7",
        f: "+- v5 0 v6"
      },
      {
        n: "v8",
        f: "max v7 0"
      },
      {
        n: "sdelI",
        f: "sqrt v8"
      },
      {
        n: "v9",
        f: "*/ sdyO dxI 1"
      },
      {
        n: "v10",
        f: "*/ v9 sdelI 1"
      },
      {
        n: "v11",
        f: "*/ DI dyI 1"
      },
      {
        n: "dxC1",
        f: "+/ v11 v10 v4"
      },
      {
        n: "v12",
        f: "+- v11 0 v10"
      },
      {
        n: "dxC2",
        f: "*/ v12 1 v4"
      },
      {
        n: "adyI",
        f: "abs dyI"
      },
      {
        n: "v13",
        f: "*/ adyI sdelI 1"
      },
      {
        n: "v14",
        f: "*/ DI dxI -1"
      },
      {
        n: "dyC1",
        f: "+/ v14 v13 v4"
      },
      {
        n: "v15",
        f: "+- v14 0 v13"
      },
      {
        n: "dyC2",
        f: "*/ v15 1 v4"
      },
      {
        n: "v16",
        f: "+- x1I 0 dxC1"
      },
      {
        n: "v17",
        f: "+- x1I 0 dxC2"
      },
      {
        n: "v18",
        f: "+- y1I 0 dyC1"
      },
      {
        n: "v19",
        f: "+- y1I 0 dyC2"
      },
      {
        n: "v20",
        f: "mod v16 v18 0"
      },
      {
        n: "v21",
        f: "mod v17 v19 0"
      },
      {
        n: "v22",
        f: "+- v21 0 v20"
      },
      {
        n: "dxC",
        f: "?: v22 dxC1 dxC2"
      },
      {
        n: "dyC",
        f: "?: v22 dyC1 dyC2"
      },
      {
        n: "sdxC",
        f: "*/ dxC rw2 rI"
      },
      {
        n: "sdyC",
        f: "*/ dyC rh2 rI"
      },
      {
        n: "xC",
        f: "+- hc sdxC 0"
      },
      {
        n: "yC",
        f: "+- vc sdyC 0"
      },
      {
        n: "wtI",
        f: "sin rw3 stAng"
      },
      {
        n: "htI",
        f: "cos rh3 stAng"
      },
      {
        n: "dxI",
        f: "cat2 rw3 htI wtI"
      },
      {
        n: "dyI",
        f: "sat2 rh3 htI wtI"
      },
      {
        n: "xI",
        f: "+- hc dxI 0"
      },
      {
        n: "yI",
        f: "+- vc dyI 0"
      },
      {
        n: "lptAng",
        f: "+- stAng 0 aAng"
      },
      {
        n: "wtL",
        f: "sin rw3 lptAng"
      },
      {
        n: "htL",
        f: "cos rh3 lptAng"
      },
      {
        n: "dxL",
        f: "cat2 rw3 htL wtL"
      },
      {
        n: "dyL",
        f: "sat2 rh3 htL wtL"
      },
      {
        n: "xL",
        f: "+- hc dxL 0"
      },
      {
        n: "yL",
        f: "+- vc dyL 0"
      },
      {
        n: "dxK",
        f: "cos thh lptAng"
      },
      {
        n: "dyK",
        f: "sin thh lptAng"
      },
      {
        n: "xK",
        f: "+- xI dxK 0"
      },
      {
        n: "yK",
        f: "+- yI dyK 0"
      },
      {
        n: "dxJ",
        f: "cos thh lptAng"
      },
      {
        n: "dyJ",
        f: "sin thh lptAng"
      },
      {
        n: "xJ",
        f: "+- xI 0 dxJ 0"
      },
      {
        n: "yJ",
        f: "+- yI 0 dyJ 0"
      },
      {
        n: "p1",
        f: "+- xF 0 xC"
      },
      {
        n: "p2",
        f: "+- yF 0 yC"
      },
      {
        n: "p3",
        f: "mod p1 p2 0"
      },
      {
        n: "p4",
        f: "*/ p3 1 2"
      },
      {
        n: "p5",
        f: "+- p4 0 thh"
      },
      {
        n: "xGp",
        f: "?: p5 xF xG"
      },
      {
        n: "yGp",
        f: "?: p5 yF yG"
      },
      {
        n: "xBp",
        f: "?: p5 xC xB"
      },
      {
        n: "yBp",
        f: "?: p5 yC yB"
      },
      {
        n: "en0",
        f: "at2 sdxF sdyF"
      },
      {
        n: "en1",
        f: "+- en0 21600000 0"
      },
      {
        n: "en2",
        f: "?: en0 en0 en1"
      },
      {
        n: "od0",
        f: "+- en2 0 enAng"
      },
      {
        n: "od1",
        f: "+- od0 21600000 0"
      },
      {
        n: "od2",
        f: "?: od0 od0 od1"
      },
      {
        n: "st0",
        f: "+- stAng 0 od2"
      },
      {
        n: "st1",
        f: "+- st0 21600000 0"
      },
      {
        n: "st2",
        f: "?: st0 st0 st1"
      },
      {
        n: "sw0",
        f: "+- en2 0 st2"
      },
      {
        n: "sw1",
        f: "+- sw0 21600000 0"
      },
      {
        n: "swAng",
        f: "?: sw0 sw0 sw1"
      },
      {
        n: "ist0",
        f: "at2 sdxC sdyC"
      },
      {
        n: "ist1",
        f: "+- ist0 21600000 0"
      },
      {
        n: "istAng",
        f: "?: ist0 ist0 ist1"
      },
      {
        n: "id0",
        f: "+- istAng 0 enAng"
      },
      {
        n: "id1",
        f: "+- id0 0 21600000"
      },
      {
        n: "id2",
        f: "?: id0 id1 id0"
      },
      {
        n: "ien0",
        f: "+- stAng 0 id2"
      },
      {
        n: "ien1",
        f: "+- ien0 0 21600000"
      },
      {
        n: "ien2",
        f: "?: ien1 ien1 ien0"
      },
      {
        n: "isw1",
        f: "+- ien2 0 istAng"
      },
      {
        n: "isw2",
        f: "+- isw1 0 21600000"
      },
      {
        n: "iswAng",
        f: "?: isw1 isw2 isw1"
      },
      {
        n: "wtE",
        f: "sin rw1 st2"
      },
      {
        n: "htE",
        f: "cos rh1 st2"
      },
      {
        n: "dxE",
        f: "cat2 rw1 htE wtE"
      },
      {
        n: "dyE",
        f: "sat2 rh1 htE wtE"
      },
      {
        n: "xE",
        f: "+- hc dxE 0"
      },
      {
        n: "yE",
        f: "+- vc dyE 0"
      },
      {
        n: "wtD",
        f: "sin rw2 ien2"
      },
      {
        n: "htD",
        f: "cos rh2 ien2"
      },
      {
        n: "dxD",
        f: "cat2 rw2 htD wtD"
      },
      {
        n: "dyD",
        f: "sat2 rh2 htD wtD"
      },
      {
        n: "xD",
        f: "+- hc dxD 0"
      },
      {
        n: "yD",
        f: "+- vc dyD 0"
      },
      {
        n: "xKp",
        f: "?: p5 xE xK"
      },
      {
        n: "yKp",
        f: "?: p5 yE yK"
      },
      {
        n: "xJp",
        f: "?: p5 xD xJ"
      },
      {
        n: "yJp",
        f: "?: p5 yD yJ"
      },
      {
        n: "aL",
        f: "+- lptAng 0 cd4"
      },
      {
        n: "aA",
        f: "+- ptAng cd4 0"
      },
      {
        n: "aB",
        f: "+- ptAng cd2 0"
      },
      {
        n: "aJ",
        f: "+- lptAng cd2 0"
      },
      {
        n: "idx",
        f: "cos rw1 2700000"
      },
      {
        n: "idy",
        f: "sin rh1 2700000"
      },
      {
        n: "il",
        f: "+- hc 0 idx"
      },
      {
        n: "ir",
        f: "+- hc idx 0"
      },
      {
        n: "it",
        f: "+- vc 0 idy"
      },
      {
        n: "ib",
        f: "+- vc idy 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "xL",
              y: "yL"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xKp",
              y: "yKp"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xE",
              y: "yE"
            }
          },
          {
            type: "arcTo",
            wR: "rw1",
            hR: "rh1",
            stAng: "st2",
            swAng: "swAng"
          },
          {
            type: "lnTo",
            pt: {
              x: "xGp",
              y: "yGp"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xA",
              y: "yA"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xBp",
              y: "yBp"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xC",
              y: "yC"
            }
          },
          {
            type: "arcTo",
            wR: "rw2",
            hR: "rh2",
            stAng: "istAng",
            swAng: "iswAng"
          },
          {
            type: "lnTo",
            pt: {
              x: "xJp",
              y: "yJp"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  leftRightRibbon: {
    avLst: [
      {
        n: "adj1",
        f: "val 50000"
      },
      {
        n: "adj2",
        f: "val 50000"
      },
      {
        n: "adj3",
        f: "val 16667"
      }
    ],
    gdLst: [
      {
        n: "a3",
        f: "pin 0 adj3 33333"
      },
      {
        n: "maxAdj1",
        f: "+- 100000 0 a3"
      },
      {
        n: "a1",
        f: "pin 0 adj1 maxAdj1"
      },
      {
        n: "w1",
        f: "+- wd2 0 wd32"
      },
      {
        n: "maxAdj2",
        f: "*/ 100000 w1 ss"
      },
      {
        n: "a2",
        f: "pin 0 adj2 maxAdj2"
      },
      {
        n: "x1",
        f: "*/ ss a2 100000"
      },
      {
        n: "x4",
        f: "+- r 0 x1"
      },
      {
        n: "dy1",
        f: "*/ h a1 200000"
      },
      {
        n: "dy2",
        f: "*/ h a3 -200000"
      },
      {
        n: "ly1",
        f: "+- vc dy2 dy1"
      },
      {
        n: "ry4",
        f: "+- vc dy1 dy2"
      },
      {
        n: "ly2",
        f: "+- ly1 dy1 0"
      },
      {
        n: "ry3",
        f: "+- b 0 ly2"
      },
      {
        n: "ly4",
        f: "*/ ly2 2 1"
      },
      {
        n: "ry1",
        f: "+- b 0 ly4"
      },
      {
        n: "ly3",
        f: "+- ly4 0 ly1"
      },
      {
        n: "ry2",
        f: "+- b 0 ly3"
      },
      {
        n: "hR",
        f: "*/ a3 ss 400000"
      },
      {
        n: "x2",
        f: "+- hc 0 wd32"
      },
      {
        n: "x3",
        f: "+- hc wd32 0"
      },
      {
        n: "y1",
        f: "+- ly1 hR 0"
      },
      {
        n: "y2",
        f: "+- ry2 0 hR"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "ly2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "ly1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "ly1"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "3cd4",
            swAng: "cd2"
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "3cd4",
            swAng: "-10800000"
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "ry2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "ry1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "ry3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "ry4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "ry4"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "ly3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "ly3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "ly4"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x3",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "3cd4",
            swAng: "-10800000"
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "ry2"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "darkenLess",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "ly2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "ly1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "ly1"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "3cd4",
            swAng: "cd2"
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "3cd4",
            swAng: "-10800000"
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "ry2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "ry1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "ry3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "ry4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "ry4"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "ly3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "ly3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "ly4"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "x3",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "ry2"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "ly3"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  leftRightUpArrow: {
    avLst: [
      {
        n: "adj1",
        f: "val 25000"
      },
      {
        n: "adj2",
        f: "val 25000"
      },
      {
        n: "adj3",
        f: "val 25000"
      }
    ],
    gdLst: [
      {
        n: "a2",
        f: "pin 0 adj2 50000"
      },
      {
        n: "maxAdj1",
        f: "*/ a2 2 1"
      },
      {
        n: "a1",
        f: "pin 0 adj1 maxAdj1"
      },
      {
        n: "q1",
        f: "+- 100000 0 maxAdj1"
      },
      {
        n: "maxAdj3",
        f: "*/ q1 1 2"
      },
      {
        n: "a3",
        f: "pin 0 adj3 maxAdj3"
      },
      {
        n: "x1",
        f: "*/ ss a3 100000"
      },
      {
        n: "dx2",
        f: "*/ ss a2 100000"
      },
      {
        n: "x2",
        f: "+- hc 0 dx2"
      },
      {
        n: "x5",
        f: "+- hc dx2 0"
      },
      {
        n: "dx3",
        f: "*/ ss a1 200000"
      },
      {
        n: "x3",
        f: "+- hc 0 dx3"
      },
      {
        n: "x4",
        f: "+- hc dx3 0"
      },
      {
        n: "x6",
        f: "+- r 0 x1"
      },
      {
        n: "dy2",
        f: "*/ ss a2 50000"
      },
      {
        n: "y2",
        f: "+- b 0 dy2"
      },
      {
        n: "y4",
        f: "+- b 0 dx2"
      },
      {
        n: "y3",
        f: "+- y4 0 dx3"
      },
      {
        n: "y5",
        f: "+- y4 dx3 0"
      },
      {
        n: "il",
        f: "*/ dx3 x1 dx2"
      },
      {
        n: "ir",
        f: "+- r 0 il"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "x1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "x1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "x1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "x1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "y5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  leftUpArrow: {
    avLst: [
      {
        n: "adj1",
        f: "val 25000"
      },
      {
        n: "adj2",
        f: "val 25000"
      },
      {
        n: "adj3",
        f: "val 25000"
      }
    ],
    gdLst: [
      {
        n: "a2",
        f: "pin 0 adj2 50000"
      },
      {
        n: "maxAdj1",
        f: "*/ a2 2 1"
      },
      {
        n: "a1",
        f: "pin 0 adj1 maxAdj1"
      },
      {
        n: "maxAdj3",
        f: "+- 100000 0 maxAdj1"
      },
      {
        n: "a3",
        f: "pin 0 adj3 maxAdj3"
      },
      {
        n: "x1",
        f: "*/ ss a3 100000"
      },
      {
        n: "dx2",
        f: "*/ ss a2 50000"
      },
      {
        n: "x2",
        f: "+- r 0 dx2"
      },
      {
        n: "y2",
        f: "+- b 0 dx2"
      },
      {
        n: "dx4",
        f: "*/ ss a2 100000"
      },
      {
        n: "x4",
        f: "+- r 0 dx4"
      },
      {
        n: "y4",
        f: "+- b 0 dx4"
      },
      {
        n: "dx3",
        f: "*/ ss a1 200000"
      },
      {
        n: "x3",
        f: "+- x4 0 dx3"
      },
      {
        n: "x5",
        f: "+- x4 dx3 0"
      },
      {
        n: "y3",
        f: "+- y4 0 dx3"
      },
      {
        n: "y5",
        f: "+- y4 dx3 0"
      },
      {
        n: "il",
        f: "*/ dx3 x1 dx4"
      },
      {
        n: "cx1",
        f: "+/ x1 x5 2"
      },
      {
        n: "cy1",
        f: "+/ x1 y5 2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "x1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "x1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "x1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "x1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  lightningBolt: {
    gdLst: [
      {
        n: "x1",
        f: "*/ w 5022 21600"
      },
      {
        n: "x3",
        f: "*/ w 8472 21600"
      },
      {
        n: "x4",
        f: "*/ w 8757 21600"
      },
      {
        n: "x5",
        f: "*/ w 10012 21600"
      },
      {
        n: "x8",
        f: "*/ w 12860 21600"
      },
      {
        n: "x9",
        f: "*/ w 13917 21600"
      },
      {
        n: "x11",
        f: "*/ w 16577 21600"
      },
      {
        n: "y1",
        f: "*/ h 3890 21600"
      },
      {
        n: "y2",
        f: "*/ h 6080 21600"
      },
      {
        n: "y4",
        f: "*/ h 7437 21600"
      },
      {
        n: "y6",
        f: "*/ h 9705 21600"
      },
      {
        n: "y7",
        f: "*/ h 12007 21600"
      },
      {
        n: "y10",
        f: "*/ h 14277 21600"
      },
      {
        n: "y11",
        f: "*/ h 14915 21600"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "8472",
              y: "0"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "12860",
              y: "6080"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "11050",
              y: "6797"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "16577",
              y: "12007"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "14767",
              y: "12877"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "21600",
              y: "21600"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "10012",
              y: "14915"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "12222",
              y: "13987"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "5022",
              y: "9705"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "7602",
              y: "8382"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "0",
              y: "3890"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true,
        w: 21600,
        h: 21600
      }
    ]
  },
  line: {
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  lineInv: {
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  mathDivide: {
    avLst: [
      {
        n: "adj1",
        f: "val 23520"
      },
      {
        n: "adj2",
        f: "val 5880"
      },
      {
        n: "adj3",
        f: "val 11760"
      }
    ],
    gdLst: [
      {
        n: "a1",
        f: "pin 1000 adj1 36745"
      },
      {
        n: "ma1",
        f: "+- 0 0 a1"
      },
      {
        n: "ma3h",
        f: "+/ 73490 ma1 4"
      },
      {
        n: "ma3w",
        f: "*/ 36745 w h"
      },
      {
        n: "maxAdj3",
        f: "min ma3h ma3w"
      },
      {
        n: "a3",
        f: "pin 1000 adj3 maxAdj3"
      },
      {
        n: "m4a3",
        f: "*/ -4 a3 1"
      },
      {
        n: "maxAdj2",
        f: "+- 73490 m4a3 a1"
      },
      {
        n: "a2",
        f: "pin 0 adj2 maxAdj2"
      },
      {
        n: "dy1",
        f: "*/ h a1 200000"
      },
      {
        n: "yg",
        f: "*/ h a2 100000"
      },
      {
        n: "rad",
        f: "*/ h a3 100000"
      },
      {
        n: "dx1",
        f: "*/ w 73490 200000"
      },
      {
        n: "y3",
        f: "+- vc 0 dy1"
      },
      {
        n: "y4",
        f: "+- vc dy1 0"
      },
      {
        n: "a",
        f: "+- yg rad 0"
      },
      {
        n: "y2",
        f: "+- y3 0 a"
      },
      {
        n: "y1",
        f: "+- y2 0 rad"
      },
      {
        n: "y5",
        f: "+- b 0 y1"
      },
      {
        n: "x1",
        f: "+- hc 0 dx1"
      },
      {
        n: "x3",
        f: "+- hc dx1 0"
      },
      {
        n: "x2",
        f: "+- hc 0 rad"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "hc",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "rad",
            hR: "rad",
            stAng: "3cd4",
            swAng: "21600000"
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "hc",
              y: "y5"
            }
          },
          {
            type: "arcTo",
            wR: "rad",
            hR: "rad",
            stAng: "cd4",
            swAng: "21600000"
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y4"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  mathEqual: {
    avLst: [
      {
        n: "adj1",
        f: "val 23520"
      },
      {
        n: "adj2",
        f: "val 11760"
      }
    ],
    gdLst: [
      {
        n: "a1",
        f: "pin 0 adj1 36745"
      },
      {
        n: "2a1",
        f: "*/ a1 2 1"
      },
      {
        n: "mAdj2",
        f: "+- 100000 0 2a1"
      },
      {
        n: "a2",
        f: "pin 0 adj2 mAdj2"
      },
      {
        n: "dy1",
        f: "*/ h a1 100000"
      },
      {
        n: "dy2",
        f: "*/ h a2 200000"
      },
      {
        n: "dx1",
        f: "*/ w 73490 200000"
      },
      {
        n: "y2",
        f: "+- vc 0 dy2"
      },
      {
        n: "y3",
        f: "+- vc dy2 0"
      },
      {
        n: "y1",
        f: "+- y2 0 dy1"
      },
      {
        n: "y4",
        f: "+- y3 dy1 0"
      },
      {
        n: "x1",
        f: "+- hc 0 dx1"
      },
      {
        n: "x2",
        f: "+- hc dx1 0"
      },
      {
        n: "yC1",
        f: "+/ y1 y2 2"
      },
      {
        n: "yC2",
        f: "+/ y3 y4 2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y4"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  mathMinus: {
    avLst: [
      {
        n: "adj1",
        f: "val 23520"
      }
    ],
    gdLst: [
      {
        n: "a1",
        f: "pin 0 adj1 100000"
      },
      {
        n: "dy1",
        f: "*/ h a1 200000"
      },
      {
        n: "dx1",
        f: "*/ w 73490 200000"
      },
      {
        n: "y1",
        f: "+- vc 0 dy1"
      },
      {
        n: "y2",
        f: "+- vc dy1 0"
      },
      {
        n: "x1",
        f: "+- hc 0 dx1"
      },
      {
        n: "x2",
        f: "+- hc dx1 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  mathMultiply: {
    avLst: [
      {
        n: "adj1",
        f: "val 23520"
      }
    ],
    gdLst: [
      {
        n: "a1",
        f: "pin 0 adj1 51965"
      },
      {
        n: "th",
        f: "*/ ss a1 100000"
      },
      {
        n: "a",
        f: "at2 w h"
      },
      {
        n: "sa",
        f: "sin 1 a"
      },
      {
        n: "ca",
        f: "cos 1 a"
      },
      {
        n: "ta",
        f: "tan 1 a"
      },
      {
        n: "dl",
        f: "mod w h 0"
      },
      {
        n: "rw",
        f: "*/ dl 51965 100000"
      },
      {
        n: "lM",
        f: "+- dl 0 rw"
      },
      {
        n: "xM",
        f: "*/ ca lM 2"
      },
      {
        n: "yM",
        f: "*/ sa lM 2"
      },
      {
        n: "dxAM",
        f: "*/ sa th 2"
      },
      {
        n: "dyAM",
        f: "*/ ca th 2"
      },
      {
        n: "xA",
        f: "+- xM 0 dxAM"
      },
      {
        n: "yA",
        f: "+- yM dyAM 0"
      },
      {
        n: "xB",
        f: "+- xM dxAM 0"
      },
      {
        n: "yB",
        f: "+- yM 0 dyAM"
      },
      {
        n: "xBC",
        f: "+- hc 0 xB"
      },
      {
        n: "yBC",
        f: "*/ xBC ta 1"
      },
      {
        n: "yC",
        f: "+- yBC yB 0"
      },
      {
        n: "xD",
        f: "+- r 0 xB"
      },
      {
        n: "xE",
        f: "+- r 0 xA"
      },
      {
        n: "yFE",
        f: "+- vc 0 yA"
      },
      {
        n: "xFE",
        f: "*/ yFE 1 ta"
      },
      {
        n: "xF",
        f: "+- xE 0 xFE"
      },
      {
        n: "xL",
        f: "+- xA xFE 0"
      },
      {
        n: "yG",
        f: "+- b 0 yA"
      },
      {
        n: "yH",
        f: "+- b 0 yB"
      },
      {
        n: "yI",
        f: "+- b 0 yC"
      },
      {
        n: "xC2",
        f: "+- r 0 xM"
      },
      {
        n: "yC3",
        f: "+- b 0 yM"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "xA",
              y: "yA"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xB",
              y: "yB"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "yC"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xD",
              y: "yB"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xE",
              y: "yA"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xF",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xE",
              y: "yG"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xD",
              y: "yH"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "yI"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xB",
              y: "yH"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xA",
              y: "yG"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xL",
              y: "vc"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  mathNotEqual: {
    avLst: [
      {
        n: "adj1",
        f: "val 23520"
      },
      {
        n: "adj2",
        f: "val 6600000"
      },
      {
        n: "adj3",
        f: "val 11760"
      }
    ],
    gdLst: [
      {
        n: "a1",
        f: "pin 0 adj1 50000"
      },
      {
        n: "crAng",
        f: "pin 4200000 adj2 6600000"
      },
      {
        n: "2a1",
        f: "*/ a1 2 1"
      },
      {
        n: "maxAdj3",
        f: "+- 100000 0 2a1"
      },
      {
        n: "a3",
        f: "pin 0 adj3 maxAdj3"
      },
      {
        n: "dy1",
        f: "*/ h a1 100000"
      },
      {
        n: "dy2",
        f: "*/ h a3 200000"
      },
      {
        n: "dx1",
        f: "*/ w 73490 200000"
      },
      {
        n: "x1",
        f: "+- hc 0 dx1"
      },
      {
        n: "x8",
        f: "+- hc dx1 0"
      },
      {
        n: "y2",
        f: "+- vc 0 dy2"
      },
      {
        n: "y3",
        f: "+- vc dy2 0"
      },
      {
        n: "y1",
        f: "+- y2 0 dy1"
      },
      {
        n: "y4",
        f: "+- y3 dy1 0"
      },
      {
        n: "cadj2",
        f: "+- crAng 0 cd4"
      },
      {
        n: "xadj2",
        f: "tan hd2 cadj2"
      },
      {
        n: "len",
        f: "mod xadj2 hd2 0"
      },
      {
        n: "bhw",
        f: "*/ len dy1 hd2"
      },
      {
        n: "bhw2",
        f: "*/ bhw 1 2"
      },
      {
        n: "x7",
        f: "+- hc xadj2 bhw2"
      },
      {
        n: "dx67",
        f: "*/ xadj2 y1 hd2"
      },
      {
        n: "x6",
        f: "+- x7 0 dx67"
      },
      {
        n: "dx57",
        f: "*/ xadj2 y2 hd2"
      },
      {
        n: "x5",
        f: "+- x7 0 dx57"
      },
      {
        n: "dx47",
        f: "*/ xadj2 y3 hd2"
      },
      {
        n: "x4",
        f: "+- x7 0 dx47"
      },
      {
        n: "dx37",
        f: "*/ xadj2 y4 hd2"
      },
      {
        n: "x3",
        f: "+- x7 0 dx37"
      },
      {
        n: "dx27",
        f: "*/ xadj2 2 1"
      },
      {
        n: "x2",
        f: "+- x7 0 dx27"
      },
      {
        n: "rx7",
        f: "+- x7 bhw 0"
      },
      {
        n: "rx6",
        f: "+- x6 bhw 0"
      },
      {
        n: "rx5",
        f: "+- x5 bhw 0"
      },
      {
        n: "rx4",
        f: "+- x4 bhw 0"
      },
      {
        n: "rx3",
        f: "+- x3 bhw 0"
      },
      {
        n: "rx2",
        f: "+- x2 bhw 0"
      },
      {
        n: "dx7",
        f: "*/ dy1 hd2 len"
      },
      {
        n: "rxt",
        f: "+- x7 dx7 0"
      },
      {
        n: "lxt",
        f: "+- rx7 0 dx7"
      },
      {
        n: "rx",
        f: "?: cadj2 rxt rx7"
      },
      {
        n: "lx",
        f: "?: cadj2 x7 lxt"
      },
      {
        n: "dy3",
        f: "*/ dy1 xadj2 len"
      },
      {
        n: "dy4",
        f: "+- 0 0 dy3"
      },
      {
        n: "ry",
        f: "?: cadj2 dy3 t"
      },
      {
        n: "ly",
        f: "?: cadj2 t dy4"
      },
      {
        n: "dlx",
        f: "+- w 0 rx"
      },
      {
        n: "drx",
        f: "+- w 0 lx"
      },
      {
        n: "dly",
        f: "+- h 0 ry"
      },
      {
        n: "dry",
        f: "+- h 0 ly"
      },
      {
        n: "xC1",
        f: "+/ rx lx 2"
      },
      {
        n: "xC2",
        f: "+/ drx dlx 2"
      },
      {
        n: "yC1",
        f: "+/ ry ly 2"
      },
      {
        n: "yC2",
        f: "+/ y1 y2 2"
      },
      {
        n: "yC3",
        f: "+/ y3 y4 2"
      },
      {
        n: "yC4",
        f: "+/ dry dly 2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "lx",
              y: "ly"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "rx",
              y: "ry"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "rx6",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x8",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x8",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "rx5",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "rx4",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x8",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x8",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "rx3",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "drx",
              y: "dry"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "dlx",
              y: "dly"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  mathPlus: {
    avLst: [
      {
        n: "adj1",
        f: "val 23520"
      }
    ],
    gdLst: [
      {
        n: "a1",
        f: "pin 0 adj1 73490"
      },
      {
        n: "dx1",
        f: "*/ w 73490 200000"
      },
      {
        n: "dy1",
        f: "*/ h 73490 200000"
      },
      {
        n: "dx2",
        f: "*/ ss a1 200000"
      },
      {
        n: "x1",
        f: "+- hc 0 dx1"
      },
      {
        n: "x2",
        f: "+- hc 0 dx2"
      },
      {
        n: "x3",
        f: "+- hc dx2 0"
      },
      {
        n: "x4",
        f: "+- hc dx1 0"
      },
      {
        n: "y1",
        f: "+- vc 0 dy1"
      },
      {
        n: "y2",
        f: "+- vc 0 dx2"
      },
      {
        n: "y3",
        f: "+- vc dx2 0"
      },
      {
        n: "y4",
        f: "+- vc dy1 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y3"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  moon: {
    avLst: [
      {
        n: "adj",
        f: "val 50000"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 87500"
      },
      {
        n: "g0",
        f: "*/ ss a 100000"
      },
      {
        n: "g0w",
        f: "*/ g0 w ss"
      },
      {
        n: "g1",
        f: "+- ss 0 g0"
      },
      {
        n: "g2",
        f: "*/ g0 g0 g1"
      },
      {
        n: "g3",
        f: "*/ ss ss g1"
      },
      {
        n: "g4",
        f: "*/ g3 2 1"
      },
      {
        n: "g5",
        f: "+- g4 0 g2"
      },
      {
        n: "g6",
        f: "+- g5 0 g0"
      },
      {
        n: "g6w",
        f: "*/ g6 w ss"
      },
      {
        n: "g7",
        f: "*/ g5 1 2"
      },
      {
        n: "g8",
        f: "+- g7 0 g0"
      },
      {
        n: "dy1",
        f: "*/ g8 hd2 ss"
      },
      {
        n: "g10h",
        f: "+- vc 0 dy1"
      },
      {
        n: "g11h",
        f: "+- vc dy1 0"
      },
      {
        n: "g12",
        f: "*/ g0 9598 32768"
      },
      {
        n: "g12w",
        f: "*/ g12 w ss"
      },
      {
        n: "g13",
        f: "+- ss 0 g12"
      },
      {
        n: "q1",
        f: "*/ ss ss 1"
      },
      {
        n: "q2",
        f: "*/ g13 g13 1"
      },
      {
        n: "q3",
        f: "+- q1 0 q2"
      },
      {
        n: "q4",
        f: "sqrt q3"
      },
      {
        n: "dy4",
        f: "*/ q4 hd2 ss"
      },
      {
        n: "g15h",
        f: "+- vc 0 dy4"
      },
      {
        n: "g16h",
        f: "+- vc dy4 0"
      },
      {
        n: "g17w",
        f: "+- g6w 0 g0w"
      },
      {
        n: "g18w",
        f: "*/ g17w 1 2"
      },
      {
        n: "dx2p",
        f: "+- g0w g18w w"
      },
      {
        n: "dx2",
        f: "*/ dx2p -1 1"
      },
      {
        n: "dy2",
        f: "*/ hd2 -1 1"
      },
      {
        n: "stAng1",
        f: "at2 dx2 dy2"
      },
      {
        n: "enAngp1",
        f: "at2 dx2 hd2"
      },
      {
        n: "enAng1",
        f: "+- enAngp1 0 21600000"
      },
      {
        n: "swAng1",
        f: "+- enAng1 0 stAng1"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "w",
            hR: "hd2",
            stAng: "cd4",
            swAng: "cd2"
          },
          {
            type: "arcTo",
            wR: "g18w",
            hR: "dy1",
            stAng: "stAng1",
            swAng: "swAng1"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  nonIsoscelesTrapezoid: {
    avLst: [
      {
        n: "adj1",
        f: "val 25000"
      },
      {
        n: "adj2",
        f: "val 25000"
      }
    ],
    gdLst: [
      {
        n: "maxAdj",
        f: "*/ 50000 w ss"
      },
      {
        n: "a1",
        f: "pin 0 adj1 maxAdj"
      },
      {
        n: "a2",
        f: "pin 0 adj2 maxAdj"
      },
      {
        n: "x1",
        f: "*/ ss a1 200000"
      },
      {
        n: "x2",
        f: "*/ ss a1 100000"
      },
      {
        n: "dx3",
        f: "*/ ss a2 100000"
      },
      {
        n: "x3",
        f: "+- r 0 dx3"
      },
      {
        n: "x4",
        f: "+/ r x3 2"
      },
      {
        n: "il",
        f: "*/ wd3 a1 maxAdj"
      },
      {
        n: "adjm",
        f: "max a1 a2"
      },
      {
        n: "it",
        f: "*/ hd3 adjm maxAdj"
      },
      {
        n: "irt",
        f: "*/ wd3 a2 maxAdj"
      },
      {
        n: "ir",
        f: "+- r 0 irt"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  noSmoking: {
    avLst: [
      {
        n: "adj",
        f: "val 18750"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 50000"
      },
      {
        n: "dr",
        f: "*/ ss a 100000"
      },
      {
        n: "iwd2",
        f: "+- wd2 0 dr"
      },
      {
        n: "ihd2",
        f: "+- hd2 0 dr"
      },
      {
        n: "ang",
        f: "at2 w h"
      },
      {
        n: "ct",
        f: "cos ihd2 ang"
      },
      {
        n: "st",
        f: "sin iwd2 ang"
      },
      {
        n: "m",
        f: "mod ct st 0"
      },
      {
        n: "n",
        f: "*/ iwd2 ihd2 m"
      },
      {
        n: "drd2",
        f: "*/ dr 1 2"
      },
      {
        n: "dang",
        f: "at2 n drd2"
      },
      {
        n: "dang2",
        f: "*/ dang 2 1"
      },
      {
        n: "swAng",
        f: "+- -10800000 dang2 0"
      },
      {
        n: "t3",
        f: "at2 w h"
      },
      {
        n: "stAng1",
        f: "+- t3 0 dang"
      },
      {
        n: "stAng2",
        f: "+- stAng1 0 cd2"
      },
      {
        n: "ct1",
        f: "cos ihd2 stAng1"
      },
      {
        n: "st1",
        f: "sin iwd2 stAng1"
      },
      {
        n: "m1",
        f: "mod ct1 st1 0"
      },
      {
        n: "n1",
        f: "*/ iwd2 ihd2 m1"
      },
      {
        n: "dx1",
        f: "cos n1 stAng1"
      },
      {
        n: "dy1",
        f: "sin n1 stAng1"
      },
      {
        n: "x1",
        f: "+- hc dx1 0"
      },
      {
        n: "y1",
        f: "+- vc dy1 0"
      },
      {
        n: "x2",
        f: "+- hc 0 dx1"
      },
      {
        n: "y2",
        f: "+- vc 0 dy1"
      },
      {
        n: "idx",
        f: "cos wd2 2700000"
      },
      {
        n: "idy",
        f: "sin hd2 2700000"
      },
      {
        n: "il",
        f: "+- hc 0 idx"
      },
      {
        n: "ir",
        f: "+- hc idx 0"
      },
      {
        n: "it",
        f: "+- vc 0 idy"
      },
      {
        n: "ib",
        f: "+- vc idy 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "iwd2",
            hR: "ihd2",
            stAng: "stAng1",
            swAng: "swAng"
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "arcTo",
            wR: "iwd2",
            hR: "ihd2",
            stAng: "stAng2",
            swAng: "swAng"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  notchedRightArrow: {
    avLst: [
      {
        n: "adj1",
        f: "val 50000"
      },
      {
        n: "adj2",
        f: "val 50000"
      }
    ],
    gdLst: [
      {
        n: "maxAdj2",
        f: "*/ 100000 w ss"
      },
      {
        n: "a1",
        f: "pin 0 adj1 100000"
      },
      {
        n: "a2",
        f: "pin 0 adj2 maxAdj2"
      },
      {
        n: "dx2",
        f: "*/ ss a2 100000"
      },
      {
        n: "x2",
        f: "+- r 0 dx2"
      },
      {
        n: "dy1",
        f: "*/ h a1 200000"
      },
      {
        n: "y1",
        f: "+- vc 0 dy1"
      },
      {
        n: "y2",
        f: "+- vc dy1 0"
      },
      {
        n: "x1",
        f: "*/ dy1 dx2 hd2"
      },
      {
        n: "x3",
        f: "+- r 0 x1"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "vc"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  octagon: {
    avLst: [
      {
        n: "adj",
        f: "val 29289"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 50000"
      },
      {
        n: "x1",
        f: "*/ ss a 100000"
      },
      {
        n: "x2",
        f: "+- r 0 x1"
      },
      {
        n: "y2",
        f: "+- b 0 x1"
      },
      {
        n: "il",
        f: "*/ x1 1 2"
      },
      {
        n: "ir",
        f: "+- r 0 il"
      },
      {
        n: "ib",
        f: "+- b 0 il"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "x1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "x1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "y2"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  parallelogram: {
    avLst: [
      {
        n: "adj",
        f: "val 25000"
      }
    ],
    gdLst: [
      {
        n: "maxAdj",
        f: "*/ 100000 w ss"
      },
      {
        n: "a",
        f: "pin 0 adj maxAdj"
      },
      {
        n: "x1",
        f: "*/ ss a 200000"
      },
      {
        n: "x2",
        f: "*/ ss a 100000"
      },
      {
        n: "x6",
        f: "+- r 0 x1"
      },
      {
        n: "x5",
        f: "+- r 0 x2"
      },
      {
        n: "x3",
        f: "*/ x5 1 2"
      },
      {
        n: "x4",
        f: "+- r 0 x3"
      },
      {
        n: "il",
        f: "*/ wd2 a maxAdj"
      },
      {
        n: "q1",
        f: "*/ 5 a maxAdj"
      },
      {
        n: "q2",
        f: "+/ 1 q1 12"
      },
      {
        n: "il",
        f: "*/ q2 w 1"
      },
      {
        n: "it",
        f: "*/ q2 h 1"
      },
      {
        n: "ir",
        f: "+- r 0 il"
      },
      {
        n: "ib",
        f: "+- b 0 it"
      },
      {
        n: "q3",
        f: "*/ h hc x2"
      },
      {
        n: "y1",
        f: "pin 0 q3 h"
      },
      {
        n: "y2",
        f: "+- b 0 y1"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  pentagon: {
    avLst: [
      {
        n: "hf",
        f: "val 105146"
      },
      {
        n: "vf",
        f: "val 110557"
      }
    ],
    gdLst: [
      {
        n: "swd2",
        f: "*/ wd2 hf 100000"
      },
      {
        n: "shd2",
        f: "*/ hd2 vf 100000"
      },
      {
        n: "svc",
        f: "*/ vc  vf 100000"
      },
      {
        n: "dx1",
        f: "cos swd2 1080000"
      },
      {
        n: "dx2",
        f: "cos swd2 18360000"
      },
      {
        n: "dy1",
        f: "sin shd2 1080000"
      },
      {
        n: "dy2",
        f: "sin shd2 18360000"
      },
      {
        n: "x1",
        f: "+- hc 0 dx1"
      },
      {
        n: "x2",
        f: "+- hc 0 dx2"
      },
      {
        n: "x3",
        f: "+- hc dx2 0"
      },
      {
        n: "x4",
        f: "+- hc dx1 0"
      },
      {
        n: "y1",
        f: "+- svc 0 dy1"
      },
      {
        n: "y2",
        f: "+- svc 0 dy2"
      },
      {
        n: "it",
        f: "*/ y1 dx2 dx1"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  pie: {
    avLst: [
      {
        n: "adj1",
        f: "val 0"
      },
      {
        n: "adj2",
        f: "val 16200000"
      }
    ],
    gdLst: [
      {
        n: "stAng",
        f: "pin 0 adj1 21599999"
      },
      {
        n: "enAng",
        f: "pin 0 adj2 21599999"
      },
      {
        n: "sw1",
        f: "+- enAng 0 stAng"
      },
      {
        n: "sw2",
        f: "+- sw1 21600000 0"
      },
      {
        n: "swAng",
        f: "?: sw1 sw1 sw2"
      },
      {
        n: "wt1",
        f: "sin wd2 stAng"
      },
      {
        n: "ht1",
        f: "cos hd2 stAng"
      },
      {
        n: "dx1",
        f: "cat2 wd2 ht1 wt1"
      },
      {
        n: "dy1",
        f: "sat2 hd2 ht1 wt1"
      },
      {
        n: "x1",
        f: "+- hc dx1 0"
      },
      {
        n: "y1",
        f: "+- vc dy1 0"
      },
      {
        n: "wt2",
        f: "sin wd2 enAng"
      },
      {
        n: "ht2",
        f: "cos hd2 enAng"
      },
      {
        n: "dx2",
        f: "cat2 wd2 ht2 wt2"
      },
      {
        n: "dy2",
        f: "sat2 hd2 ht2 wt2"
      },
      {
        n: "x2",
        f: "+- hc dx2 0"
      },
      {
        n: "y2",
        f: "+- vc dy2 0"
      },
      {
        n: "idx",
        f: "cos wd2 2700000"
      },
      {
        n: "idy",
        f: "sin hd2 2700000"
      },
      {
        n: "il",
        f: "+- hc 0 idx"
      },
      {
        n: "ir",
        f: "+- hc idx 0"
      },
      {
        n: "it",
        f: "+- vc 0 idy"
      },
      {
        n: "ib",
        f: "+- vc idy 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "stAng",
            swAng: "swAng"
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "vc"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  pieWedge: {
    gdLst: [
      {
        n: "g1",
        f: "cos w 13500000"
      },
      {
        n: "g2",
        f: "sin h 13500000"
      },
      {
        n: "x1",
        f: "+- r g1 0"
      },
      {
        n: "y1",
        f: "+- b g2 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "w",
            hR: "h",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  plaque: {
    avLst: [
      {
        n: "adj",
        f: "val 16667"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 50000"
      },
      {
        n: "x1",
        f: "*/ ss a 100000"
      },
      {
        n: "x2",
        f: "+- r 0 x1"
      },
      {
        n: "y2",
        f: "+- b 0 x1"
      },
      {
        n: "il",
        f: "*/ x1 70711 100000"
      },
      {
        n: "ir",
        f: "+- r 0 il"
      },
      {
        n: "ib",
        f: "+- b 0 il"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "x1"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "cd4",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "cd2",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y2"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "3cd4",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "0",
            swAng: "-5400000"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  plaqueTabs: {
    gdLst: [
      {
        n: "md",
        f: "mod w h 0"
      },
      {
        n: "dx",
        f: "*/ 1 md 20"
      },
      {
        n: "y1",
        f: "+- 0 b dx"
      },
      {
        n: "x1",
        f: "+- 0 r dx"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "dx",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "dx",
            hR: "dx",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "dx",
            hR: "dx",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "dx"
            }
          },
          {
            type: "arcTo",
            wR: "dx",
            hR: "dx",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "dx",
            hR: "dx",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  plus: {
    avLst: [
      {
        n: "adj",
        f: "val 25000"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 50000"
      },
      {
        n: "x1",
        f: "*/ ss a 100000"
      },
      {
        n: "x2",
        f: "+- r 0 x1"
      },
      {
        n: "y2",
        f: "+- b 0 x1"
      },
      {
        n: "d",
        f: "+- w 0 h"
      },
      {
        n: "il",
        f: "?: d l x1"
      },
      {
        n: "ir",
        f: "?: d r x2"
      },
      {
        n: "it",
        f: "?: d x1 t"
      },
      {
        n: "ib",
        f: "?: d y2 b"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "x1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "x1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "x1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "x1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "y2"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  quadArrow: {
    avLst: [
      {
        n: "adj1",
        f: "val 22500"
      },
      {
        n: "adj2",
        f: "val 22500"
      },
      {
        n: "adj3",
        f: "val 22500"
      }
    ],
    gdLst: [
      {
        n: "a2",
        f: "pin 0 adj2 50000"
      },
      {
        n: "maxAdj1",
        f: "*/ a2 2 1"
      },
      {
        n: "a1",
        f: "pin 0 adj1 maxAdj1"
      },
      {
        n: "q1",
        f: "+- 100000 0 maxAdj1"
      },
      {
        n: "maxAdj3",
        f: "*/ q1 1 2"
      },
      {
        n: "a3",
        f: "pin 0 adj3 maxAdj3"
      },
      {
        n: "x1",
        f: "*/ ss a3 100000"
      },
      {
        n: "dx2",
        f: "*/ ss a2 100000"
      },
      {
        n: "x2",
        f: "+- hc 0 dx2"
      },
      {
        n: "x5",
        f: "+- hc dx2 0"
      },
      {
        n: "dx3",
        f: "*/ ss a1 200000"
      },
      {
        n: "x3",
        f: "+- hc 0 dx3"
      },
      {
        n: "x4",
        f: "+- hc dx3 0"
      },
      {
        n: "x6",
        f: "+- r 0 x1"
      },
      {
        n: "y2",
        f: "+- vc 0 dx2"
      },
      {
        n: "y5",
        f: "+- vc dx2 0"
      },
      {
        n: "y3",
        f: "+- vc 0 dx3"
      },
      {
        n: "y4",
        f: "+- vc dx3 0"
      },
      {
        n: "y6",
        f: "+- b 0 x1"
      },
      {
        n: "il",
        f: "*/ dx3 x1 dx2"
      },
      {
        n: "ir",
        f: "+- r 0 il"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "x1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "x1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "x1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "x1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "y5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y5"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  quadArrowCallout: {
    avLst: [
      {
        n: "adj1",
        f: "val 18515"
      },
      {
        n: "adj2",
        f: "val 18515"
      },
      {
        n: "adj3",
        f: "val 18515"
      },
      {
        n: "adj4",
        f: "val 48123"
      }
    ],
    gdLst: [
      {
        n: "a2",
        f: "pin 0 adj2 50000"
      },
      {
        n: "maxAdj1",
        f: "*/ a2 2 1"
      },
      {
        n: "a1",
        f: "pin 0 adj1 maxAdj1"
      },
      {
        n: "maxAdj3",
        f: "+- 50000 0 a2"
      },
      {
        n: "a3",
        f: "pin 0 adj3 maxAdj3"
      },
      {
        n: "q2",
        f: "*/ a3 2 1"
      },
      {
        n: "maxAdj4",
        f: "+- 100000 0 q2"
      },
      {
        n: "a4",
        f: "pin a1 adj4 maxAdj4"
      },
      {
        n: "dx2",
        f: "*/ ss a2 100000"
      },
      {
        n: "dx3",
        f: "*/ ss a1 200000"
      },
      {
        n: "ah",
        f: "*/ ss a3 100000"
      },
      {
        n: "dx1",
        f: "*/ w a4 200000"
      },
      {
        n: "dy1",
        f: "*/ h a4 200000"
      },
      {
        n: "x8",
        f: "+- r 0 ah"
      },
      {
        n: "x2",
        f: "+- hc 0 dx1"
      },
      {
        n: "x7",
        f: "+- hc dx1 0"
      },
      {
        n: "x3",
        f: "+- hc 0 dx2"
      },
      {
        n: "x6",
        f: "+- hc dx2 0"
      },
      {
        n: "x4",
        f: "+- hc 0 dx3"
      },
      {
        n: "x5",
        f: "+- hc dx3 0"
      },
      {
        n: "y8",
        f: "+- b 0 ah"
      },
      {
        n: "y2",
        f: "+- vc 0 dy1"
      },
      {
        n: "y7",
        f: "+- vc dy1 0"
      },
      {
        n: "y3",
        f: "+- vc 0 dx2"
      },
      {
        n: "y6",
        f: "+- vc dx2 0"
      },
      {
        n: "y4",
        f: "+- vc 0 dx3"
      },
      {
        n: "y5",
        f: "+- vc dx3 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "ah",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "ah",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "ah"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "ah"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "ah"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "ah"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x7",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x7",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x8",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x8",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x8",
              y: "y6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x8",
              y: "y5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x7",
              y: "y5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x7",
              y: "y7"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y7"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y8"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "y8"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y8"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y8"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y7"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y7"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "ah",
              y: "y5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "ah",
              y: "y6"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  rect: {
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  ribbon: {
    avLst: [
      {
        n: "adj1",
        f: "val 16667"
      },
      {
        n: "adj2",
        f: "val 50000"
      }
    ],
    gdLst: [
      {
        n: "a1",
        f: "pin 0 adj1 33333"
      },
      {
        n: "a2",
        f: "pin 25000 adj2 75000"
      },
      {
        n: "x10",
        f: "+- r 0 wd8"
      },
      {
        n: "dx2",
        f: "*/ w a2 200000"
      },
      {
        n: "x2",
        f: "+- hc 0 dx2"
      },
      {
        n: "x9",
        f: "+- hc dx2 0"
      },
      {
        n: "x3",
        f: "+- x2 wd32 0"
      },
      {
        n: "x8",
        f: "+- x9 0 wd32"
      },
      {
        n: "x5",
        f: "+- x2 wd8 0"
      },
      {
        n: "x6",
        f: "+- x9 0 wd8"
      },
      {
        n: "x4",
        f: "+- x5 0 wd32"
      },
      {
        n: "x7",
        f: "+- x6 wd32 0"
      },
      {
        n: "y1",
        f: "*/ h a1 200000"
      },
      {
        n: "y2",
        f: "*/ h a1 100000"
      },
      {
        n: "y4",
        f: "+- b 0 y2"
      },
      {
        n: "y3",
        f: "*/ y4 1 2"
      },
      {
        n: "hR",
        f: "*/ h a1 400000"
      },
      {
        n: "y5",
        f: "+- b 0 hR"
      },
      {
        n: "y6",
        f: "+- y2 0 hR"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "3cd4",
            swAng: "cd2"
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "3cd4",
            swAng: "-10800000"
          },
          {
            type: "lnTo",
            pt: {
              x: "x8",
              y: "y2"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "cd4",
            swAng: "-10800000"
          },
          {
            type: "lnTo",
            pt: {
              x: "x7",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "cd4",
            swAng: "cd2"
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x10",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x9",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x9",
              y: "y5"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "wd8",
              y: "y3"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x5",
              y: "hR"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "3cd4",
            swAng: "-10800000"
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y2"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "x6",
              y: "hR"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "cd2",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "x8",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "3cd4",
            swAng: "cd2"
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "y2"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "darkenLess",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "3cd4",
            swAng: "cd2"
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "3cd4",
            swAng: "-10800000"
          },
          {
            type: "lnTo",
            pt: {
              x: "x8",
              y: "y2"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "cd4",
            swAng: "-10800000"
          },
          {
            type: "lnTo",
            pt: {
              x: "x7",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "cd4",
            swAng: "cd2"
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x10",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x9",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x9",
              y: "y5"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "wd8",
              y: "y3"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "x5",
              y: "hR"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y2"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "x6",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "hR"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "x2",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y6"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "x9",
              y: "y6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x9",
              y: "y4"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  ribbon2: {
    avLst: [
      {
        n: "adj1",
        f: "val 16667"
      },
      {
        n: "adj2",
        f: "val 50000"
      }
    ],
    gdLst: [
      {
        n: "a1",
        f: "pin 0 adj1 33333"
      },
      {
        n: "a2",
        f: "pin 25000 adj2 75000"
      },
      {
        n: "x10",
        f: "+- r 0 wd8"
      },
      {
        n: "dx2",
        f: "*/ w a2 200000"
      },
      {
        n: "x2",
        f: "+- hc 0 dx2"
      },
      {
        n: "x9",
        f: "+- hc dx2 0"
      },
      {
        n: "x3",
        f: "+- x2 wd32 0"
      },
      {
        n: "x8",
        f: "+- x9 0 wd32"
      },
      {
        n: "x5",
        f: "+- x2 wd8 0"
      },
      {
        n: "x6",
        f: "+- x9 0 wd8"
      },
      {
        n: "x4",
        f: "+- x5 0 wd32"
      },
      {
        n: "x7",
        f: "+- x6 wd32 0"
      },
      {
        n: "dy1",
        f: "*/ h a1 200000"
      },
      {
        n: "y1",
        f: "+- b 0 dy1"
      },
      {
        n: "dy2",
        f: "*/ h a1 100000"
      },
      {
        n: "y2",
        f: "+- b 0 dy2"
      },
      {
        n: "y4",
        f: "+- t dy2 0"
      },
      {
        n: "y3",
        f: "+/ y4 b 2"
      },
      {
        n: "hR",
        f: "*/ h a1 400000"
      },
      {
        n: "y6",
        f: "+- b 0 hR"
      },
      {
        n: "y7",
        f: "+- y1 0 hR"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "cd4",
            swAng: "-10800000"
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "cd4",
            swAng: "cd2"
          },
          {
            type: "lnTo",
            pt: {
              x: "x8",
              y: "y2"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "3cd4",
            swAng: "cd2"
          },
          {
            type: "lnTo",
            pt: {
              x: "x7",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "3cd4",
            swAng: "-10800000"
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x10",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x9",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x9",
              y: "hR"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "0",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "3cd4",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "wd8",
              y: "y3"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x5",
              y: "y6"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "0",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "cd4",
            swAng: "cd2"
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y2"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "x6",
              y: "y6"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x8",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "cd4",
            swAng: "-10800000"
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "y2"
            }
          },
          {
            type: "close"
          }
        ],
        fill: "darkenLess",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "wd8",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "hR"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x8",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x9",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x9",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x10",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x7",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "cd4",
            swAng: "cd2"
          },
          {
            type: "lnTo",
            pt: {
              x: "x8",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "cd4",
            swAng: "-10800000"
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y2"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "3cd4",
            swAng: "-10800000"
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wd32",
            hR: "hR",
            stAng: "3cd4",
            swAng: "cd2"
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "x5",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y6"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "x6",
              y: "y6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "y2"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "x2",
              y: "y7"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y4"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "x9",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x9",
              y: "y7"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  rightArrow: {
    avLst: [
      {
        n: "adj1",
        f: "val 50000"
      },
      {
        n: "adj2",
        f: "val 50000"
      }
    ],
    gdLst: [
      {
        n: "maxAdj2",
        f: "*/ 100000 w ss"
      },
      {
        n: "a1",
        f: "pin 0 adj1 100000"
      },
      {
        n: "a2",
        f: "pin 0 adj2 maxAdj2"
      },
      {
        n: "dx1",
        f: "*/ ss a2 100000"
      },
      {
        n: "x1",
        f: "+- r 0 dx1"
      },
      {
        n: "dy1",
        f: "*/ h a1 200000"
      },
      {
        n: "y1",
        f: "+- vc 0 dy1"
      },
      {
        n: "y2",
        f: "+- vc dy1 0"
      },
      {
        n: "dx2",
        f: "*/ y1 dx1 hd2"
      },
      {
        n: "x2",
        f: "+- x1 dx2 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "y2"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  rightArrowCallout: {
    avLst: [
      {
        n: "adj1",
        f: "val 25000"
      },
      {
        n: "adj2",
        f: "val 25000"
      },
      {
        n: "adj3",
        f: "val 25000"
      },
      {
        n: "adj4",
        f: "val 64977"
      }
    ],
    gdLst: [
      {
        n: "maxAdj2",
        f: "*/ 50000 h ss"
      },
      {
        n: "a2",
        f: "pin 0 adj2 maxAdj2"
      },
      {
        n: "maxAdj1",
        f: "*/ a2 2 1"
      },
      {
        n: "a1",
        f: "pin 0 adj1 maxAdj1"
      },
      {
        n: "maxAdj3",
        f: "*/ 100000 w ss"
      },
      {
        n: "a3",
        f: "pin 0 adj3 maxAdj3"
      },
      {
        n: "q2",
        f: "*/ a3 ss w"
      },
      {
        n: "maxAdj4",
        f: "+- 100000 0 q2"
      },
      {
        n: "a4",
        f: "pin 0 adj4 maxAdj4"
      },
      {
        n: "dy1",
        f: "*/ ss a2 100000"
      },
      {
        n: "dy2",
        f: "*/ ss a1 200000"
      },
      {
        n: "y1",
        f: "+- vc 0 dy1"
      },
      {
        n: "y2",
        f: "+- vc 0 dy2"
      },
      {
        n: "y3",
        f: "+- vc dy2 0"
      },
      {
        n: "y4",
        f: "+- vc dy1 0"
      },
      {
        n: "dx3",
        f: "*/ ss a3 100000"
      },
      {
        n: "x3",
        f: "+- r 0 dx3"
      },
      {
        n: "x2",
        f: "*/ w a4 100000"
      },
      {
        n: "x1",
        f: "*/ x2 1 2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  rightBrace: {
    avLst: [
      {
        n: "adj1",
        f: "val 8333"
      },
      {
        n: "adj2",
        f: "val 50000"
      }
    ],
    gdLst: [
      {
        n: "a2",
        f: "pin 0 adj2 100000"
      },
      {
        n: "q1",
        f: "+- 100000 0 a2"
      },
      {
        n: "q2",
        f: "min q1 a2"
      },
      {
        n: "q3",
        f: "*/ q2 1 2"
      },
      {
        n: "maxAdj1",
        f: "*/ q3 h ss"
      },
      {
        n: "a1",
        f: "pin 0 adj1 maxAdj1"
      },
      {
        n: "y1",
        f: "*/ ss a1 100000"
      },
      {
        n: "y3",
        f: "*/ h a2 100000"
      },
      {
        n: "y2",
        f: "+- y3 0 y1"
      },
      {
        n: "y4",
        f: "+- b 0 y1"
      },
      {
        n: "dx1",
        f: "cos wd2 2700000"
      },
      {
        n: "dy1",
        f: "sin y1 2700000"
      },
      {
        n: "ir",
        f: "+- l dx1 0"
      },
      {
        n: "it",
        f: "+- y1 0 dy1"
      },
      {
        n: "ib",
        f: "+- b dy1 y1"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "y1",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "y2"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "y1",
            stAng: "cd2",
            swAng: "-5400000"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "y1",
            stAng: "3cd4",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "y4"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "y1",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "y1",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "y2"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "y1",
            stAng: "cd2",
            swAng: "-5400000"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "y1",
            stAng: "3cd4",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "y4"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "y1",
            stAng: "0",
            swAng: "cd4"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  rightBracket: {
    avLst: [
      {
        n: "adj",
        f: "val 8333"
      }
    ],
    gdLst: [
      {
        n: "maxAdj",
        f: "*/ 50000 h ss"
      },
      {
        n: "a",
        f: "pin 0 adj maxAdj"
      },
      {
        n: "y1",
        f: "*/ ss a 100000"
      },
      {
        n: "y2",
        f: "+- b 0 y1"
      },
      {
        n: "dx1",
        f: "cos w 2700000"
      },
      {
        n: "dy1",
        f: "sin y1 2700000"
      },
      {
        n: "ir",
        f: "+- l dx1 0"
      },
      {
        n: "it",
        f: "+- y1 0 dy1"
      },
      {
        n: "ib",
        f: "+- b dy1 y1"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "w",
            hR: "y1",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y2"
            }
          },
          {
            type: "arcTo",
            wR: "w",
            hR: "y1",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "w",
            hR: "y1",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y2"
            }
          },
          {
            type: "arcTo",
            wR: "w",
            hR: "y1",
            stAng: "0",
            swAng: "cd4"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  round1Rect: {
    avLst: [
      {
        n: "adj",
        f: "val 16667"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 50000"
      },
      {
        n: "dx1",
        f: "*/ ss a 100000"
      },
      {
        n: "x1",
        f: "+- r 0 dx1"
      },
      {
        n: "idx",
        f: "*/ dx1 29289 100000"
      },
      {
        n: "ir",
        f: "+- r 0 idx"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "dx1",
            hR: "dx1",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  round2DiagRect: {
    avLst: [
      {
        n: "adj1",
        f: "val 16667"
      },
      {
        n: "adj2",
        f: "val 0"
      }
    ],
    gdLst: [
      {
        n: "a1",
        f: "pin 0 adj1 50000"
      },
      {
        n: "a2",
        f: "pin 0 adj2 50000"
      },
      {
        n: "x1",
        f: "*/ ss a1 100000"
      },
      {
        n: "y1",
        f: "+- b 0 x1"
      },
      {
        n: "a",
        f: "*/ ss a2 100000"
      },
      {
        n: "x2",
        f: "+- r 0 a"
      },
      {
        n: "y2",
        f: "+- b 0 a"
      },
      {
        n: "dx1",
        f: "*/ x1 29289 100000"
      },
      {
        n: "dx2",
        f: "*/ a 29289 100000"
      },
      {
        n: "d",
        f: "+- dx1 0 dx2"
      },
      {
        n: "dx",
        f: "?: d dx1 dx2"
      },
      {
        n: "ir",
        f: "+- r 0 dx"
      },
      {
        n: "ib",
        f: "+- b 0 dx"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "a",
            hR: "a",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "a",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "a",
            hR: "a",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "x1"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  round2SameRect: {
    avLst: [
      {
        n: "adj1",
        f: "val 16667"
      },
      {
        n: "adj2",
        f: "val 0"
      }
    ],
    gdLst: [
      {
        n: "a1",
        f: "pin 0 adj1 50000"
      },
      {
        n: "a2",
        f: "pin 0 adj2 50000"
      },
      {
        n: "tx1",
        f: "*/ ss a1 100000"
      },
      {
        n: "tx2",
        f: "+- r 0 tx1"
      },
      {
        n: "bx1",
        f: "*/ ss a2 100000"
      },
      {
        n: "bx2",
        f: "+- r 0 bx1"
      },
      {
        n: "by1",
        f: "+- b 0 bx1"
      },
      {
        n: "d",
        f: "+- tx1 0 bx1"
      },
      {
        n: "tdx",
        f: "*/ tx1 29289 100000"
      },
      {
        n: "bdx",
        f: "*/ bx1 29289 100000"
      },
      {
        n: "il",
        f: "?: d tdx bdx"
      },
      {
        n: "ir",
        f: "+- r 0 il"
      },
      {
        n: "ib",
        f: "+- b 0 bdx"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "tx1",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "tx2",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "tx1",
            hR: "tx1",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "by1"
            }
          },
          {
            type: "arcTo",
            wR: "bx1",
            hR: "bx1",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "bx1",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "bx1",
            hR: "bx1",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "tx1"
            }
          },
          {
            type: "arcTo",
            wR: "tx1",
            hR: "tx1",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  roundRect: {
    avLst: [
      {
        n: "adj",
        f: "val 16667"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 50000"
      },
      {
        n: "x1",
        f: "*/ ss a 100000"
      },
      {
        n: "x2",
        f: "+- r 0 x1"
      },
      {
        n: "y2",
        f: "+- b 0 x1"
      },
      {
        n: "il",
        f: "*/ x1 29289 100000"
      },
      {
        n: "ir",
        f: "+- r 0 il"
      },
      {
        n: "ib",
        f: "+- b 0 il"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "x1"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y2"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  rtTriangle: {
    gdLst: [
      {
        n: "it",
        f: "*/ h 7 12"
      },
      {
        n: "ir",
        f: "*/ w 7 12"
      },
      {
        n: "ib",
        f: "*/ h 11 12"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  smileyFace: {
    avLst: [
      {
        n: "adj",
        f: "val 4653"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin -4653 adj 4653"
      },
      {
        n: "x1",
        f: "*/ w 4969 21699"
      },
      {
        n: "x2",
        f: "*/ w 6215 21600"
      },
      {
        n: "x3",
        f: "*/ w 13135 21600"
      },
      {
        n: "x4",
        f: "*/ w 16640 21600"
      },
      {
        n: "y1",
        f: "*/ h 7570 21600"
      },
      {
        n: "y3",
        f: "*/ h 16515 21600"
      },
      {
        n: "dy2",
        f: "*/ h a 100000"
      },
      {
        n: "y2",
        f: "+- y3 0 dy2"
      },
      {
        n: "y4",
        f: "+- y3 dy2 0"
      },
      {
        n: "dy3",
        f: "*/ h a 50000"
      },
      {
        n: "y5",
        f: "+- y4 dy3 0"
      },
      {
        n: "idx",
        f: "cos wd2 2700000"
      },
      {
        n: "idy",
        f: "sin hd2 2700000"
      },
      {
        n: "il",
        f: "+- hc 0 idx"
      },
      {
        n: "ir",
        f: "+- hc idx 0"
      },
      {
        n: "it",
        f: "+- vc 0 idy"
      },
      {
        n: "ib",
        f: "+- vc idy 0"
      },
      {
        n: "wR",
        f: "*/ w 1125 21600"
      },
      {
        n: "hR",
        f: "*/ h 1125 21600"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "cd2",
            swAng: "21600000"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x2",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wR",
            hR: "hR",
            stAng: "cd2",
            swAng: "21600000"
          },
          {
            type: "moveTo",
            pt: {
              x: "x3",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wR",
            hR: "hR",
            stAng: "cd2",
            swAng: "21600000"
          }
        ],
        fill: "darkenLess",
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "hc",
                y: "y5"
              },
              {
                x: "x4",
                y: "y2"
              }
            ]
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "cd2",
            swAng: "21600000"
          },
          {
            type: "close"
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  snip1Rect: {
    avLst: [
      {
        n: "adj",
        f: "val 16667"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 50000"
      },
      {
        n: "dx1",
        f: "*/ ss a 100000"
      },
      {
        n: "x1",
        f: "+- r 0 dx1"
      },
      {
        n: "it",
        f: "*/ dx1 1 2"
      },
      {
        n: "ir",
        f: "+/ x1 r 2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "dx1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  snip2DiagRect: {
    avLst: [
      {
        n: "adj1",
        f: "val 0"
      },
      {
        n: "adj2",
        f: "val 16667"
      }
    ],
    gdLst: [
      {
        n: "a1",
        f: "pin 0 adj1 50000"
      },
      {
        n: "a2",
        f: "pin 0 adj2 50000"
      },
      {
        n: "lx1",
        f: "*/ ss a1 100000"
      },
      {
        n: "lx2",
        f: "+- r 0 lx1"
      },
      {
        n: "ly1",
        f: "+- b 0 lx1"
      },
      {
        n: "rx1",
        f: "*/ ss a2 100000"
      },
      {
        n: "rx2",
        f: "+- r 0 rx1"
      },
      {
        n: "ry1",
        f: "+- b 0 rx1"
      },
      {
        n: "d",
        f: "+- lx1 0 rx1"
      },
      {
        n: "dx",
        f: "?: d lx1 rx1"
      },
      {
        n: "il",
        f: "*/ dx 1 2"
      },
      {
        n: "ir",
        f: "+- r 0 il"
      },
      {
        n: "ib",
        f: "+- b 0 il"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "lx1",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "rx2",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "rx1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "ly1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "lx2",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "rx1",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "ry1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "lx1"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  snip2SameRect: {
    avLst: [
      {
        n: "adj1",
        f: "val 16667"
      },
      {
        n: "adj2",
        f: "val 0"
      }
    ],
    gdLst: [
      {
        n: "a1",
        f: "pin 0 adj1 50000"
      },
      {
        n: "a2",
        f: "pin 0 adj2 50000"
      },
      {
        n: "tx1",
        f: "*/ ss a1 100000"
      },
      {
        n: "tx2",
        f: "+- r 0 tx1"
      },
      {
        n: "bx1",
        f: "*/ ss a2 100000"
      },
      {
        n: "bx2",
        f: "+- r 0 bx1"
      },
      {
        n: "by1",
        f: "+- b 0 bx1"
      },
      {
        n: "d",
        f: "+- tx1 0 bx1"
      },
      {
        n: "dx",
        f: "?: d tx1 bx1"
      },
      {
        n: "il",
        f: "*/ dx 1 2"
      },
      {
        n: "ir",
        f: "+- r 0 il"
      },
      {
        n: "it",
        f: "*/ tx1 1 2"
      },
      {
        n: "ib",
        f: "+/ by1 b 2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "tx1",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "tx2",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "tx1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "by1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "bx2",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "bx1",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "by1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "tx1"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  snipRoundRect: {
    avLst: [
      {
        n: "adj1",
        f: "val 16667"
      },
      {
        n: "adj2",
        f: "val 16667"
      }
    ],
    gdLst: [
      {
        n: "a1",
        f: "pin 0 adj1 50000"
      },
      {
        n: "a2",
        f: "pin 0 adj2 50000"
      },
      {
        n: "x1",
        f: "*/ ss a1 100000"
      },
      {
        n: "dx2",
        f: "*/ ss a2 100000"
      },
      {
        n: "x2",
        f: "+- r 0 dx2"
      },
      {
        n: "il",
        f: "*/ x1 29289 100000"
      },
      {
        n: "ir",
        f: "+/ x2 r 2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "dx2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "x1"
            }
          },
          {
            type: "arcTo",
            wR: "x1",
            hR: "x1",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  squareTabs: {
    gdLst: [
      {
        n: "md",
        f: "mod w h 0"
      },
      {
        n: "dx",
        f: "*/ 1 md 20"
      },
      {
        n: "y1",
        f: "+- 0 b dx"
      },
      {
        n: "x1",
        f: "+- 0 r dx"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "dx",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "dx",
              y: "dx"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "dx"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "dx",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "dx",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "dx"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "dx"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  star10: {
    avLst: [
      {
        n: "adj",
        f: "val 42533"
      },
      {
        n: "hf",
        f: "val 105146"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 50000"
      },
      {
        n: "swd2",
        f: "*/ wd2 hf 100000"
      },
      {
        n: "dx1",
        f: "*/ swd2 95106 100000"
      },
      {
        n: "dx2",
        f: "*/ swd2 58779 100000"
      },
      {
        n: "x1",
        f: "+- hc 0 dx1"
      },
      {
        n: "x2",
        f: "+- hc 0 dx2"
      },
      {
        n: "x3",
        f: "+- hc dx2 0"
      },
      {
        n: "x4",
        f: "+- hc dx1 0"
      },
      {
        n: "dy1",
        f: "*/ hd2 80902 100000"
      },
      {
        n: "dy2",
        f: "*/ hd2 30902 100000"
      },
      {
        n: "y1",
        f: "+- vc 0 dy1"
      },
      {
        n: "y2",
        f: "+- vc 0 dy2"
      },
      {
        n: "y3",
        f: "+- vc dy2 0"
      },
      {
        n: "y4",
        f: "+- vc dy1 0"
      },
      {
        n: "iwd2",
        f: "*/ swd2 a 50000"
      },
      {
        n: "ihd2",
        f: "*/ hd2 a 50000"
      },
      {
        n: "sdx1",
        f: "*/ iwd2 80902 100000"
      },
      {
        n: "sdx2",
        f: "*/ iwd2 30902 100000"
      },
      {
        n: "sdy1",
        f: "*/ ihd2 95106 100000"
      },
      {
        n: "sdy2",
        f: "*/ ihd2 58779 100000"
      },
      {
        n: "sx1",
        f: "+- hc 0 iwd2"
      },
      {
        n: "sx2",
        f: "+- hc 0 sdx1"
      },
      {
        n: "sx3",
        f: "+- hc 0 sdx2"
      },
      {
        n: "sx4",
        f: "+- hc sdx2 0"
      },
      {
        n: "sx5",
        f: "+- hc sdx1 0"
      },
      {
        n: "sx6",
        f: "+- hc iwd2 0"
      },
      {
        n: "sy1",
        f: "+- vc 0 sdy1"
      },
      {
        n: "sy2",
        f: "+- vc 0 sdy2"
      },
      {
        n: "sy3",
        f: "+- vc sdy2 0"
      },
      {
        n: "sy4",
        f: "+- vc sdy1 0"
      },
      {
        n: "yAdj",
        f: "+- vc 0 ihd2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx2",
              y: "sy2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx3",
              y: "sy1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx4",
              y: "sy1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx5",
              y: "sy2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx6",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx5",
              y: "sy3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx4",
              y: "sy4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx3",
              y: "sy4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx2",
              y: "sy3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx1",
              y: "vc"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  star12: {
    avLst: [
      {
        n: "adj",
        f: "val 37500"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 50000"
      },
      {
        n: "dx1",
        f: "cos wd2 1800000"
      },
      {
        n: "dy1",
        f: "sin hd2 3600000"
      },
      {
        n: "x1",
        f: "+- hc 0 dx1"
      },
      {
        n: "x3",
        f: "*/ w 3 4"
      },
      {
        n: "x4",
        f: "+- hc dx1 0"
      },
      {
        n: "y1",
        f: "+- vc 0 dy1"
      },
      {
        n: "y3",
        f: "*/ h 3 4"
      },
      {
        n: "y4",
        f: "+- vc dy1 0"
      },
      {
        n: "iwd2",
        f: "*/ wd2 a 50000"
      },
      {
        n: "ihd2",
        f: "*/ hd2 a 50000"
      },
      {
        n: "sdx1",
        f: "cos iwd2 900000"
      },
      {
        n: "sdx2",
        f: "cos iwd2 2700000"
      },
      {
        n: "sdx3",
        f: "cos iwd2 4500000"
      },
      {
        n: "sdy1",
        f: "sin ihd2 4500000"
      },
      {
        n: "sdy2",
        f: "sin ihd2 2700000"
      },
      {
        n: "sdy3",
        f: "sin ihd2 900000"
      },
      {
        n: "sx1",
        f: "+- hc 0 sdx1"
      },
      {
        n: "sx2",
        f: "+- hc 0 sdx2"
      },
      {
        n: "sx3",
        f: "+- hc 0 sdx3"
      },
      {
        n: "sx4",
        f: "+- hc sdx3 0"
      },
      {
        n: "sx5",
        f: "+- hc sdx2 0"
      },
      {
        n: "sx6",
        f: "+- hc sdx1 0"
      },
      {
        n: "sy1",
        f: "+- vc 0 sdy1"
      },
      {
        n: "sy2",
        f: "+- vc 0 sdy2"
      },
      {
        n: "sy3",
        f: "+- vc 0 sdy3"
      },
      {
        n: "sy4",
        f: "+- vc sdy3 0"
      },
      {
        n: "sy5",
        f: "+- vc sdy2 0"
      },
      {
        n: "sy6",
        f: "+- vc sdy1 0"
      },
      {
        n: "yAdj",
        f: "+- vc 0 ihd2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx1",
              y: "sy3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "hd4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx2",
              y: "sy2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "wd4",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx3",
              y: "sy1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx4",
              y: "sy1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx5",
              y: "sy2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "hd4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx6",
              y: "sy3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx6",
              y: "sy4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx5",
              y: "sy5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx4",
              y: "sy6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx3",
              y: "sy6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "wd4",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx2",
              y: "sy5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx1",
              y: "sy4"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  star16: {
    avLst: [
      {
        n: "adj",
        f: "val 37500"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 50000"
      },
      {
        n: "dx1",
        f: "*/ wd2 92388 100000"
      },
      {
        n: "dx2",
        f: "*/ wd2 70711 100000"
      },
      {
        n: "dx3",
        f: "*/ wd2 38268 100000"
      },
      {
        n: "dy1",
        f: "*/ hd2 92388 100000"
      },
      {
        n: "dy2",
        f: "*/ hd2 70711 100000"
      },
      {
        n: "dy3",
        f: "*/ hd2 38268 100000"
      },
      {
        n: "x1",
        f: "+- hc 0 dx1"
      },
      {
        n: "x2",
        f: "+- hc 0 dx2"
      },
      {
        n: "x3",
        f: "+- hc 0 dx3"
      },
      {
        n: "x4",
        f: "+- hc dx3 0"
      },
      {
        n: "x5",
        f: "+- hc dx2 0"
      },
      {
        n: "x6",
        f: "+- hc dx1 0"
      },
      {
        n: "y1",
        f: "+- vc 0 dy1"
      },
      {
        n: "y2",
        f: "+- vc 0 dy2"
      },
      {
        n: "y3",
        f: "+- vc 0 dy3"
      },
      {
        n: "y4",
        f: "+- vc dy3 0"
      },
      {
        n: "y5",
        f: "+- vc dy2 0"
      },
      {
        n: "y6",
        f: "+- vc dy1 0"
      },
      {
        n: "iwd2",
        f: "*/ wd2 a 50000"
      },
      {
        n: "ihd2",
        f: "*/ hd2 a 50000"
      },
      {
        n: "sdx1",
        f: "*/ iwd2 98079 100000"
      },
      {
        n: "sdx2",
        f: "*/ iwd2 83147 100000"
      },
      {
        n: "sdx3",
        f: "*/ iwd2 55557 100000"
      },
      {
        n: "sdx4",
        f: "*/ iwd2 19509 100000"
      },
      {
        n: "sdy1",
        f: "*/ ihd2 98079 100000"
      },
      {
        n: "sdy2",
        f: "*/ ihd2 83147 100000"
      },
      {
        n: "sdy3",
        f: "*/ ihd2 55557 100000"
      },
      {
        n: "sdy4",
        f: "*/ ihd2 19509 100000"
      },
      {
        n: "sx1",
        f: "+- hc 0 sdx1"
      },
      {
        n: "sx2",
        f: "+- hc 0 sdx2"
      },
      {
        n: "sx3",
        f: "+- hc 0 sdx3"
      },
      {
        n: "sx4",
        f: "+- hc 0 sdx4"
      },
      {
        n: "sx5",
        f: "+- hc sdx4 0"
      },
      {
        n: "sx6",
        f: "+- hc sdx3 0"
      },
      {
        n: "sx7",
        f: "+- hc sdx2 0"
      },
      {
        n: "sx8",
        f: "+- hc sdx1 0"
      },
      {
        n: "sy1",
        f: "+- vc 0 sdy1"
      },
      {
        n: "sy2",
        f: "+- vc 0 sdy2"
      },
      {
        n: "sy3",
        f: "+- vc 0 sdy3"
      },
      {
        n: "sy4",
        f: "+- vc 0 sdy4"
      },
      {
        n: "sy5",
        f: "+- vc sdy4 0"
      },
      {
        n: "sy6",
        f: "+- vc sdy3 0"
      },
      {
        n: "sy7",
        f: "+- vc sdy2 0"
      },
      {
        n: "sy8",
        f: "+- vc sdy1 0"
      },
      {
        n: "idx",
        f: "cos iwd2 2700000"
      },
      {
        n: "idy",
        f: "sin ihd2 2700000"
      },
      {
        n: "il",
        f: "+- hc 0 idx"
      },
      {
        n: "it",
        f: "+- vc 0 idy"
      },
      {
        n: "ir",
        f: "+- hc idx 0"
      },
      {
        n: "ib",
        f: "+- vc idy 0"
      },
      {
        n: "yAdj",
        f: "+- vc 0 ihd2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx1",
              y: "sy4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx2",
              y: "sy3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx3",
              y: "sy2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx4",
              y: "sy1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx5",
              y: "sy1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx6",
              y: "sy2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx7",
              y: "sy3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx8",
              y: "sy4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx8",
              y: "sy5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx7",
              y: "sy6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx6",
              y: "sy7"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx5",
              y: "sy8"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx4",
              y: "sy8"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx3",
              y: "sy7"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx2",
              y: "sy6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx1",
              y: "sy5"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  star24: {
    avLst: [
      {
        n: "adj",
        f: "val 37500"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 50000"
      },
      {
        n: "dx1",
        f: "cos wd2 900000"
      },
      {
        n: "dx2",
        f: "cos wd2 1800000"
      },
      {
        n: "dx3",
        f: "cos wd2 2700000"
      },
      {
        n: "dx4",
        f: "val wd4"
      },
      {
        n: "dx5",
        f: "cos wd2 4500000"
      },
      {
        n: "dy1",
        f: "sin hd2 4500000"
      },
      {
        n: "dy2",
        f: "sin hd2 3600000"
      },
      {
        n: "dy3",
        f: "sin hd2 2700000"
      },
      {
        n: "dy4",
        f: "val hd4"
      },
      {
        n: "dy5",
        f: "sin hd2 900000"
      },
      {
        n: "x1",
        f: "+- hc 0 dx1"
      },
      {
        n: "x2",
        f: "+- hc 0 dx2"
      },
      {
        n: "x3",
        f: "+- hc 0 dx3"
      },
      {
        n: "x4",
        f: "+- hc 0 dx4"
      },
      {
        n: "x5",
        f: "+- hc 0 dx5"
      },
      {
        n: "x6",
        f: "+- hc dx5 0"
      },
      {
        n: "x7",
        f: "+- hc dx4 0"
      },
      {
        n: "x8",
        f: "+- hc dx3 0"
      },
      {
        n: "x9",
        f: "+- hc dx2 0"
      },
      {
        n: "x10",
        f: "+- hc dx1 0"
      },
      {
        n: "y1",
        f: "+- vc 0 dy1"
      },
      {
        n: "y2",
        f: "+- vc 0 dy2"
      },
      {
        n: "y3",
        f: "+- vc 0 dy3"
      },
      {
        n: "y4",
        f: "+- vc 0 dy4"
      },
      {
        n: "y5",
        f: "+- vc 0 dy5"
      },
      {
        n: "y6",
        f: "+- vc dy5 0"
      },
      {
        n: "y7",
        f: "+- vc dy4 0"
      },
      {
        n: "y8",
        f: "+- vc dy3 0"
      },
      {
        n: "y9",
        f: "+- vc dy2 0"
      },
      {
        n: "y10",
        f: "+- vc dy1 0"
      },
      {
        n: "iwd2",
        f: "*/ wd2 a 50000"
      },
      {
        n: "ihd2",
        f: "*/ hd2 a 50000"
      },
      {
        n: "sdx1",
        f: "*/ iwd2 99144 100000"
      },
      {
        n: "sdx2",
        f: "*/ iwd2 92388 100000"
      },
      {
        n: "sdx3",
        f: "*/ iwd2 79335 100000"
      },
      {
        n: "sdx4",
        f: "*/ iwd2 60876 100000"
      },
      {
        n: "sdx5",
        f: "*/ iwd2 38268 100000"
      },
      {
        n: "sdx6",
        f: "*/ iwd2 13053 100000"
      },
      {
        n: "sdy1",
        f: "*/ ihd2 99144 100000"
      },
      {
        n: "sdy2",
        f: "*/ ihd2 92388 100000"
      },
      {
        n: "sdy3",
        f: "*/ ihd2 79335 100000"
      },
      {
        n: "sdy4",
        f: "*/ ihd2 60876 100000"
      },
      {
        n: "sdy5",
        f: "*/ ihd2 38268 100000"
      },
      {
        n: "sdy6",
        f: "*/ ihd2 13053 100000"
      },
      {
        n: "sx1",
        f: "+- hc 0 sdx1"
      },
      {
        n: "sx2",
        f: "+- hc 0 sdx2"
      },
      {
        n: "sx3",
        f: "+- hc 0 sdx3"
      },
      {
        n: "sx4",
        f: "+- hc 0 sdx4"
      },
      {
        n: "sx5",
        f: "+- hc 0 sdx5"
      },
      {
        n: "sx6",
        f: "+- hc 0 sdx6"
      },
      {
        n: "sx7",
        f: "+- hc sdx6 0"
      },
      {
        n: "sx8",
        f: "+- hc sdx5 0"
      },
      {
        n: "sx9",
        f: "+- hc sdx4 0"
      },
      {
        n: "sx10",
        f: "+- hc sdx3 0"
      },
      {
        n: "sx11",
        f: "+- hc sdx2 0"
      },
      {
        n: "sx12",
        f: "+- hc sdx1 0"
      },
      {
        n: "sy1",
        f: "+- vc 0 sdy1"
      },
      {
        n: "sy2",
        f: "+- vc 0 sdy2"
      },
      {
        n: "sy3",
        f: "+- vc 0 sdy3"
      },
      {
        n: "sy4",
        f: "+- vc 0 sdy4"
      },
      {
        n: "sy5",
        f: "+- vc 0 sdy5"
      },
      {
        n: "sy6",
        f: "+- vc 0 sdy6"
      },
      {
        n: "sy7",
        f: "+- vc sdy6 0"
      },
      {
        n: "sy8",
        f: "+- vc sdy5 0"
      },
      {
        n: "sy9",
        f: "+- vc sdy4 0"
      },
      {
        n: "sy10",
        f: "+- vc sdy3 0"
      },
      {
        n: "sy11",
        f: "+- vc sdy2 0"
      },
      {
        n: "sy12",
        f: "+- vc sdy1 0"
      },
      {
        n: "idx",
        f: "cos iwd2 2700000"
      },
      {
        n: "idy",
        f: "sin ihd2 2700000"
      },
      {
        n: "il",
        f: "+- hc 0 idx"
      },
      {
        n: "it",
        f: "+- vc 0 idy"
      },
      {
        n: "ir",
        f: "+- hc idx 0"
      },
      {
        n: "ib",
        f: "+- vc idy 0"
      },
      {
        n: "yAdj",
        f: "+- vc 0 ihd2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx1",
              y: "sy6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx2",
              y: "sy5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx3",
              y: "sy4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx4",
              y: "sy3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx5",
              y: "sy2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx6",
              y: "sy1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx7",
              y: "sy1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx8",
              y: "sy2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x7",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx9",
              y: "sy3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x8",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx10",
              y: "sy4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x9",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx11",
              y: "sy5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x10",
              y: "y5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx12",
              y: "sy6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx12",
              y: "sy7"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x10",
              y: "y6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx11",
              y: "sy8"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x9",
              y: "y7"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx10",
              y: "sy9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x8",
              y: "y8"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx9",
              y: "sy10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x7",
              y: "y9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx8",
              y: "sy11"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "y10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx7",
              y: "sy12"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx6",
              y: "sy12"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx5",
              y: "sy11"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx4",
              y: "sy10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y8"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx3",
              y: "sy9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y7"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx2",
              y: "sy8"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx1",
              y: "sy7"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  star32: {
    avLst: [
      {
        n: "adj",
        f: "val 37500"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 50000"
      },
      {
        n: "dx1",
        f: "*/ wd2 98079 100000"
      },
      {
        n: "dx2",
        f: "*/ wd2 92388 100000"
      },
      {
        n: "dx3",
        f: "*/ wd2 83147 100000"
      },
      {
        n: "dx4",
        f: "cos wd2 2700000"
      },
      {
        n: "dx5",
        f: "*/ wd2 55557 100000"
      },
      {
        n: "dx6",
        f: "*/ wd2 38268 100000"
      },
      {
        n: "dx7",
        f: "*/ wd2 19509 100000"
      },
      {
        n: "dy1",
        f: "*/ hd2 98079 100000"
      },
      {
        n: "dy2",
        f: "*/ hd2 92388 100000"
      },
      {
        n: "dy3",
        f: "*/ hd2 83147 100000"
      },
      {
        n: "dy4",
        f: "sin hd2 2700000"
      },
      {
        n: "dy5",
        f: "*/ hd2 55557 100000"
      },
      {
        n: "dy6",
        f: "*/ hd2 38268 100000"
      },
      {
        n: "dy7",
        f: "*/ hd2 19509 100000"
      },
      {
        n: "x1",
        f: "+- hc 0 dx1"
      },
      {
        n: "x2",
        f: "+- hc 0 dx2"
      },
      {
        n: "x3",
        f: "+- hc 0 dx3"
      },
      {
        n: "x4",
        f: "+- hc 0 dx4"
      },
      {
        n: "x5",
        f: "+- hc 0 dx5"
      },
      {
        n: "x6",
        f: "+- hc 0 dx6"
      },
      {
        n: "x7",
        f: "+- hc 0 dx7"
      },
      {
        n: "x8",
        f: "+- hc dx7 0"
      },
      {
        n: "x9",
        f: "+- hc dx6 0"
      },
      {
        n: "x10",
        f: "+- hc dx5 0"
      },
      {
        n: "x11",
        f: "+- hc dx4 0"
      },
      {
        n: "x12",
        f: "+- hc dx3 0"
      },
      {
        n: "x13",
        f: "+- hc dx2 0"
      },
      {
        n: "x14",
        f: "+- hc dx1 0"
      },
      {
        n: "y1",
        f: "+- vc 0 dy1"
      },
      {
        n: "y2",
        f: "+- vc 0 dy2"
      },
      {
        n: "y3",
        f: "+- vc 0 dy3"
      },
      {
        n: "y4",
        f: "+- vc 0 dy4"
      },
      {
        n: "y5",
        f: "+- vc 0 dy5"
      },
      {
        n: "y6",
        f: "+- vc 0 dy6"
      },
      {
        n: "y7",
        f: "+- vc 0 dy7"
      },
      {
        n: "y8",
        f: "+- vc dy7 0"
      },
      {
        n: "y9",
        f: "+- vc dy6 0"
      },
      {
        n: "y10",
        f: "+- vc dy5 0"
      },
      {
        n: "y11",
        f: "+- vc dy4 0"
      },
      {
        n: "y12",
        f: "+- vc dy3 0"
      },
      {
        n: "y13",
        f: "+- vc dy2 0"
      },
      {
        n: "y14",
        f: "+- vc dy1 0"
      },
      {
        n: "iwd2",
        f: "*/ wd2 a 50000"
      },
      {
        n: "ihd2",
        f: "*/ hd2 a 50000"
      },
      {
        n: "sdx1",
        f: "*/ iwd2 99518 100000"
      },
      {
        n: "sdx2",
        f: "*/ iwd2 95694 100000"
      },
      {
        n: "sdx3",
        f: "*/ iwd2 88192 100000"
      },
      {
        n: "sdx4",
        f: "*/ iwd2 77301 100000"
      },
      {
        n: "sdx5",
        f: "*/ iwd2 63439 100000"
      },
      {
        n: "sdx6",
        f: "*/ iwd2 47140 100000"
      },
      {
        n: "sdx7",
        f: "*/ iwd2 29028 100000"
      },
      {
        n: "sdx8",
        f: "*/ iwd2 9802 100000"
      },
      {
        n: "sdy1",
        f: "*/ ihd2 99518 100000"
      },
      {
        n: "sdy2",
        f: "*/ ihd2 95694 100000"
      },
      {
        n: "sdy3",
        f: "*/ ihd2 88192 100000"
      },
      {
        n: "sdy4",
        f: "*/ ihd2 77301 100000"
      },
      {
        n: "sdy5",
        f: "*/ ihd2 63439 100000"
      },
      {
        n: "sdy6",
        f: "*/ ihd2 47140 100000"
      },
      {
        n: "sdy7",
        f: "*/ ihd2 29028 100000"
      },
      {
        n: "sdy8",
        f: "*/ ihd2 9802 100000"
      },
      {
        n: "sx1",
        f: "+- hc 0 sdx1"
      },
      {
        n: "sx2",
        f: "+- hc 0 sdx2"
      },
      {
        n: "sx3",
        f: "+- hc 0 sdx3"
      },
      {
        n: "sx4",
        f: "+- hc 0 sdx4"
      },
      {
        n: "sx5",
        f: "+- hc 0 sdx5"
      },
      {
        n: "sx6",
        f: "+- hc 0 sdx6"
      },
      {
        n: "sx7",
        f: "+- hc 0 sdx7"
      },
      {
        n: "sx8",
        f: "+- hc 0 sdx8"
      },
      {
        n: "sx9",
        f: "+- hc sdx8 0"
      },
      {
        n: "sx10",
        f: "+- hc sdx7 0"
      },
      {
        n: "sx11",
        f: "+- hc sdx6 0"
      },
      {
        n: "sx12",
        f: "+- hc sdx5 0"
      },
      {
        n: "sx13",
        f: "+- hc sdx4 0"
      },
      {
        n: "sx14",
        f: "+- hc sdx3 0"
      },
      {
        n: "sx15",
        f: "+- hc sdx2 0"
      },
      {
        n: "sx16",
        f: "+- hc sdx1 0"
      },
      {
        n: "sy1",
        f: "+- vc 0 sdy1"
      },
      {
        n: "sy2",
        f: "+- vc 0 sdy2"
      },
      {
        n: "sy3",
        f: "+- vc 0 sdy3"
      },
      {
        n: "sy4",
        f: "+- vc 0 sdy4"
      },
      {
        n: "sy5",
        f: "+- vc 0 sdy5"
      },
      {
        n: "sy6",
        f: "+- vc 0 sdy6"
      },
      {
        n: "sy7",
        f: "+- vc 0 sdy7"
      },
      {
        n: "sy8",
        f: "+- vc 0 sdy8"
      },
      {
        n: "sy9",
        f: "+- vc sdy8 0"
      },
      {
        n: "sy10",
        f: "+- vc sdy7 0"
      },
      {
        n: "sy11",
        f: "+- vc sdy6 0"
      },
      {
        n: "sy12",
        f: "+- vc sdy5 0"
      },
      {
        n: "sy13",
        f: "+- vc sdy4 0"
      },
      {
        n: "sy14",
        f: "+- vc sdy3 0"
      },
      {
        n: "sy15",
        f: "+- vc sdy2 0"
      },
      {
        n: "sy16",
        f: "+- vc sdy1 0"
      },
      {
        n: "idx",
        f: "cos iwd2 2700000"
      },
      {
        n: "idy",
        f: "sin ihd2 2700000"
      },
      {
        n: "il",
        f: "+- hc 0 idx"
      },
      {
        n: "it",
        f: "+- vc 0 idy"
      },
      {
        n: "ir",
        f: "+- hc idx 0"
      },
      {
        n: "ib",
        f: "+- vc idy 0"
      },
      {
        n: "yAdj",
        f: "+- vc 0 ihd2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx1",
              y: "sy8"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y7"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx2",
              y: "sy7"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx3",
              y: "sy6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx4",
              y: "sy5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx5",
              y: "sy4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx6",
              y: "sy3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx7",
              y: "sy2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x7",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx8",
              y: "sy1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx9",
              y: "sy1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x8",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx10",
              y: "sy2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x9",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx11",
              y: "sy3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x10",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx12",
              y: "sy4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x11",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx13",
              y: "sy5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x12",
              y: "y5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx14",
              y: "sy6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x13",
              y: "y6"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx15",
              y: "sy7"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x14",
              y: "y7"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx16",
              y: "sy8"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx16",
              y: "sy9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x14",
              y: "y8"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx15",
              y: "sy10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x13",
              y: "y9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx14",
              y: "sy11"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x12",
              y: "y10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx13",
              y: "sy12"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x11",
              y: "y11"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx12",
              y: "sy13"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x10",
              y: "y12"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx11",
              y: "sy14"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x9",
              y: "y13"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx10",
              y: "sy15"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x8",
              y: "y14"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx9",
              y: "sy16"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx8",
              y: "sy16"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x7",
              y: "y14"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx7",
              y: "sy15"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "y13"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx6",
              y: "sy14"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y12"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx5",
              y: "sy13"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y11"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx4",
              y: "sy12"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx3",
              y: "sy11"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y9"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx2",
              y: "sy10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y8"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx1",
              y: "sy9"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  star4: {
    avLst: [
      {
        n: "adj",
        f: "val 12500"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 50000"
      },
      {
        n: "iwd2",
        f: "*/ wd2 a 50000"
      },
      {
        n: "ihd2",
        f: "*/ hd2 a 50000"
      },
      {
        n: "sdx",
        f: "cos iwd2 2700000"
      },
      {
        n: "sdy",
        f: "sin ihd2 2700000"
      },
      {
        n: "sx1",
        f: "+- hc 0 sdx"
      },
      {
        n: "sx2",
        f: "+- hc sdx 0"
      },
      {
        n: "sy1",
        f: "+- vc 0 sdy"
      },
      {
        n: "sy2",
        f: "+- vc sdy 0"
      },
      {
        n: "yAdj",
        f: "+- vc 0 ihd2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx1",
              y: "sy1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx2",
              y: "sy1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx2",
              y: "sy2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx1",
              y: "sy2"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  star5: {
    avLst: [
      {
        n: "adj",
        f: "val 19098"
      },
      {
        n: "hf",
        f: "val 105146"
      },
      {
        n: "vf",
        f: "val 110557"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 50000"
      },
      {
        n: "swd2",
        f: "*/ wd2 hf 100000"
      },
      {
        n: "shd2",
        f: "*/ hd2 vf 100000"
      },
      {
        n: "svc",
        f: "*/ vc  vf 100000"
      },
      {
        n: "dx1",
        f: "cos swd2 1080000"
      },
      {
        n: "dx2",
        f: "cos swd2 18360000"
      },
      {
        n: "dy1",
        f: "sin shd2 1080000"
      },
      {
        n: "dy2",
        f: "sin shd2 18360000"
      },
      {
        n: "x1",
        f: "+- hc 0 dx1"
      },
      {
        n: "x2",
        f: "+- hc 0 dx2"
      },
      {
        n: "x3",
        f: "+- hc dx2 0"
      },
      {
        n: "x4",
        f: "+- hc dx1 0"
      },
      {
        n: "y1",
        f: "+- svc 0 dy1"
      },
      {
        n: "y2",
        f: "+- svc 0 dy2"
      },
      {
        n: "iwd2",
        f: "*/ swd2 a 50000"
      },
      {
        n: "ihd2",
        f: "*/ shd2 a 50000"
      },
      {
        n: "sdx1",
        f: "cos iwd2 20520000"
      },
      {
        n: "sdx2",
        f: "cos iwd2 3240000"
      },
      {
        n: "sdy1",
        f: "sin ihd2 3240000"
      },
      {
        n: "sdy2",
        f: "sin ihd2 20520000"
      },
      {
        n: "sx1",
        f: "+- hc 0 sdx1"
      },
      {
        n: "sx2",
        f: "+- hc 0 sdx2"
      },
      {
        n: "sx3",
        f: "+- hc sdx2 0"
      },
      {
        n: "sx4",
        f: "+- hc sdx1 0"
      },
      {
        n: "sy1",
        f: "+- svc 0 sdy1"
      },
      {
        n: "sy2",
        f: "+- svc 0 sdy2"
      },
      {
        n: "sy3",
        f: "+- svc ihd2 0"
      },
      {
        n: "yAdj",
        f: "+- svc 0 ihd2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx2",
              y: "sy1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx3",
              y: "sy1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx4",
              y: "sy2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "sy3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx1",
              y: "sy2"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  star6: {
    avLst: [
      {
        n: "adj",
        f: "val 28868"
      },
      {
        n: "hf",
        f: "val 115470"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 50000"
      },
      {
        n: "swd2",
        f: "*/ wd2 hf 100000"
      },
      {
        n: "dx1",
        f: "cos swd2 1800000"
      },
      {
        n: "x1",
        f: "+- hc 0 dx1"
      },
      {
        n: "x2",
        f: "+- hc dx1 0"
      },
      {
        n: "y2",
        f: "+- vc hd4 0"
      },
      {
        n: "iwd2",
        f: "*/ swd2 a 50000"
      },
      {
        n: "ihd2",
        f: "*/ hd2 a 50000"
      },
      {
        n: "sdx2",
        f: "*/ iwd2 1 2"
      },
      {
        n: "sx1",
        f: "+- hc 0 iwd2"
      },
      {
        n: "sx2",
        f: "+- hc 0 sdx2"
      },
      {
        n: "sx3",
        f: "+- hc sdx2 0"
      },
      {
        n: "sx4",
        f: "+- hc iwd2 0"
      },
      {
        n: "sdy1",
        f: "sin ihd2 3600000"
      },
      {
        n: "sy1",
        f: "+- vc 0 sdy1"
      },
      {
        n: "sy2",
        f: "+- vc sdy1 0"
      },
      {
        n: "yAdj",
        f: "+- vc 0 ihd2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "hd4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx2",
              y: "sy1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx3",
              y: "sy1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "hd4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx4",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx3",
              y: "sy2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx2",
              y: "sy2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx1",
              y: "vc"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  star7: {
    avLst: [
      {
        n: "adj",
        f: "val 34601"
      },
      {
        n: "hf",
        f: "val 102572"
      },
      {
        n: "vf",
        f: "val 105210"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 50000"
      },
      {
        n: "swd2",
        f: "*/ wd2 hf 100000"
      },
      {
        n: "shd2",
        f: "*/ hd2 vf 100000"
      },
      {
        n: "svc",
        f: "*/ vc  vf 100000"
      },
      {
        n: "dx1",
        f: "*/ swd2 97493 100000"
      },
      {
        n: "dx2",
        f: "*/ swd2 78183 100000"
      },
      {
        n: "dx3",
        f: "*/ swd2 43388 100000"
      },
      {
        n: "dy1",
        f: "*/ shd2 62349 100000"
      },
      {
        n: "dy2",
        f: "*/ shd2 22252 100000"
      },
      {
        n: "dy3",
        f: "*/ shd2 90097 100000"
      },
      {
        n: "x1",
        f: "+- hc 0 dx1"
      },
      {
        n: "x2",
        f: "+- hc 0 dx2"
      },
      {
        n: "x3",
        f: "+- hc 0 dx3"
      },
      {
        n: "x4",
        f: "+- hc dx3 0"
      },
      {
        n: "x5",
        f: "+- hc dx2 0"
      },
      {
        n: "x6",
        f: "+- hc dx1 0"
      },
      {
        n: "y1",
        f: "+- svc 0 dy1"
      },
      {
        n: "y2",
        f: "+- svc dy2 0"
      },
      {
        n: "y3",
        f: "+- svc dy3 0"
      },
      {
        n: "iwd2",
        f: "*/ swd2 a 50000"
      },
      {
        n: "ihd2",
        f: "*/ shd2 a 50000"
      },
      {
        n: "sdx1",
        f: "*/ iwd2 97493 100000"
      },
      {
        n: "sdx2",
        f: "*/ iwd2 78183 100000"
      },
      {
        n: "sdx3",
        f: "*/ iwd2 43388 100000"
      },
      {
        n: "sx1",
        f: "+- hc 0 sdx1"
      },
      {
        n: "sx2",
        f: "+- hc 0 sdx2"
      },
      {
        n: "sx3",
        f: "+- hc 0 sdx3"
      },
      {
        n: "sx4",
        f: "+- hc sdx3 0"
      },
      {
        n: "sx5",
        f: "+- hc sdx2 0"
      },
      {
        n: "sx6",
        f: "+- hc sdx1 0"
      },
      {
        n: "sdy1",
        f: "*/ ihd2 90097 100000"
      },
      {
        n: "sdy2",
        f: "*/ ihd2 22252 100000"
      },
      {
        n: "sdy3",
        f: "*/ ihd2 62349 100000"
      },
      {
        n: "sy1",
        f: "+- svc 0 sdy1"
      },
      {
        n: "sy2",
        f: "+- svc 0 sdy2"
      },
      {
        n: "sy3",
        f: "+- svc sdy3 0"
      },
      {
        n: "sy4",
        f: "+- svc ihd2 0"
      },
      {
        n: "yAdj",
        f: "+- svc 0 ihd2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx1",
              y: "sy2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx3",
              y: "sy1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx4",
              y: "sy1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx6",
              y: "sy2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx5",
              y: "sy3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "sy4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx2",
              y: "sy3"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  star8: {
    avLst: [
      {
        n: "adj",
        f: "val 37500"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 50000"
      },
      {
        n: "dx1",
        f: "cos wd2 2700000"
      },
      {
        n: "x1",
        f: "+- hc 0 dx1"
      },
      {
        n: "x2",
        f: "+- hc dx1 0"
      },
      {
        n: "dy1",
        f: "sin hd2 2700000"
      },
      {
        n: "y1",
        f: "+- vc 0 dy1"
      },
      {
        n: "y2",
        f: "+- vc dy1 0"
      },
      {
        n: "iwd2",
        f: "*/ wd2 a 50000"
      },
      {
        n: "ihd2",
        f: "*/ hd2 a 50000"
      },
      {
        n: "sdx1",
        f: "*/ iwd2 92388 100000"
      },
      {
        n: "sdx2",
        f: "*/ iwd2 38268 100000"
      },
      {
        n: "sdy1",
        f: "*/ ihd2 92388 100000"
      },
      {
        n: "sdy2",
        f: "*/ ihd2 38268 100000"
      },
      {
        n: "sx1",
        f: "+- hc 0 sdx1"
      },
      {
        n: "sx2",
        f: "+- hc 0 sdx2"
      },
      {
        n: "sx3",
        f: "+- hc sdx2 0"
      },
      {
        n: "sx4",
        f: "+- hc sdx1 0"
      },
      {
        n: "sy1",
        f: "+- vc 0 sdy1"
      },
      {
        n: "sy2",
        f: "+- vc 0 sdy2"
      },
      {
        n: "sy3",
        f: "+- vc sdy2 0"
      },
      {
        n: "sy4",
        f: "+- vc sdy1 0"
      },
      {
        n: "yAdj",
        f: "+- vc 0 ihd2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx1",
              y: "sy2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx2",
              y: "sy1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx3",
              y: "sy1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx4",
              y: "sy2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx4",
              y: "sy3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx3",
              y: "sy4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx2",
              y: "sy4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "sx1",
              y: "sy3"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  straightConnector1: {
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  stripedRightArrow: {
    avLst: [
      {
        n: "adj1",
        f: "val 50000"
      },
      {
        n: "adj2",
        f: "val 50000"
      }
    ],
    gdLst: [
      {
        n: "maxAdj2",
        f: "*/ 84375 w ss"
      },
      {
        n: "a1",
        f: "pin 0 adj1 100000"
      },
      {
        n: "a2",
        f: "pin 0 adj2 maxAdj2"
      },
      {
        n: "x4",
        f: "*/ ss 5 32"
      },
      {
        n: "dx5",
        f: "*/ ss a2 100000"
      },
      {
        n: "x5",
        f: "+- r 0 dx5"
      },
      {
        n: "dy1",
        f: "*/ h a1 200000"
      },
      {
        n: "y1",
        f: "+- vc 0 dy1"
      },
      {
        n: "y2",
        f: "+- vc dy1 0"
      },
      {
        n: "dx6",
        f: "*/ dy1 dx5 hd2"
      },
      {
        n: "x6",
        f: "+- r 0 dx6"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "ssd32",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "ssd32",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "y2"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "ssd16",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "ssd8",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "ssd8",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "ssd16",
              y: "y2"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "x4",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x5",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y2"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  sun: {
    avLst: [
      {
        n: "adj",
        f: "val 25000"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 12500 adj 46875"
      },
      {
        n: "g0",
        f: "+- 50000 0 a"
      },
      {
        n: "g1",
        f: "*/ g0 30274 32768"
      },
      {
        n: "g2",
        f: "*/ g0 12540 32768"
      },
      {
        n: "g3",
        f: "+- g1 50000 0"
      },
      {
        n: "g4",
        f: "+- g2 50000 0"
      },
      {
        n: "g5",
        f: "+- 50000 0 g1"
      },
      {
        n: "g6",
        f: "+- 50000 0 g2"
      },
      {
        n: "g7",
        f: "*/ g0 23170 32768"
      },
      {
        n: "g8",
        f: "+- 50000 g7 0"
      },
      {
        n: "g9",
        f: "+- 50000 0 g7"
      },
      {
        n: "g10",
        f: "*/ g5 3 4"
      },
      {
        n: "g11",
        f: "*/ g6 3 4"
      },
      {
        n: "g12",
        f: "+- g10 3662 0"
      },
      {
        n: "g13",
        f: "+- g11 3662 0"
      },
      {
        n: "g14",
        f: "+- g11 12500 0"
      },
      {
        n: "g15",
        f: "+- 100000 0 g10"
      },
      {
        n: "g16",
        f: "+- 100000 0 g12"
      },
      {
        n: "g17",
        f: "+- 100000 0 g13"
      },
      {
        n: "g18",
        f: "+- 100000 0 g14"
      },
      {
        n: "ox1",
        f: "*/ w 18436 21600"
      },
      {
        n: "oy1",
        f: "*/ h 3163 21600"
      },
      {
        n: "ox2",
        f: "*/ w 3163 21600"
      },
      {
        n: "oy2",
        f: "*/ h 18436 21600"
      },
      {
        n: "x8",
        f: "*/ w g8 100000"
      },
      {
        n: "x9",
        f: "*/ w g9 100000"
      },
      {
        n: "x10",
        f: "*/ w g10 100000"
      },
      {
        n: "x12",
        f: "*/ w g12 100000"
      },
      {
        n: "x13",
        f: "*/ w g13 100000"
      },
      {
        n: "x14",
        f: "*/ w g14 100000"
      },
      {
        n: "x15",
        f: "*/ w g15 100000"
      },
      {
        n: "x16",
        f: "*/ w g16 100000"
      },
      {
        n: "x17",
        f: "*/ w g17 100000"
      },
      {
        n: "x18",
        f: "*/ w g18 100000"
      },
      {
        n: "x19",
        f: "*/ w a 100000"
      },
      {
        n: "wR",
        f: "*/ w g0 100000"
      },
      {
        n: "hR",
        f: "*/ h g0 100000"
      },
      {
        n: "y8",
        f: "*/ h g8 100000"
      },
      {
        n: "y9",
        f: "*/ h g9 100000"
      },
      {
        n: "y10",
        f: "*/ h g10 100000"
      },
      {
        n: "y12",
        f: "*/ h g12 100000"
      },
      {
        n: "y13",
        f: "*/ h g13 100000"
      },
      {
        n: "y14",
        f: "*/ h g14 100000"
      },
      {
        n: "y15",
        f: "*/ h g15 100000"
      },
      {
        n: "y16",
        f: "*/ h g16 100000"
      },
      {
        n: "y17",
        f: "*/ h g17 100000"
      },
      {
        n: "y18",
        f: "*/ h g18 100000"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "r",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x15",
              y: "y18"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x15",
              y: "y14"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "ox1",
              y: "oy1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x16",
              y: "y13"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x17",
              y: "y12"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "hc",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x18",
              y: "y10"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x14",
              y: "y10"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "ox2",
              y: "oy1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x13",
              y: "y12"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x12",
              y: "y13"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x10",
              y: "y14"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x10",
              y: "y18"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "ox2",
              y: "oy2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x12",
              y: "y17"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x13",
              y: "y16"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "hc",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x14",
              y: "y15"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x18",
              y: "y15"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "ox1",
              y: "oy2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x17",
              y: "y16"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x16",
              y: "y17"
            }
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "x19",
              y: "vc"
            }
          },
          {
            type: "arcTo",
            wR: "wR",
            hR: "hR",
            stAng: "cd2",
            swAng: "21600000"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  swooshArrow: {
    avLst: [
      {
        n: "adj1",
        f: "val 25000"
      },
      {
        n: "adj2",
        f: "val 16667"
      }
    ],
    gdLst: [
      {
        n: "a1",
        f: "pin 1 adj1 75000"
      },
      {
        n: "maxAdj2",
        f: "*/ 70000 w ss"
      },
      {
        n: "a2",
        f: "pin 0 adj2 maxAdj2"
      },
      {
        n: "ad1",
        f: "*/ h a1 100000"
      },
      {
        n: "ad2",
        f: "*/ ss a2 100000"
      },
      {
        n: "xB",
        f: "+- r 0 ad2"
      },
      {
        n: "yB",
        f: "+- t ssd8 0"
      },
      {
        n: "alfa",
        f: "*/ cd4 1 14"
      },
      {
        n: "dx0",
        f: "tan ssd8 alfa"
      },
      {
        n: "xC",
        f: "+- xB 0 dx0"
      },
      {
        n: "dx1",
        f: "tan ad1 alfa"
      },
      {
        n: "yF",
        f: "+- yB ad1 0"
      },
      {
        n: "xF",
        f: "+- xB dx1 0"
      },
      {
        n: "xE",
        f: "+- xF dx0 0"
      },
      {
        n: "yE",
        f: "+- yF ssd8 0"
      },
      {
        n: "dy2",
        f: "+- yE 0 t"
      },
      {
        n: "dy22",
        f: "*/ dy2 1 2"
      },
      {
        n: "dy3",
        f: "*/ h 1 20"
      },
      {
        n: "yD",
        f: "+- t dy22 dy3"
      },
      {
        n: "dy4",
        f: "*/ hd6 1 1"
      },
      {
        n: "yP1",
        f: "+- hd6 dy4 0"
      },
      {
        n: "xP1",
        f: "val wd6"
      },
      {
        n: "dy5",
        f: "*/ hd6 1 2"
      },
      {
        n: "yP2",
        f: "+- yF dy5 0"
      },
      {
        n: "xP2",
        f: "val wd4"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "xP1",
                y: "yP1"
              },
              {
                x: "xB",
                y: "yB"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "xC",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "yD"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xE",
              y: "yE"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xF",
              y: "yF"
            }
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "xP2",
                y: "yP2"
              },
              {
                x: "l",
                y: "b"
              }
            ]
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  teardrop: {
    avLst: [
      {
        n: "adj",
        f: "val 100000"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 200000"
      },
      {
        n: "r2",
        f: "sqrt 2"
      },
      {
        n: "tw",
        f: "*/ wd2 r2 1"
      },
      {
        n: "th",
        f: "*/ hd2 r2 1"
      },
      {
        n: "sw",
        f: "*/ tw a 100000"
      },
      {
        n: "sh",
        f: "*/ th a 100000"
      },
      {
        n: "dx1",
        f: "cos sw 2700000"
      },
      {
        n: "dy1",
        f: "sin sh 2700000"
      },
      {
        n: "x1",
        f: "+- hc dx1 0"
      },
      {
        n: "y1",
        f: "+- vc 0 dy1"
      },
      {
        n: "x2",
        f: "+/ hc x1 2"
      },
      {
        n: "y2",
        f: "+/ vc y1 2"
      },
      {
        n: "idx",
        f: "cos wd2 2700000"
      },
      {
        n: "idy",
        f: "sin hd2 2700000"
      },
      {
        n: "il",
        f: "+- hc 0 idx"
      },
      {
        n: "ir",
        f: "+- hc idx 0"
      },
      {
        n: "it",
        f: "+- vc 0 idy"
      },
      {
        n: "ib",
        f: "+- vc idy 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "vc"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "x2",
                y: "t"
              },
              {
                x: "x1",
                y: "y1"
              }
            ]
          },
          {
            type: "quadBezTo",
            pts: [
              {
                x: "r",
                y: "y2"
              },
              {
                x: "r",
                y: "vc"
              }
            ]
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  trapezoid: {
    avLst: [
      {
        n: "adj",
        f: "val 25000"
      }
    ],
    gdLst: [
      {
        n: "maxAdj",
        f: "*/ 50000 w ss"
      },
      {
        n: "a",
        f: "pin 0 adj maxAdj"
      },
      {
        n: "x1",
        f: "*/ ss a 200000"
      },
      {
        n: "x2",
        f: "*/ ss a 100000"
      },
      {
        n: "x3",
        f: "+- r 0 x2"
      },
      {
        n: "x4",
        f: "+- r 0 x1"
      },
      {
        n: "il",
        f: "*/ wd3 a maxAdj"
      },
      {
        n: "it",
        f: "*/ hd3 a maxAdj"
      },
      {
        n: "ir",
        f: "+- r 0 il"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  triangle: {
    avLst: [
      {
        n: "adj",
        f: "val 50000"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 100000"
      },
      {
        n: "x1",
        f: "*/ w a 200000"
      },
      {
        n: "x2",
        f: "*/ w a 100000"
      },
      {
        n: "x3",
        f: "+- x1 wd2 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  upArrowCallout: {
    avLst: [
      {
        n: "adj1",
        f: "val 25000"
      },
      {
        n: "adj2",
        f: "val 25000"
      },
      {
        n: "adj3",
        f: "val 25000"
      },
      {
        n: "adj4",
        f: "val 64977"
      }
    ],
    gdLst: [
      {
        n: "maxAdj2",
        f: "*/ 50000 w ss"
      },
      {
        n: "a2",
        f: "pin 0 adj2 maxAdj2"
      },
      {
        n: "maxAdj1",
        f: "*/ a2 2 1"
      },
      {
        n: "a1",
        f: "pin 0 adj1 maxAdj1"
      },
      {
        n: "maxAdj3",
        f: "*/ 100000 h ss"
      },
      {
        n: "a3",
        f: "pin 0 adj3 maxAdj3"
      },
      {
        n: "q2",
        f: "*/ a3 ss h"
      },
      {
        n: "maxAdj4",
        f: "+- 100000 0 q2"
      },
      {
        n: "a4",
        f: "pin 0 adj4 maxAdj4"
      },
      {
        n: "dx1",
        f: "*/ ss a2 100000"
      },
      {
        n: "dx2",
        f: "*/ ss a1 200000"
      },
      {
        n: "x1",
        f: "+- hc 0 dx1"
      },
      {
        n: "x2",
        f: "+- hc 0 dx2"
      },
      {
        n: "x3",
        f: "+- hc dx2 0"
      },
      {
        n: "x4",
        f: "+- hc dx1 0"
      },
      {
        n: "y1",
        f: "*/ ss a3 100000"
      },
      {
        n: "dy2",
        f: "*/ h a4 100000"
      },
      {
        n: "y2",
        f: "+- b 0 dy2"
      },
      {
        n: "y3",
        f: "+/ y2 b 2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  upDownArrow: {
    avLst: [
      {
        n: "adj1",
        f: "val 50000"
      },
      {
        n: "adj2",
        f: "val 50000"
      }
    ],
    gdLst: [
      {
        n: "maxAdj2",
        f: "*/ 50000 h ss"
      },
      {
        n: "a1",
        f: "pin 0 adj1 100000"
      },
      {
        n: "a2",
        f: "pin 0 adj2 maxAdj2"
      },
      {
        n: "y2",
        f: "*/ ss a2 100000"
      },
      {
        n: "y3",
        f: "+- b 0 y2"
      },
      {
        n: "dx1",
        f: "*/ w a1 200000"
      },
      {
        n: "x1",
        f: "+- hc 0 dx1"
      },
      {
        n: "x2",
        f: "+- hc dx1 0"
      },
      {
        n: "dy1",
        f: "*/ x1 y2 wd2"
      },
      {
        n: "y1",
        f: "+- y2 0 dy1"
      },
      {
        n: "y4",
        f: "+- y3 dy1 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  upArrow: {
    avLst: [
      {
        n: "adj1",
        f: "val 50000"
      },
      {
        n: "adj2",
        f: "val 50000"
      }
    ],
    gdLst: [
      {
        n: "maxAdj2",
        f: "*/ 100000 h ss"
      },
      {
        n: "a1",
        f: "pin 0 adj1 100000"
      },
      {
        n: "a2",
        f: "pin 0 adj2 maxAdj2"
      },
      {
        n: "dy2",
        f: "*/ ss a2 100000"
      },
      {
        n: "y2",
        f: "+- t dy2 0"
      },
      {
        n: "dx1",
        f: "*/ w a1 200000"
      },
      {
        n: "x1",
        f: "+- hc 0 dx1"
      },
      {
        n: "x2",
        f: "+- hc dx1 0"
      },
      {
        n: "dy1",
        f: "*/ x1 dy2 wd2"
      },
      {
        n: "y1",
        f: "+- y2  0 dy1"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y2"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  upDownArrowCallout: {
    avLst: [
      {
        n: "adj1",
        f: "val 25000"
      },
      {
        n: "adj2",
        f: "val 25000"
      },
      {
        n: "adj3",
        f: "val 25000"
      },
      {
        n: "adj4",
        f: "val 48123"
      }
    ],
    gdLst: [
      {
        n: "maxAdj2",
        f: "*/ 50000 w ss"
      },
      {
        n: "a2",
        f: "pin 0 adj2 maxAdj2"
      },
      {
        n: "maxAdj1",
        f: "*/ a2 2 1"
      },
      {
        n: "a1",
        f: "pin 0 adj1 maxAdj1"
      },
      {
        n: "maxAdj3",
        f: "*/ 50000 h ss"
      },
      {
        n: "a3",
        f: "pin 0 adj3 maxAdj3"
      },
      {
        n: "q2",
        f: "*/ a3 ss hd2"
      },
      {
        n: "maxAdj4",
        f: "+- 100000 0 q2"
      },
      {
        n: "a4",
        f: "pin 0 adj4 maxAdj4"
      },
      {
        n: "dx1",
        f: "*/ ss a2 100000"
      },
      {
        n: "dx2",
        f: "*/ ss a1 200000"
      },
      {
        n: "x1",
        f: "+- hc 0 dx1"
      },
      {
        n: "x2",
        f: "+- hc 0 dx2"
      },
      {
        n: "x3",
        f: "+- hc dx2 0"
      },
      {
        n: "x4",
        f: "+- hc dx1 0"
      },
      {
        n: "y1",
        f: "*/ ss a3 100000"
      },
      {
        n: "y4",
        f: "+- b 0 y1"
      },
      {
        n: "dy2",
        f: "*/ h a4 200000"
      },
      {
        n: "y2",
        f: "+- vc 0 dy2"
      },
      {
        n: "y3",
        f: "+- vc dy2 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "hc",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "y3"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  uturnArrow: {
    avLst: [
      {
        n: "adj1",
        f: "val 25000"
      },
      {
        n: "adj2",
        f: "val 25000"
      },
      {
        n: "adj3",
        f: "val 25000"
      },
      {
        n: "adj4",
        f: "val 43750"
      },
      {
        n: "adj5",
        f: "val 75000"
      }
    ],
    gdLst: [
      {
        n: "a2",
        f: "pin 0 adj2 25000"
      },
      {
        n: "maxAdj1",
        f: "*/ a2 2 1"
      },
      {
        n: "a1",
        f: "pin 0 adj1 maxAdj1"
      },
      {
        n: "q2",
        f: "*/ a1 ss h"
      },
      {
        n: "q3",
        f: "+- 100000 0 q2"
      },
      {
        n: "maxAdj3",
        f: "*/ q3 h ss"
      },
      {
        n: "a3",
        f: "pin 0 adj3 maxAdj3"
      },
      {
        n: "q1",
        f: "+- a3 a1 0"
      },
      {
        n: "minAdj5",
        f: "*/ q1 ss h"
      },
      {
        n: "a5",
        f: "pin minAdj5 adj5 100000"
      },
      {
        n: "th",
        f: "*/ ss a1 100000"
      },
      {
        n: "aw2",
        f: "*/ ss a2 100000"
      },
      {
        n: "th2",
        f: "*/ th 1 2"
      },
      {
        n: "dh2",
        f: "+- aw2 0 th2"
      },
      {
        n: "y5",
        f: "*/ h a5 100000"
      },
      {
        n: "ah",
        f: "*/ ss a3 100000"
      },
      {
        n: "y4",
        f: "+- y5 0 ah"
      },
      {
        n: "x9",
        f: "+- r 0 dh2"
      },
      {
        n: "bw",
        f: "*/ x9 1 2"
      },
      {
        n: "bs",
        f: "min bw y4"
      },
      {
        n: "maxAdj4",
        f: "*/ bs 100000 ss"
      },
      {
        n: "a4",
        f: "pin 0 adj4 maxAdj4"
      },
      {
        n: "bd",
        f: "*/ ss a4 100000"
      },
      {
        n: "bd3",
        f: "+- bd 0 th"
      },
      {
        n: "bd2",
        f: "max bd3 0"
      },
      {
        n: "x3",
        f: "+- th bd2 0"
      },
      {
        n: "x8",
        f: "+- r 0 aw2"
      },
      {
        n: "x6",
        f: "+- x8 0 aw2"
      },
      {
        n: "x7",
        f: "+- x6 dh2 0"
      },
      {
        n: "x4",
        f: "+- x9 0 bd"
      },
      {
        n: "x5",
        f: "+- x7 0 bd2"
      },
      {
        n: "cx",
        f: "+/ th x7 2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "bd"
            }
          },
          {
            type: "arcTo",
            wR: "bd",
            hR: "bd",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "bd",
            hR: "bd",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x9",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x8",
              y: "y5"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x7",
              y: "y4"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x7",
              y: "x3"
            }
          },
          {
            type: "arcTo",
            wR: "bd2",
            hR: "bd2",
            stAng: "0",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "th"
            }
          },
          {
            type: "arcTo",
            wR: "bd2",
            hR: "bd2",
            stAng: "3cd4",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "th",
              y: "b"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  verticalScroll: {
    avLst: [
      {
        n: "adj",
        f: "val 12500"
      }
    ],
    gdLst: [
      {
        n: "a",
        f: "pin 0 adj 25000"
      },
      {
        n: "ch",
        f: "*/ ss a 100000"
      },
      {
        n: "ch2",
        f: "*/ ch 1 2"
      },
      {
        n: "ch4",
        f: "*/ ch 1 4"
      },
      {
        n: "x3",
        f: "+- ch ch2 0"
      },
      {
        n: "x4",
        f: "+- ch ch 0"
      },
      {
        n: "x6",
        f: "+- r 0 ch"
      },
      {
        n: "x7",
        f: "+- r 0 ch2"
      },
      {
        n: "x5",
        f: "+- x6 0 ch2"
      },
      {
        n: "y3",
        f: "+- b 0 ch"
      },
      {
        n: "y4",
        f: "+- b 0 ch2"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "ch2",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "ch2",
            hR: "ch2",
            stAng: "cd4",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "ch2",
              y: "y4"
            }
          },
          {
            type: "arcTo",
            wR: "ch4",
            hR: "ch4",
            stAng: "cd4",
            swAng: "-10800000"
          },
          {
            type: "lnTo",
            pt: {
              x: "ch",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "ch",
              y: "ch2"
            }
          },
          {
            type: "arcTo",
            wR: "ch2",
            hR: "ch2",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x7",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "ch2",
            hR: "ch2",
            stAng: "3cd4",
            swAng: "cd2"
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "ch"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "y4"
            }
          },
          {
            type: "arcTo",
            wR: "ch2",
            hR: "ch2",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "x4",
              y: "ch2"
            }
          },
          {
            type: "arcTo",
            wR: "ch2",
            hR: "ch2",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "ch4",
            hR: "ch4",
            stAng: "cd4",
            swAng: "cd2"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x4",
              y: "ch2"
            }
          },
          {
            type: "arcTo",
            wR: "ch2",
            hR: "ch2",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "arcTo",
            wR: "ch4",
            hR: "ch4",
            stAng: "cd4",
            swAng: "cd2"
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "ch",
              y: "y4"
            }
          },
          {
            type: "arcTo",
            wR: "ch2",
            hR: "ch2",
            stAng: "0",
            swAng: "3cd4"
          },
          {
            type: "arcTo",
            wR: "ch4",
            hR: "ch4",
            stAng: "3cd4",
            swAng: "cd2"
          },
          {
            type: "close"
          }
        ],
        fill: "darkenLess",
        extrusionOk: false,
        stroke: false
      },
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "ch",
              y: "y3"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "ch",
              y: "ch2"
            }
          },
          {
            type: "arcTo",
            wR: "ch2",
            hR: "ch2",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x7",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "ch2",
            hR: "ch2",
            stAng: "3cd4",
            swAng: "cd2"
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "ch"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x6",
              y: "y4"
            }
          },
          {
            type: "arcTo",
            wR: "ch2",
            hR: "ch2",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "ch2",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "ch2",
            hR: "ch2",
            stAng: "cd4",
            swAng: "cd2"
          },
          {
            type: "close"
          },
          {
            type: "moveTo",
            pt: {
              x: "x3",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "ch2",
            hR: "ch2",
            stAng: "3cd4",
            swAng: "cd2"
          },
          {
            type: "arcTo",
            wR: "ch4",
            hR: "ch4",
            stAng: "cd4",
            swAng: "cd2"
          },
          {
            type: "lnTo",
            pt: {
              x: "x4",
              y: "ch2"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "x6",
              y: "ch"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x3",
              y: "ch"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "ch2",
              y: "y3"
            }
          },
          {
            type: "arcTo",
            wR: "ch4",
            hR: "ch4",
            stAng: "3cd4",
            swAng: "cd2"
          },
          {
            type: "lnTo",
            pt: {
              x: "ch",
              y: "y4"
            }
          },
          {
            type: "moveTo",
            pt: {
              x: "ch2",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "ch2",
            hR: "ch2",
            stAng: "cd4",
            swAng: "-5400000"
          },
          {
            type: "lnTo",
            pt: {
              x: "ch",
              y: "y3"
            }
          }
        ],
        fill: "none",
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  wave: {
    avLst: [
      {
        n: "adj1",
        f: "val 12500"
      },
      {
        n: "adj2",
        f: "val 0"
      }
    ],
    gdLst: [
      {
        n: "a1",
        f: "pin 0 adj1 20000"
      },
      {
        n: "a2",
        f: "pin -10000 adj2 10000"
      },
      {
        n: "y1",
        f: "*/ h a1 100000"
      },
      {
        n: "dy2",
        f: "*/ y1 10 3"
      },
      {
        n: "y2",
        f: "+- y1 0 dy2"
      },
      {
        n: "y3",
        f: "+- y1 dy2 0"
      },
      {
        n: "y4",
        f: "+- b 0 y1"
      },
      {
        n: "y5",
        f: "+- y4 0 dy2"
      },
      {
        n: "y6",
        f: "+- y4 dy2 0"
      },
      {
        n: "dx1",
        f: "*/ w a2 100000"
      },
      {
        n: "of2",
        f: "*/ w a2 50000"
      },
      {
        n: "x1",
        f: "abs dx1"
      },
      {
        n: "dx2",
        f: "?: of2 0 of2"
      },
      {
        n: "x2",
        f: "+- l 0 dx2"
      },
      {
        n: "dx5",
        f: "?: of2 of2 0"
      },
      {
        n: "x5",
        f: "+- r 0 dx5"
      },
      {
        n: "dx3",
        f: "+/ dx2 x5 3"
      },
      {
        n: "x3",
        f: "+- x2 dx3 0"
      },
      {
        n: "x4",
        f: "+/ x3 x5 2"
      },
      {
        n: "x6",
        f: "+- l dx5 0"
      },
      {
        n: "x10",
        f: "+- r dx2 0"
      },
      {
        n: "x7",
        f: "+- x6 dx3 0"
      },
      {
        n: "x8",
        f: "+/ x7 x10 2"
      },
      {
        n: "x9",
        f: "+- r 0 x1"
      },
      {
        n: "xAdj",
        f: "+- hc dx1 0"
      },
      {
        n: "xAdj2",
        f: "+- hc 0 dx1"
      },
      {
        n: "il",
        f: "max x2 x6"
      },
      {
        n: "ir",
        f: "min x5 x10"
      },
      {
        n: "it",
        f: "*/ h a1 50000"
      },
      {
        n: "ib",
        f: "+- b 0 it"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "x2",
              y: "y1"
            }
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "x3",
                y: "y2"
              },
              {
                x: "x4",
                y: "y3"
              },
              {
                x: "x5",
                y: "y1"
              }
            ]
          },
          {
            type: "lnTo",
            pt: {
              x: "x10",
              y: "y4"
            }
          },
          {
            type: "cubicBezTo",
            pts: [
              {
                x: "x8",
                y: "y6"
              },
              {
                x: "x7",
                y: "y5"
              },
              {
                x: "x6",
                y: "y4"
              }
            ]
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  wedgeEllipseCallout: {
    avLst: [
      {
        n: "adj1",
        f: "val -20833"
      },
      {
        n: "adj2",
        f: "val 62500"
      }
    ],
    gdLst: [
      {
        n: "dxPos",
        f: "*/ w adj1 100000"
      },
      {
        n: "dyPos",
        f: "*/ h adj2 100000"
      },
      {
        n: "xPos",
        f: "+- hc dxPos 0"
      },
      {
        n: "yPos",
        f: "+- vc dyPos 0"
      },
      {
        n: "sdx",
        f: "*/ dxPos h 1"
      },
      {
        n: "sdy",
        f: "*/ dyPos w 1"
      },
      {
        n: "pang",
        f: "at2 sdx sdy"
      },
      {
        n: "stAng",
        f: "+- pang 660000 0"
      },
      {
        n: "enAng",
        f: "+- pang 0 660000"
      },
      {
        n: "dx1",
        f: "cos wd2 stAng"
      },
      {
        n: "dy1",
        f: "sin hd2 stAng"
      },
      {
        n: "x1",
        f: "+- hc dx1 0"
      },
      {
        n: "y1",
        f: "+- vc dy1 0"
      },
      {
        n: "dx2",
        f: "cos wd2 enAng"
      },
      {
        n: "dy2",
        f: "sin hd2 enAng"
      },
      {
        n: "x2",
        f: "+- hc dx2 0"
      },
      {
        n: "y2",
        f: "+- vc dy2 0"
      },
      {
        n: "stAng1",
        f: "at2 dx1 dy1"
      },
      {
        n: "enAng1",
        f: "at2 dx2 dy2"
      },
      {
        n: "swAng1",
        f: "+- enAng1 0 stAng1"
      },
      {
        n: "swAng2",
        f: "+- swAng1 21600000 0"
      },
      {
        n: "swAng",
        f: "?: swAng1 swAng1 swAng2"
      },
      {
        n: "idx",
        f: "cos wd2 2700000"
      },
      {
        n: "idy",
        f: "sin hd2 2700000"
      },
      {
        n: "il",
        f: "+- hc 0 idx"
      },
      {
        n: "ir",
        f: "+- hc idx 0"
      },
      {
        n: "it",
        f: "+- vc 0 idy"
      },
      {
        n: "ib",
        f: "+- vc idy 0"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "xPos",
              y: "yPos"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "y1"
            }
          },
          {
            type: "arcTo",
            wR: "wd2",
            hR: "hd2",
            stAng: "stAng1",
            swAng: "swAng"
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  wedgeRectCallout: {
    avLst: [
      {
        n: "adj1",
        f: "val -20833"
      },
      {
        n: "adj2",
        f: "val 62500"
      }
    ],
    gdLst: [
      {
        n: "dxPos",
        f: "*/ w adj1 100000"
      },
      {
        n: "dyPos",
        f: "*/ h adj2 100000"
      },
      {
        n: "xPos",
        f: "+- hc dxPos 0"
      },
      {
        n: "yPos",
        f: "+- vc dyPos 0"
      },
      {
        n: "dx",
        f: "+- xPos 0 hc"
      },
      {
        n: "dy",
        f: "+- yPos 0 vc"
      },
      {
        n: "dq",
        f: "*/ dxPos h w"
      },
      {
        n: "ady",
        f: "abs dyPos"
      },
      {
        n: "adq",
        f: "abs dq"
      },
      {
        n: "dz",
        f: "+- ady 0 adq"
      },
      {
        n: "xg1",
        f: "?: dxPos 7 2"
      },
      {
        n: "xg2",
        f: "?: dxPos 10 5"
      },
      {
        n: "x1",
        f: "*/ w xg1 12"
      },
      {
        n: "x2",
        f: "*/ w xg2 12"
      },
      {
        n: "yg1",
        f: "?: dyPos 7 2"
      },
      {
        n: "yg2",
        f: "?: dyPos 10 5"
      },
      {
        n: "y1",
        f: "*/ h yg1 12"
      },
      {
        n: "y2",
        f: "*/ h yg2 12"
      },
      {
        n: "t1",
        f: "?: dxPos l xPos"
      },
      {
        n: "xl",
        f: "?: dz l t1"
      },
      {
        n: "t2",
        f: "?: dyPos x1 xPos"
      },
      {
        n: "xt",
        f: "?: dz t2 x1"
      },
      {
        n: "t3",
        f: "?: dxPos xPos r"
      },
      {
        n: "xr",
        f: "?: dz r t3"
      },
      {
        n: "t4",
        f: "?: dyPos xPos x1"
      },
      {
        n: "xb",
        f: "?: dz t4 x1"
      },
      {
        n: "t5",
        f: "?: dxPos y1 yPos"
      },
      {
        n: "yl",
        f: "?: dz y1 t5"
      },
      {
        n: "t6",
        f: "?: dyPos t yPos"
      },
      {
        n: "yt",
        f: "?: dz t6 t"
      },
      {
        n: "t7",
        f: "?: dxPos yPos y1"
      },
      {
        n: "yr",
        f: "?: dz y1 t7"
      },
      {
        n: "t8",
        f: "?: dyPos yPos b"
      },
      {
        n: "yb",
        f: "?: dz t8 b"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xt",
              y: "yt"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xr",
              y: "yr"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xb",
              y: "yb"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xl",
              y: "yl"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "y1"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  },
  wedgeRoundRectCallout: {
    avLst: [
      {
        n: "adj1",
        f: "val -20833"
      },
      {
        n: "adj2",
        f: "val 62500"
      },
      {
        n: "adj3",
        f: "val 16667"
      }
    ],
    gdLst: [
      {
        n: "dxPos",
        f: "*/ w adj1 100000"
      },
      {
        n: "dyPos",
        f: "*/ h adj2 100000"
      },
      {
        n: "xPos",
        f: "+- hc dxPos 0"
      },
      {
        n: "yPos",
        f: "+- vc dyPos 0"
      },
      {
        n: "dq",
        f: "*/ dxPos h w"
      },
      {
        n: "ady",
        f: "abs dyPos"
      },
      {
        n: "adq",
        f: "abs dq"
      },
      {
        n: "dz",
        f: "+- ady 0 adq"
      },
      {
        n: "xg1",
        f: "?: dxPos 7 2"
      },
      {
        n: "xg2",
        f: "?: dxPos 10 5"
      },
      {
        n: "x1",
        f: "*/ w xg1 12"
      },
      {
        n: "x2",
        f: "*/ w xg2 12"
      },
      {
        n: "yg1",
        f: "?: dyPos 7 2"
      },
      {
        n: "yg2",
        f: "?: dyPos 10 5"
      },
      {
        n: "y1",
        f: "*/ h yg1 12"
      },
      {
        n: "y2",
        f: "*/ h yg2 12"
      },
      {
        n: "t1",
        f: "?: dxPos l xPos"
      },
      {
        n: "xl",
        f: "?: dz l t1"
      },
      {
        n: "t2",
        f: "?: dyPos x1 xPos"
      },
      {
        n: "xt",
        f: "?: dz t2 x1"
      },
      {
        n: "t3",
        f: "?: dxPos xPos r"
      },
      {
        n: "xr",
        f: "?: dz r t3"
      },
      {
        n: "t4",
        f: "?: dyPos xPos x1"
      },
      {
        n: "xb",
        f: "?: dz t4 x1"
      },
      {
        n: "t5",
        f: "?: dxPos y1 yPos"
      },
      {
        n: "yl",
        f: "?: dz y1 t5"
      },
      {
        n: "t6",
        f: "?: dyPos t yPos"
      },
      {
        n: "yt",
        f: "?: dz t6 t"
      },
      {
        n: "t7",
        f: "?: dxPos yPos y1"
      },
      {
        n: "yr",
        f: "?: dz y1 t7"
      },
      {
        n: "t8",
        f: "?: dyPos yPos b"
      },
      {
        n: "yb",
        f: "?: dz t8 b"
      },
      {
        n: "u1",
        f: "*/ ss adj3 100000"
      },
      {
        n: "u2",
        f: "+- r 0 u1"
      },
      {
        n: "v2",
        f: "+- b 0 u1"
      },
      {
        n: "il",
        f: "*/ u1 29289 100000"
      },
      {
        n: "ir",
        f: "+- r 0 il"
      },
      {
        n: "ib",
        f: "+- b 0 il"
      }
    ],
    pathLst: [
      {
        defines: [
          {
            type: "moveTo",
            pt: {
              x: "l",
              y: "u1"
            }
          },
          {
            type: "arcTo",
            wR: "u1",
            hR: "u1",
            stAng: "cd2",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xt",
              y: "yt"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "t"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "u2",
              y: "t"
            }
          },
          {
            type: "arcTo",
            wR: "u1",
            hR: "u1",
            stAng: "3cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y1"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xr",
              y: "yr"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "r",
              y: "v2"
            }
          },
          {
            type: "arcTo",
            wR: "u1",
            hR: "u1",
            stAng: "0",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "x2",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xb",
              y: "yb"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "x1",
              y: "b"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "u1",
              y: "b"
            }
          },
          {
            type: "arcTo",
            wR: "u1",
            hR: "u1",
            stAng: "cd4",
            swAng: "cd4"
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "y2"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "xl",
              y: "yl"
            }
          },
          {
            type: "lnTo",
            pt: {
              x: "l",
              y: "y1"
            }
          },
          {
            type: "close"
          }
        ],
        extrusionOk: false,
        stroke: true
      }
    ]
  }
};

// node_modules/office-viewer/esm/openxml/drawing/svg/formulas.js
var angleFactor = 1 / 6e4 / 180 * Math.PI;
var formulas = {
  "*/": function(x, y, z) {
    return x * y / z;
  },
  "+-": function(x, y, z) {
    return x + y - z;
  },
  "+/": function(x, y, z) {
    return (x + y) / z;
  },
  "?:": function(x, y, z) {
    return x > 0 ? y : z;
  },
  "abs": function(x) {
    return Math.abs(x);
  },
  "at2": function(x, y) {
    return Math.atan2(y, x) * 180 * 6e4 / Math.PI;
  },
  "cat2": function(x, y, z) {
    return x * Math.cos(Math.atan2(z, y));
  },
  "cos": function(x, y) {
    return x * Math.cos(y * angleFactor);
  },
  "max": function(x, y) {
    return Math.max(x, y);
  },
  "min": function(x, y) {
    return Math.min(x, y);
  },
  "mod": function(x, y, z) {
    return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
  },
  "pin": function(x, y, z) {
    return y < x ? x : y > z ? z : y;
  },
  "sat2": function(x, y, z) {
    return x * Math.sin(Math.atan2(z, y));
  },
  "sin": function(x, y) {
    return x * Math.sin(y * angleFactor);
  },
  "sqrt": function(x) {
    return Math.sqrt(x);
  },
  "tan": function(x, y) {
    return x * Math.tan(y * angleFactor);
  },
  "val": function(a) {
    var parse = parseInt(a, 10);
    if (isNaN(parse)) {
      return parse;
    }
    return parse;
  }
};
function evalFmla(name, fmla, vars) {
  var fmlaArr = fmla.split(/[ ]+/);
  if (fmlaArr.length <= 1) {
    console.warn("fmla format error", fmla);
  }
  var fmlaName = fmlaArr[0];
  var fmlaArgs = fmlaArr.slice(1);
  var fmlaArgsNum = fmlaArgs.map(function(arg) {
    if (arg in vars) {
      return vars[arg];
    }
    var parse = parseInt(arg, 10);
    if (isNaN(parse)) {
      console.warn("fmla arg error", arg, fmla);
      return 0;
    } else {
      return parse;
    }
  });
  if (fmlaName in formulas) {
    var val = formulas[fmlaName].apply(null, fmlaArgsNum);
    if (isNaN(val)) {
      console.warn("fmla eval error", fmla, name);
      return 0;
    } else {
      vars[name] = val;
    }
  }
  return 0;
}

// node_modules/office-viewer/esm/openxml/drawing/svg/arcToA.js
function floatEqual(a, b) {
  if (a === b) {
    return true;
  }
  var diff = Math.abs(a - b);
  if (diff < Number.EPSILON) {
    return true;
  }
  return diff <= Number.EPSILON * Math.min(Math.abs(a), Math.abs(b));
}
var radians = function(deg) {
  return Math.PI * (deg / 6e4 / 180);
};
function arcToPathA(wR, hR, stAng, swAng, preX, preY) {
  var startR = radians(stAng);
  var swAngR = radians(swAng);
  var endR = radians(stAng + swAng);
  if (floatEqual(swAng, 6e4 * 360)) {
    endR = endR - 1e-4;
  }
  var end = getEndPoint(wR, hR, startR, endR, 0, preX, preY);
  var largeArcFlag = Math.abs(swAngR) > Math.PI ? 1 : 0;
  var sweepFlag = swAng > 0 ? 1 : 0;
  var path = "A ".concat(wR, " ").concat(hR, " 0 ").concat(largeArcFlag, " ").concat(sweepFlag, " ").concat(end.x, ",").concat(end.y);
  return {
    path,
    end
  };
}
function matrixMul(first, second) {
  return [
    first[0][0] * second[0] + first[0][1] * second[1],
    first[1][0] * second[0] + first[1][1] * second[1]
  ];
}
function getEndPoint(rx, ry, stAng, swAng, rotate, x, y) {
  var startR = stAng;
  var endR = swAng;
  var matrixX1Y1 = [x, y];
  var matrix1 = [
    [Math.cos(rotate), -Math.sin(rotate)],
    [Math.sin(rotate), Math.cos(rotate)]
  ];
  var matrix2 = [rx * Math.cos(startR), ry * Math.sin(startR)];
  var secondPart = matrixMul(matrix1, matrix2);
  var matrixCxCy = [
    matrixX1Y1[0] - secondPart[0],
    matrixX1Y1[1] - secondPart[1]
  ];
  var matrix3 = [rx * Math.cos(endR), ry * Math.sin(endR)];
  var firstPart = matrixMul(matrix1, matrix3);
  var result = [matrixCxCy[0] + firstPart[0], matrixCxCy[1] + firstPart[1]];
  return {
    x: result[0],
    y: result[1]
  };
}

// node_modules/office-viewer/esm/openxml/drawing/svg/generateDefines.js
function getVal2(name, vars, scale) {
  var result = 0;
  if (name in vars) {
    result = vars[name];
  } else {
    result = parseInt(name, 10);
    if (isNaN(result)) {
      console.warn("var not found", name);
      return 0;
    }
  }
  if (scale) {
    return result * scale;
  } else {
    return result;
  }
}
function generateDefines(path, vars, prevPoint) {
  var e_1, _a2;
  var defines = path.defines;
  var paths = [];
  var w = path.w;
  var h = path.h;
  var wScale = 1;
  var hScale = 1;
  if (w) {
    wScale = vars["w"] / w;
  }
  if (h) {
    hScale = vars["h"] / h;
  }
  try {
    for (var defines_1 = __values(defines), defines_1_1 = defines_1.next(); !defines_1_1.done; defines_1_1 = defines_1.next()) {
      var def = defines_1_1.value;
      switch (def.type) {
        case "moveTo": {
          var pt = def.pt;
          var x = getVal2(pt.x, vars, wScale);
          var y = getVal2(pt.y, vars, hScale);
          paths.push("M ".concat(x, " ").concat(y));
          prevPoint.push({ x, y });
          break;
        }
        case "lnTo": {
          var pt = def.pt;
          var x = getVal2(pt.x, vars, wScale);
          var y = getVal2(pt.y, vars, hScale);
          paths.push("L ".concat(x, " ").concat(y));
          prevPoint.push({ x, y });
          break;
        }
        case "arcTo": {
          var arc = def;
          var wR = getVal2(arc.wR, vars, wScale);
          var hR = getVal2(arc.hR, vars, hScale);
          var stAng = getVal2(arc.stAng, vars);
          var swAng = getVal2(arc.swAng, vars);
          var prev = {
            x: 0,
            y: 0
          };
          if (prevPoint.length > 0) {
            prev = prevPoint[prevPoint.length - 1];
          }
          var aPath = arcToPathA(wR, hR, stAng, swAng, prev.x, prev.y);
          paths.push(aPath.path);
          prevPoint.push({ x: aPath.end.x, y: aPath.end.y });
          break;
        }
        case "quadBezTo": {
          var quadBezTo = def;
          if (quadBezTo.pts.length >= 2) {
            var pt1 = quadBezTo.pts[0];
            var pt2 = quadBezTo.pts[1];
            var x1 = getVal2(pt1.x, vars, wScale);
            var y1 = getVal2(pt1.y, vars, hScale);
            var x2 = getVal2(pt2.x, vars, wScale);
            var y2 = getVal2(pt2.y, vars, hScale);
            paths.push("Q ".concat(x1, ",").concat(y1, " ").concat(x2, ",").concat(y2));
            if (quadBezTo.pts.length > 2) {
              var pt3 = quadBezTo.pts[2];
              var x3 = getVal2(pt3.x, vars, wScale);
              var y3 = getVal2(pt3.y, vars, hScale);
              paths.push("T ".concat(x3, ",").concat(y3));
              prevPoint.push({ x: x3, y: y3 });
            } else {
              prevPoint.push({ x: x2, y: y2 });
            }
          } else {
            console.warn("quadBezTo pts length must large than 2", def);
          }
          break;
        }
        case "cubicBezTo": {
          var cubicBezTo = def;
          if (cubicBezTo.pts.length === 3) {
            var pt1 = cubicBezTo.pts[0];
            var pt2 = cubicBezTo.pts[1];
            var pt3 = cubicBezTo.pts[2];
            var x1 = getVal2(pt1.x, vars, wScale);
            var y1 = getVal2(pt1.y, vars, hScale);
            var x2 = getVal2(pt2.x, vars, wScale);
            var y2 = getVal2(pt2.y, vars, hScale);
            var x3 = getVal2(pt3.x, vars, wScale);
            var y3 = getVal2(pt3.y, vars, hScale);
            paths.push("C ".concat(x1, ",").concat(y1, " ").concat(x2, ",").concat(y2, " ").concat(x3, ",").concat(y3));
            prevPoint.push({ x: x3, y: y3 });
          } else {
            console.warn("cubicBezTo pts length must be 3", def);
          }
          break;
        }
        case "close":
          paths.push("Z");
          break;
        default:
          break;
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (defines_1_1 && !defines_1_1.done && (_a2 = defines_1.return))
        _a2.call(defines_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return paths.join(" ");
}

// node_modules/office-viewer/esm/openxml/drawing/svg/presetVal.js
function presetVal(w, h) {
  var ss = Math.min(w, h);
  var ssd2 = ss / 6;
  var ssd6 = ss / 6;
  var ssd8 = ss / 8;
  var ssd32 = ss / 32;
  var ssd16 = ss / 16;
  return {
    "t": 0,
    "3cd4": 162e5,
    "3cd8": 81e5,
    "5cd8": 135e5,
    "7cd8": 189e5,
    "b": h,
    "cd2": 108e5,
    "cd4": 54e5,
    "cd8": 27e5,
    h,
    "hd2": h / 2,
    "hd3": h / 3,
    "hd4": h / 4,
    "hd6": h / 6,
    "hd8": h / 8,
    "l": 0,
    "ls": Math.max(w, h),
    "r": w,
    ss,
    ssd2,
    ssd6,
    ssd8,
    ssd16,
    ssd32,
    "hc": w / 2,
    "vc": h / 2,
    w,
    "wd2": w / 2,
    "wd3": w / 3,
    "wd4": w / 4,
    "wd6": w / 6,
    "wd8": w / 8,
    "wd10": w / 10,
    "wd16": w / 16,
    "wd32": w / 32
  };
}

// node_modules/office-viewer/esm/openxml/drawing/svg/shapeToSVG.js
function shapeToSVG(shape, avLst, shapePr, width, height, wpsStyle) {
  var e_1, _a2, e_2, _b2, e_3, _c, e_4, _d;
  var svg = createSVGElement("svg");
  svg.style.display = "block";
  svg.setAttribute("style", "display: block; overflow: visible; position: absolute; z-index: -1");
  svg.setAttribute("width", width.toString() + "px");
  svg.setAttribute("height", height.toString() + "px");
  var vars = presetVal(width, height);
  try {
    for (var _e = __values(shape.avLst || []), _f = _e.next(); !_f.done; _f = _e.next()) {
      var gd = _f.value;
      evalFmla(gd.n, gd.f, vars);
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_f && !_f.done && (_a2 = _e.return))
        _a2.call(_e);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  try {
    for (var avLst_1 = __values(avLst), avLst_1_1 = avLst_1.next(); !avLst_1_1.done; avLst_1_1 = avLst_1.next()) {
      var gd = avLst_1_1.value;
      evalFmla(gd.n, gd.f, vars);
    }
  } catch (e_2_1) {
    e_2 = { error: e_2_1 };
  } finally {
    try {
      if (avLst_1_1 && !avLst_1_1.done && (_b2 = avLst_1.return))
        _b2.call(avLst_1);
    } finally {
      if (e_2)
        throw e_2.error;
    }
  }
  try {
    for (var _g = __values(shape.gdLst || []), _h = _g.next(); !_h.done; _h = _g.next()) {
      var gd = _h.value;
      evalFmla(gd.n, gd.f, vars);
    }
  } catch (e_3_1) {
    e_3 = { error: e_3_1 };
  } finally {
    try {
      if (_h && !_h.done && (_c = _g.return))
        _c.call(_g);
    } finally {
      if (e_3)
        throw e_3.error;
    }
  }
  var outline = shapePr.outline;
  var prevPoint = [];
  try {
    for (var _j = __values(shape.pathLst || []), _k = _j.next(); !_k.done; _k = _j.next()) {
      var path = _k.value;
      var pathEl = createSVGElement("path");
      var d = generateDefines(path, vars, prevPoint);
      pathEl.setAttribute("d", d);
      if (shapePr.fillColor) {
        pathEl.setAttribute("fill", shapePr.fillColor);
      } else if (wpsStyle && wpsStyle.fillColor) {
        pathEl.setAttribute("fill", wpsStyle.fillColor);
      } else {
        pathEl.setAttribute("fill", "none");
      }
      if (outline) {
        if (outline.color) {
          pathEl.setAttribute("stroke", outline.color);
        }
        if (outline.width) {
          pathEl.setAttribute("stroke-width", outline.width);
        }
        if (outline.style === "none") {
          pathEl.setAttribute("stroke", "none");
        }
      } else if (wpsStyle && wpsStyle.lineColor) {
        pathEl.setAttribute("stroke", wpsStyle.lineColor);
      } else {
        pathEl.setAttribute("stroke", "none");
      }
      var fillColor = pathEl.getAttribute("fill");
      if (fillColor && fillColor !== "none") {
        var color = new Color(fillColor);
        var fillMode = path.fill;
        var changeColor = "";
        switch (fillMode) {
          case "darken":
            changeColor = color.lumOff(-0.5).toHex();
            break;
          case "darkenLess":
            changeColor = color.lumOff(-0.2).toHex();
            break;
          case "lighten":
            changeColor = color.lumOff(0.5).toHex();
            break;
          case "lightenLess":
            changeColor = color.lumOff(0.2).toHex();
            break;
        }
        if (changeColor) {
          pathEl.setAttribute("fill", changeColor);
        }
      }
      if (path.fill === "none") {
        pathEl.setAttribute("fill", "none");
      }
      if (path.stroke === false) {
        pathEl.setAttribute("stroke", "none");
        if (!path.fill) {
          pathEl.setAttribute("fill", "none");
        }
      }
      if (shapePr.noFill) {
        pathEl.setAttribute("fill", "none");
      }
      svg.appendChild(pathEl);
    }
  } catch (e_4_1) {
    e_4 = { error: e_4_1 };
  } finally {
    try {
      if (_k && !_k.done && (_d = _j.return))
        _d.call(_j);
    } finally {
      if (e_4)
        throw e_4.error;
    }
  }
  return svg;
}

// node_modules/office-viewer/esm/render/renderGeom.js
function renderGeom(geom, shapePr, width, height, wpsStyle) {
  if (geom.prst) {
    var shape = presetShape[geom.prst];
    if (shape) {
      return shapeToSVG(shape, geom.avLst || [], shapePr, width, height, wpsStyle);
    }
  }
  return null;
}

// node_modules/office-viewer/esm/render/renderCustGeom.js
function renderCustGeom(geom, shapePr, width, height, wpsStyle) {
  if (geom.shape) {
    return shapeToSVG(geom.shape, [], shapePr, width, height, wpsStyle);
  }
  return null;
}

// node_modules/office-viewer/esm/render/renderDrawing.js
function renderPic(pic, word, wpg) {
  var _a2, _b2, _c;
  if (wpg === void 0) {
    wpg = null;
  }
  var blip = (_a2 = pic.blipFill) === null || _a2 === void 0 ? void 0 : _a2.blip;
  if (blip && blip.src) {
    var img = document.createElement("img");
    img.style.position = "relative";
    img.alt = pic.alt || "";
    img.src = blip.src;
    if (pic.alt && word.renderOptions.enableVar) {
      if (pic.altVar) {
        img.src = pic.altVar;
      } else if (pic.alt.startsWith("{{")) {
        var src = word.replaceText(pic.alt);
        if (src) {
          img.src = src;
        }
      }
    }
    var xfrm = (_b2 = pic.spPr) === null || _b2 === void 0 ? void 0 : _b2.xfrm;
    if (xfrm) {
      if (wpg) {
        var rect = getRectInGroup(xfrm, (_c = wpg.spPr) === null || _c === void 0 ? void 0 : _c.xfrm);
        if (rect) {
          img.style.position = "absolute";
          img.style.left = rect.left + "px";
          img.style.top = rect.top + "px";
          img.style.width = rect.width + "px";
          img.style.height = rect.height + "px";
        }
      } else {
        var off = xfrm.off;
        if (off) {
          img.style.left = off.x;
          img.style.top = off.y;
        }
        var ext = xfrm.ext;
        if (ext) {
          img.style.width = ext.cx;
          img.style.height = ext.cy;
        }
      }
      if (xfrm.rot) {
        img.style.transform = "rotate(".concat(xfrm.rot, "deg)");
      }
    }
    return img;
  }
  return null;
}
function getRectInGroup(xfrm, groupXfrm) {
  var off = xfrm.off;
  var width = parseFloat(xfrm.ext.cx.replace("px", ""));
  var height = parseFloat(xfrm.ext.cy.replace("px", ""));
  if (off && groupXfrm.chOff && groupXfrm.ext && groupXfrm.chExt) {
    var scaleX = parseFloat(groupXfrm.ext.cx.replace("px", "")) / parseFloat(groupXfrm.chExt.cx.replace("px", ""));
    var scaleY = parseFloat(groupXfrm.ext.cy.replace("px", "")) / parseFloat(groupXfrm.chExt.cy.replace("px", ""));
    var groupOffX = parseFloat(groupXfrm.chOff.x.replace("px", ""));
    var groupOffY = parseFloat(groupXfrm.chOff.y.replace("px", ""));
    var x = parseFloat(off.x.replace("px", ""));
    var y = parseFloat(off.y.replace("px", ""));
    return {
      left: scaleX * (x - groupOffX),
      top: scaleY * (y - groupOffY),
      width: scaleX * width,
      height: scaleY * height
    };
  }
  return null;
}
function renderWps(word, container, wps, wpg) {
  var e_1, _a2;
  var _b2;
  if (wpg === void 0) {
    wpg = null;
  }
  var wpsStyle = wps.wpsStyle;
  var spPr = wps.spPr;
  applyStyle(container, wps.style);
  if (wpsStyle === null || wpsStyle === void 0 ? void 0 : wpsStyle.fontColor) {
    container.style.color = wpsStyle.fontColor;
  }
  if (spPr === null || spPr === void 0 ? void 0 : spPr.xfrm) {
    var ext = spPr.xfrm.ext;
    if (ext) {
      var width = parseFloat(ext.cx.replace("px", ""));
      var height = parseFloat(ext.cy.replace("px", ""));
      if (wpg) {
        container.style.position = "absolute";
        var rect = getRectInGroup(spPr.xfrm, (_b2 = wpg.spPr) === null || _b2 === void 0 ? void 0 : _b2.xfrm);
        if (rect) {
          container.style.left = rect.left + "px";
          container.style.top = rect.top + "px";
          width = rect.width;
          height = rect.height;
        }
      }
      container.style.width = width + "px";
      container.style.height = height + "px";
      if (spPr.geom) {
        appendChild(container, renderGeom(spPr.geom, spPr, width, height, wps.wpsStyle));
      }
      if (spPr.custGeom) {
        appendChild(container, renderCustGeom(spPr.custGeom, spPr, width, height, wps.wpsStyle));
      }
    }
    if (spPr.xfrm.rot) {
      container.style.transform = "rotate(".concat(spPr.xfrm.rot, "deg)");
    }
  }
  var txbxContent = wps.txbxContent;
  if (txbxContent.length) {
    var textContainer = document.createElement("div");
    textContainer.dataset.name = "textContainer";
    container.style.display = "table";
    textContainer.style.display = "table-cell";
    textContainer.style.verticalAlign = "middle";
    if (wps.style && wps.style["vertical-align"]) {
      textContainer.style.verticalAlign = wps.style["vertical-align"];
      container.style.verticalAlign = "";
    }
    appendChild(container, textContainer);
    try {
      for (var txbxContent_1 = __values(txbxContent), txbxContent_1_1 = txbxContent_1.next(); !txbxContent_1_1.done; txbxContent_1_1 = txbxContent_1.next()) {
        var txbxContentChild = txbxContent_1_1.value;
        if (txbxContentChild instanceof Paragraph) {
          appendChild(textContainer, renderParagraph(word, txbxContentChild));
        } else if (txbxContentChild instanceof Table) {
          appendChild(textContainer, renderTable(word, txbxContentChild));
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (txbxContent_1_1 && !txbxContent_1_1.done && (_a2 = txbxContent_1.return))
          _a2.call(txbxContent_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  }
}
function renderWpg(word, wpg) {
  var e_2, _a2, e_3, _b2;
  var _c, _d;
  var container = document.createElement("div");
  var wpgContainer = document.createElement("div");
  var spPr = wpg.spPr;
  if (spPr === null || spPr === void 0 ? void 0 : spPr.xfrm) {
    var ext = (_c = spPr === null || spPr === void 0 ? void 0 : spPr.xfrm) === null || _c === void 0 ? void 0 : _c.ext;
    if (ext) {
      wpgContainer.style.width = ext.cx;
      wpgContainer.style.height = ext.cy;
    }
    var rot = (_d = spPr === null || spPr === void 0 ? void 0 : spPr.xfrm) === null || _d === void 0 ? void 0 : _d.rot;
    if (rot) {
      wpgContainer.style.transform = "rotate(".concat(rot, "deg)");
    }
  }
  try {
    for (var _e = __values(wpg.wps), _f = _e.next(); !_f.done; _f = _e.next()) {
      var wps = _f.value;
      var wpsContainer = document.createElement("div");
      renderWps(word, wpsContainer, wps, wpg);
      appendChild(wpgContainer, wpsContainer);
    }
  } catch (e_2_1) {
    e_2 = { error: e_2_1 };
  } finally {
    try {
      if (_f && !_f.done && (_a2 = _e.return))
        _a2.call(_e);
    } finally {
      if (e_2)
        throw e_2.error;
    }
  }
  try {
    for (var _g = __values(wpg.wpg), _h = _g.next(); !_h.done; _h = _g.next()) {
      var childWpg = _h.value;
      appendChild(container, renderWpg(word, childWpg));
    }
  } catch (e_3_1) {
    e_3 = { error: e_3_1 };
  } finally {
    try {
      if (_h && !_h.done && (_b2 = _g.return))
        _b2.call(_g);
    } finally {
      if (e_3)
        throw e_3.error;
    }
  }
  if (wpg.pic) {
    appendChild(wpgContainer, renderPic(wpg.pic, word, wpg));
  }
  appendChild(container, wpgContainer);
  return container;
}
function renderDrawing(word, drawing, inHeader) {
  var container = document.createElement("div");
  if (drawing.position === "inline") {
    container.style.display = "inline-block";
  } else if (drawing.position === "anchor")
    ;
  if (drawing.pic) {
    appendChild(container, renderPic(drawing.pic, word));
  }
  if (drawing.relativeFromV === "page") {
    console.warn('暂不支持 drawing.relativeFromV === "page"');
  }
  applyStyle(container, drawing.containerStyle);
  container.dataset.id = drawing.id || "";
  container.dataset.name = drawing.name || "";
  if (drawing.wps) {
    renderWps(word, container, drawing.wps);
  }
  if (drawing.wpg) {
    appendChild(container, renderWpg(word, drawing.wpg));
  }
  if (container.children.length === 0) {
    return null;
  }
  return container;
}

// node_modules/office-viewer/esm/render/renderTab.js
function renderTab(word, tab, renderWidth) {
  if (renderWidth === void 0) {
    renderWidth = false;
  }
  var tabElement = createElement("span");
  tabElement.style.display = "inline-block";
  tabElement.style.width = "2em";
  tabElement.innerHTML = "&emsp;";
  if (tab.leader === "dot") {
    tabElement.style.borderBottom = "1pt dotted";
  }
  if (renderWidth && tab.pos && (tab.type === "start" || tab.type == "left")) {
    tabElement.style.width = tab.pos;
  }
  return tabElement;
}

// node_modules/office-viewer/esm/render/renderPict.js
function renderPict(word, pict) {
  if (pict.src) {
    var img = document.createElement("img");
    img.style.position = "relative";
    img.src = pict.src;
    return img;
  }
  return null;
}

// node_modules/office-viewer/esm/render/renderRuby.js
function renderRuby(word, ruby) {
  var e_1, _a2, e_2, _b2;
  var rubyElement = createElement("ruby");
  if (ruby.rubyBase) {
    try {
      for (var _c = __values(ruby.rubyBase.children), _d = _c.next(); !_d.done; _d = _c.next()) {
        var text = _d.value;
        rubyElement.appendChild(renderRun(word, text));
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_d && !_d.done && (_a2 = _c.return))
          _a2.call(_c);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    if (ruby.rt) {
      var rpStart = createElement("rp");
      rpStart.innerText = "(";
      rubyElement.appendChild(rpStart);
      var rtElement = createElement("rt");
      try {
        for (var _e = __values(ruby.rt.children), _f = _e.next(); !_f.done; _f = _e.next()) {
          var text = _f.value;
          rtElement.appendChild(renderRun(word, text));
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (_f && !_f.done && (_b2 = _e.return))
            _b2.call(_e);
        } finally {
          if (e_2)
            throw e_2.error;
        }
      }
      rubyElement.appendChild(rtElement);
      var rpEnd = createElement("rp");
      rpEnd.innerText = ")";
      rubyElement.appendChild(rpEnd);
    }
  }
  return rubyElement;
}

// node_modules/office-viewer/esm/render/renderHyperLink.js
function renderHyperLink(word, hyperlink, paragraph) {
  var e_1, _a2;
  var a = createElement("a");
  if (hyperlink.relation) {
    var rel = hyperlink.relation;
    if (rel && rel.targetMode === "External") {
      a.href = rel.target;
      a.target = "_blank";
    }
  }
  if (hyperlink.anchor) {
    a.href = "#" + hyperlink.anchor;
  }
  if (hyperlink.tooltip) {
    a.title = hyperlink.tooltip;
  }
  try {
    for (var _b2 = __values(hyperlink.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var child = _c.value;
      if (child instanceof Run) {
        var span = renderRun(word, child, paragraph);
        appendChild(a, span);
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return a;
}

// node_modules/office-viewer/esm/render/renderBookmark.js
function renderBookmarkStart(word, bookmarkStart) {
  var name = bookmarkStart.name;
  if (name) {
    var bookmark = createElement("a");
    bookmark.name = name;
    bookmark.id = name;
    return bookmark;
  }
  return null;
}

// node_modules/office-viewer/esm/render/renderInlineText.js
function renderInlineText(word, inlineText, parent) {
  var e_1, _a2;
  try {
    for (var _b2 = __values(inlineText.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var child = _c.value;
      if (child instanceof Run) {
        appendChild(parent, renderRun(word, child));
      } else if (child instanceof BookmarkStart) {
        appendChild(parent, renderBookmarkStart(word, child));
      } else if (child instanceof Hyperlink) {
        var hyperlink = renderHyperLink(word, child);
        appendChild(parent, hyperlink);
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
}

// node_modules/office-viewer/esm/render/renderInstrText.js
function renderInstrText(word, instrText) {
  var e_1, _a2;
  var _b2;
  var text = instrText.text;
  var span = createElement("span");
  var fldSimples = (_b2 = word.currentParagraph) === null || _b2 === void 0 ? void 0 : _b2.fldSimples;
  if (fldSimples) {
    try {
      for (var fldSimples_1 = __values(fldSimples), fldSimples_1_1 = fldSimples_1.next(); !fldSimples_1_1.done; fldSimples_1_1 = fldSimples_1.next()) {
        var fldSimple = fldSimples_1_1.value;
        if (fldSimple.instr === text.trim() || text.startsWith(fldSimple.instr + " ")) {
          renderInlineText(word, fldSimple.inlineText, span);
          break;
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (fldSimples_1_1 && !fldSimples_1_1.done && (_a2 = fldSimples_1.return))
          _a2.call(fldSimples_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  }
  return span;
}

// node_modules/office-viewer/esm/render/renderSym.js
function renderSym(word, sym) {
  var span = createElement("span");
  span.style.fontFamily = sym.font;
  span.innerHTML = "&#x".concat(sym.char, ";");
  return span;
}

// node_modules/office-viewer/esm/util/autoSpace.js
var punctuationRegex = /\p{Punctuation}/u;
var spaceRegex = /\p{Separator}/u;
var cjkRegex = /\p{Script=Han}|\p{Script=Katakana}|\p{Script=Hiragana}|\p{Script=Hangul}/u;
var shouldSpace = function(a, b) {
  if (cjkRegex.test(a)) {
    return !(punctuationRegex.test(b) || spaceRegex.test(b) || cjkRegex.test(b));
  } else {
    return cjkRegex.test(b) && !punctuationRegex.test(a) && !spaceRegex.test(a);
  }
};
var join = function(parts, sepFunc) {
  return parts.reduce(function(r, p, i) {
    var sep = i !== 0 ? sepFunc(p, parts[i - 1]) : "";
    return r + sep + p;
  }, "");
};
var cjkspace = function(strings) {
  var filtered = strings.filter(function(c) {
    return c !== void 0 && c !== "";
  });
  return join(filtered, function(a, b) {
    return shouldSpace(a, b) ? " " : "";
  });
};

// node_modules/office-viewer/esm/render/renderSoftHyphen.js
function renderSoftHyphen() {
  var softHyphen = createElement("span");
  softHyphen.innerHTML = "&shy;";
  return softHyphen;
}

// node_modules/office-viewer/esm/render/renderNoBreakHyphen.js
function renderNoBreakHyphen() {
  var softHyphen = createElement("span");
  softHyphen.innerHTML = "&ndash;";
  return softHyphen;
}

// node_modules/office-viewer/esm/render/renderSeparator.js
function renderSeparator() {
  var sep = createElement("hr");
  sep.style.borderTop = "1pt solid #bbb";
  return sep;
}

// node_modules/office-viewer/esm/render/renderRun.js
var VARIABLE_CLASS_NAME = "variable";
function renderText(span, word, text, paragraph) {
  var _a2;
  if (text.indexOf("{{") === -1) {
    var finalText = void 0;
    if ((_a2 = paragraph === null || paragraph === void 0 ? void 0 : paragraph.properties) === null || _a2 === void 0 ? void 0 : _a2.autoSpace) {
      finalText = cjkspace(text.split(""));
    } else {
      finalText = text;
    }
    span.textContent = finalText;
  } else {
    span.dataset.originText = text;
    span.classList.add(VARIABLE_CLASS_NAME);
    span.textContent = word.replaceText(text);
  }
  var html = span.innerHTML.split("  ").join("&nbsp;&nbsp;");
  span.innerHTML = html;
}
function updateVariableText(word) {
  var spans = word.rootElement.querySelectorAll(".".concat(VARIABLE_CLASS_NAME));
  for (var i = 0; i < spans.length; i++) {
    var span = spans[i];
    var text = span.dataset.originText || "";
    span.textContent = word.replaceText(text);
  }
}
function renderRun(word, run, paragraph, inFldChar, inHeader) {
  var e_1, _a2;
  var _b2, _c;
  var span = createElement("span");
  word.addClass(span, "r");
  setElementStyle(word, span, run.properties);
  if ((_b2 = run.properties) === null || _b2 === void 0 ? void 0 : _b2.rStyle) {
    var style = word.getStyle(run.properties.rStyle);
    if ((_c = style === null || style === void 0 ? void 0 : style.rPr) === null || _c === void 0 ? void 0 : _c.cssStyle) {
      applyStyle(span, style.rPr.cssStyle);
    }
  }
  if (run.children.length === 1 && run.children[0] instanceof Text) {
    var text = run.children[0];
    renderText(span, word, text.text, paragraph);
  } else {
    try {
      for (var _d = __values(run.children), _e = _d.next(); !_e.done; _e = _d.next()) {
        var child = _e.value;
        if (child instanceof Text) {
          var newSpan = createElement("span");
          renderText(newSpan, word, child.text, paragraph);
          appendChild(span, newSpan);
        } else if (child instanceof Break) {
          var br = renderBr(word, child);
          appendChild(span, br);
        } else if (child instanceof Drawing) {
          appendChild(span, renderDrawing(word, child, inHeader));
        } else if (child instanceof Tab) {
          appendChild(span, renderTab(word, child));
        } else if (child instanceof Pict) {
          appendChild(span, renderPict(word, child));
        } else if (child instanceof Ruby) {
          appendChild(span, renderRuby(word, child));
        } else if (child instanceof InstrText) {
          appendChild(span, renderInstrText(word, child));
        } else if (child instanceof Sym) {
          appendChild(span, renderSym(word, child));
        } else if (child instanceof SoftHyphen) {
          appendChild(span, renderSoftHyphen());
        } else if (child instanceof NoBreakHyphen) {
          appendChild(span, renderNoBreakHyphen());
        } else if (child instanceof Separator) {
          appendChild(span, renderSeparator());
        } else {
          console.warn("unknown child", child);
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_e && !_e.done && (_a2 = _d.return))
          _a2.call(_d);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  }
  return span;
}

// node_modules/office-viewer/esm/render/renderNumbering.js
function romanize(num) {
  var lookup = {
    M: 1e3,
    CM: 900,
    D: 500,
    CD: 400,
    C: 100,
    XC: 90,
    L: 50,
    XL: 40,
    X: 10,
    IX: 9,
    V: 5,
    IV: 4,
    I: 1
  };
  var roman = "";
  for (var key in lookup) {
    while (num >= lookup[key]) {
      roman += key;
      num -= lookup[key];
    }
  }
  return roman;
}
function convertNumToFormat(numFmt, num) {
  switch (numFmt) {
    case "decimal":
      return num.toString();
    case "lowerLetter":
      return String.fromCharCode(96 + num);
    case "upperLetter":
      return String.fromCharCode(64 + num);
    case "lowerRoman":
      return romanize(num).toLowerCase();
    case "upperRoman":
      return romanize(num).toUpperCase();
    case "bullet":
      return "&bull;";
    default:
      return num.toString();
  }
}
function renderNumbering(p, word, numPr) {
  var numbering = word.numbering;
  var numId = numPr.numId;
  if (!numId) {
    console.warn("renderNumbering: numId is empty");
    return null;
  }
  if (!numbering) {
    console.warn("renderNumbering: numbering is empty");
    return null;
  }
  var num = numbering.nums[numId];
  if (!num) {
    console.warn("renderNumbering: num is empty");
    return null;
  }
  var abstractNum = numbering.abstractNums[num.abstractNumId];
  var lvls = abstractNum.lvls;
  if (num.lvlOverride) {
    lvls = __assign(__assign({}, lvls), num.lvlOverride.lvls);
  }
  var lvl = lvls[numPr.ilvl];
  if (!lvl) {
    console.warn("renderNumbering: lvl is empty");
    return null;
  }
  var ilvl = numPr.ilvl;
  var ilvlData = numbering.numData[numId];
  if (!ilvlData[ilvl]) {
    ilvlData[ilvl] = lvl.start;
  } else {
    ilvlData[ilvl] += 1;
    for (var ilvIndex in ilvlData) {
      if (parseInt(ilvIndex) > parseInt(ilvl)) {
        ilvlData[ilvIndex] = 0;
      }
    }
  }
  var element = createElement("span");
  var lvlText = lvl.lvlText;
  var level = parseInt(ilvl);
  var levelNums = [];
  for (var i = 0; i <= level; i++) {
    var listNumber = ilvlData[i];
    if (listNumber) {
      var numFmt = lvls[i].numFmt;
      var numText = convertNumToFormat(numFmt, listNumber);
      if (lvl.isLgl) {
        numText = String(listNumber);
      }
      levelNums.push(numText);
    }
  }
  for (var i = 0; i < levelNums.length; i++) {
    var levelNum = levelNums[i];
    lvlText = lvlText.replace("%".concat(i + 1), levelNum);
  }
  setElementStyle(word, p, lvl.pPr);
  setElementStyle(word, element, lvl.rPr);
  if (lvl.numFmt !== "bullet" || word.renderOptions.bulletUseFont) {
    element.innerText = lvlText;
  } else {
    var bulletText = "&bull;";
    var unicodeString = lvlText.charCodeAt(0).toString(16).padStart(4, "0");
    if (unicodeString === "f06e") {
      bulletText = "&#9632;";
    } else if (unicodeString === "f075") {
      bulletText = "&#9670;";
    } else if (unicodeString === "f0d8") {
      bulletText = "&#9658;";
    }
    element.innerHTML = bulletText;
  }
  if (lvl.suff === "space") {
    element.innerHTML += " ";
  } else if (lvl.suff === "tab") {
    element.innerHTML += "&emsp;";
  }
  return element;
}

// node_modules/office-viewer/esm/util/xml.js
function parseXML(content) {
  return new DOMParser().parseFromString(content, "application/xml");
}
function buildXML(doc) {
  var serializer = new XMLSerializer();
  return serializer.serializeToString(doc);
}

// node_modules/office-viewer/esm/openxml/math/xsl.js
var xsl = parseXML(`
<?xml version="1.0" encoding="UTF-8" ?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:mml="http://www.w3.org/1998/Math/MathML"
	xmlns:m="http://schemas.openxmlformats.org/officeDocument/2006/math">
  <xsl:output method="xml" encoding="UTF-16" />

  <!-- %% Global Definitions -->

  <!-- Every single unicode character that is recognized by OMML as an operator -->
  <xsl:variable name="sOperators"
		select="concat(
          '&#x00A8;&#x0021;&#x0022;&#x0023;&#x0026;&#x0028;&#x0029;&#x002B;&#x002C;&#x002D;&#x002E;&#x002F;&#x003A;',
          '&#x003B;&#x003C;&#x003D;&#x003E;&#x003F;&#x0040;&#x005B;&#x005C;&#x005D;&#x005E;&#x005F;&#x0060;&#x007B;',
          '&#x007C;&#x007D;&#x007E;&#x00A1;&#x00A6;&#x00AC;&#x00AF;&#x00B0;&#x00B1;&#x00B2;&#x00B3;&#x00B4;&#x00B7;&#x00B9;&#x00BF;',
          '&#x00D7;&#x007E;&#x00F7;&#x02C7;&#x02D8;&#x02D9;&#x02DC;&#x02DD;&#x0300;&#x0301;&#x0302;&#x0303;&#x0304;&#x0305;&#x0306;&#x0307;&#x0308;&#x0309;',
          '&#x030A;&#x030B;&#x030C;&#x030D;&#x030E;&#x030F;&#x0310;&#x0311;&#x0312;&#x0313;&#x0314;&#x0315;',
          '&#x0316;&#x0317;&#x0318;&#x0319;&#x031A;&#x031B;&#x031C;&#x031D;&#x031E;&#x031F;&#x0320;&#x0321;',
          '&#x0322;&#x0323;&#x0324;&#x0325;&#x0326;&#x0327;&#x0328;&#x0329;&#x032A;&#x032B;&#x032C;&#x032D;',
          '&#x032E;&#x032F;&#x0330;&#x0331;&#x0332;&#x0333;&#x0334;&#x0335;&#x0336;&#x0337;&#x0338;&#x033F;',
          '&#x2000;&#x2001;&#x2002;&#x2003;&#x2004;&#x2005;&#x2006;&#x2009;&#x200A;&#x2010;&#x2012;&#x2013;',
          '&#x2014;&#x2016;&#x2020;&#x2021;&#x2022;&#x2024;&#x2025;&#x2026;&#x2032;&#x2033;&#x2034;&#x203C;',
          '&#x2040;&#x2044;&#x204E;&#x204F;&#x2050;&#x2057;&#x2061;&#x2062;&#x2063;&#x2070;&#x2074;&#x2075;',
          '&#x2076;&#x2077;&#x2078;&#x2079;&#x207A;&#x207B;&#x207C;&#x207D;&#x207E;&#x2080;&#x2081;&#x2082;',
          '&#x2083;&#x2084;&#x2085;&#x2086;&#x2087;&#x2088;&#x2089;&#x208A;&#x208B;&#x208C;&#x208D;&#x208E;',
          '&#x20D0;&#x20D1;&#x20D2;&#x20D3;&#x20D4;&#x20D5;&#x20D6;&#x20D7;&#x20D8;&#x20D9;&#x20DA;&#x20DB;',
          '&#x20DC;&#x20DD;&#x20DE;&#x20DF;&#x20E0;&#x20E1;&#x20E4;&#x20E5;&#x20E6;&#x20E7;&#x20E8;&#x20E9;',
          '&#x20EA;&#x2140;&#x2146;&#x2190;&#x2191;&#x2192;&#x2193;&#x2194;&#x2195;&#x2196;&#x2197;&#x2198;&#x2199;',
          '&#x219A;&#x219B;&#x219C;&#x219D;&#x219E;&#x219F;&#x21A0;&#x21A1;&#x21A2;&#x21A3;&#x21A4;&#x21A5;',
          '&#x21A6;&#x21A7;&#x21A8;&#x21A9;&#x21AA;&#x21AB;&#x21AC;&#x21AD;&#x21AE;&#x21AF;&#x21B0;&#x21B1;',
          '&#x21B2;&#x21B3;&#x21B6;&#x21B7;&#x21BA;&#x21BB;&#x21BC;&#x21BD;&#x21BE;&#x21BF;&#x21C0;&#x21C1;',
          '&#x21C2;&#x21C3;&#x21C4;&#x21C5;&#x21C6;&#x21C7;&#x21C8;&#x21C9;&#x21CA;&#x21CB;&#x21CC;&#x21CD;',
          '&#x21CE;&#x21CF;&#x21D0;&#x21D1;&#x21D2;&#x21D3;&#x21D4;&#x21D5;&#x21D6;&#x21D7;&#x21D8;&#x21D9;',
          '&#x21DA;&#x21DB;&#x21DC;&#x21DD;&#x21DE;&#x21DF;&#x21E0;&#x21E1;&#x21E2;&#x21E3;&#x21E4;&#x21E5;',
          '&#x21E6;&#x21E7;&#x21E8;&#x21E9;&#x21F3;&#x21F4;&#x21F5;&#x21F6;&#x21F7;&#x21F8;&#x21F9;&#x21FA;',
          '&#x21FB;&#x21FC;&#x21FD;&#x21FE;&#x21FF;&#x2200;&#x2201;&#x2202;&#x2203;&#x2204;&#x2206;&#x2207;',
          '&#x2208;&#x2209;&#x220A;&#x220B;&#x220C;&#x220D;&#x220F;&#x2210;&#x2211;&#x2212;&#x2213;&#x2214;',
          '&#x2215;&#x2216;&#x2217;&#x2218;&#x2219;&#x221A;&#x221B;&#x221C;&#x221D;&#x2223;&#x2224;&#x2225;',
          '&#x2226;&#x2227;&#x2228;&#x2229;&#x222A;&#x222B;&#x222C;&#x222D;&#x222E;&#x222F;&#x2230;&#x2231;',
          '&#x2232;&#x2233;&#x2234;&#x2235;&#x2236;&#x2237;&#x2238;&#x2239;&#x223A;&#x223B;&#x223C;&#x223D;',
          '&#x223E;&#x2240;&#x2241;&#x2242;&#x2243;&#x2244;&#x2245;&#x2246;&#x2247;&#x2248;&#x2249;&#x224A;',
          '&#x224B;&#x224C;&#x224D;&#x224E;&#x224F;&#x2250;&#x2251;&#x2252;&#x2253;&#x2254;&#x2255;&#x2256;',
          '&#x2257;&#x2258;&#x2259;&#x225A;&#x225B;&#x225C;&#x225D;&#x225E;&#x225F;&#x2260;&#x2261;&#x2262;',
          '&#x2263;&#x2264;&#x2265;&#x2266;&#x2267;&#x2268;&#x2269;&#x226A;&#x226B;&#x226C;&#x226D;&#x226E;',
          '&#x226F;&#x2270;&#x2271;&#x2272;&#x2273;&#x2274;&#x2275;&#x2276;&#x2277;&#x2278;&#x2279;&#x227A;',
          '&#x227B;&#x227C;&#x227D;&#x227E;&#x227F;&#x2280;&#x2281;&#x2282;&#x2283;&#x2284;&#x2285;&#x2286;',
          '&#x2287;&#x2288;&#x2289;&#x228A;&#x228B;&#x228C;&#x228D;&#x228E;&#x228F;&#x2290;&#x2291;&#x2292;',
          '&#x2293;&#x2294;&#x2295;&#x2296;&#x2297;&#x2298;&#x2299;&#x229A;&#x229B;&#x229C;&#x229D;&#x229E;',
          '&#x229F;&#x22A0;&#x22A1;&#x22A2;&#x22A3;&#x22A5;&#x22A6;&#x22A7;&#x22A8;&#x22A9;&#x22AA;&#x22AB;',
          '&#x22AC;&#x22AD;&#x22AE;&#x22AF;&#x22B0;&#x22B1;&#x22B2;&#x22B3;&#x22B4;&#x22B5;&#x22B6;&#x22B7;',
          '&#x22B8;&#x22B9;&#x22BA;&#x22BB;&#x22BC;&#x22BD;&#x22C0;&#x22C1;&#x22C2;&#x22C3;&#x22C4;&#x22C5;',
          '&#x22C6;&#x22C7;&#x22C8;&#x22C9;&#x22CA;&#x22CB;&#x22CC;&#x22CD;&#x22CE;&#x22CF;&#x22D0;&#x22D1;',
          '&#x22D2;&#x22D3;&#x22D4;&#x22D5;&#x22D6;&#x22D7;&#x22D8;&#x22D9;&#x22DA;&#x22DB;&#x22DC;&#x22DD;',
          '&#x22DE;&#x22DF;&#x22E0;&#x22E1;&#x22E2;&#x22E3;&#x22E4;&#x22E5;&#x22E6;&#x22E7;&#x22E8;&#x22E9;',
          '&#x22EA;&#x22EB;&#x22EC;&#x22ED;&#x22EE;&#x22EF;&#x22F0;&#x22F1;&#x22F2;&#x22F3;&#x22F4;&#x22F5;',
          '&#x22F6;&#x22F7;&#x22F8;&#x22F9;&#x22FA;&#x22FB;&#x22FC;&#x22FD;&#x22FE;&#x22FF;&#x2305;&#x2306;',
          '&#x2308;&#x2309;&#x230A;&#x230B;&#x231C;&#x231D;&#x231E;&#x231F;&#x2322;&#x2323;&#x2329;&#x232A;',
          '&#x233D;&#x233F;&#x23B0;&#x23B1;&#x23DC;&#x23DD;&#x23DE;&#x23DF;&#x23E0;&#x2502;&#x251C;&#x2524;',
          '&#x252C;&#x2534;&#x2581;&#x2588;&#x2592;&#x25A0;&#x25A1;&#x25AD;&#x25B2;&#x25B3;&#x25B4;&#x25B5;',
          '&#x25B6;&#x25B7;&#x25B8;&#x25B9;&#x25BC;&#x25BD;&#x25BE;&#x25BF;&#x25C0;&#x25C1;&#x25C2;&#x25C3;',
          '&#x25C4;&#x25C5;&#x25CA;&#x25CB;&#x25E6;&#x25EB;&#x25EC;&#x25F8;&#x25F9;&#x25FA;&#x25FB;&#x25FC;',
          '&#x25FD;&#x25FE;&#x25FF;&#x2605;&#x2606;&#x2772;&#x2773;&#x27D1;&#x27D2;&#x27D3;&#x27D4;&#x27D5;',
          '&#x27D6;&#x27D7;&#x27D8;&#x27D9;&#x27DA;&#x27DB;&#x27DC;&#x27DD;&#x27DE;&#x27DF;&#x27E0;&#x27E1;',
          '&#x27E2;&#x27E3;&#x27E4;&#x27E5;&#x27E6;&#x27E7;&#x27E8;&#x27E9;&#x27EA;&#x27EB;&#x27F0;&#x27F1;',
          '&#x27F2;&#x27F3;&#x27F4;&#x27F5;&#x27F6;&#x27F7;&#x27F8;&#x27F9;&#x27FA;&#x27FB;&#x27FC;&#x27FD;',
          '&#x27FE;&#x27FF;&#x2900;&#x2901;&#x2902;&#x2903;&#x2904;&#x2905;&#x2906;&#x2907;&#x2908;&#x2909;',
          '&#x290A;&#x290B;&#x290C;&#x290D;&#x290E;&#x290F;&#x2910;&#x2911;&#x2912;&#x2913;&#x2914;&#x2915;',
          '&#x2916;&#x2917;&#x2918;&#x2919;&#x291A;&#x291B;&#x291C;&#x291D;&#x291E;&#x291F;&#x2920;&#x2921;',
          '&#x2922;&#x2923;&#x2924;&#x2925;&#x2926;&#x2927;&#x2928;&#x2929;&#x292A;&#x292B;&#x292C;&#x292D;',
          '&#x292E;&#x292F;&#x2930;&#x2931;&#x2932;&#x2933;&#x2934;&#x2935;&#x2936;&#x2937;&#x2938;&#x2939;',
          '&#x293A;&#x293B;&#x293C;&#x293D;&#x293E;&#x293F;&#x2940;&#x2941;&#x2942;&#x2943;&#x2944;&#x2945;',
          '&#x2946;&#x2947;&#x2948;&#x2949;&#x294A;&#x294B;&#x294C;&#x294D;&#x294E;&#x294F;&#x2950;&#x2951;',
          '&#x2952;&#x2953;&#x2954;&#x2955;&#x2956;&#x2957;&#x2958;&#x2959;&#x295A;&#x295B;&#x295C;&#x295D;',
          '&#x295E;&#x295F;&#x2960;&#x2961;&#x2962;&#x2963;&#x2964;&#x2965;&#x2966;&#x2967;&#x2968;&#x2969;',
          '&#x296A;&#x296B;&#x296C;&#x296D;&#x296E;&#x296F;&#x2970;&#x2971;&#x2972;&#x2973;&#x2974;&#x2975;',
          '&#x2976;&#x2977;&#x2978;&#x2979;&#x297A;&#x297B;&#x297C;&#x297D;&#x297E;&#x297F;&#x2980;&#x2982;',
          '&#x2983;&#x2984;&#x2985;&#x2986;&#x2987;&#x2988;&#x2989;&#x298A;&#x298B;&#x298C;&#x298D;&#x298E;',
          '&#x298F;&#x2990;&#x2991;&#x2992;&#x2993;&#x2994;&#x2995;&#x2996;&#x2997;&#x2998;&#x2999;&#x299A;',
          '&#x29B6;&#x29B7;&#x29B8;&#x29B9;&#x29C0;&#x29C1;&#x29C4;&#x29C5;&#x29C6;&#x29C7;&#x29C8;&#x29CE;',
          '&#x29CF;&#x29D0;&#x29D1;&#x29D2;&#x29D3;&#x29D4;&#x29D5;&#x29D6;&#x29D7;&#x29D8;&#x29D9;&#x29DA;',
          '&#x29DB;&#x29DF;&#x29E1;&#x29E2;&#x29E3;&#x29E4;&#x29E5;&#x29E6;&#x29EB;&#x29F4;&#x29F5;&#x29F6;',
          '&#x29F7;&#x29F8;&#x29F9;&#x29FA;&#x29FB;&#x29FC;&#x29FD;&#x29FE;&#x29FF;&#x2A00;&#x2A01;&#x2A02;',
          '&#x2A03;&#x2A04;&#x2A05;&#x2A06;&#x2A07;&#x2A08;&#x2A09;&#x2A0A;&#x2A0B;&#x2A0C;&#x2A0D;&#x2A0E;',
          '&#x2A0F;&#x2A10;&#x2A11;&#x2A12;&#x2A13;&#x2A14;&#x2A15;&#x2A16;&#x2A17;&#x2A18;&#x2A19;&#x2A1A;',
          '&#x2A1B;&#x2A1C;&#x2A1D;&#x2A1E;&#x2A1F;&#x2A20;&#x2A21;&#x2A22;&#x2A23;&#x2A24;&#x2A25;&#x2A26;',
          '&#x2A27;&#x2A28;&#x2A29;&#x2A2A;&#x2A2B;&#x2A2C;&#x2A2D;&#x2A2E;&#x2A2F;&#x2A30;&#x2A31;&#x2A32;',
          '&#x2A33;&#x2A34;&#x2A35;&#x2A36;&#x2A37;&#x2A38;&#x2A39;&#x2A3A;&#x2A3B;&#x2A3C;&#x2A3D;&#x2A3E;',
          '&#x2A3F;&#x2A40;&#x2A41;&#x2A42;&#x2A43;&#x2A44;&#x2A45;&#x2A46;&#x2A47;&#x2A48;&#x2A49;&#x2A4A;',
          '&#x2A4B;&#x2A4C;&#x2A4D;&#x2A4E;&#x2A4F;&#x2A50;&#x2A51;&#x2A52;&#x2A53;&#x2A54;&#x2A55;&#x2A56;',
          '&#x2A57;&#x2A58;&#x2A59;&#x2A5A;&#x2A5B;&#x2A5C;&#x2A5D;&#x2A5E;&#x2A5F;&#x2A60;&#x2A61;&#x2A62;',
          '&#x2A63;&#x2A64;&#x2A65;&#x2A66;&#x2A67;&#x2A68;&#x2A69;&#x2A6A;&#x2A6B;&#x2A6C;&#x2A6D;&#x2A6E;',
          '&#x2A6F;&#x2A70;&#x2A71;&#x2A72;&#x2A73;&#x2A74;&#x2A75;&#x2A76;&#x2A77;&#x2A78;&#x2A79;&#x2A7A;',
          '&#x2A7B;&#x2A7C;&#x2A7D;&#x2A7E;&#x2A7F;&#x2A80;&#x2A81;&#x2A82;&#x2A83;&#x2A84;&#x2A85;&#x2A86;',
          '&#x2A87;&#x2A88;&#x2A89;&#x2A8A;&#x2A8B;&#x2A8C;&#x2A8D;&#x2A8E;&#x2A8F;&#x2A90;&#x2A91;&#x2A92;',
          '&#x2A93;&#x2A94;&#x2A95;&#x2A96;&#x2A97;&#x2A98;&#x2A99;&#x2A9A;&#x2A9B;&#x2A9C;&#x2A9D;&#x2A9E;',
          '&#x2A9F;&#x2AA0;&#x2AA1;&#x2AA2;&#x2AA3;&#x2AA4;&#x2AA5;&#x2AA6;&#x2AA7;&#x2AA8;&#x2AA9;&#x2AAA;',
          '&#x2AAB;&#x2AAC;&#x2AAD;&#x2AAE;&#x2AAF;&#x2AB0;&#x2AB1;&#x2AB2;&#x2AB3;&#x2AB4;&#x2AB5;&#x2AB6;',
          '&#x2AB7;&#x2AB8;&#x2AB9;&#x2ABA;&#x2ABB;&#x2ABC;&#x2ABD;&#x2ABE;&#x2ABF;&#x2AC0;&#x2AC1;&#x2AC2;',
          '&#x2AC3;&#x2AC4;&#x2AC5;&#x2AC6;&#x2AC7;&#x2AC8;&#x2AC9;&#x2ACA;&#x2ACB;&#x2ACC;&#x2ACD;&#x2ACE;',
          '&#x2ACF;&#x2AD0;&#x2AD1;&#x2AD2;&#x2AD3;&#x2AD4;&#x2AD5;&#x2AD6;&#x2AD7;&#x2AD8;&#x2AD9;&#x2ADA;',
          '&#x2ADB;&#x2ADC;&#x2ADD;&#x2ADE;&#x2ADF;&#x2AE0;&#x2AE2;&#x2AE3;&#x2AE4;&#x2AE5;&#x2AE6;&#x2AE7;',
          '&#x2AE8;&#x2AE9;&#x2AEA;&#x2AEB;&#x2AEC;&#x2AED;&#x2AEE;&#x2AEF;&#x2AF0;&#x2AF2;&#x2AF3;&#x2AF4;',
          '&#x2AF5;&#x2AF6;&#x2AF7;&#x2AF8;&#x2AF9;&#x2AFA;&#x2AFB;&#x2AFC;&#x2AFD;&#x2AFE;&#x2AFF;&#x2B04;',
          '&#x2B06;&#x2B07;&#x2B0C;&#x2B0D;&#x3014;&#x3015;&#x3016;&#x3017;&#x3018;&#x3019;&#xFF01;&#xFF06;',
          '&#xFF08;&#xFF09;&#xFF0B;&#xFF0C;&#xFF0D;&#xFF0E;&#xFF0F;&#xFF1A;&#xFF1B;&#xFF1C;&#xFF1D;&#xFF1E;',
          '&#xFF1F;&#xFF20;&#xFF3B;&#xFF3C;&#xFF3D;&#xFF3E;&#xFF3F;&#xFF5B;&#xFF5C;&#xFF5D;')" />

  <!-- A string of '-'s repeated exactly as many times as the operators above -->
  <xsl:variable name="sMinuses">
    <xsl:call-template name="SRepeatChar">
      <xsl:with-param name="cchRequired" select="string-length($sOperators)" />
      <xsl:with-param name="ch" select="'-'" />
    </xsl:call-template>
  </xsl:variable>

  <!-- Every single unicode character that is recognized by OMML as a number -->
  <xsl:variable name="sNumbers" select="'0123456789'" />

  <!-- A string of '0's repeated exactly as many times as the list of numbers above -->
  <xsl:variable name="sZeros">
    <xsl:call-template name="SRepeatChar">
      <xsl:with-param name="cchRequired" select="string-length($sNumbers)" />
      <xsl:with-param name="ch" select="'0'" />
    </xsl:call-template>
  </xsl:variable>

  <!-- %%Template: SReplace

		Replace all occurences of sOrig in sInput with sReplacement
		and return the resulting string. -->
  <xsl:template name="SReplace">
    <xsl:param name="sInput" />
    <xsl:param name="sOrig" />
    <xsl:param name="sReplacement" />

    <xsl:choose>
      <xsl:when test="not(contains($sInput, $sOrig))">
        <xsl:value-of select="$sInput" />
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="sBefore" select="substring-before($sInput, $sOrig)" />
        <xsl:variable name="sAfter" select="substring-after($sInput, $sOrig)" />
        <xsl:variable name="sAfterProcessed">
          <xsl:call-template name="SReplace">
            <xsl:with-param name="sInput" select="$sAfter" />
            <xsl:with-param name="sOrig" select="$sOrig" />
            <xsl:with-param name="sReplacement" select="$sReplacement" />
          </xsl:call-template>
        </xsl:variable>

        <xsl:value-of select="concat($sBefore, concat($sReplacement, $sAfterProcessed))" />
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- Templates -->
  <xsl:template match="/">
    <mml:math>
      <xsl:apply-templates select="*" />
    </mml:math>
  </xsl:template>

  <xsl:template match="m:borderBox">

    <!-- Get Lowercase versions of properties -->
    <xsl:variable name="sLowerCaseHideTop" select="translate(m:borderBoxPr[last()]/m:hideTop[last()]/@m:val, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
		                                                             'abcdefghijklmnopqrstuvwxyz')" />
    <xsl:variable name="sLowerCaseHideBot" select="translate(m:borderBoxPr[last()]/m:hideBot[last()]/@m:val, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
		                                                             'abcdefghijklmnopqrstuvwxyz')" />
    <xsl:variable name="sLowerCaseHideLeft" select="translate(m:borderBoxPr[last()]/m:hideLeft[last()]/@m:val, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
		                                                             'abcdefghijklmnopqrstuvwxyz')" />
    <xsl:variable name="sLowerCaseHideRight" select="translate(m:borderBoxPr[last()]/m:hideRight[last()]/@m:val, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
		                                                             'abcdefghijklmnopqrstuvwxyz')" />
    <xsl:variable name="sLowerCaseStrikeH" select="translate(m:borderBoxPr[last()]/m:strikeH[last()]/@m:val, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
		                                                             'abcdefghijklmnopqrstuvwxyz')" />
    <xsl:variable name="sLowerCaseStrikeV" select="translate(m:borderBoxPr[last()]/m:strikeV[last()]/@m:val, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
		                                                             'abcdefghijklmnopqrstuvwxyz')" />
    <xsl:variable name="sLowerCaseStrikeBLTR" select="translate(m:borderBoxPr[last()]/m:strikeBLTR[last()]/@m:val, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
		                                                             'abcdefghijklmnopqrstuvwxyz')" />
    <xsl:variable name="sLowerCaseStrikeTLBR" select="translate(m:borderBoxPr[last()]/m:strikeTLBR[last()]/@m:val, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
		                                                             'abcdefghijklmnopqrstuvwxyz')" />
    <xsl:variable name="fHideTop">
      <xsl:call-template name="ForceTrueStrVal">
        <xsl:with-param name="str" select="$sLowerCaseHideTop" />
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="fHideBot">
      <xsl:call-template name="ForceTrueStrVal">
        <xsl:with-param name="str" select="$sLowerCaseHideBot" />
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="fHideLeft">
      <xsl:call-template name="ForceTrueStrVal">
        <xsl:with-param name="str" select="$sLowerCaseHideLeft" />
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="fHideRight">
      <xsl:call-template name="ForceTrueStrVal">
        <xsl:with-param name="str" select="$sLowerCaseHideRight" />
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="fStrikeH">
      <xsl:call-template name="ForceTrueStrVal">
        <xsl:with-param name="str" select="$sLowerCaseStrikeH" />
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="fStrikeV">
      <xsl:call-template name="ForceTrueStrVal">
        <xsl:with-param name="str" select="$sLowerCaseStrikeV" />
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="fStrikeBLTR">
      <xsl:call-template name="ForceTrueStrVal">
        <xsl:with-param name="str" select="$sLowerCaseStrikeBLTR" />
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="fStrikeTLBR">
      <xsl:call-template name="ForceTrueStrVal">
        <xsl:with-param name="str" select="$sLowerCaseStrikeTLBR" />
      </xsl:call-template>
    </xsl:variable>

    <xsl:choose>
      <xsl:when test="$fHideTop=1
                      and $fHideBot=1
                      and $fHideLeft=1
                      and $fHideRight=1
                      and $fStrikeH=0
                      and $fStrikeV=0
                      and $fStrikeBLTR=0
                      and $fStrikeTLBR=0">
        <mml:mrow>
          <xsl:apply-templates select="m:e[1]" />
        </mml:mrow>
      </xsl:when>
      <xsl:otherwise>
        <mml:menclose>
          <xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr">
            <xsl:with-param name="fHideTop" select="$fHideTop" />
            <xsl:with-param name="fHideBot" select="$fHideBot" />
            <xsl:with-param name="fHideLeft" select="$fHideLeft" />
            <xsl:with-param name="fHideRight" select="$fHideRight" />
            <xsl:with-param name="fStrikeH" select="$fStrikeH" />
            <xsl:with-param name="fStrikeV" select="$fStrikeV" />
            <xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR" />
            <xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR" />
          </xsl:call-template>
          <xsl:apply-templates select="m:e[1]" />
        </mml:menclose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="*">
    <xsl:apply-templates select="*" />
  </xsl:template>

  <!--
      { Non-combining, Upper-combining, Lower-combining }
      {U+02D8, U+0306, U+032E}, // BREVE
      {U+00B8, U+0312, U+0327}, // CEDILLA
      {U+0060, U+0300, U+0316}, // GRAVE ACCENT
      {U+002D, U+0305, U+0332}, // HYPHEN-MINUS/OVERLINE
      {U+2212, U+0305, U+0332}, // MINUS SIGN/OVERLINE
      {U+002E, U+0305, U+0323}, // FULL STOP/DOT ABOVE
      {U+02D9, U+0307, U+0323}, // DOT ABOVE
      {U+02DD, U+030B, U+02DD}, // DOUBLE ACUTE ACCENT
      {U+00B4, U+0301, U+0317}, // ACUTE ACCENT
      {U+007E, U+0303, U+0330}, // TILDE
      {U+02DC, U+0303, U+0330}, // SMALL TILDE
      {U+00A8, U+0308, U+0324}, // DIAERESIS
      {U+02C7, U+030C, U+032C}, // CARON
      {U+005E, U+0302, U+032D}, // CIRCUMFLEX ACCENT
      {U+00AF, U+0305, ::::::}, // MACRON
      {U+005F, ::::::, U+0332}, // LOW LINE
      {U+2192, U+20D7, U+20EF}, // RIGHTWARDS ARROW
      {U+27F6, U+20D7, U+20EF}, // LONG RIGHTWARDS ARROW
      {U+2190, U+20D6, U+20EE}, // LEFT ARROW
  -->
  <xsl:template name="ToNonCombining">
    <xsl:param name="ch" />
    <xsl:choose>
      <!-- BREVE -->
      <xsl:when test="$ch='&#x0306;' or $ch='&#x032e;'">&#x02D8;</xsl:when>
      <!-- CEDILLA -->
      <xsl:when test="$ch='&#x0312;' or $ch='&#x0327;'">&#x00B8;</xsl:when>
      <!-- GRAVE ACCENT -->
      <xsl:when test="$ch='&#x0300;' or $ch='&#x0316;'">&#x0060;</xsl:when>
      <!-- HYPHEN-MINUS/OVERLINE -->
      <xsl:when test="$ch='&#x0305;' or $ch='&#x0332;'">&#x002D;</xsl:when>
      <!-- MINUS SIGN/OVERLINE -->
      <xsl:when test="$ch='&#x0305;' or $ch='&#x0332;'">&#x2212;</xsl:when>
      <!-- FULL STOP/DOT ABOVE -->
      <xsl:when test="$ch='&#x0305;' or $ch='&#x0323;'">&#x002E;</xsl:when>
      <!-- DOT ABOVE -->
      <xsl:when test="$ch='&#x0307;' or $ch='&#x0323;'">&#x02D9;</xsl:when>
      <!-- DOUBLE ACUTE ACCENT -->
      <xsl:when test="$ch='&#x030B;' or $ch='&#x02DD;'">&#x02DD;</xsl:when>
      <!-- ACUTE ACCENT -->
      <xsl:when test="$ch='&#x0301;' or $ch='&#x0317;'">&#x00B4;</xsl:when>
      <!-- TILDE -->
      <xsl:when test="$ch='&#x0303;' or $ch='&#x0330;'">&#x007E;</xsl:when>
      <!-- SMALL TILDE -->
      <xsl:when test="$ch='&#x0303;' or $ch='&#x0330;'">&#x02DC;</xsl:when>
      <!-- DIAERESIS -->
      <xsl:when test="$ch='&#x0308;' or $ch='&#x0324;'">&#x00A8;</xsl:when>
      <!-- CARON -->
      <xsl:when test="$ch='&#x030C;' or $ch='&#x032C;'">&#x02C7;</xsl:when>
      <!-- CIRCUMFLEX ACCENT -->
      <xsl:when test="$ch='&#x0302;' or $ch='&#x032D;'">&#x005E;</xsl:when>
      <!-- MACRON -->
      <xsl:when test="$ch='&#x0305;'                   ">&#x00AF;</xsl:when>
      <!-- LOW LINE -->
      <xsl:when test="                   $ch='&#x0332;'">&#x005F;</xsl:when>
      <!-- RIGHTWARDS ARROW -->
      <xsl:when test="$ch='&#x20D7;' or $ch='&#x20EF;'">&#x2192;</xsl:when>
      <!-- LONG RIGHTWARDS ARROW -->
      <xsl:when test="$ch='&#x20D7;' or $ch='&#x20EF;'">&#x27F6;</xsl:when>
      <!-- LEFT ARROW -->
      <xsl:when test="$ch='&#x20D6;' or $ch='&#x20EE;'">&#x2190;</xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$ch"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="m:acc">
    <mml:mover>
      <xsl:attribute name="accent">true</xsl:attribute>
      <mml:mrow>
        <xsl:apply-templates select="m:e[1]" />
      </mml:mrow>
      <xsl:variable name="chAcc">
        <xsl:choose>
          <xsl:when test="not(m:accPr[last()]/m:chr)">
            <xsl:value-of select="'&#x0302;'" />
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="substring(m:accPr/m:chr/@m:val,1,1)" />
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="chNonComb">
        <xsl:call-template name="ToNonCombining">
          <xsl:with-param name="ch" select="$chAcc" />
        </xsl:call-template>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="string-length($chAcc)=0">
          <mml:mo/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="ParseMt">
            <xsl:with-param name="sToParse" select="$chNonComb" />
            <xsl:with-param name="scr" select="m:e[1]/*/m:rPr[last()]/m:scr/@m:val" />
            <xsl:with-param name="sty" select="m:e[1]/*/m:rPr[last()]/m:sty/@m:val" />
            <xsl:with-param name="nor">
              <xsl:choose>
                <xsl:when test="count(m:e[1]/*/m:rPr[last()]/m:nor) = 0">0</xsl:when>
                <xsl:otherwise>
                  <xsl:call-template name="ForceFalseStrVal">
                    <xsl:with-param name="str" select="translate(m:e[1]/*/m:rPr[last()]/m:nor/@m:val,
                                                                     'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
		                                                                 'abcdefghijklmnopqrstuvwxyz')" />
                  </xsl:call-template>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:with-param>
          </xsl:call-template>
        </xsl:otherwise>
      </xsl:choose>
    </mml:mover>
  </xsl:template>

  <xsl:template name="OutputScript">
    <xsl:param name="ndCur" select="." />
    <xsl:choose>
      <!-- Only output contents of $ndCur if $ndCur exists
           and $ndCur has children -->
      <xsl:when test="count($ndCur/*) &gt; 0">
        <mml:mrow>
          <xsl:apply-templates select="$ndCur" />
        </mml:mrow>
      </xsl:when>
      <xsl:otherwise>
        <mml:none />
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="m:sPre">
    <mml:mmultiscripts>
      <mml:mrow>
        <xsl:apply-templates select="m:e[1]" />
      </mml:mrow>
      <mml:mprescripts />
      <xsl:call-template name="OutputScript">
        <xsl:with-param name="ndCur" select="m:sub[1]"/>
      </xsl:call-template>
      <xsl:call-template name="OutputScript">
        <xsl:with-param name="ndCur" select="m:sup[1]" />
      </xsl:call-template>
    </mml:mmultiscripts>
  </xsl:template>

  <xsl:template match="m:m">
    <mml:mtable>
      <xsl:call-template name="CreateMathMLMatrixAttr">
        <xsl:with-param name="mcJc" select="m:mPr[last()]/m:mcs/m:mc/m:mcPr[last()]/m:mcJc/@m:val" />
      </xsl:call-template>
      <xsl:for-each select="m:mr">
        <mml:mtr>
          <xsl:for-each select="m:e">
            <mml:mtd>
              <xsl:apply-templates select="." />
            </mml:mtd>
          </xsl:for-each>
        </mml:mtr>
      </xsl:for-each>
    </mml:mtable>
  </xsl:template>

  <xsl:template name="CreateMathMLMatrixAttr">
    <xsl:param name="mcJc" />
    <xsl:variable name="sLowerCaseMcjc" select="translate($mcJc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
		                                                             'abcdefghijklmnopqrstuvwxyz')" />
    <xsl:choose>
      <xsl:when test="$sLowerCaseMcjc='left'">
        <xsl:attribute name="columnalign">left</xsl:attribute>
      </xsl:when>
      <xsl:when test="$sLowerCaseMcjc='right'">
        <xsl:attribute name="columnalign">right</xsl:attribute>
      </xsl:when>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="m:phant">
    <xsl:variable name="sLowerCaseZeroWidVal" select="translate(m:phantPr[last()]/m:zeroWid[last()]/@m:val,
		                                                       'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
		                                                       'abcdefghijklmnopqrstuvwxyz')" />
    <xsl:variable name="sLowerCaseZeroAscVal" select="translate(m:phantPr[last()]/m:zeroAsc[last()]/@m:val,
		                                                     'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
		                                                     'abcdefghijklmnopqrstuvwxyz')" />
    <xsl:variable name="sLowerCaseZeroDescVal" select="translate(m:phantPr[last()]/m:zeroDesc[last()]/@m:val,
		                                                     'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
		                                                     'abcdefghijklmnopqrstuvwxyz')" />
    <xsl:variable name="sLowerCaseShowVal" select="translate(m:phantPr[last()]/m:show[last()]/@m:val,
		                                                     'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
		                                                     'abcdefghijklmnopqrstuvwxyz')" />


    <!-- The following properties default to 'yes' unless the last value equals 'no' or there isn't any node for
         the property -->

    <xsl:variable name="fZeroWid">
      <xsl:choose>
        <xsl:when test="count(m:phantPr[last()]/m:zeroWid[last()]) = 0">0</xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="ForceFalseStrVal">
            <xsl:with-param name="str" select="$sLowerCaseZeroWidVal" />
          </xsl:call-template>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="fZeroAsc">
      <xsl:choose>
        <xsl:when test="count(m:phantPr[last()]/m:zeroAsc[last()]) = 0">0</xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="ForceFalseStrVal">
            <xsl:with-param name="str" select="$sLowerCaseZeroAscVal" />
          </xsl:call-template>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="fZeroDesc">
      <xsl:choose>
        <xsl:when test="count(m:phantPr[last()]/m:zeroDesc[last()]) = 0">0</xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="ForceFalseStrVal">
            <xsl:with-param name="str" select="$sLowerCaseZeroDescVal" />
          </xsl:call-template>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <!-- The show property defaults to 'on' unless there exists a show property and its value is 'off' -->

    <xsl:variable name="fShow">
      <xsl:call-template name="ForceFalseStrVal">
        <xsl:with-param name="str" select="$sLowerCaseShowVal" />
      </xsl:call-template>
    </xsl:variable>

    <xsl:choose>
      <!-- Show the phantom contents, therefore, just use mpadded. -->
      <xsl:when test="$fShow = 1">
        <xsl:element name="mml:mpadded">
          <xsl:call-template name="CreateMpaddedAttributes">
            <xsl:with-param name="fZeroWid" select="$fZeroWid" />
            <xsl:with-param name="fZeroAsc" select="$fZeroAsc" />
            <xsl:with-param name="fZeroDesc" select="$fZeroDesc" />
          </xsl:call-template>
          <mml:mrow>
            <xsl:apply-templates select="m:e" />
          </mml:mrow>
        </xsl:element>
      </xsl:when>
      <!-- Don't show phantom contents, but don't smash anything, therefore, just
           use mphantom -->
      <xsl:when test="$fZeroWid=0 and $fZeroAsc=0 and $fZeroDesc=0">
        <xsl:element name="mml:mphantom">
          <mml:mrow>
            <xsl:apply-templates select="m:e" />
          </mml:mrow>
        </xsl:element>
      </xsl:when>
      <!-- Combination -->
      <xsl:otherwise>
        <xsl:element name="mml:mphantom">
          <xsl:element name="mml:mpadded">
            <xsl:call-template name="CreateMpaddedAttributes">
              <xsl:with-param name="fZeroWid" select="$fZeroWid" />
              <xsl:with-param name="fZeroAsc" select="$fZeroAsc" />
              <xsl:with-param name="fZeroDesc" select="$fZeroDesc" />
            </xsl:call-template>
            <mml:mrow>
              <xsl:apply-templates select="m:e" />
            </mml:mrow>
          </xsl:element>
        </xsl:element>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="CreateMpaddedAttributes">
    <xsl:param name="fZeroWid" />
    <xsl:param name="fZeroAsc" />
    <xsl:param name="fZeroDesc" />

    <xsl:if test="$fZeroWid=1">
      <xsl:attribute name="width">0in</xsl:attribute>
    </xsl:if>
    <xsl:if test="$fZeroAsc=1">
      <xsl:attribute name="height">0in</xsl:attribute>
    </xsl:if>
    <xsl:if test="$fZeroDesc=1">
      <xsl:attribute name="depth">0in</xsl:attribute>
    </xsl:if>
  </xsl:template>



  <xsl:template match="m:rad">
    <xsl:variable name="fDegHide">
      <xsl:choose>
        <xsl:when test="count(m:radPr[last()]/m:degHide)=0">0</xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="ForceFalseStrVal">
            <xsl:with-param name="str" select="translate(m:radPr[last()]/m:degHide/@m:val,
		                                                          'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
		                                                          'abcdefghijklmnopqrstuvwxyz')" />
          </xsl:call-template>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:choose>
      <xsl:when test="$fDegHide=1">
        <mml:msqrt>
          <xsl:apply-templates select="m:e[1]" />
        </mml:msqrt>
      </xsl:when>
      <xsl:otherwise>
        <mml:mroot>
          <mml:mrow>
            <xsl:apply-templates select="m:e[1]" />
          </mml:mrow>
          <mml:mrow>
            <xsl:apply-templates select="m:deg[1]" />
          </mml:mrow>
        </mml:mroot>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="OutputNaryMo">
    <xsl:param name="ndCur" select="." />
    <xsl:param name="fGrow" select="0" />
    <mml:mo>
      <xsl:choose>
        <xsl:when test="$fGrow=1">
          <xsl:attribute name="stretchy">true</xsl:attribute>
        </xsl:when>
        <xsl:otherwise>
          <xsl:attribute name="stretchy">false</xsl:attribute>
        </xsl:otherwise>
      </xsl:choose>
      <xsl:choose>
        <xsl:when test="not($ndCur/m:naryPr[last()]/m:chr/@m:val) or
			                            $ndCur/m:naryPr[last()]/m:chr/@m:val=''">
          <xsl:text>&#x222b;</xsl:text>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="$ndCur/m:naryPr[last()]/m:chr/@m:val" />
        </xsl:otherwise>
      </xsl:choose>
    </mml:mo>
  </xsl:template>

  <!-- %%Template match m:nary
		Process an n-ary.

		Decides, based on which arguments are supplied, between
		using an mo, msup, msub, or msubsup for the n-ary operator
	-->
  <xsl:template match="m:nary">
    <xsl:variable name="sLowerCaseSubHide">
      <xsl:choose>
        <xsl:when test="count(m:naryPr[last()]/m:subHide) = 0">
          <xsl:text>off</xsl:text>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="translate(m:naryPr[last()]/m:subHide/@m:val,
	                                  'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
	                                  'abcdefghijklmnopqrstuvwxyz')" />
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="sLowerCaseSupHide">
      <xsl:choose>
        <xsl:when test="count(m:naryPr[last()]/m:supHide) = 0">
          <xsl:text>off</xsl:text>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="translate(m:naryPr[last()]/m:supHide/@m:val,
	                                  'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
	                                  'abcdefghijklmnopqrstuvwxyz')" />
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="sLowerCaseLimLoc">
      <xsl:value-of select="translate(m:naryPr[last()]/m:limLoc/@m:val,
	                                  'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
	                                  'abcdefghijklmnopqrstuvwxyz')" />
    </xsl:variable>

    <xsl:variable name="sLowerGrow">
      <xsl:choose>
        <xsl:when test="count(m:naryPr[last()]/m:grow)=0">off</xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="translate(m:naryPr[last()]/m:grow/@m:val,
	                                  'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
	                                  'abcdefghijklmnopqrstuvwxyz')" />
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="fLimLocSubSup">
      <xsl:choose>
        <xsl:when test="count(m:naryPr[last()]/m:limLoc)=0 or $sLowerCaseLimLoc='subsup'">1</xsl:when>
        <xsl:otherwise>0</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="fGrow">
      <xsl:call-template name="ForceFalseStrVal">
        <xsl:with-param name="str" select="$sLowerGrow" />
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="fSupHide">
      <xsl:call-template name="ForceFalseStrVal">
        <xsl:with-param name="str" select="$sLowerCaseSupHide" />
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="fSubHide">
      <xsl:call-template name="ForceFalseStrVal">
        <xsl:with-param name="str" select="$sLowerCaseSubHide" />
      </xsl:call-template>
    </xsl:variable>

    <mml:mrow>
      <xsl:choose>
        <xsl:when test="$fSupHide=1 and $fSubHide=1">
          <xsl:call-template name="OutputNaryMo">
            <xsl:with-param name="ndCur" select="." />
            <xsl:with-param name="fGrow" select="$fGrow" />
          </xsl:call-template>
        </xsl:when>
        <xsl:when test="$fSubHide=1">
          <xsl:choose>
            <xsl:when test="$fLimLocSubSup=1">
              <mml:msup>
                <xsl:call-template name="OutputNaryMo">
                  <xsl:with-param name="ndCur" select="." />
                  <xsl:with-param name="fGrow" select="$fGrow" />
                </xsl:call-template>
                <mml:mrow>
                  <xsl:apply-templates select="m:sup[1]" />
                </mml:mrow>
              </mml:msup>
            </xsl:when>
            <xsl:otherwise>
              <mml:mover>
                <xsl:call-template name="OutputNaryMo">
                  <xsl:with-param name="ndCur" select="." />
                  <xsl:with-param name="fGrow" select="$fGrow" />
                </xsl:call-template>
                <mml:mrow>
                  <xsl:apply-templates select="m:sup[1]" />
                </mml:mrow>
              </mml:mover>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:when test="$fSupHide=1">
          <xsl:choose>
            <xsl:when test="$fLimLocSubSup=1">
              <mml:msub>
                <xsl:call-template name="OutputNaryMo">
                  <xsl:with-param name="ndCur" select="." />
                  <xsl:with-param name="fGrow" select="$fGrow" />
                </xsl:call-template>
                <mml:mrow>
                  <xsl:apply-templates select="m:sub[1]" />
                </mml:mrow>
              </mml:msub>
            </xsl:when>
            <xsl:otherwise>
              <mml:munder>
                <xsl:call-template name="OutputNaryMo">
                  <xsl:with-param name="ndCur" select="." />
                  <xsl:with-param name="fGrow" select="$fGrow" />
                </xsl:call-template>
                <mml:mrow>
                  <xsl:apply-templates select="m:sub[1]" />
                </mml:mrow>
              </mml:munder>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
          <xsl:choose>
            <xsl:when test="$fLimLocSubSup=1">
              <mml:msubsup>
                <xsl:call-template name="OutputNaryMo">
                  <xsl:with-param name="ndCur" select="." />
                  <xsl:with-param name="fGrow" select="$fGrow" />
                </xsl:call-template>
                <mml:mrow>
                  <xsl:apply-templates select="m:sub[1]" />
                </mml:mrow>
                <mml:mrow>
                  <xsl:apply-templates select="m:sup[1]" />
                </mml:mrow>
              </mml:msubsup>
            </xsl:when>
            <xsl:otherwise>
              <mml:munderover>
                <xsl:call-template name="OutputNaryMo">
                  <xsl:with-param name="ndCur" select="." />
                  <xsl:with-param name="fGrow" select="$fGrow" />
                </xsl:call-template>
                <mml:mrow>
                  <xsl:apply-templates select="m:sub[1]" />
                </mml:mrow>
                <mml:mrow>
                  <xsl:apply-templates select="m:sup[1]" />
                </mml:mrow>
              </mml:munderover>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>
      <mml:mrow>
        <xsl:apply-templates select="m:e[1]" />
      </mml:mrow>
    </mml:mrow>
  </xsl:template>

  <xsl:template match="m:limLow">
    <mml:munder>
      <mml:mrow>
        <xsl:apply-templates select="m:e[1]" />
      </mml:mrow>
      <mml:mrow>
        <xsl:apply-templates select="m:lim[1]" />
      </mml:mrow>
    </mml:munder>
  </xsl:template>

  <xsl:template match="m:limUpp">
    <mml:mover>
      <mml:mrow>
        <xsl:apply-templates select="m:e[1]" />
      </mml:mrow>
      <mml:mrow>
        <xsl:apply-templates select="m:lim[1]" />
      </mml:mrow>
    </mml:mover>
  </xsl:template>

  <xsl:template match="m:sSub">
    <mml:msub>
      <mml:mrow>
        <xsl:apply-templates select="m:e[1]" />
      </mml:mrow>
      <mml:mrow>
        <xsl:apply-templates select="m:sub[1]" />
      </mml:mrow>
    </mml:msub>
  </xsl:template>

  <xsl:template match="m:sSup">
    <mml:msup>
      <mml:mrow>
        <xsl:apply-templates select="m:e[1]" />
      </mml:mrow>
      <mml:mrow>
        <xsl:apply-templates select="m:sup[1]" />
      </mml:mrow>
    </mml:msup>
  </xsl:template>

  <xsl:template match="m:sSubSup">
    <mml:msubsup>
      <mml:mrow>
        <xsl:apply-templates select="m:e[1]" />
      </mml:mrow>
      <mml:mrow>
        <xsl:apply-templates select="m:sub[1]" />
      </mml:mrow>
      <mml:mrow>
        <xsl:apply-templates select="m:sup[1]" />
      </mml:mrow>
    </mml:msubsup>
  </xsl:template>

  <xsl:template match="m:groupChr">
    <xsl:variable name="ndLastGroupChrPr" select="m:groupChrPr[last()]" />
    <xsl:variable name="sLowerCasePos" select="translate($ndLastGroupChrPr/m:pos/@m:val,
		                                                     'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
		                                                     'abcdefghijklmnopqrstuvwxyz')" />

    <xsl:variable name="sLowerCaseVertJc" select="translate($ndLastGroupChrPr/m:vertJc/@m:val,
		                                                     'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
		                                                     'abcdefghijklmnopqrstuvwxyz')" />
    <xsl:variable name="ndLastChr" select="$ndLastGroupChrPr/m:chr" />

    <xsl:variable name="chr">
      <xsl:choose>
        <xsl:when test="$ndLastChr and (not($ndLastChr/@m:val) or string-length($ndLastChr/@m:val) = 0)"></xsl:when>
        <xsl:when test="string-length($ndLastChr/@m:val) &gt;= 1">
          <xsl:value-of select="substring($ndLastChr/@m:val,1,1)" />
        </xsl:when>
        <xsl:otherwise>
          <xsl:text>&#x023DF;</xsl:text>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:choose>
      <xsl:when test="$sLowerCasePos = 'top'">
        <xsl:choose>
          <xsl:when test="$sLowerCaseVertJc = 'bot'">
            <mml:mover accent="false">
              <mml:mrow>
                <xsl:apply-templates select="m:e[1]" />
              </mml:mrow>
              <mml:mo>
                <xsl:value-of select="$chr" />
              </mml:mo>
            </mml:mover>
          </xsl:when>
          <xsl:otherwise>
            <mml:munder accentunder="false">
              <mml:mo>
                <xsl:value-of select="$chr" />
              </mml:mo>
              <mml:mrow>
                <xsl:apply-templates select="m:e[1]" />
              </mml:mrow>
            </mml:munder>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$sLowerCaseVertJc = 'bot'">
            <mml:mover accent="false">
              <mml:mo>
                <xsl:value-of select="$chr" />
              </mml:mo>
              <mml:mrow>
                <xsl:apply-templates select="m:e[1]" />
              </mml:mrow>
            </mml:mover>
          </xsl:when>
          <xsl:otherwise>
            <mml:munder accentunder="false">
              <mml:mrow>
                <xsl:apply-templates select="m:e[1]" />
              </mml:mrow>
              <mml:mo>
                <xsl:value-of select="$chr" />
              </mml:mo>
            </mml:munder>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="fName">
    <xsl:for-each select="m:fName/*">
      <xsl:apply-templates select="." />
    </xsl:for-each>
  </xsl:template>

  <xsl:template match="m:func">
    <mml:mrow>
      <mml:mrow>
        <xsl:call-template name="fName" />
      </mml:mrow>
      <mml:mo>&#x02061;</mml:mo>
      <mml:mrow>
        <xsl:apply-templates select="m:e" />
      </mml:mrow>
    </mml:mrow>
  </xsl:template>

  <!-- %%Template: match m:f

		m:f maps directly to mfrac.
	-->
  <xsl:template match="m:f">
    <xsl:variable name="sLowerCaseType" select="translate(m:fPr[last()]/m:type/@m:val, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')" />
    <xsl:choose>
      <xsl:when test="$sLowerCaseType='lin'">
        <mml:mrow>
          <mml:mrow>
            <xsl:apply-templates select="m:num[1]" />
          </mml:mrow>
          <mml:mo>/</mml:mo>
          <mml:mrow>
            <xsl:apply-templates select="m:den[1]" />
          </mml:mrow>
        </mml:mrow>
      </xsl:when>
      <xsl:otherwise>
        <mml:mfrac>
          <xsl:call-template name="CreateMathMLFracProp">
            <xsl:with-param name="type" select="$sLowerCaseType" />
          </xsl:call-template>
          <mml:mrow>
            <xsl:apply-templates select="m:num[1]" />
          </mml:mrow>
          <mml:mrow>
            <xsl:apply-templates select="m:den[1]" />
          </mml:mrow>
        </mml:mfrac>
      </xsl:otherwise>
    </xsl:choose>

  </xsl:template>


  <!-- %%Template: CreateMathMLFracProp

			Make fraction properties based on supplied parameters.
			OMML differentiates between a linear fraction and a skewed
			one. For MathML, we write both as bevelled.
	-->
  <xsl:template name="CreateMathMLFracProp">
    <xsl:param name="type" />
    <xsl:variable name="sLowerCaseType" select="translate($type, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')" />

    <xsl:if test="$sLowerCaseType='skw' or $sLowerCaseType='lin'">
      <xsl:attribute name="bevelled">true</xsl:attribute>
    </xsl:if>
    <xsl:if test="$sLowerCaseType='nobar'">
      <xsl:attribute name="linethickness">0pt</xsl:attribute>
    </xsl:if>
    <xsl:choose>
      <xsl:when test="sLowerCaseNumJc='right'">
        <xsl:attribute name="numalign">right</xsl:attribute>
      </xsl:when>
      <xsl:when test="sLowerCaseNumJc='left'">
        <xsl:attribute name="numalign">left</xsl:attribute>
      </xsl:when>
    </xsl:choose>
    <xsl:choose>
      <xsl:when test="sLowerCaseDenJc='right'">
        <xsl:attribute name="numalign">right</xsl:attribute>
      </xsl:when>
      <xsl:when test="sLowerCaseDenJc='left'">
        <xsl:attribute name="numalign">left</xsl:attribute>
      </xsl:when>
    </xsl:choose>
  </xsl:template>

  <!-- %%Template: match m:e | m:den | m:num | m:lim | m:sup | m:sub

		These element delinate parts of an expression (like the numerator).  -->
  <xsl:template match="m:e | m:den | m:num | m:lim | m:sup | m:sub">
    <xsl:choose>

      <!-- If there is no scriptLevel specified, just call through -->
      <xsl:when test="not(m:argPr[last()]/m:scrLvl/@m:val)">
        <xsl:apply-templates select="*" />
      </xsl:when>

      <!-- Otherwise, create an mstyle and set the script level -->
      <xsl:otherwise>
        <mml:mstyle>
          <xsl:attribute name="scriptlevel">
            <xsl:value-of select="m:argPr[last()]/m:scrLvl/@m:val" />
          </xsl:attribute>
          <xsl:apply-templates select="*" />
        </mml:mstyle>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="m:bar">
    <xsl:variable name="sLowerCasePos" select="translate(m:barPr/m:pos/@m:val, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
		                                                                       'abcdefghijklmnopqrstuvwxyz')" />

    <xsl:variable name="fTop">

      <xsl:choose>
        <xsl:when test="$sLowerCasePos='top'">1</xsl:when>
        <xsl:otherwise>0</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:choose>
      <xsl:when test="$fTop=1">
        <mml:mover accent="false">
          <mml:mrow>
            <xsl:apply-templates select="m:e[1]" />
          </mml:mrow>
          <mml:mo>
            <xsl:text>&#x00AF;</xsl:text>
          </mml:mo>
        </mml:mover>
      </xsl:when>
      <xsl:otherwise>
        <mml:munder underaccent="false">
          <mml:mrow>
            <xsl:apply-templates select="m:e[1]" />
          </mml:mrow>
          <mml:mo>
            <xsl:text>&#x005F;</xsl:text>
          </mml:mo>
        </mml:munder>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- %%Template match m:d

		Process a delimiter.
	-->
  <xsl:template match="m:d">
    <mml:mfenced>
      <!-- open: default is '(' for both OMML and MathML -->
      <xsl:if test="m:dPr[1]/m:begChr/@m:val and not(m:dPr[1]/m:begChr/@m:val ='(')">
        <xsl:attribute name="open">
          <xsl:value-of select="m:dPr[1]/m:begChr/@m:val" />
        </xsl:attribute>
      </xsl:if>

      <!-- close: default is ')' for both OMML and MathML -->
      <xsl:if test="m:dPr[1]/m:endChr/@m:val and not(m:dPr[1]/m:endChr/@m:val =')')">
        <xsl:attribute name="close">
          <xsl:value-of select="m:dPr[1]/m:endChr/@m:val" />
        </xsl:attribute>
      </xsl:if>

      <!-- separator: the default is ',' for MathML, and '|' for OMML -->
      <xsl:choose>
        <!-- Matches MathML default. Write nothing -->
        <xsl:when test="m:dPr[1]/m:sepChr/@m:val = ','" />

        <!-- OMML default: | -->
        <xsl:when test="not(m:dPr[1]/m:sepChr/@m:val)">
          <xsl:attribute name="separators">
            <xsl:value-of select="'|'" />
          </xsl:attribute>
        </xsl:when>

        <xsl:otherwise>
          <xsl:attribute name="separators">
            <xsl:value-of select="m:dPr[1]/m:sepChr/@m:val" />
          </xsl:attribute>
        </xsl:otherwise>
      </xsl:choose>

      <!-- now write all the children. Put each one into an mrow
			just in case it produces multiple runs, etc -->
      <xsl:for-each select="m:e">
        <mml:mrow>
          <xsl:apply-templates select="." />
        </mml:mrow>
      </xsl:for-each>
    </mml:mfenced>
  </xsl:template>

  <xsl:template match="m:r">
    <xsl:variable name="fNor">
      <xsl:choose>
        <xsl:when test="count(child::m:rPr[last()]/m:nor) = 0">0</xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="ForceFalseStrVal">
            <xsl:with-param name="str" select="translate(child::m:rPr[last()]/m:nor/@m:val, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
		                                                                       'abcdefghijklmnopqrstuvwxyz')" />
          </xsl:call-template>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <xsl:choose>
      <xsl:when test="$fNor=1">
        <mml:mtext>
          <xsl:variable name="sOutput" select="translate(.//m:t, ' ', '&#xa0;')" />
          <xsl:value-of select="$sOutput" />
        </mml:mtext>
      </xsl:when>
      <xsl:otherwise>
        <xsl:for-each select=".//m:t">
          <xsl:call-template name="ParseMt">
            <xsl:with-param name="sToParse" select="text()" />
            <xsl:with-param name="scr" select="../m:rPr[last()]/m:scr/@m:val" />
            <xsl:with-param name="sty" select="../m:rPr[last()]/m:sty/@m:val" />
            <xsl:with-param name="nor">0</xsl:with-param>
          </xsl:call-template>
        </xsl:for-each>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>


  <xsl:template name="CreateTokenAttributes">
    <xsl:param name="scr" />
    <xsl:param name="sty" />
    <xsl:param name="nor" />
    <xsl:param name="nCharToPrint" />
    <xsl:param name="sTokenType" />

    <xsl:choose>
      <xsl:when test="$nor=1">
        <xsl:attribute name="mathvariant">normal</xsl:attribute>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="mathvariant">
          <xsl:choose>
            <!-- numbers don't care -->
            <xsl:when test="$sTokenType='mn'" />

            <xsl:when test="$scr='monospace'">monospace</xsl:when>
            <xsl:when test="$scr='sans-serif' and $sty='i'">sans-serif-italic</xsl:when>
            <xsl:when test="$scr='sans-serif' and $sty='b'">bold-sans-serif</xsl:when>
            <xsl:when test="$scr='sans-serif' and $sty='bi'">sans-serif-bold-italic</xsl:when>
            <xsl:when test="$scr='sans-serif'">sans-serif</xsl:when>
            <xsl:when test="$scr='fraktur' and ($sty='b' or $sty='bi')">bold-fraktur</xsl:when>
            <xsl:when test="$scr='fraktur'">fraktur</xsl:when>
            <xsl:when test="$scr='double-struck'">double-struck</xsl:when>
            <xsl:when test="$scr='script' and ($sty='b' or $sty='bi')">bold-script</xsl:when>
            <xsl:when test="$scr='script'">script</xsl:when>
            <xsl:when test="($scr='roman' or not($scr) or $scr='') and $sty='b'">bold</xsl:when>
            <xsl:when test="($scr='roman' or not($scr) or $scr='') and $sty='i'">italic</xsl:when>
            <xsl:when test="($scr='roman' or not($scr) or $scr='') and $sty='p'">normal</xsl:when>
            <xsl:when test="($scr='roman' or not($scr) or $scr='') and $sty='bi'">bold-italic</xsl:when>
            <xsl:otherwise />
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="fontweight">
          <xsl:choose>
            <xsl:when test="$sty='b' or $sty='bi'">bold</xsl:when>
            <xsl:otherwise>normal</xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="fontstyle">
          <xsl:choose>
            <xsl:when test="$sty='p' or $sty='b'">normal</xsl:when>
            <xsl:otherwise>italic</xsl:otherwise>
          </xsl:choose>
        </xsl:variable>

        <!-- Writing of attributes begins here -->
        <xsl:choose>
          <!-- Don't write mathvariant for operators unless they want to be normal -->
          <xsl:when test="$sTokenType='mo' and $mathvariant!='normal'" />

          <!-- A single character within an mi is already italics, don't write -->
          <xsl:when test="$sTokenType='mi' and $nCharToPrint=1 and ($mathvariant='' or $mathvariant='italic')" />

          <xsl:when test="$sTokenType='mi' and $nCharToPrint &gt; 1 and ($mathvariant='' or $mathvariant='italic')">
            <xsl:attribute name="mathvariant">
              <xsl:value-of select="'italic'" />
            </xsl:attribute>
          </xsl:when>
          <xsl:when test="$mathvariant!='italic' and $mathvariant!=''">
            <xsl:attribute name="mathvariant">
              <xsl:value-of select="$mathvariant" />
            </xsl:attribute>
          </xsl:when>
          <xsl:otherwise>
            <xsl:if test="not($sTokenType='mi' and $nCharToPrint=1) and $fontstyle='italic'">
              <xsl:attribute name="fontstyle">italic</xsl:attribute>
            </xsl:if>
            <xsl:if test="$fontweight='bold'">
              <xsl:attribute name="fontweight">bold</xsl:attribute>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="m:eqArr">
    <mml:mtable>
      <xsl:for-each select="m:e">
        <mml:mtr>
          <mml:mtd>
            <xsl:choose>
              <xsl:when test="m:argPr[last()]/m:scrLvl/@m:val!='0' or
					            not(m:argPr[last()]/m:scrLvl/@m:val)  or
					            m:argPr[last()]/m:scrLvl/@m:val=''">
                <mml:mrow>
                  <mml:maligngroup />
                  <xsl:call-template name="CreateEqArrRow">
                    <xsl:with-param name="align" select="1" />
                    <xsl:with-param name="ndCur" select="*[1]" />
                  </xsl:call-template>
                </mml:mrow>
              </xsl:when>
              <xsl:otherwise>
                <mml:mstyle>
                  <xsl:attribute name="scriptlevel">
                    <xsl:value-of select="m:argPr[last()]/m:scrLvl/@m:val" />
                  </xsl:attribute>
                  <mml:maligngroup />
                  <xsl:call-template name="CreateEqArrRow">
                    <xsl:with-param name="align" select="1" />
                    <xsl:with-param name="ndCur" select="*[1]" />
                  </xsl:call-template>
                </mml:mstyle>
              </xsl:otherwise>
            </xsl:choose>
          </mml:mtd>
        </mml:mtr>
      </xsl:for-each>
    </mml:mtable>
  </xsl:template>

  <xsl:template name="CreateEqArrRow">
    <xsl:param name="align" />
    <xsl:param name="ndCur" />
    <xsl:variable name="sAllMt">
      <xsl:for-each select="$ndCur/m:t">
        <xsl:value-of select="." />
      </xsl:for-each>
    </xsl:variable>
    <xsl:choose>
      <xsl:when test="$ndCur/self::m:r">
        <xsl:call-template name="ParseEqArrMr">
          <xsl:with-param name="sToParse" select="$sAllMt" />
          <xsl:with-param name="scr" select="../m:rPr[last()]/m:scr/@m:val" />
          <xsl:with-param name="sty" select="../m:rPr[last()]/m:sty/@m:val" />
          <xsl:with-param name="nor">
            <xsl:choose>
              <xsl:when test="count($ndCur/m:rPr[last()]/m:nor) = 0">0</xsl:when>
              <xsl:otherwise>
                <xsl:call-template name="ForceFalseStrVal">
                  <xsl:with-param name="str" select="translate($ndCur/m:rPr[last()]/m:nor/@m:val,
                                                                     'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
		                                                                 'abcdefghijklmnopqrstuvwxyz')" />
                </xsl:call-template>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:with-param>
          <xsl:with-param name="align" select="$align" />
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="$ndCur" />
      </xsl:otherwise>
    </xsl:choose>
    <xsl:if test="count($ndCur/following-sibling::*) &gt; 0">
      <xsl:variable name="cAmp">
        <xsl:call-template name="CountAmp">
          <xsl:with-param name="sAllMt" select="$sAllMt" />
          <xsl:with-param name="cAmp" select="0" />
        </xsl:call-template>
      </xsl:variable>
      <xsl:call-template name="CreateEqArrRow">
        <xsl:with-param name="align" select="($align+($cAmp mod 2)) mod 2" />
        <xsl:with-param name="ndCur" select="$ndCur/following-sibling::*[1]" />
      </xsl:call-template>
    </xsl:if>
  </xsl:template>

  <xsl:template name="CountAmp">
    <xsl:param name="sAllMt" />
    <xsl:param name="cAmp" />
    <xsl:choose>
      <xsl:when test="string-length(substring-after($sAllMt, '&amp;')) &gt; 0 or
			                substring($sAllMt, string-length($sAllMt))='&#x0026;'">
        <xsl:call-template name="CountAmp">
          <xsl:with-param name="sAllMt" select="substring-after($sAllMt, '&#x0026;')" />
          <xsl:with-param name="cAmp" select="$cAmp+1" />
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$cAmp" />
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- %%Template: ParseEqArrMr

			Similar to ParseMt, but this one has to do more for an equation array.
      In equation arrays &amp; is a special character which denotes alignment.

      The &amp; in an equation works by alternating between meaning insert alignment spacing
      and insert alignment mark.  For each equation in the equation array
      there is an implied align space at the beginning of the equation.  Within each equation,
      the first &amp; means alignmark, the second, align space, the third, alignmark, etc.

      For this reason when parsing m:r's in equation arrays it is important to keep track of what
      the next ampersand will mean.

      $align=0 => Omml's align space, which is similar to MathML's maligngroup.
      $align=1 => Omml's alignment mark, which is similar to MathML's malignmark.
	-->
  <xsl:template name="ParseEqArrMr">
    <xsl:param name="sToParse" />
    <xsl:param name="sty" />
    <xsl:param name="scr" />
    <xsl:param name="nor" />
    <xsl:param name="align" />

    <xsl:if test="string-length($sToParse) &gt; 0">
      <xsl:choose>
        <xsl:when test="substring($sToParse,1,1) = '&amp;'">
          <xsl:choose>
            <xsl:when test="$align='0'">
              <mml:maligngroup />
            </xsl:when>
            <xsl:when test="$align='1'">
              <mml:malignmark />
            </xsl:when>
          </xsl:choose>
          <xsl:call-template name="ParseEqArrMr">
            <xsl:with-param name="sToParse" select="substring($sToParse,2)" />
            <xsl:with-param name="scr" select="$scr" />
            <xsl:with-param name="sty" select="$sty" />
            <xsl:with-param name="nor" select="$nor" />
            <xsl:with-param name="align">
              <xsl:choose>
                <xsl:when test="$align='1'">0</xsl:when>
                <xsl:otherwise>1</xsl:otherwise>
              </xsl:choose>
            </xsl:with-param>
          </xsl:call-template>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="sRepNumWith0">
            <xsl:call-template name="SReplaceNumWithZero">
              <xsl:with-param name="sToParse" select="$sToParse" />
            </xsl:call-template>
          </xsl:variable>
          <xsl:variable name="sRepOperWith-">
            <xsl:call-template name="SReplaceOperWithMinus">
              <xsl:with-param name="sToParse" select="$sRepNumWith0" />
            </xsl:call-template>
          </xsl:variable>

          <xsl:variable name="iFirstOper" select="string-length($sRepOperWith-) - string-length(substring-after($sRepOperWith-, '-'))" />
          <xsl:variable name="iFirstNum" select="string-length($sRepOperWith-) - string-length(substring-after($sRepOperWith-, '0'))" />
          <xsl:variable name="iFirstAmp" select="string-length($sRepOperWith-) - string-length(substring-after($sRepOperWith-, '&#x0026;'))" />
          <xsl:variable name="fNumAtPos1">
            <xsl:choose>
              <xsl:when test="substring($sRepOperWith-,1,1)='0'">1</xsl:when>
              <xsl:otherwise>0</xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="fOperAtPos1">
            <xsl:choose>
              <xsl:when test="substring($sRepOperWith-,1,1)='-'">1</xsl:when>
              <xsl:otherwise>0</xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:choose>

            <!-- Case I: The string begins with neither a number, nor an operator -->
            <xsl:when test="$fNumAtPos1='0' and $fOperAtPos1='0'">
              <xsl:choose>
                <xsl:when test="$nor = 0">
                  <mml:mi>
                    <xsl:call-template name="CreateTokenAttributes">
                      <xsl:with-param name="scr" select="$scr" />
                      <xsl:with-param name="sty" select="$sty" />
                      <xsl:with-param name="nor" select="$nor" />
                      <xsl:with-param name="nCharToPrint" select="1" />
                      <xsl:with-param name="sTokenType" select="'mi'" />
                    </xsl:call-template>
                    <xsl:variable name="sOutput" select="translate(substring($sToParse, 1, 1), ' ', '&#xa0;')" />
                    <xsl:value-of select="$sOutput" />
                  </mml:mi>
                </xsl:when>
                <xsl:otherwise>
                  <mml:mtext>
                    <xsl:variable name="sOutput" select="translate(substring($sToParse, 1, 1), ' ', '&#xa0;')" />
                    <xsl:value-of select="$sOutput" />
                  </mml:mtext>
                </xsl:otherwise>
              </xsl:choose>
              <xsl:call-template name="ParseEqArrMr">
                <xsl:with-param name="sToParse" select="substring($sToParse, 2)" />
                <xsl:with-param name="scr" select="$scr" />
                <xsl:with-param name="sty" select="$sty" />
                <xsl:with-param name="nor" select="$nor" />
                <xsl:with-param name="align" select="$align" />
              </xsl:call-template>
            </xsl:when>

            <!-- Case II: There is an operator at position 1 -->
            <xsl:when test="$fOperAtPos1='1'">
              <xsl:choose>
                <xsl:when test="$nor = 0">
                  <mml:mo>
                    <xsl:call-template name="CreateTokenAttributes">
                      <xsl:with-param name="scr" />
                      <xsl:with-param name="sty" />
                      <xsl:with-param name="nor" select="$nor" />
                      <xsl:with-param name="sTokenType" select="'mo'" />
                    </xsl:call-template>
                    <xsl:value-of select="substring($sToParse,1,1)" />
                  </mml:mo>
                </xsl:when>
                <xsl:otherwise>
                  <mml:mtext>
                    <xsl:value-of select="substring($sToParse,1,1)" />
                  </mml:mtext>
                </xsl:otherwise>
              </xsl:choose>
              <xsl:call-template name="ParseEqArrMr">
                <xsl:with-param name="sToParse" select="substring($sToParse, 2)" />
                <xsl:with-param name="scr" select="$scr" />
                <xsl:with-param name="sty" select="$sty" />
                <xsl:with-param name="nor" select="$nor" />
                <xsl:with-param name="align" select="$align" />
              </xsl:call-template>
            </xsl:when>

            <!-- Case III: There is a number at position 1 -->
            <xsl:otherwise>
              <xsl:variable name="sConsecNum">
                <xsl:call-template name="SNumStart">
                  <xsl:with-param name="sToParse" select="$sToParse" />
                  <xsl:with-param name="sPattern" select="$sRepNumWith0" />
                </xsl:call-template>
              </xsl:variable>
              <xsl:choose>
                <xsl:when test="$nor = 0">
                  <mml:mn>
                    <xsl:call-template name="CreateTokenAttributes">
                      <xsl:with-param name="scr" />
                      <xsl:with-param name="sty" select="'p'"/>
                      <xsl:with-param name="nor" select="$nor" />
                      <xsl:with-param name="sTokenType" select="'mn'" />
                    </xsl:call-template>
                    <xsl:value-of select="$sConsecNum" />
                  </mml:mn>
                </xsl:when>
                <xsl:otherwise>
                  <mml:mtext>
                    <xsl:value-of select="$sConsecNum" />
                  </mml:mtext>
                </xsl:otherwise>
              </xsl:choose>
              <xsl:call-template name="ParseEqArrMr">
                <xsl:with-param name="sToParse" select="substring-after($sToParse, $sConsecNum)" />
                <xsl:with-param name="scr" select="$scr" />
                <xsl:with-param name="sty" select="$sty" />
                <xsl:with-param name="nor" select="$nor" />
                <xsl:with-param name="align" select="$align" />
              </xsl:call-template>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:if>
  </xsl:template>

  <!-- %%Template: ParseMt

			Produce a run of text. Technically, OMML makes no distinction
			between numbers, operators, and other characters in a run. For
			MathML we need to break these into mi, mn, or mo elements.

			See also ParseEqArrMr
	-->
  <xsl:template name="ParseMt">
    <xsl:param name="sToParse" />
    <xsl:param name="sty" />
    <xsl:param name="scr" />
    <xsl:param name="nor" />
    <xsl:if test="string-length($sToParse) &gt; 0">
      <xsl:variable name="sRepNumWith0">
        <xsl:call-template name="SReplaceNumWithZero">
          <xsl:with-param name="sToParse" select="$sToParse" />
        </xsl:call-template>
      </xsl:variable>
      <xsl:variable name="sRepOperWith-">
        <xsl:call-template name="SReplaceOperWithMinus">
          <xsl:with-param name="sToParse" select="$sRepNumWith0" />
        </xsl:call-template>
      </xsl:variable>

      <xsl:variable name="iFirstOper" select="string-length($sRepOperWith-) - string-length(substring-after($sRepOperWith-, '-'))" />
      <xsl:variable name="iFirstNum" select="string-length($sRepOperWith-) - string-length(substring-after($sRepOperWith-, '0'))" />
      <xsl:variable name="fNumAtPos1">
        <xsl:choose>
          <xsl:when test="substring($sRepOperWith-,1,1)='0'">1</xsl:when>
          <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="fOperAtPos1">
        <xsl:choose>
          <xsl:when test="substring($sRepOperWith-,1,1)='-'">1</xsl:when>
          <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
      </xsl:variable>

      <xsl:choose>

        <!-- Case I: The string begins with neither a number, nor an operator -->
        <xsl:when test="$fOperAtPos1='0' and $fNumAtPos1='0'">
          <xsl:variable name="nCharToPrint">
            <xsl:choose>
              <xsl:when test="ancestor::m:fName">
                <xsl:choose>
                  <xsl:when test="($iFirstOper=$iFirstNum) and
											($iFirstOper=string-length($sToParse)) and
							                (substring($sRepOperWith-, string-length($sRepOperWith-))!='0') and
							                (substring($sRepOperWith-, string-length($sRepOperWith-))!='-')">
                    <xsl:value-of select="string-length($sToParse)" />
                  </xsl:when>
                  <xsl:when test="$iFirstOper &lt; $iFirstNum">
                    <xsl:value-of select="$iFirstOper - 1" />
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="$iFirstNum - 1" />
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>1</xsl:otherwise>
            </xsl:choose>
          </xsl:variable>

          <mml:mi>
            <xsl:call-template name="CreateTokenAttributes">
              <xsl:with-param name="scr" select="$scr" />
              <xsl:with-param name="sty" select="$sty" />
              <xsl:with-param name="nor" select="$nor" />
              <xsl:with-param name="nCharToPrint" select="$nCharToPrint" />
              <xsl:with-param name="sTokenType" select="'mi'" />
            </xsl:call-template>
            <xsl:variable name="sWrite" select="translate(substring($sToParse, 1, $nCharToPrint), ' ', '&#xa0;')" />
            <xsl:value-of select="$sWrite" />
          </mml:mi>
          <xsl:call-template name="ParseMt">
            <xsl:with-param name="sToParse" select="substring($sToParse, $nCharToPrint+1)" />
            <xsl:with-param name="scr" select="$scr" />
            <xsl:with-param name="sty" select="$sty" />
            <xsl:with-param name="nor" select="$nor" />
          </xsl:call-template>
        </xsl:when>

        <!-- Case II: There is an operator at position 1 -->
        <xsl:when test="$fOperAtPos1='1'">
          <mml:mo>
            <xsl:call-template name="CreateTokenAttributes">
              <xsl:with-param name="scr" />
              <xsl:with-param name="sty" />
              <xsl:with-param name="nor" select="$nor" />
              <xsl:with-param name="sTokenType" select="'mo'" />
            </xsl:call-template>
            <xsl:value-of select="substring($sToParse,1,1)" />
          </mml:mo>
          <xsl:call-template name="ParseMt">
            <xsl:with-param name="sToParse" select="substring($sToParse, 2)" />
            <xsl:with-param name="scr" select="$scr" />
            <xsl:with-param name="sty" select="$sty" />
            <xsl:with-param name="nor" select="$nor" />
          </xsl:call-template>
        </xsl:when>

        <!-- Case III: There is a number at position 1 -->
        <xsl:otherwise>
          <xsl:variable name="sConsecNum">
            <xsl:call-template name="SNumStart">
              <xsl:with-param name="sToParse" select="$sToParse" />
              <xsl:with-param name="sPattern" select="$sRepNumWith0" />
            </xsl:call-template>
          </xsl:variable>
          <mml:mn>
            <xsl:call-template name="CreateTokenAttributes">
              <xsl:with-param name="scr" select="$scr" />
              <xsl:with-param name="sty" select="'p'" />
              <xsl:with-param name="nor" select="$nor" />
              <xsl:with-param name="sTokenType" select="'mn'" />
            </xsl:call-template>
            <xsl:value-of select="$sConsecNum" />
          </mml:mn>
          <xsl:call-template name="ParseMt">
            <xsl:with-param name="sToParse" select="substring-after($sToParse, $sConsecNum)" />
            <xsl:with-param name="scr" select="$scr" />
            <xsl:with-param name="sty" select="$sty" />
            <xsl:with-param name="nor" select="$nor" />
          </xsl:call-template>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:if>
  </xsl:template>

  <!-- %%Template: SNumStart

		Return the longest substring of sToParse starting from the
		start of sToParse that is a number. In addition, it takes the
		pattern string, which is sToParse with all of its numbers
		replaced with a 0. sPattern should be the same length
		as sToParse
	-->
  <xsl:template name="SNumStart">
    <xsl:param name="sToParse" select="''" />
    <!-- if we don't get anything, take the string itself -->
    <xsl:param name="sPattern" select="'$sToParse'" />


    <xsl:choose>
      <!-- the pattern says this is a number, recurse with the rest -->
      <xsl:when test="substring($sPattern, 1, 1) = '0'">
        <xsl:call-template name="SNumStart">
          <xsl:with-param name="sToParse" select="$sToParse" />
          <xsl:with-param name="sPattern" select="substring($sPattern, 2)" />
        </xsl:call-template>
      </xsl:when>

      <!-- the pattern says we've run out of numbers. Take as many
				characters from sToParse as we shaved off sPattern -->
      <xsl:otherwise>
        <xsl:value-of select="substring($sToParse, 1, string-length($sToParse) - string-length($sPattern))" />
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- %%Template SRepeatCharAcc

			The core of SRepeatChar with an accumulator. The current
			string is in param $acc, and we will double and recurse,
			if we're less than half of the required length or else just
			add the right amount of characters to the accumulator and
			return
	-->
  <xsl:template name="SRepeatCharAcc">
    <xsl:param name="cchRequired" select="1" />
    <xsl:param name="ch" select="'-'" />
    <xsl:param name="acc" select="$ch" />

    <xsl:variable name="cchAcc" select="string-length($acc)" />
    <xsl:choose>
      <xsl:when test="(2 * $cchAcc) &lt; $cchRequired">
        <xsl:call-template name="SRepeatCharAcc">
          <xsl:with-param name="cchRequired" select="$cchRequired" />
          <xsl:with-param name="ch" select="$ch" />
          <xsl:with-param name="acc" select="concat($acc, $acc)" />
        </xsl:call-template>
      </xsl:when>

      <xsl:otherwise>
        <xsl:value-of select="concat($acc, substring($acc, 1, $cchRequired - $cchAcc))" />
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>


  <!-- %%Template SRepeatChar

			Generates a string nchRequired long by repeating the given character ch
	-->
  <xsl:template name="SRepeatChar">
    <xsl:param name="cchRequired" select="1" />
    <xsl:param name="ch" select="'-'" />

    <xsl:call-template name="SRepeatCharAcc">
      <xsl:with-param name="cchRequired" select="$cchRequired" />
      <xsl:with-param name="ch" select="$ch" />
      <xsl:with-param name="acc" select="$ch" />
    </xsl:call-template>
  </xsl:template>

  <!-- %%Template SReplaceOperWithMinus

		Go through the given string and replace every instance
		of an operator with a minus '-'. This helps quickly identify
		the first instance of an operator.
	-->
  <xsl:template name="SReplaceOperWithMinus">
    <xsl:param name="sToParse" select="''" />

    <xsl:value-of select="translate($sToParse, $sOperators, $sMinuses)" />
  </xsl:template>

  <!-- %%Template SReplaceNumWithZero

		Go through the given string and replace every instance
		of an number with a zero '0'. This helps quickly identify
		the first occurence of a number.

		Considers the '.' and ',' part of a number iff they are sandwiched
		between two other numbers. 0.3 will be recognized as a number,
		x.3 will not be. Since these characters can also be an operator, this
		should be called before SReplaceOperWithMinus.
	-->
  <xsl:template name="SReplaceNumWithZero">
    <xsl:param name="sToParse" select="''" />

    <!-- First do a simple replace. Numbers will all be come 0's.
			After this point, the pattern involving the . or , that
			we are looking for will become 0.0 or 0,0 -->
    <xsl:variable name="sSimpleReplace" select="translate($sToParse, $sNumbers, $sZeros)" />

    <!-- And then, replace 0.0 with just 000. This means that the . will
			become part of the number -->
    <xsl:variable name="sReplacePeriod">
      <xsl:call-template name="SReplace">
        <xsl:with-param name="sInput" select="$sSimpleReplace" />
        <xsl:with-param name="sOrig" select="'0.0'" />
        <xsl:with-param name="sReplacement" select="'000'" />
      </xsl:call-template>
    </xsl:variable>

    <!-- And then, replace 0,0 with just 000. This means that the , will
			become part of the number -->
    <xsl:call-template name="SReplace">
      <xsl:with-param name="sInput" select="$sReplacePeriod" />
      <xsl:with-param name="sOrig" select="'0,0'" />
      <xsl:with-param name="sReplacement" select="'000'" />
    </xsl:call-template>
  </xsl:template>

  <!-- Template to translate Word's borderBox properties into the menclose notation attribute
       The initial call to this SHOULD NOT pass an sAttribute.  Subsequent calls to
       CreateMencloseNotationAttrFromBorderBoxAttr by CreateMencloseNotationAttrFromBorderBoxAttr will
       update the sAttribute as appropriate.

       CreateMencloseNotationAttrFromBorderBoxAttr looks at each attribute (fHideTop, fHideBot, etc.) one at a time
       in the order they are listed and passes a modified sAttribute to CreateMencloseNotationAttrFromBorderBoxAttr.
       Each successive call to CreateMencloseNotationAttrFromBorderBoxAttr knows which attribute to look at because
       the previous call should have omitted passing the attribute it just analyzed.  This is why as you read lower
       and lower in the template that each call to CreateMencloseNotationAttrFromBorderBoxAttr has fewer and fewer attributes.
       -->
  <xsl:template name="CreateMencloseNotationAttrFromBorderBoxAttr">
    <xsl:param name="fHideTop" />
    <xsl:param name="fHideBot" />
    <xsl:param name="fHideLeft" />
    <xsl:param name="fHideRight" />
    <xsl:param name="fStrikeH" />
    <xsl:param name="fStrikeV" />
    <xsl:param name="fStrikeBLTR" />
    <xsl:param name="fStrikeTLBR" />
    <xsl:param name="sAttribute" />

    <xsl:choose>
      <xsl:when test="string-length($sAttribute) = 0">
        <xsl:choose>
          <xsl:when test="string-length($fHideTop) &gt; 0
                      and string-length($fHideBot) &gt; 0
                      and string-length($fHideLeft) &gt; 0
                      and string-length($fHideRight) &gt; 0">

            <xsl:choose>
              <xsl:when test="$fHideTop = 0
                              and $fHideBot = 0
                              and $fHideLeft = 0
                              and $fHideRight = 0">
                <!-- We can use 'box' instead of top, bot, left, and right.  Therefore,
                  replace sAttribute with 'box' and begin analyzing params fStrikeH
                  and below. -->
                <xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr">
                  <xsl:with-param name="fStrikeH" select="$fStrikeH" />
                  <xsl:with-param name="fStrikeV" select="$fStrikeV" />
                  <xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR" />
                  <xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR" />
                  <xsl:with-param name="sAttribute">
                    <xsl:text>box</xsl:text>
                  </xsl:with-param>
                </xsl:call-template>
              </xsl:when>
              <xsl:otherwise>
                <!-- Can't use 'box', theremore, must analyze all attributes -->
                <xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr">
                  <xsl:with-param name="fHideTop" select="$fHideTop" />
                  <xsl:with-param name="fHideBot" select="$fHideBot" />
                  <xsl:with-param name="fHideLeft" select="$fHideLeft" />
                  <xsl:with-param name="fHideRight" select="$fHideRight" />
                  <xsl:with-param name="fStrikeH" select="$fStrikeH" />
                  <xsl:with-param name="fStrikeV" select="$fStrikeV" />
                  <xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR" />
                  <xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR" />
                  <xsl:with-param name="sAttribute">
                    <!-- Assume using all four (left right top bottom).  Subsequent calls
                         will remove the sides which aren't to be includes. -->
                    <xsl:text>left right top bottom</xsl:text>
                  </xsl:with-param>
                </xsl:call-template>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
        </xsl:choose>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="string-length($fHideTop) &gt; 0">
            <xsl:choose>
              <xsl:when test="$fHideTop=1">
                <xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr">
                  <xsl:with-param name="fHideBot" select="$fHideBot" />
                  <xsl:with-param name="fHideLeft" select="$fHideLeft" />
                  <xsl:with-param name="fHideRight" select="$fHideRight" />
                  <xsl:with-param name="fStrikeH" select="$fStrikeH" />
                  <xsl:with-param name="fStrikeV" select="$fStrikeV" />
                  <xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR" />
                  <xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR" />
                  <xsl:with-param name="sAttribute">
                    <xsl:call-template name="SReplace">
                      <xsl:with-param name="sInput" select="$sAttribute" />
                      <xsl:with-param name="sOrig" select="'top'" />
                      <xsl:with-param name="sReplacement" select="''" />
                    </xsl:call-template>
                  </xsl:with-param>
                </xsl:call-template>
              </xsl:when>
              <xsl:otherwise>
                <xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr">
                  <xsl:with-param name="fHideBot" select="$fHideBot" />
                  <xsl:with-param name="fHideLeft" select="$fHideLeft" />
                  <xsl:with-param name="fHideRight" select="$fHideRight" />
                  <xsl:with-param name="fStrikeH" select="$fStrikeH" />
                  <xsl:with-param name="fStrikeV" select="$fStrikeV" />
                  <xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR" />
                  <xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR" />
                  <xsl:with-param name="sAttribute" select="$sAttribute" />
                </xsl:call-template>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="string-length($fHideBot) &gt; 0">
            <xsl:choose>
              <xsl:when test="$fHideBot=1">
                <xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr">
                  <xsl:with-param name="fHideLeft" select="$fHideLeft" />
                  <xsl:with-param name="fHideRight" select="$fHideRight" />
                  <xsl:with-param name="fStrikeH" select="$fStrikeH" />
                  <xsl:with-param name="fStrikeV" select="$fStrikeV" />
                  <xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR" />
                  <xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR" />
                  <xsl:with-param name="sAttribute">
                    <xsl:call-template name="SReplace">
                      <xsl:with-param name="sInput" select="$sAttribute" />
                      <xsl:with-param name="sOrig" select="'bottom'" />
                      <xsl:with-param name="sReplacement" select="''" />
                    </xsl:call-template>
                  </xsl:with-param>
                </xsl:call-template>
              </xsl:when>
              <xsl:otherwise>
                <xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr">
                  <xsl:with-param name="fHideLeft" select="$fHideLeft" />
                  <xsl:with-param name="fHideRight" select="$fHideRight" />
                  <xsl:with-param name="fStrikeH" select="$fStrikeH" />
                  <xsl:with-param name="fStrikeV" select="$fStrikeV" />
                  <xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR" />
                  <xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR" />
                  <xsl:with-param name="sAttribute" select="$sAttribute" />
                </xsl:call-template>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="string-length($fHideLeft) &gt; 0">
            <xsl:choose>
              <xsl:when test="$fHideLeft=1">
                <xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr">
                  <xsl:with-param name="fHideRight" select="$fHideRight" />
                  <xsl:with-param name="fStrikeH" select="$fStrikeH" />
                  <xsl:with-param name="fStrikeV" select="$fStrikeV" />
                  <xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR" />
                  <xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR" />
                  <xsl:with-param name="sAttribute">
                    <xsl:call-template name="SReplace">
                      <xsl:with-param name="sInput" select="$sAttribute" />
                      <xsl:with-param name="sOrig" select="'left'" />
                      <xsl:with-param name="sReplacement" select="''" />
                    </xsl:call-template>
                  </xsl:with-param>
                </xsl:call-template>
              </xsl:when>
              <xsl:otherwise>
                <xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr">
                  <xsl:with-param name="fHideRight" select="$fHideRight" />
                  <xsl:with-param name="fStrikeH" select="$fStrikeH" />
                  <xsl:with-param name="fStrikeV" select="$fStrikeV" />
                  <xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR" />
                  <xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR" />
                  <xsl:with-param name="sAttribute" select="$sAttribute" />
                </xsl:call-template>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="string-length($fHideRight) &gt; 0">
            <xsl:choose>
              <xsl:when test="$fHideRight=1">
                <xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr">
                  <xsl:with-param name="fStrikeH" select="$fStrikeH" />
                  <xsl:with-param name="fStrikeV" select="$fStrikeV" />
                  <xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR" />
                  <xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR" />
                  <xsl:with-param name="sAttribute">
                    <xsl:call-template name="SReplace">
                      <xsl:with-param name="sInput" select="$sAttribute" />
                      <xsl:with-param name="sOrig" select="'right'" />
                      <xsl:with-param name="sReplacement" select="''" />
                    </xsl:call-template>
                  </xsl:with-param>
                </xsl:call-template>
              </xsl:when>
              <xsl:otherwise>
                <xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr">
                  <xsl:with-param name="fStrikeH" select="$fStrikeH" />
                  <xsl:with-param name="fStrikeV" select="$fStrikeV" />
                  <xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR" />
                  <xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR" />
                  <xsl:with-param name="sAttribute" select="$sAttribute" />
                </xsl:call-template>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="string-length($fStrikeH) &gt; 0">
            <xsl:choose>
              <xsl:when test="$fStrikeH=1">
                <xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr">
                  <xsl:with-param name="fStrikeV" select="$fStrikeV" />
                  <xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR" />
                  <xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR" />
                  <xsl:with-param name="sAttribute" select="concat($sAttribute, ' horizontalstrike')" />
                </xsl:call-template>
              </xsl:when>
              <xsl:otherwise>
                <xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr">
                  <xsl:with-param name="fStrikeV" select="$fStrikeV" />
                  <xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR" />
                  <xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR" />
                  <xsl:with-param name="sAttribute" select="$sAttribute" />
                </xsl:call-template>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="string-length($fStrikeV) &gt; 0">
            <xsl:choose>
              <xsl:when test="$fStrikeV=1">
                <xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr">
                  <xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR" />
                  <xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR" />
                  <xsl:with-param name="sAttribute" select="concat($sAttribute, ' verticalstrike')" />
                </xsl:call-template>
              </xsl:when>
              <xsl:otherwise>
                <xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr">
                  <xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR" />
                  <xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR" />
                  <xsl:with-param name="sAttribute" select="$sAttribute" />
                </xsl:call-template>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="string-length($fStrikeBLTR) &gt; 0">
            <xsl:choose>
              <xsl:when test="$fStrikeBLTR=1">
                <xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr">
                  <xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR" />
                  <xsl:with-param name="sAttribute" select="concat($sAttribute, ' updiagonalstrike')" />
                </xsl:call-template>
              </xsl:when>
              <xsl:otherwise>
                <xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr">
                  <xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR" />
                  <xsl:with-param name="sAttribute" select="$sAttribute" />
                </xsl:call-template>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="string-length($fStrikeTLBR) &gt; 0">
            <xsl:choose>
              <xsl:when test="$fStrikeTLBR=1">
                <xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr">
                  <xsl:with-param name="sAttribute" select="concat($sAttribute, ' downdiagonalstrike')" />
                </xsl:call-template>
              </xsl:when>
              <xsl:otherwise>
                <xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr">
                  <xsl:with-param name="sAttribute" select="$sAttribute" />
                </xsl:call-template>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <xsl:attribute name="notation">
              <xsl:value-of select="normalize-space($sAttribute)" />
            </xsl:attribute>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- Tristate (true, false, neither) from string value -->
  <xsl:template name="TFromStrVal">
    <xsl:param name="str" />
    <xsl:choose>
      <xsl:when test="$str = 'on' or $str = '1' or $str = 'true'">1</xsl:when>
      <xsl:when test="$str = 'off' or $str = '0' or $str = 'false'">0</xsl:when>
      <xsl:otherwise>-1</xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- Return 0 iff $str is explicitly set to a false value.
       Return true otherwise -->
  <xsl:template name="ForceFalseStrVal">
    <xsl:param name="str" />
    <xsl:variable name="tValue">
      <xsl:call-template name="TFromStrVal">
        <xsl:with-param name="str" select="$str"/>
      </xsl:call-template>
    </xsl:variable>
    <xsl:choose>
      <xsl:when test="$tValue = '0'">0</xsl:when>
      <xsl:otherwise>1</xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- Return 1 iff $str is explicitly set to a true value.
       Return false otherwise -->
  <xsl:template name="ForceTrueStrVal">
    <xsl:param name="str" />
    <xsl:variable name="tValue">
      <xsl:call-template name="TFromStrVal">
        <xsl:with-param name="str" select="$str"/>
      </xsl:call-template>
    </xsl:variable>
    <xsl:choose>
      <xsl:when test="$tValue = '1'">1</xsl:when>
      <xsl:otherwise>0</xsl:otherwise>
    </xsl:choose>
  </xsl:template>
</xsl:stylesheet>
`.trim());

// node_modules/office-viewer/esm/openxml/math/convertOOML.js
function convertOOXML(element) {
  var xsltProcessor = new XSLTProcessor();
  xsltProcessor.importStylesheet(xsl);
  var fragment = xsltProcessor.transformToFragment(element, document);
  return fragment;
}

// node_modules/office-viewer/esm/render/renderMath.js
function renderOMath(word, math) {
  return convertOOXML(math.element);
}

// node_modules/office-viewer/esm/render/renderParagraph.js
function renderParagraph(word, paragraph, renderEmptySpace, inHeader) {
  var e_1, _a2;
  if (renderEmptySpace === void 0) {
    renderEmptySpace = true;
  }
  if (inHeader === void 0) {
    inHeader = false;
  }
  word.currentParagraph = paragraph;
  var p = createElement("p");
  word.addClass(p, "p");
  var properties = paragraph.properties;
  setElementStyle(word, p, properties);
  p.style.position = "relative";
  if (properties.numPr) {
    appendChild(p, renderNumbering(p, word, properties.numPr));
  }
  var inFldChar = false;
  if (properties.tabs && properties.tabs.length) {
    appendChild(p, renderTab(word, properties.tabs[0], true));
  }
  try {
    for (var _b2 = __values(paragraph.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var child = _c.value;
      if (child instanceof Run) {
        if (child.fldChar === "begin") {
          inFldChar = true;
        } else if (child) {
          inFldChar = false;
        }
        appendChild(p, renderRun(word, child, paragraph, inFldChar, inHeader));
      } else if (child instanceof BookmarkStart) {
        appendChild(p, renderBookmarkStart(word, child));
      } else if (child instanceof Hyperlink) {
        var hyperlink = renderHyperLink(word, child, paragraph);
        appendChild(p, hyperlink);
      } else if (child instanceof OMath) {
        appendChild(p, renderOMath(word, child));
      } else {
        console.warn("unknow pargraph type", child);
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  if (p.innerHTML === "" && renderEmptySpace) {
    p.innerHTML = "&nbsp;";
  }
  return p;
}

// node_modules/office-viewer/esm/render/renderHeader.js
function renderHeader(word, header) {
  var e_1, _a2;
  var headerEl = createElement("div");
  try {
    for (var _b2 = __values(header.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var child = _c.value;
      if (child instanceof Paragraph) {
        var p = renderParagraph(word, child, true, true);
        appendChild(headerEl, p);
      } else if (child instanceof Table) {
        var table = renderTable(word, child);
        appendChild(headerEl, table);
      } else {
        console.warn("unknown child", child);
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return headerEl;
}

// node_modules/office-viewer/esm/render/renderSection.js
function renderSection(word, wDocument, section, renderOptions) {
  var sectionEl = createElement("section");
  sectionEl.style.position = "relative";
  if (wDocument.backgroundColor) {
    sectionEl.style.background = wDocument.backgroundColor;
  }
  if (renderOptions.page) {
    if (renderOptions.pageMarginBottom) {
      sectionEl.style.marginBottom = renderOptions.pageMarginBottom + "px";
    }
    if (renderOptions.pageShadow) {
      sectionEl.style.boxShadow = "0 0 8px rgba(0, 0, 0, 0.5)";
    }
    if (renderOptions.pageBackground) {
      sectionEl.style.background = renderOptions.pageBackground;
    }
  }
  var props = section.properties;
  var pageSize = props.pageSize;
  if (pageSize) {
    if (!renderOptions.ignoreWidth) {
      sectionEl.style.width = pageSize.width;
    }
    if (!renderOptions.ignoreHeight) {
      sectionEl.style.height = pageSize.height;
    }
  }
  if (renderOptions.padding) {
    sectionEl.style.padding = renderOptions.padding;
  } else {
    var pageMargin = props.pageMargin;
    if (pageMargin) {
      sectionEl.style.paddingLeft = pageMargin.left || "0";
      sectionEl.style.paddingRight = pageMargin.right || "0";
      sectionEl.style.paddingTop = pageMargin.top || "0";
      sectionEl.style.paddingBottom = pageMargin.bottom || "0";
    }
  }
  if (props.cols) {
    if (props.cols.num && props.cols.num > 1) {
      sectionEl.style.columnCount = "" + props.cols.num;
      if (props.cols.space) {
        sectionEl.style.columnGap = props.cols.space;
      }
    }
  }
  word.currentPage++;
  var width = "auto";
  if (props.pageSize && props.pageSize.width) {
    width = props.pageSize.width;
  }
  if (props.headers && renderOptions.page && renderOptions.renderHeader) {
    var headers = props.headers;
    var headerEl = null;
    if (headers.even && word.currentPage % 2 === 0) {
      headerEl = renderHeader(word, headers.even);
    } else if (headers.default) {
      headerEl = renderHeader(word, headers.default);
    } else {
      console.warn("can not find header", word.currentPage, props.headers);
    }
    if (headerEl) {
      headerEl.style.position = "absolute";
      var pageMargin = props.pageMargin;
      if (pageMargin && pageMargin.header) {
        headerEl.style.top = pageMargin.header;
        headerEl.style.width = width;
      }
      sectionEl.appendChild(headerEl);
    }
  }
  if (props.footers && renderOptions.page && renderOptions.renderFooter) {
    var footers = props.footers;
    var footerEl = null;
    if (footers.even && word.currentPage % 2 === 0) {
      footerEl = renderHeader(word, footers.even);
    } else if (footers.default) {
      footerEl = renderHeader(word, footers.default);
    } else {
      console.warn("can not find footer", word.currentPage, props.footers);
    }
    if (footerEl) {
      footerEl.style.position = "absolute";
      var pageMargin = props.pageMargin;
      if (pageMargin && pageMargin.footer) {
        footerEl.style.bottom = pageMargin.footer;
        footerEl.style.width = width;
      }
      sectionEl.appendChild(footerEl);
    }
  }
  return sectionEl;
}

// node_modules/office-viewer/esm/render/renderBody.js
function createNewSection(word, sectionEnd, child) {
  if (word.breakPage) {
    word.breakPage = false;
    return true;
  }
  var childBound = child.getBoundingClientRect();
  return childBound.top + childBound.height > sectionEnd.bottom || // 注意这里没有 + childBound.width，因为 width 一般都是 100% 导致容易超出
  childBound.left > sectionEnd.right;
}
function appendToSection(word, wDocument, renderOptions, bodyEl, sectionEl, sectionEnd, section, child) {
  var isFirst = sectionEl.children.length === 0;
  appendChild(sectionEl, child);
  if (!isFirst && createNewSection(word, sectionEnd, child)) {
    var newChild = child.cloneNode(true);
    removeChild(sectionEl, child);
    var newSectionEl = renderSection(word, wDocument, section, renderOptions);
    appendChild(bodyEl, newSectionEl);
    appendChild(newSectionEl, newChild);
    sectionEnd = getSectionEnd(section, newSectionEl);
    return { sectionEl: newSectionEl, sectionEnd };
  }
  return { sectionEl, sectionEnd };
}
function getSectionEnd(section, sectionEl) {
  var sectionBound = sectionEl.getBoundingClientRect();
  var pageMargin = section.properties.pageMargin;
  var bottom = sectionBound.top + sectionBound.height;
  if (pageMargin === null || pageMargin === void 0 ? void 0 : pageMargin.bottom) {
    bottom = bottom - parseInt(pageMargin.bottom.replace("px", ""), 10);
  }
  var right = sectionBound.left + sectionBound.width;
  if (pageMargin === null || pageMargin === void 0 ? void 0 : pageMargin.right) {
    right = right - parseInt(pageMargin.right.replace("px", ""), 10);
  }
  return { bottom, right };
}
function getTransform(rootWidth, section, renderOptions) {
  var props = section.properties;
  var pageSize = props.pageSize;
  if (renderOptions.zoomFitWidth && !renderOptions.ignoreWidth) {
    var pageWidth = pageSize === null || pageSize === void 0 ? void 0 : pageSize.width;
    if (rootWidth && pageWidth) {
      var pageWidthNum = parseInt(pageWidth.replace("px", ""), 10);
      if (props.pageMargin) {
        var pageMargin = props.pageMargin;
        pageWidthNum += pageMargin.left ? parseInt(pageMargin.left.replace("px", ""), 10) : 0;
        pageWidthNum += pageMargin.right ? parseInt(pageMargin.right.replace("px", ""), 10) : 0;
      }
      var zoomWidth = rootWidth / pageWidthNum;
      return zoomWidth;
    }
  }
  return 1;
}
function renderSectionInPage(word, wDocument, bodyEl, renderOptions, sectionEl, section, isLastSection) {
  setTimeout(function() {
    var e_1, _a2;
    var sectionEnd = getSectionEnd(section, sectionEl);
    try {
      for (var _b2 = __values(section.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
        var child = _c.value;
        if (child instanceof Paragraph) {
          var p = renderParagraph(word, child);
          var appendResult = appendToSection(word, wDocument, renderOptions, bodyEl, sectionEl, sectionEnd, section, p);
          sectionEl = appendResult.sectionEl;
          sectionEnd = appendResult.sectionEnd;
        } else if (child instanceof Table) {
          var table = renderTable(word, child);
          var appendResult = appendToSection(word, wDocument, renderOptions, bodyEl, sectionEl, sectionEnd, section, table);
          sectionEl = appendResult.sectionEl;
          sectionEnd = appendResult.sectionEnd;
        } else {
          console.warn("unknown child", child);
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a2 = _b2.return))
          _a2.call(_b2);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    if (isLastSection) {
      sectionEl.style.marginBottom = "0";
    }
  }, 0);
}
function renderBody(root, word, bodyEl, wDocument, body, renderOptions) {
  var e_2, _a2, e_3, _b2;
  var page = renderOptions.page || false;
  var rootWidth = root.getBoundingClientRect().width - (renderOptions.pageWrapPadding || 0) * 2;
  var zooms = [];
  var index2 = 0;
  var sections = body.sections;
  var sectionLength = sections.length;
  var isLastSection = false;
  try {
    for (var sections_1 = __values(sections), sections_1_1 = sections_1.next(); !sections_1_1.done; sections_1_1 = sections_1.next()) {
      var section = sections_1_1.value;
      zooms.push(getTransform(rootWidth, section, renderOptions));
      word.currentSection = section;
      var sectionEl = renderSection(word, wDocument, section, renderOptions);
      appendChild(bodyEl, sectionEl);
      index2 = index2 + 1;
      if (index2 === sectionLength) {
        isLastSection = true;
      }
      if (page) {
        renderSectionInPage(word, wDocument, bodyEl, renderOptions, sectionEl, section, isLastSection);
      } else {
        try {
          for (var _c = (e_3 = void 0, __values(section.children)), _d = _c.next(); !_d.done; _d = _c.next()) {
            var child = _d.value;
            if (child instanceof Paragraph) {
              var p = renderParagraph(word, child);
              appendChild(sectionEl, p);
            } else if (child instanceof Table) {
              var table = renderTable(word, child);
              appendChild(sectionEl, table);
            } else {
              console.warn("unknown child", child);
            }
          }
        } catch (e_3_1) {
          e_3 = { error: e_3_1 };
        } finally {
          try {
            if (_d && !_d.done && (_b2 = _c.return))
              _b2.call(_c);
          } finally {
            if (e_3)
              throw e_3.error;
          }
        }
      }
    }
  } catch (e_2_1) {
    e_2 = { error: e_2_1 };
  } finally {
    try {
      if (sections_1_1 && !sections_1_1.done && (_a2 = sections_1.return))
        _a2.call(sections_1);
    } finally {
      if (e_2)
        throw e_2.error;
    }
  }
  setTimeout(function() {
    if (renderOptions.zoom) {
      bodyEl.style.transformOrigin = "0 0";
      bodyEl.style.transform = "scale(".concat(renderOptions.zoom, ")");
    } else if (renderOptions.page && renderOptions.zoomFitWidth && !renderOptions.ignoreWidth) {
      var minZoom = Math.min.apply(Math, __spreadArray([], __read(zooms), false));
      bodyEl.style.transformOrigin = "0 0";
      bodyEl.style.transform = "scale(".concat(minZoom, ")");
    }
  }, 0);
}

// node_modules/office-viewer/esm/render/renderDocument.js
function renderDocument(root, word, wDocument, renderOptions) {
  var doc = createElement("article");
  renderBody(root, word, doc, wDocument, wDocument.body, renderOptions);
  return doc;
}

// node_modules/office-viewer/esm/util/blob.js
function downloadBlob(blob, name) {
  if (name === void 0) {
    name = "file.txt";
  }
  var blobUrl = URL.createObjectURL(blob);
  var link = document.createElement("a");
  link.href = blobUrl;
  link.download = name;
  document.body.appendChild(link);
  link.dispatchEvent(new MouseEvent("click", {
    bubbles: true,
    cancelable: true,
    view: window
  }));
  document.body.removeChild(link);
}

// node_modules/office-viewer/esm/openxml/word/numbering/Lvl.js
var Lvl = (
  /** @class */
  function() {
    function Lvl2() {
      this.start = 1;
      this.lvlText = "%1.";
      this.isLgl = false;
      this.lvlJc = "start";
      this.suff = "space";
    }
    Lvl2.fromXML = function(word, element) {
      var e_1, _a2;
      var lvl = new Lvl2();
      lvl.ilvl = element.getAttribute("w:ilvl");
      try {
        for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
          var child = _c.value;
          var tagName = child.tagName;
          switch (tagName) {
            case "w:start":
              lvl.start = getValNumber(child);
              break;
            case "w:numFmt":
              lvl.numFmt = getVal(child);
              break;
            case "w:lvlText":
              lvl.lvlText = getVal(child);
              break;
            case "w:lvlJc":
              lvl.lvlJc = getVal(child);
              break;
            case "w:legacy":
              break;
            case "w:pPr":
              lvl.pPr = Paragraph.parseParagraphPr(word, child);
              break;
            case "w:rPr":
              lvl.rPr = Run.parseRunPr(word, child);
              break;
            case "w:isLgl":
              lvl.isLgl = getValBoolean(child);
              break;
            case "w:pStyle":
              break;
            default:
              console.warn("Lvl: Unknown tag ", tagName, child);
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b2.return))
            _a2.call(_b2);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return lvl;
    };
    return Lvl2;
  }()
);

// node_modules/office-viewer/esm/openxml/word/numbering/AbstractNum.js
var AbstractNum = (
  /** @class */
  function() {
    function AbstractNum2() {
      this.lvls = {};
    }
    AbstractNum2.fromXML = function(word, element) {
      var e_1, _a2;
      var abstractNum = new AbstractNum2();
      abstractNum.abstractNumId = element.getAttribute("w:abstractNumId") || "";
      abstractNum.multiLevelType = element.getAttribute("w:multiLevelType");
      var lvls = element.getElementsByTagName("w:lvl");
      try {
        for (var lvls_1 = __values(lvls), lvls_1_1 = lvls_1.next(); !lvls_1_1.done; lvls_1_1 = lvls_1.next()) {
          var child = lvls_1_1.value;
          var lvlId = child.getAttribute("w:ilvl") || "";
          abstractNum.lvls[lvlId] = Lvl.fromXML(word, child);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (lvls_1_1 && !lvls_1_1.done && (_a2 = lvls_1.return))
            _a2.call(lvls_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      var multiLevelType = element.getElementsByTagName("w:multiLevelType").item(0);
      if (multiLevelType) {
        abstractNum.multiLevelType = getVal(multiLevelType);
      }
      return abstractNum;
    };
    return AbstractNum2;
  }()
);

// node_modules/office-viewer/esm/openxml/word/numbering/Num.js
var Num = (
  /** @class */
  function() {
    function Num2() {
      this.lvlOverride = { lvls: {} };
    }
    Num2.fromXML = function(word, element) {
      var e_1, _a2;
      var num = new Num2();
      num.numId = element.getAttribute("w:numId") || "";
      var abstractNumId = element.getElementsByTagName("w:abstractNumId").item(0);
      if (abstractNumId) {
        num.abstractNumId = getVal(abstractNumId);
      }
      var lvlOverride = element.getElementsByTagName("w:lvlOverride").item(0);
      if (lvlOverride) {
        try {
          for (var _b2 = __values(lvlOverride.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
            var child = _c.value;
            var tagName = child.tagName;
            switch (tagName) {
              case "w:lvl":
                var lvlId = child.getAttribute("w:lvlId") || "";
                num.lvlOverride.lvls[lvlId] = Lvl.fromXML(word, child);
                break;
              case "w:startOverride":
                var id = child.getAttribute("w:lvlId") || "";
                if (num.lvlOverride.lvls[id]) {
                  num.lvlOverride.lvls[id].start = getValNumber(child);
                }
                break;
              default:
                console.warn("Num: Unknown tag ", tagName, child);
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a2 = _b2.return))
              _a2.call(_b2);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      }
      return num;
    };
    return Num2;
  }()
);

// node_modules/office-viewer/esm/openxml/word/numbering/Numbering.js
var Numbering = (
  /** @class */
  function() {
    function Numbering2() {
      this.abstractNums = {};
      this.nums = {};
      this.numData = {};
    }
    Numbering2.fromXML = function(word, element) {
      var e_1, _a2, e_2, _b2;
      var numbering = new Numbering2();
      try {
        for (var _c = __values(element.getElementsByTagName("w:abstractNum")), _d = _c.next(); !_d.done; _d = _c.next()) {
          var abstractNumElement = _d.value;
          var abstractNum = AbstractNum.fromXML(word, abstractNumElement);
          numbering.abstractNums[abstractNum.abstractNumId] = abstractNum;
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_d && !_d.done && (_a2 = _c.return))
            _a2.call(_c);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      try {
        for (var _e = __values(element.getElementsByTagName("w:num")), _f = _e.next(); !_f.done; _f = _e.next()) {
          var numElement = _f.value;
          var num = Num.fromXML(word, numElement);
          numbering.nums[num.numId] = num;
          numbering.numData[num.numId] = {};
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (_f && !_f.done && (_b2 = _e.return))
            _b2.call(_e);
        } finally {
          if (e_2)
            throw e_2.error;
        }
      }
      return numbering;
    };
    return Numbering2;
  }()
);

// node_modules/office-viewer/esm/util/mergeRun.js
function hasSomeStyle(word, first, second) {
  var firstStyle = first ? parsePr(word, first) : {};
  var secondStyle = second ? parsePr(word, second) : {};
  return JSON.stringify(firstStyle) === JSON.stringify(secondStyle);
}
function mergeText(first, second) {
  var firstT = first.getElementsByTagName("w:t")[0];
  var secondT = second.getElementsByTagName("w:t")[0];
  if (firstT && secondT) {
    var secondText = secondT.textContent || "";
    firstT.textContent += secondText || "";
  }
}
function canMerge(element) {
  var e_1, _a2;
  var tagName = element.tagName;
  var childChildren = element.children;
  var hasText = false;
  var textHasSpace = false;
  try {
    for (var childChildren_1 = __values(childChildren), childChildren_1_1 = childChildren_1.next(); !childChildren_1_1.done; childChildren_1_1 = childChildren_1.next()) {
      var childChild = childChildren_1_1.value;
      if (childChild.tagName === "w:t") {
        hasText = true;
        textHasSpace = childChild.getAttribute("xml:space") === "preserve";
        if (textHasSpace) {
          break;
        }
      }
      if (childChild.tagName === "w:tab") {
        return false;
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (childChildren_1_1 && !childChildren_1_1.done && (_a2 = childChildren_1.return))
        _a2.call(childChildren_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return tagName === "w:r" && hasText && !textHasSpace;
}
function mergeRunInP(word, p) {
  var e_2, _a2, e_3, _b2;
  var newElements = [];
  var lastRun = null;
  try {
    for (var _c = __values(p.children), _d = _c.next(); !_d.done; _d = _c.next()) {
      var child = _d.value;
      var tagName = child.tagName;
      if (canMerge(child)) {
        if (lastRun) {
          var lastRunProps = lastRun.getElementsByTagName("w:rPr")[0];
          var thisProps = child.getElementsByTagName("w:rPr")[0];
          if (hasSomeStyle(word, lastRunProps, thisProps)) {
            mergeText(lastRun, child);
          } else {
            lastRun = child;
            newElements.push(child);
          }
        } else {
          lastRun = child;
          newElements.push(child);
        }
      } else {
        if (tagName !== "w:proofErr") {
          lastRun = null;
          newElements.push(child);
        }
      }
    }
  } catch (e_2_1) {
    e_2 = { error: e_2_1 };
  } finally {
    try {
      if (_d && !_d.done && (_a2 = _c.return))
        _a2.call(_c);
    } finally {
      if (e_2)
        throw e_2.error;
    }
  }
  p.innerHTML = "";
  try {
    for (var newElements_1 = __values(newElements), newElements_1_1 = newElements_1.next(); !newElements_1_1.done; newElements_1_1 = newElements_1.next()) {
      var newElement = newElements_1_1.value;
      p.appendChild(newElement);
    }
  } catch (e_3_1) {
    e_3 = { error: e_3_1 };
  } finally {
    try {
      if (newElements_1_1 && !newElements_1_1.done && (_b2 = newElements_1.return))
        _b2.call(newElements_1);
    } finally {
      if (e_3)
        throw e_3.error;
    }
  }
}
function mergeRun(word, doc) {
  var e_4, _a2;
  var ps = doc.getElementsByTagName("w:p");
  try {
    for (var ps_1 = __values(ps), ps_1_1 = ps_1.next(); !ps_1_1.done; ps_1_1 = ps_1.next()) {
      var p = ps_1_1.value;
      mergeRunInP(word, p);
    }
  } catch (e_4_1) {
    e_4 = { error: e_4_1 };
  } finally {
    try {
      if (ps_1_1 && !ps_1_1.done && (_a2 = ps_1.return))
        _a2.call(ps_1);
    } finally {
      if (e_4)
        throw e_4.error;
    }
  }
}

// node_modules/office-viewer/esm/openxml/word/Header.js
var Header = (
  /** @class */
  function() {
    function Header2() {
      this.children = [];
    }
    Header2.fromXML = function(word, doc) {
      var e_1, _a2;
      var footer = new Header2();
      var children = [];
      footer.children = children;
      var elm = doc;
      var firstChild = doc.firstElementChild;
      if (firstChild && (firstChild.tagName === "w:hdr" || firstChild.tagName === "w:ftr")) {
        elm = firstChild;
      }
      try {
        for (var _b2 = __values(mergeSdt(elm)), _c = _b2.next(); !_c.done; _c = _b2.next()) {
          var child = _c.value;
          var tagName = child.tagName;
          switch (tagName) {
            case "w:p":
              var paragraph = Paragraph.fromXML(word, child);
              children.push(paragraph);
              break;
            case "w:tbl":
              var table = parseTable(word, child);
              children.push(table);
              break;
            default:
              console.warn("Header.fromXML Unknown key", tagName, child);
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b2.return))
            _a2.call(_b2);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return footer;
    };
    return Header2;
  }()
);

// node_modules/office-viewer/esm/openxml/word/Section.js
function parseHeader(word, element, type) {
  var headerType = element.getAttribute("w:type");
  var headerId = element.getAttribute("r:id");
  if (headerType && headerId) {
    var headerRel = word.getDocumentRels(headerId);
    if (headerRel) {
      var headerDoc = word.getXML("/word/" + headerRel.target);
      if (headerDoc) {
        var header = Header.fromXML(word, headerDoc);
        return {
          headerType,
          header
        };
      }
    }
  }
  return null;
}
var Section = (
  /** @class */
  function() {
    function Section2() {
      this.properties = {};
      this.children = [];
    }
    Section2.prototype.addChild = function(child) {
      this.children.push(child);
    };
    Section2.parsePr = function(word, element, body) {
      var e_1, _a2;
      var properties = {};
      properties.headers = {};
      properties.footers = {};
      try {
        for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
          var child = _c.value;
          var tagName = child.tagName;
          switch (tagName) {
            case "w:pgSz":
              properties.pageSize = {
                width: parseSize(child, "w:w"),
                height: parseSize(child, "w:h")
              };
              break;
            case "w:pgMar":
              properties.pageMargin = {
                left: parseSize(child, "w:left"),
                right: parseSize(child, "w:right"),
                top: parseSize(child, "w:top"),
                bottom: parseSize(child, "w:bottom"),
                header: parseSize(child, "w:header"),
                footer: parseSize(child, "w:footer"),
                gutter: parseSize(child, "w:gutter")
              };
              break;
            case "w:headerReference":
              var header = parseHeader(word, child, "header");
              if (header) {
                properties.headers[header.headerType] = header.header;
              }
              break;
            case "w:footerReference":
              var footer = parseHeader(word, child, "footer");
              if (footer) {
                properties.footers[footer.headerType] = footer.header;
              }
              break;
            case "w:cols":
              var cols = {};
              var num = getAttrNumber(child, "w:num", 1);
              cols.num = num;
              var space = parseSize(child, "w:space");
              if (space) {
                cols.space = space;
              }
              properties.cols = cols;
              break;
            default:
              break;
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b2.return))
            _a2.call(_b2);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return properties;
    };
    return Section2;
  }()
);

// node_modules/office-viewer/esm/openxml/word/Body.js
var Body = (
  /** @class */
  function() {
    function Body2() {
      this.sections = [];
      this.currentSection = new Section();
      this.sections.push(this.currentSection);
    }
    Body2.prototype.addChild = function(child) {
      this.currentSection.addChild(child);
    };
    Body2.prototype.addSection = function(properties) {
      this.currentSection.properties = properties;
      this.currentSection = new Section();
      this.sections.push(this.currentSection);
    };
    Body2.fromXML = function(word, element) {
      var e_1, _a2;
      var body = new Body2();
      try {
        for (var _b2 = __values(mergeSdt(element)), _c = _b2.next(); !_c.done; _c = _b2.next()) {
          var child = _c.value;
          var tagName = child.tagName;
          switch (tagName) {
            case "w:p":
              var paragraph = Paragraph.fromXML(word, child);
              body.addChild(paragraph);
              break;
            case "w:tbl":
              var table = parseTable(word, child);
              body.addChild(table);
              break;
            case "w:bookmarkStart":
            case "w:bookmarkEnd":
              break;
            case "w:sectPr":
              body.addSection(Section.parsePr(word, child, body));
              break;
            default:
              console.warn("Body.fromXML Unknown key", tagName, child);
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b2.return))
            _a2.call(_b2);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      body.sections = body.sections.filter(function(section) {
        return section.children.length > 0;
      });
      return body;
    };
    return Body2;
  }()
);

// node_modules/office-viewer/esm/openxml/word/WDocument.js
function getBackgroundColor(documentBackground) {
  if (documentBackground.color) {
    return documentBackground.color;
  }
  if (documentBackground.themeColor) {
    var themeColor = documentBackground.themeColor;
    if (documentBackground.themeTint) {
      var color = new Color(themeColor);
      var themeShade = parseInt(documentBackground.themeTint, 16);
      color.tint(themeShade / 256);
    } else if (documentBackground.themeShade) {
      var color = new Color(themeColor);
      var themeShade = parseInt(documentBackground.themeShade, 16);
      color.lumMod(themeShade / 256);
    }
  }
  return "#FFFFF";
}
var WDocument = (
  /** @class */
  function() {
    function WDocument2() {
    }
    WDocument2.fromXML = function(word, element) {
      var e_1, _a2, e_2, _b2;
      var doc = new WDocument2();
      var body = element.getElementsByTagName("w:body").item(0);
      if (body) {
        doc.body = Body.fromXML(word, body);
      }
      var background = element.getElementsByTagName("w:background").item(0);
      if (background) {
        var documentBackground = {};
        try {
          for (var _c = __values(background.attributes), _d = _c.next(); !_d.done; _d = _c.next()) {
            var attr = _d.value;
            var name_1 = attr.name;
            switch (name_1) {
              case "w:color":
                documentBackground.color = parseColorAttr(word, background, "w:color");
                break;
              case "w:themeColor":
                documentBackground.themeColor = parseColorAttr(word, background, "w:themeColor");
                break;
              case "w:themeShade":
                documentBackground.themeShade = parseColorAttr(word, background, "w:themeShade");
                break;
              case "w:themeTint":
                documentBackground.themeTint = parseColorAttr(word, background, "w:themeTint");
                break;
              default:
                console.log("unknown background", background);
                break;
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_d && !_d.done && (_a2 = _c.return))
              _a2.call(_c);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        try {
          for (var _e = __values(background.children), _f = _e.next(); !_f.done; _f = _e.next()) {
            var child = _f.value;
            var name_2 = child.tagName;
            switch (name_2) {
              case "v:background":
                break;
              default:
                console.log("unknown background", background);
                break;
            }
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (_f && !_f.done && (_b2 = _e.return))
              _b2.call(_e);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
        doc.backgroundColor = getBackgroundColor(documentBackground);
      }
      return doc;
    };
    return WDocument2;
  }()
);

// node_modules/fflate/esm/browser.js
var ch2 = {};
var wk = function(c, id, msg, transfer, cb) {
  var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([
    c + ';addEventListener("error",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'
  ], { type: "text/javascript" }))));
  w.onmessage = function(e) {
    var d = e.data, ed = d.$e$;
    if (ed) {
      var err2 = new Error(ed[0]);
      err2["code"] = ed[1];
      err2.stack = ed[2];
      cb(err2, null);
    } else
      cb(null, d);
  };
  w.postMessage(msg, transfer);
  return w;
};
var u8 = Uint8Array;
var u16 = Uint16Array;
var u32 = Uint32Array;
var fleb = new u8([
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1,
  1,
  1,
  1,
  2,
  2,
  2,
  2,
  3,
  3,
  3,
  3,
  4,
  4,
  4,
  4,
  5,
  5,
  5,
  5,
  0,
  /* unused */
  0,
  0,
  /* impossible */
  0
]);
var fdeb = new u8([
  0,
  0,
  0,
  0,
  1,
  1,
  2,
  2,
  3,
  3,
  4,
  4,
  5,
  5,
  6,
  6,
  7,
  7,
  8,
  8,
  9,
  9,
  10,
  10,
  11,
  11,
  12,
  12,
  13,
  13,
  /* unused */
  0,
  0
]);
var clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
var freb = function(eb, start) {
  var b = new u16(31);
  for (var i = 0; i < 31; ++i) {
    b[i] = start += 1 << eb[i - 1];
  }
  var r = new u32(b[30]);
  for (var i = 1; i < 30; ++i) {
    for (var j = b[i]; j < b[i + 1]; ++j) {
      r[j] = j - b[i] << 5 | i;
    }
  }
  return [b, r];
};
var _a = freb(fleb, 2);
var fl = _a[0];
var revfl = _a[1];
fl[28] = 258, revfl[258] = 28;
var _b = freb(fdeb, 0);
var fd = _b[0];
var revfd = _b[1];
var rev = new u16(32768);
for (i = 0; i < 32768; ++i) {
  x = (i & 43690) >>> 1 | (i & 21845) << 1;
  x = (x & 52428) >>> 2 | (x & 13107) << 2;
  x = (x & 61680) >>> 4 | (x & 3855) << 4;
  rev[i] = ((x & 65280) >>> 8 | (x & 255) << 8) >>> 1;
}
var x;
var i;
var hMap = function(cd, mb, r) {
  var s = cd.length;
  var i = 0;
  var l = new u16(mb);
  for (; i < s; ++i) {
    if (cd[i])
      ++l[cd[i] - 1];
  }
  var le = new u16(mb);
  for (i = 0; i < mb; ++i) {
    le[i] = le[i - 1] + l[i - 1] << 1;
  }
  var co;
  if (r) {
    co = new u16(1 << mb);
    var rvb = 15 - mb;
    for (i = 0; i < s; ++i) {
      if (cd[i]) {
        var sv = i << 4 | cd[i];
        var r_1 = mb - cd[i];
        var v = le[cd[i] - 1]++ << r_1;
        for (var m = v | (1 << r_1) - 1; v <= m; ++v) {
          co[rev[v] >>> rvb] = sv;
        }
      }
    }
  } else {
    co = new u16(s);
    for (i = 0; i < s; ++i) {
      if (cd[i]) {
        co[i] = rev[le[cd[i] - 1]++] >>> 15 - cd[i];
      }
    }
  }
  return co;
};
var flt = new u8(288);
for (i = 0; i < 144; ++i)
  flt[i] = 8;
var i;
for (i = 144; i < 256; ++i)
  flt[i] = 9;
var i;
for (i = 256; i < 280; ++i)
  flt[i] = 7;
var i;
for (i = 280; i < 288; ++i)
  flt[i] = 8;
var i;
var fdt = new u8(32);
for (i = 0; i < 32; ++i)
  fdt[i] = 5;
var i;
var flm = hMap(flt, 9, 0);
var flrm = hMap(flt, 9, 1);
var fdm = hMap(fdt, 5, 0);
var fdrm = hMap(fdt, 5, 1);
var max = function(a) {
  var m = a[0];
  for (var i = 1; i < a.length; ++i) {
    if (a[i] > m)
      m = a[i];
  }
  return m;
};
var bits = function(d, p, m) {
  var o = p / 8 | 0;
  return (d[o] | d[o + 1] << 8) >> (p & 7) & m;
};
var bits16 = function(d, p) {
  var o = p / 8 | 0;
  return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >> (p & 7);
};
var shft = function(p) {
  return (p + 7) / 8 | 0;
};
var slc = function(v, s, e) {
  if (s == null || s < 0)
    s = 0;
  if (e == null || e > v.length)
    e = v.length;
  var n = new (v.BYTES_PER_ELEMENT == 2 ? u16 : v.BYTES_PER_ELEMENT == 4 ? u32 : u8)(e - s);
  n.set(v.subarray(s, e));
  return n;
};
var ec = [
  "unexpected EOF",
  "invalid block type",
  "invalid length/literal",
  "invalid distance",
  "stream finished",
  "no stream handler",
  ,
  "no callback",
  "invalid UTF-8 data",
  "extra field too long",
  "date not in range 1980-2099",
  "filename too long",
  "stream finishing",
  "invalid zip data"
  // determined by unknown compression method
];
var err = function(ind, msg, nt) {
  var e = new Error(msg || ec[ind]);
  e.code = ind;
  if (Error.captureStackTrace)
    Error.captureStackTrace(e, err);
  if (!nt)
    throw e;
  return e;
};
var inflt = function(dat, buf, st) {
  var sl = dat.length;
  if (!sl || st && st.f && !st.l)
    return buf || new u8(0);
  var noBuf = !buf || st;
  var noSt = !st || st.i;
  if (!st)
    st = {};
  if (!buf)
    buf = new u8(sl * 3);
  var cbuf = function(l2) {
    var bl = buf.length;
    if (l2 > bl) {
      var nbuf = new u8(Math.max(bl * 2, l2));
      nbuf.set(buf);
      buf = nbuf;
    }
  };
  var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;
  var tbts = sl * 8;
  do {
    if (!lm) {
      final = bits(dat, pos, 1);
      var type = bits(dat, pos + 1, 3);
      pos += 3;
      if (!type) {
        var s = shft(pos) + 4, l = dat[s - 4] | dat[s - 3] << 8, t = s + l;
        if (t > sl) {
          if (noSt)
            err(0);
          break;
        }
        if (noBuf)
          cbuf(bt + l);
        buf.set(dat.subarray(s, t), bt);
        st.b = bt += l, st.p = pos = t * 8, st.f = final;
        continue;
      } else if (type == 1)
        lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
      else if (type == 2) {
        var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
        var tl = hLit + bits(dat, pos + 5, 31) + 1;
        pos += 14;
        var ldt = new u8(tl);
        var clt = new u8(19);
        for (var i = 0; i < hcLen; ++i) {
          clt[clim[i]] = bits(dat, pos + i * 3, 7);
        }
        pos += hcLen * 3;
        var clb = max(clt), clbmsk = (1 << clb) - 1;
        var clm = hMap(clt, clb, 1);
        for (var i = 0; i < tl; ) {
          var r = clm[bits(dat, pos, clbmsk)];
          pos += r & 15;
          var s = r >>> 4;
          if (s < 16) {
            ldt[i++] = s;
          } else {
            var c = 0, n = 0;
            if (s == 16)
              n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];
            else if (s == 17)
              n = 3 + bits(dat, pos, 7), pos += 3;
            else if (s == 18)
              n = 11 + bits(dat, pos, 127), pos += 7;
            while (n--)
              ldt[i++] = c;
          }
        }
        var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);
        lbt = max(lt);
        dbt = max(dt);
        lm = hMap(lt, lbt, 1);
        dm = hMap(dt, dbt, 1);
      } else
        err(1);
      if (pos > tbts) {
        if (noSt)
          err(0);
        break;
      }
    }
    if (noBuf)
      cbuf(bt + 131072);
    var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
    var lpos = pos;
    for (; ; lpos = pos) {
      var c = lm[bits16(dat, pos) & lms], sym = c >>> 4;
      pos += c & 15;
      if (pos > tbts) {
        if (noSt)
          err(0);
        break;
      }
      if (!c)
        err(2);
      if (sym < 256)
        buf[bt++] = sym;
      else if (sym == 256) {
        lpos = pos, lm = null;
        break;
      } else {
        var add = sym - 254;
        if (sym > 264) {
          var i = sym - 257, b = fleb[i];
          add = bits(dat, pos, (1 << b) - 1) + fl[i];
          pos += b;
        }
        var d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;
        if (!d)
          err(3);
        pos += d & 15;
        var dt = fd[dsym];
        if (dsym > 3) {
          var b = fdeb[dsym];
          dt += bits16(dat, pos) & (1 << b) - 1, pos += b;
        }
        if (pos > tbts) {
          if (noSt)
            err(0);
          break;
        }
        if (noBuf)
          cbuf(bt + 131072);
        var end = bt + add;
        for (; bt < end; bt += 4) {
          buf[bt] = buf[bt - dt];
          buf[bt + 1] = buf[bt + 1 - dt];
          buf[bt + 2] = buf[bt + 2 - dt];
          buf[bt + 3] = buf[bt + 3 - dt];
        }
        bt = end;
      }
    }
    st.l = lm, st.p = lpos, st.b = bt, st.f = final;
    if (lm)
      final = 1, st.m = lbt, st.d = dm, st.n = dbt;
  } while (!final);
  return bt == buf.length ? buf : slc(buf, 0, bt);
};
var wbits = function(d, p, v) {
  v <<= p & 7;
  var o = p / 8 | 0;
  d[o] |= v;
  d[o + 1] |= v >>> 8;
};
var wbits16 = function(d, p, v) {
  v <<= p & 7;
  var o = p / 8 | 0;
  d[o] |= v;
  d[o + 1] |= v >>> 8;
  d[o + 2] |= v >>> 16;
};
var hTree = function(d, mb) {
  var t = [];
  for (var i = 0; i < d.length; ++i) {
    if (d[i])
      t.push({ s: i, f: d[i] });
  }
  var s = t.length;
  var t2 = t.slice();
  if (!s)
    return [et, 0];
  if (s == 1) {
    var v = new u8(t[0].s + 1);
    v[t[0].s] = 1;
    return [v, 1];
  }
  t.sort(function(a, b) {
    return a.f - b.f;
  });
  t.push({ s: -1, f: 25001 });
  var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;
  t[0] = { s: -1, f: l.f + r.f, l, r };
  while (i1 != s - 1) {
    l = t[t[i0].f < t[i2].f ? i0++ : i2++];
    r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];
    t[i1++] = { s: -1, f: l.f + r.f, l, r };
  }
  var maxSym = t2[0].s;
  for (var i = 1; i < s; ++i) {
    if (t2[i].s > maxSym)
      maxSym = t2[i].s;
  }
  var tr = new u16(maxSym + 1);
  var mbt = ln(t[i1 - 1], tr, 0);
  if (mbt > mb) {
    var i = 0, dt = 0;
    var lft = mbt - mb, cst = 1 << lft;
    t2.sort(function(a, b) {
      return tr[b.s] - tr[a.s] || a.f - b.f;
    });
    for (; i < s; ++i) {
      var i2_1 = t2[i].s;
      if (tr[i2_1] > mb) {
        dt += cst - (1 << mbt - tr[i2_1]);
        tr[i2_1] = mb;
      } else
        break;
    }
    dt >>>= lft;
    while (dt > 0) {
      var i2_2 = t2[i].s;
      if (tr[i2_2] < mb)
        dt -= 1 << mb - tr[i2_2]++ - 1;
      else
        ++i;
    }
    for (; i >= 0 && dt; --i) {
      var i2_3 = t2[i].s;
      if (tr[i2_3] == mb) {
        --tr[i2_3];
        ++dt;
      }
    }
    mbt = mb;
  }
  return [new u8(tr), mbt];
};
var ln = function(n, l, d) {
  return n.s == -1 ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1)) : l[n.s] = d;
};
var lc = function(c) {
  var s = c.length;
  while (s && !c[--s])
    ;
  var cl = new u16(++s);
  var cli = 0, cln = c[0], cls = 1;
  var w = function(v) {
    cl[cli++] = v;
  };
  for (var i = 1; i <= s; ++i) {
    if (c[i] == cln && i != s)
      ++cls;
    else {
      if (!cln && cls > 2) {
        for (; cls > 138; cls -= 138)
          w(32754);
        if (cls > 2) {
          w(cls > 10 ? cls - 11 << 5 | 28690 : cls - 3 << 5 | 12305);
          cls = 0;
        }
      } else if (cls > 3) {
        w(cln), --cls;
        for (; cls > 6; cls -= 6)
          w(8304);
        if (cls > 2)
          w(cls - 3 << 5 | 8208), cls = 0;
      }
      while (cls--)
        w(cln);
      cls = 1;
      cln = c[i];
    }
  }
  return [cl.subarray(0, cli), s];
};
var clen = function(cf, cl) {
  var l = 0;
  for (var i = 0; i < cl.length; ++i)
    l += cf[i] * cl[i];
  return l;
};
var wfblk = function(out, pos, dat) {
  var s = dat.length;
  var o = shft(pos + 2);
  out[o] = s & 255;
  out[o + 1] = s >>> 8;
  out[o + 2] = out[o] ^ 255;
  out[o + 3] = out[o + 1] ^ 255;
  for (var i = 0; i < s; ++i)
    out[o + i + 4] = dat[i];
  return (o + 4 + s) * 8;
};
var wblk = function(dat, out, final, syms, lf, df, eb, li, bs, bl, p) {
  wbits(out, p++, final);
  ++lf[256];
  var _a2 = hTree(lf, 15), dlt = _a2[0], mlb = _a2[1];
  var _b2 = hTree(df, 15), ddt = _b2[0], mdb = _b2[1];
  var _c = lc(dlt), lclt = _c[0], nlc = _c[1];
  var _d = lc(ddt), lcdt = _d[0], ndc = _d[1];
  var lcfreq = new u16(19);
  for (var i = 0; i < lclt.length; ++i)
    lcfreq[lclt[i] & 31]++;
  for (var i = 0; i < lcdt.length; ++i)
    lcfreq[lcdt[i] & 31]++;
  var _e = hTree(lcfreq, 7), lct = _e[0], mlcb = _e[1];
  var nlcc = 19;
  for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)
    ;
  var flen = bl + 5 << 3;
  var ftlen = clen(lf, flt) + clen(df, fdt) + eb;
  var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + (2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18]);
  if (flen <= ftlen && flen <= dtlen)
    return wfblk(out, p, dat.subarray(bs, bs + bl));
  var lm, ll, dm, dl;
  wbits(out, p, 1 + (dtlen < ftlen)), p += 2;
  if (dtlen < ftlen) {
    lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;
    var llm = hMap(lct, mlcb, 0);
    wbits(out, p, nlc - 257);
    wbits(out, p + 5, ndc - 1);
    wbits(out, p + 10, nlcc - 4);
    p += 14;
    for (var i = 0; i < nlcc; ++i)
      wbits(out, p + 3 * i, lct[clim[i]]);
    p += 3 * nlcc;
    var lcts = [lclt, lcdt];
    for (var it = 0; it < 2; ++it) {
      var clct = lcts[it];
      for (var i = 0; i < clct.length; ++i) {
        var len = clct[i] & 31;
        wbits(out, p, llm[len]), p += lct[len];
        if (len > 15)
          wbits(out, p, clct[i] >>> 5 & 127), p += clct[i] >>> 12;
      }
    }
  } else {
    lm = flm, ll = flt, dm = fdm, dl = fdt;
  }
  for (var i = 0; i < li; ++i) {
    if (syms[i] > 255) {
      var len = syms[i] >>> 18 & 31;
      wbits16(out, p, lm[len + 257]), p += ll[len + 257];
      if (len > 7)
        wbits(out, p, syms[i] >>> 23 & 31), p += fleb[len];
      var dst = syms[i] & 31;
      wbits16(out, p, dm[dst]), p += dl[dst];
      if (dst > 3)
        wbits16(out, p, syms[i] >>> 5 & 8191), p += fdeb[dst];
    } else {
      wbits16(out, p, lm[syms[i]]), p += ll[syms[i]];
    }
  }
  wbits16(out, p, lm[256]);
  return p + ll[256];
};
var deo = new u32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);
var et = new u8(0);
var dflt = function(dat, lvl, plvl, pre, post, lst) {
  var s = dat.length;
  var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7e3)) + post);
  var w = o.subarray(pre, o.length - post);
  var pos = 0;
  if (!lvl || s < 8) {
    for (var i = 0; i <= s; i += 65535) {
      var e = i + 65535;
      if (e >= s) {
        w[pos >> 3] = lst;
      }
      pos = wfblk(w, pos + 1, dat.subarray(i, e));
    }
  } else {
    var opt = deo[lvl - 1];
    var n = opt >>> 13, c = opt & 8191;
    var msk_1 = (1 << plvl) - 1;
    var prev = new u16(32768), head = new u16(msk_1 + 1);
    var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;
    var hsh = function(i2) {
      return (dat[i2] ^ dat[i2 + 1] << bs1_1 ^ dat[i2 + 2] << bs2_1) & msk_1;
    };
    var syms = new u32(25e3);
    var lf = new u16(288), df = new u16(32);
    var lc_1 = 0, eb = 0, i = 0, li = 0, wi = 0, bs = 0;
    for (; i < s; ++i) {
      var hv = hsh(i);
      var imod = i & 32767, pimod = head[hv];
      prev[imod] = pimod;
      head[hv] = imod;
      if (wi <= i) {
        var rem = s - i;
        if ((lc_1 > 7e3 || li > 24576) && rem > 423) {
          pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);
          li = lc_1 = eb = 0, bs = i;
          for (var j = 0; j < 286; ++j)
            lf[j] = 0;
          for (var j = 0; j < 30; ++j)
            df[j] = 0;
        }
        var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;
        if (rem > 2 && hv == hsh(i - dif)) {
          var maxn = Math.min(n, rem) - 1;
          var maxd = Math.min(32767, i);
          var ml = Math.min(258, rem);
          while (dif <= maxd && --ch_1 && imod != pimod) {
            if (dat[i + l] == dat[i + l - dif]) {
              var nl = 0;
              for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)
                ;
              if (nl > l) {
                l = nl, d = dif;
                if (nl > maxn)
                  break;
                var mmd = Math.min(dif, nl - 2);
                var md = 0;
                for (var j = 0; j < mmd; ++j) {
                  var ti = i - dif + j + 32768 & 32767;
                  var pti = prev[ti];
                  var cd = ti - pti + 32768 & 32767;
                  if (cd > md)
                    md = cd, pimod = ti;
                }
              }
            }
            imod = pimod, pimod = prev[imod];
            dif += imod - pimod + 32768 & 32767;
          }
        }
        if (d) {
          syms[li++] = 268435456 | revfl[l] << 18 | revfd[d];
          var lin = revfl[l] & 31, din = revfd[d] & 31;
          eb += fleb[lin] + fdeb[din];
          ++lf[257 + lin];
          ++df[din];
          wi = i + l;
          ++lc_1;
        } else {
          syms[li++] = dat[i];
          ++lf[dat[i]];
        }
      }
    }
    pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);
    if (!lst && pos & 7)
      pos = wfblk(w, pos + 1, et);
  }
  return slc(o, 0, pre + shft(pos) + post);
};
var crct = function() {
  var t = new Int32Array(256);
  for (var i = 0; i < 256; ++i) {
    var c = i, k = 9;
    while (--k)
      c = (c & 1 && -306674912) ^ c >>> 1;
    t[i] = c;
  }
  return t;
}();
var crc = function() {
  var c = -1;
  return {
    p: function(d) {
      var cr = c;
      for (var i = 0; i < d.length; ++i)
        cr = crct[cr & 255 ^ d[i]] ^ cr >>> 8;
      c = cr;
    },
    d: function() {
      return ~c;
    }
  };
};
var adler = function() {
  var a = 1, b = 0;
  return {
    p: function(d) {
      var n = a, m = b;
      var l = d.length | 0;
      for (var i = 0; i != l; ) {
        var e = Math.min(i + 2655, l);
        for (; i < e; ++i)
          m += n += d[i];
        n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);
      }
      a = n, b = m;
    },
    d: function() {
      a %= 65521, b %= 65521;
      return (a & 255) << 24 | a >>> 8 << 16 | (b & 255) << 8 | b >>> 8;
    }
  };
};
var dopt = function(dat, opt, pre, post, st) {
  return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 12 + opt.mem, pre, post, !st);
};
var mrg = function(a, b) {
  var o = {};
  for (var k in a)
    o[k] = a[k];
  for (var k in b)
    o[k] = b[k];
  return o;
};
var wcln = function(fn, fnStr, td2) {
  var dt = fn();
  var st = fn.toString();
  var ks = st.slice(st.indexOf("[") + 1, st.lastIndexOf("]")).replace(/\s+/g, "").split(",");
  for (var i = 0; i < dt.length; ++i) {
    var v = dt[i], k = ks[i];
    if (typeof v == "function") {
      fnStr += ";" + k + "=";
      var st_1 = v.toString();
      if (v.prototype) {
        if (st_1.indexOf("[native code]") != -1) {
          var spInd = st_1.indexOf(" ", 8) + 1;
          fnStr += st_1.slice(spInd, st_1.indexOf("(", spInd));
        } else {
          fnStr += st_1;
          for (var t in v.prototype)
            fnStr += ";" + k + ".prototype." + t + "=" + v.prototype[t].toString();
        }
      } else
        fnStr += st_1;
    } else
      td2[k] = v;
  }
  return [fnStr, td2];
};
var ch = [];
var cbfs = function(v) {
  var tl = [];
  for (var k in v) {
    if (v[k].buffer) {
      tl.push((v[k] = new v[k].constructor(v[k])).buffer);
    }
  }
  return tl;
};
var wrkr = function(fns, init, id, cb) {
  var _a2;
  if (!ch[id]) {
    var fnStr = "", td_1 = {}, m = fns.length - 1;
    for (var i = 0; i < m; ++i)
      _a2 = wcln(fns[i], fnStr, td_1), fnStr = _a2[0], td_1 = _a2[1];
    ch[id] = wcln(fns[m], fnStr, td_1);
  }
  var td2 = mrg({}, ch[id][1]);
  return wk(ch[id][0] + ";onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=" + init.toString() + "}", id, td2, cbfs(td2), cb);
};
var bInflt = function() {
  return [u8, u16, u32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gu8];
};
var bDflt = function() {
  return [u8, u16, u32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf];
};
var gze = function() {
  return [gzh, gzhl, wbytes, crc, crct];
};
var guze = function() {
  return [gzs, gzl];
};
var zle = function() {
  return [zlh, wbytes, adler];
};
var zule = function() {
  return [zlv];
};
var pbf = function(msg) {
  return postMessage(msg, [msg.buffer]);
};
var gu8 = function(o) {
  return o && o.size && new u8(o.size);
};
var astrm = function(strm) {
  strm.ondata = function(dat, final) {
    return postMessage([dat, final], [dat.buffer]);
  };
  return function(ev) {
    return strm.push(ev.data[0], ev.data[1]);
  };
};
var astrmify = function(fns, strm, opts, init, id) {
  var t;
  var w = wrkr(fns, init, id, function(err2, dat) {
    if (err2)
      w.terminate(), strm.ondata.call(strm, err2);
    else {
      if (dat[1])
        w.terminate();
      strm.ondata.call(strm, err2, dat[0], dat[1]);
    }
  });
  w.postMessage(opts);
  strm.push = function(d, f) {
    if (!strm.ondata)
      err(5);
    if (t)
      strm.ondata(err(4, 0, 1), null, !!f);
    w.postMessage([d, t = f], [d.buffer]);
  };
  strm.terminate = function() {
    w.terminate();
  };
};
var b2 = function(d, b) {
  return d[b] | d[b + 1] << 8;
};
var b4 = function(d, b) {
  return (d[b] | d[b + 1] << 8 | d[b + 2] << 16 | d[b + 3] << 24) >>> 0;
};
var b8 = function(d, b) {
  return b4(d, b) + b4(d, b + 4) * 4294967296;
};
var wbytes = function(d, b, v) {
  for (; v; ++b)
    d[b] = v, v >>>= 8;
};
var gzh = function(c, o) {
  var fn = o.filename;
  c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3;
  if (o.mtime != 0)
    wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1e3));
  if (fn) {
    c[3] = 8;
    for (var i = 0; i <= fn.length; ++i)
      c[i + 10] = fn.charCodeAt(i);
  }
};
var gzs = function(d) {
  if (d[0] != 31 || d[1] != 139 || d[2] != 8)
    err(6, "invalid gzip data");
  var flg = d[3];
  var st = 10;
  if (flg & 4)
    st += d[10] | (d[11] << 8) + 2;
  for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])
    ;
  return st + (flg & 2);
};
var gzl = function(d) {
  var l = d.length;
  return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;
};
var gzhl = function(o) {
  return 10 + (o.filename && o.filename.length + 1 || 0);
};
var zlh = function(c, o) {
  var lv = o.level, fl2 = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;
  c[0] = 120, c[1] = fl2 << 6 | (fl2 ? 32 - 2 * fl2 : 1);
};
var zlv = function(d) {
  if ((d[0] & 15) != 8 || d[0] >>> 4 > 7 || (d[0] << 8 | d[1]) % 31)
    err(6, "invalid zlib data");
  if (d[1] & 32)
    err(6, "invalid zlib data: preset dictionaries not supported");
};
function AsyncCmpStrm(opts, cb) {
  if (!cb && typeof opts == "function")
    cb = opts, opts = {};
  this.ondata = cb;
  return opts;
}
var Deflate = function() {
  function Deflate2(opts, cb) {
    if (!cb && typeof opts == "function")
      cb = opts, opts = {};
    this.ondata = cb;
    this.o = opts || {};
  }
  Deflate2.prototype.p = function(c, f) {
    this.ondata(dopt(c, this.o, 0, 0, !f), f);
  };
  Deflate2.prototype.push = function(chunk, final) {
    if (!this.ondata)
      err(5);
    if (this.d)
      err(4);
    this.d = final;
    this.p(chunk, final || false);
  };
  return Deflate2;
}();
var AsyncDeflate = function() {
  function AsyncDeflate2(opts, cb) {
    astrmify([
      bDflt,
      function() {
        return [astrm, Deflate];
      }
    ], this, AsyncCmpStrm.call(this, opts, cb), function(ev) {
      var strm = new Deflate(ev.data);
      onmessage = astrm(strm);
    }, 6);
  }
  return AsyncDeflate2;
}();
function deflateSync(data, opts) {
  return dopt(data, opts || {}, 0, 0);
}
var Inflate = function() {
  function Inflate2(cb) {
    this.s = {};
    this.p = new u8(0);
    this.ondata = cb;
  }
  Inflate2.prototype.e = function(c) {
    if (!this.ondata)
      err(5);
    if (this.d)
      err(4);
    var l = this.p.length;
    var n = new u8(l + c.length);
    n.set(this.p), n.set(c, l), this.p = n;
  };
  Inflate2.prototype.c = function(final) {
    this.d = this.s.i = final || false;
    var bts = this.s.b;
    var dt = inflt(this.p, this.o, this.s);
    this.ondata(slc(dt, bts, this.s.b), this.d);
    this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;
    this.p = slc(this.p, this.s.p / 8 | 0), this.s.p &= 7;
  };
  Inflate2.prototype.push = function(chunk, final) {
    this.e(chunk), this.c(final);
  };
  return Inflate2;
}();
var AsyncInflate = function() {
  function AsyncInflate2(cb) {
    this.ondata = cb;
    astrmify([
      bInflt,
      function() {
        return [astrm, Inflate];
      }
    ], this, 0, function() {
      var strm = new Inflate();
      onmessage = astrm(strm);
    }, 7);
  }
  return AsyncInflate2;
}();
function inflateSync(data, out) {
  return inflt(data, out);
}
var Gzip = function() {
  function Gzip2(opts, cb) {
    this.c = crc();
    this.l = 0;
    this.v = 1;
    Deflate.call(this, opts, cb);
  }
  Gzip2.prototype.push = function(chunk, final) {
    Deflate.prototype.push.call(this, chunk, final);
  };
  Gzip2.prototype.p = function(c, f) {
    this.c.p(c);
    this.l += c.length;
    var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, !f);
    if (this.v)
      gzh(raw, this.o), this.v = 0;
    if (f)
      wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);
    this.ondata(raw, f);
  };
  return Gzip2;
}();
var AsyncGzip = function() {
  function AsyncGzip2(opts, cb) {
    astrmify([
      bDflt,
      gze,
      function() {
        return [astrm, Deflate, Gzip];
      }
    ], this, AsyncCmpStrm.call(this, opts, cb), function(ev) {
      var strm = new Gzip(ev.data);
      onmessage = astrm(strm);
    }, 8);
  }
  return AsyncGzip2;
}();
var Gunzip = function() {
  function Gunzip2(cb) {
    this.v = 1;
    Inflate.call(this, cb);
  }
  Gunzip2.prototype.push = function(chunk, final) {
    Inflate.prototype.e.call(this, chunk);
    if (this.v) {
      var s = this.p.length > 3 ? gzs(this.p) : 4;
      if (s >= this.p.length && !final)
        return;
      this.p = this.p.subarray(s), this.v = 0;
    }
    if (final) {
      if (this.p.length < 8)
        err(6, "invalid gzip data");
      this.p = this.p.subarray(0, -8);
    }
    Inflate.prototype.c.call(this, final);
  };
  return Gunzip2;
}();
var AsyncGunzip = function() {
  function AsyncGunzip2(cb) {
    this.ondata = cb;
    astrmify([
      bInflt,
      guze,
      function() {
        return [astrm, Inflate, Gunzip];
      }
    ], this, 0, function() {
      var strm = new Gunzip();
      onmessage = astrm(strm);
    }, 9);
  }
  return AsyncGunzip2;
}();
var Zlib = function() {
  function Zlib2(opts, cb) {
    this.c = adler();
    this.v = 1;
    Deflate.call(this, opts, cb);
  }
  Zlib2.prototype.push = function(chunk, final) {
    Deflate.prototype.push.call(this, chunk, final);
  };
  Zlib2.prototype.p = function(c, f) {
    this.c.p(c);
    var raw = dopt(c, this.o, this.v && 2, f && 4, !f);
    if (this.v)
      zlh(raw, this.o), this.v = 0;
    if (f)
      wbytes(raw, raw.length - 4, this.c.d());
    this.ondata(raw, f);
  };
  return Zlib2;
}();
var AsyncZlib = function() {
  function AsyncZlib2(opts, cb) {
    astrmify([
      bDflt,
      zle,
      function() {
        return [astrm, Deflate, Zlib];
      }
    ], this, AsyncCmpStrm.call(this, opts, cb), function(ev) {
      var strm = new Zlib(ev.data);
      onmessage = astrm(strm);
    }, 10);
  }
  return AsyncZlib2;
}();
var Unzlib = function() {
  function Unzlib2(cb) {
    this.v = 1;
    Inflate.call(this, cb);
  }
  Unzlib2.prototype.push = function(chunk, final) {
    Inflate.prototype.e.call(this, chunk);
    if (this.v) {
      if (this.p.length < 2 && !final)
        return;
      this.p = this.p.subarray(2), this.v = 0;
    }
    if (final) {
      if (this.p.length < 4)
        err(6, "invalid zlib data");
      this.p = this.p.subarray(0, -4);
    }
    Inflate.prototype.c.call(this, final);
  };
  return Unzlib2;
}();
var AsyncUnzlib = function() {
  function AsyncUnzlib2(cb) {
    this.ondata = cb;
    astrmify([
      bInflt,
      zule,
      function() {
        return [astrm, Inflate, Unzlib];
      }
    ], this, 0, function() {
      var strm = new Unzlib();
      onmessage = astrm(strm);
    }, 11);
  }
  return AsyncUnzlib2;
}();
var Decompress = function() {
  function Decompress2(cb) {
    this.G = Gunzip;
    this.I = Inflate;
    this.Z = Unzlib;
    this.ondata = cb;
  }
  Decompress2.prototype.push = function(chunk, final) {
    if (!this.ondata)
      err(5);
    if (!this.s) {
      if (this.p && this.p.length) {
        var n = new u8(this.p.length + chunk.length);
        n.set(this.p), n.set(chunk, this.p.length);
      } else
        this.p = chunk;
      if (this.p.length > 2) {
        var _this_1 = this;
        var cb = function() {
          _this_1.ondata.apply(_this_1, arguments);
        };
        this.s = this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8 ? new this.G(cb) : (this.p[0] & 15) != 8 || this.p[0] >> 4 > 7 || (this.p[0] << 8 | this.p[1]) % 31 ? new this.I(cb) : new this.Z(cb);
        this.s.push(this.p, final);
        this.p = null;
      }
    } else
      this.s.push(chunk, final);
  };
  return Decompress2;
}();
var AsyncDecompress = function() {
  function AsyncDecompress2(cb) {
    this.G = AsyncGunzip;
    this.I = AsyncInflate;
    this.Z = AsyncUnzlib;
    this.ondata = cb;
  }
  AsyncDecompress2.prototype.push = function(chunk, final) {
    Decompress.prototype.push.call(this, chunk, final);
  };
  return AsyncDecompress2;
}();
var fltn = function(d, p, t, o) {
  for (var k in d) {
    var val = d[k], n = p + k, op = o;
    if (Array.isArray(val))
      op = mrg(o, val[1]), val = val[0];
    if (val instanceof u8)
      t[n] = [val, op];
    else {
      t[n += "/"] = [new u8(0), op];
      fltn(val, n, t, o);
    }
  }
};
var te = typeof TextEncoder != "undefined" && new TextEncoder();
var td = typeof TextDecoder != "undefined" && new TextDecoder();
var tds = 0;
try {
  td.decode(et, { stream: true });
  tds = 1;
} catch (e) {
}
var dutf8 = function(d) {
  for (var r = "", i = 0; ; ) {
    var c = d[i++];
    var eb = (c > 127) + (c > 223) + (c > 239);
    if (i + eb > d.length)
      return [r, slc(d, i - 1)];
    if (!eb)
      r += String.fromCharCode(c);
    else if (eb == 3) {
      c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | d[i++] & 63) - 65536, r += String.fromCharCode(55296 | c >> 10, 56320 | c & 1023);
    } else if (eb & 1)
      r += String.fromCharCode((c & 31) << 6 | d[i++] & 63);
    else
      r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | d[i++] & 63);
  }
};
var DecodeUTF8 = function() {
  function DecodeUTF82(cb) {
    this.ondata = cb;
    if (tds)
      this.t = new TextDecoder();
    else
      this.p = et;
  }
  DecodeUTF82.prototype.push = function(chunk, final) {
    if (!this.ondata)
      err(5);
    final = !!final;
    if (this.t) {
      this.ondata(this.t.decode(chunk, { stream: true }), final);
      if (final) {
        if (this.t.decode().length)
          err(8);
        this.t = null;
      }
      return;
    }
    if (!this.p)
      err(4);
    var dat = new u8(this.p.length + chunk.length);
    dat.set(this.p);
    dat.set(chunk, this.p.length);
    var _a2 = dutf8(dat), ch3 = _a2[0], np = _a2[1];
    if (final) {
      if (np.length)
        err(8);
      this.p = null;
    } else
      this.p = np;
    this.ondata(ch3, final);
  };
  return DecodeUTF82;
}();
var EncodeUTF8 = function() {
  function EncodeUTF82(cb) {
    this.ondata = cb;
  }
  EncodeUTF82.prototype.push = function(chunk, final) {
    if (!this.ondata)
      err(5);
    if (this.d)
      err(4);
    this.ondata(strToU8(chunk), this.d = final || false);
  };
  return EncodeUTF82;
}();
function strToU8(str, latin1) {
  if (latin1) {
    var ar_1 = new u8(str.length);
    for (var i = 0; i < str.length; ++i)
      ar_1[i] = str.charCodeAt(i);
    return ar_1;
  }
  if (te)
    return te.encode(str);
  var l = str.length;
  var ar = new u8(str.length + (str.length >> 1));
  var ai = 0;
  var w = function(v) {
    ar[ai++] = v;
  };
  for (var i = 0; i < l; ++i) {
    if (ai + 5 > ar.length) {
      var n = new u8(ai + 8 + (l - i << 1));
      n.set(ar);
      ar = n;
    }
    var c = str.charCodeAt(i);
    if (c < 128 || latin1)
      w(c);
    else if (c < 2048)
      w(192 | c >> 6), w(128 | c & 63);
    else if (c > 55295 && c < 57344)
      c = 65536 + (c & 1023 << 10) | str.charCodeAt(++i) & 1023, w(240 | c >> 18), w(128 | c >> 12 & 63), w(128 | c >> 6 & 63), w(128 | c & 63);
    else
      w(224 | c >> 12), w(128 | c >> 6 & 63), w(128 | c & 63);
  }
  return slc(ar, 0, ai);
}
function strFromU8(dat, latin1) {
  if (latin1) {
    var r = "";
    for (var i = 0; i < dat.length; i += 16384)
      r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));
    return r;
  } else if (td)
    return td.decode(dat);
  else {
    var _a2 = dutf8(dat), out = _a2[0], ext = _a2[1];
    if (ext.length)
      err(8);
    return out;
  }
}
var dbf = function(l) {
  return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0;
};
var slzh = function(d, b) {
  return b + 30 + b2(d, b + 26) + b2(d, b + 28);
};
var zh = function(d, b, z) {
  var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);
  var _a2 = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a2[0], su = _a2[1], off = _a2[2];
  return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];
};
var z64e = function(d, b) {
  for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))
    ;
  return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];
};
var exfl = function(ex) {
  var le = 0;
  if (ex) {
    for (var k in ex) {
      var l = ex[k].length;
      if (l > 65535)
        err(9);
      le += l + 4;
    }
  }
  return le;
};
var wzh = function(d, b, f, fn, u, c, ce, co) {
  var fl2 = fn.length, ex = f.extra, col = co && co.length;
  var exl = exfl(ex);
  wbytes(d, b, ce != null ? 33639248 : 67324752), b += 4;
  if (ce != null)
    d[b++] = 20, d[b++] = f.os;
  d[b] = 20, b += 2;
  d[b++] = f.flag << 1 | (c < 0 && 8), d[b++] = u && 8;
  d[b++] = f.compression & 255, d[b++] = f.compression >> 8;
  var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;
  if (y < 0 || y > 119)
    err(10);
  wbytes(d, b, y << 25 | dt.getMonth() + 1 << 21 | dt.getDate() << 16 | dt.getHours() << 11 | dt.getMinutes() << 5 | dt.getSeconds() >>> 1), b += 4;
  if (c != -1) {
    wbytes(d, b, f.crc);
    wbytes(d, b + 4, c < 0 ? -c - 2 : c);
    wbytes(d, b + 8, f.size);
  }
  wbytes(d, b + 12, fl2);
  wbytes(d, b + 14, exl), b += 16;
  if (ce != null) {
    wbytes(d, b, col);
    wbytes(d, b + 6, f.attrs);
    wbytes(d, b + 10, ce), b += 14;
  }
  d.set(fn, b);
  b += fl2;
  if (exl) {
    for (var k in ex) {
      var exf = ex[k], l = exf.length;
      wbytes(d, b, +k);
      wbytes(d, b + 2, l);
      d.set(exf, b + 4), b += 4 + l;
    }
  }
  if (col)
    d.set(co, b), b += col;
  return b;
};
var wzf = function(o, b, c, d, e) {
  wbytes(o, b, 101010256);
  wbytes(o, b + 8, c);
  wbytes(o, b + 10, c);
  wbytes(o, b + 12, d);
  wbytes(o, b + 16, e);
};
var ZipPassThrough = function() {
  function ZipPassThrough2(filename) {
    this.filename = filename;
    this.c = crc();
    this.size = 0;
    this.compression = 0;
  }
  ZipPassThrough2.prototype.process = function(chunk, final) {
    this.ondata(null, chunk, final);
  };
  ZipPassThrough2.prototype.push = function(chunk, final) {
    if (!this.ondata)
      err(5);
    this.c.p(chunk);
    this.size += chunk.length;
    if (final)
      this.crc = this.c.d();
    this.process(chunk, final || false);
  };
  return ZipPassThrough2;
}();
var ZipDeflate = function() {
  function ZipDeflate2(filename, opts) {
    var _this_1 = this;
    if (!opts)
      opts = {};
    ZipPassThrough.call(this, filename);
    this.d = new Deflate(opts, function(dat, final) {
      _this_1.ondata(null, dat, final);
    });
    this.compression = 8;
    this.flag = dbf(opts.level);
  }
  ZipDeflate2.prototype.process = function(chunk, final) {
    try {
      this.d.push(chunk, final);
    } catch (e) {
      this.ondata(e, null, final);
    }
  };
  ZipDeflate2.prototype.push = function(chunk, final) {
    ZipPassThrough.prototype.push.call(this, chunk, final);
  };
  return ZipDeflate2;
}();
var AsyncZipDeflate = function() {
  function AsyncZipDeflate2(filename, opts) {
    var _this_1 = this;
    if (!opts)
      opts = {};
    ZipPassThrough.call(this, filename);
    this.d = new AsyncDeflate(opts, function(err2, dat, final) {
      _this_1.ondata(err2, dat, final);
    });
    this.compression = 8;
    this.flag = dbf(opts.level);
    this.terminate = this.d.terminate;
  }
  AsyncZipDeflate2.prototype.process = function(chunk, final) {
    this.d.push(chunk, final);
  };
  AsyncZipDeflate2.prototype.push = function(chunk, final) {
    ZipPassThrough.prototype.push.call(this, chunk, final);
  };
  return AsyncZipDeflate2;
}();
var Zip = function() {
  function Zip2(cb) {
    this.ondata = cb;
    this.u = [];
    this.d = 1;
  }
  Zip2.prototype.add = function(file) {
    var _this_1 = this;
    if (!this.ondata)
      err(5);
    if (this.d & 2)
      this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);
    else {
      var f = strToU8(file.filename), fl_1 = f.length;
      var com = file.comment, o = com && strToU8(com);
      var u = fl_1 != file.filename.length || o && com.length != o.length;
      var hl_1 = fl_1 + exfl(file.extra) + 30;
      if (fl_1 > 65535)
        this.ondata(err(11, 0, 1), null, false);
      var header = new u8(hl_1);
      wzh(header, 0, file, f, u, -1);
      var chks_1 = [header];
      var pAll_1 = function() {
        for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {
          var chk = chks_2[_i];
          _this_1.ondata(null, chk, false);
        }
        chks_1 = [];
      };
      var tr_1 = this.d;
      this.d = 0;
      var ind_1 = this.u.length;
      var uf_1 = mrg(file, {
        f,
        u,
        o,
        t: function() {
          if (file.terminate)
            file.terminate();
        },
        r: function() {
          pAll_1();
          if (tr_1) {
            var nxt = _this_1.u[ind_1 + 1];
            if (nxt)
              nxt.r();
            else
              _this_1.d = 1;
          }
          tr_1 = 1;
        }
      });
      var cl_1 = 0;
      file.ondata = function(err2, dat, final) {
        if (err2) {
          _this_1.ondata(err2, dat, final);
          _this_1.terminate();
        } else {
          cl_1 += dat.length;
          chks_1.push(dat);
          if (final) {
            var dd = new u8(16);
            wbytes(dd, 0, 134695760);
            wbytes(dd, 4, file.crc);
            wbytes(dd, 8, cl_1);
            wbytes(dd, 12, file.size);
            chks_1.push(dd);
            uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;
            if (tr_1)
              uf_1.r();
            tr_1 = 1;
          } else if (tr_1)
            pAll_1();
        }
      };
      this.u.push(uf_1);
    }
  };
  Zip2.prototype.end = function() {
    var _this_1 = this;
    if (this.d & 2) {
      this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);
      return;
    }
    if (this.d)
      this.e();
    else
      this.u.push({
        r: function() {
          if (!(_this_1.d & 1))
            return;
          _this_1.u.splice(-1, 1);
          _this_1.e();
        },
        t: function() {
        }
      });
    this.d = 3;
  };
  Zip2.prototype.e = function() {
    var bt = 0, l = 0, tl = 0;
    for (var _i = 0, _a2 = this.u; _i < _a2.length; _i++) {
      var f = _a2[_i];
      tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);
    }
    var out = new u8(tl + 22);
    for (var _b2 = 0, _c = this.u; _b2 < _c.length; _b2++) {
      var f = _c[_b2];
      wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);
      bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;
    }
    wzf(out, bt, this.u.length, tl, l);
    this.ondata(null, out, true);
    this.d = 2;
  };
  Zip2.prototype.terminate = function() {
    for (var _i = 0, _a2 = this.u; _i < _a2.length; _i++) {
      var f = _a2[_i];
      f.t();
    }
    this.d = 2;
  };
  return Zip2;
}();
function zipSync(data, opts) {
  if (!opts)
    opts = {};
  var r = {};
  var files = [];
  fltn(data, "", r, opts);
  var o = 0;
  var tot = 0;
  for (var fn in r) {
    var _a2 = r[fn], file = _a2[0], p = _a2[1];
    var compression = p.level == 0 ? 0 : 8;
    var f = strToU8(fn), s = f.length;
    var com = p.comment, m = com && strToU8(com), ms = m && m.length;
    var exl = exfl(p.extra);
    if (s > 65535)
      err(11);
    var d = compression ? deflateSync(file, p) : file, l = d.length;
    var c = crc();
    c.p(file);
    files.push(mrg(p, {
      size: file.length,
      crc: c.d(),
      c: d,
      f,
      m,
      u: s != fn.length || m && com.length != ms,
      o,
      compression
    }));
    o += 30 + s + exl + l;
    tot += 76 + 2 * (s + exl) + (ms || 0) + l;
  }
  var out = new u8(tot + 22), oe = o, cdl = tot - o;
  for (var i = 0; i < files.length; ++i) {
    var f = files[i];
    wzh(out, f.o, f, f.f, f.u, f.c.length);
    var badd = 30 + f.f.length + exfl(f.extra);
    out.set(f.c, f.o + badd);
    wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);
  }
  wzf(out, o, files.length, cdl, oe);
  return out;
}
var UnzipPassThrough = function() {
  function UnzipPassThrough2() {
  }
  UnzipPassThrough2.prototype.push = function(data, final) {
    this.ondata(null, data, final);
  };
  UnzipPassThrough2.compression = 0;
  return UnzipPassThrough2;
}();
var UnzipInflate = function() {
  function UnzipInflate2() {
    var _this_1 = this;
    this.i = new Inflate(function(dat, final) {
      _this_1.ondata(null, dat, final);
    });
  }
  UnzipInflate2.prototype.push = function(data, final) {
    try {
      this.i.push(data, final);
    } catch (e) {
      this.ondata(e, null, final);
    }
  };
  UnzipInflate2.compression = 8;
  return UnzipInflate2;
}();
var AsyncUnzipInflate = function() {
  function AsyncUnzipInflate2(_, sz) {
    var _this_1 = this;
    if (sz < 32e4) {
      this.i = new Inflate(function(dat, final) {
        _this_1.ondata(null, dat, final);
      });
    } else {
      this.i = new AsyncInflate(function(err2, dat, final) {
        _this_1.ondata(err2, dat, final);
      });
      this.terminate = this.i.terminate;
    }
  }
  AsyncUnzipInflate2.prototype.push = function(data, final) {
    if (this.i.terminate)
      data = slc(data, 0);
    this.i.push(data, final);
  };
  AsyncUnzipInflate2.compression = 8;
  return AsyncUnzipInflate2;
}();
var Unzip = function() {
  function Unzip2(cb) {
    this.onfile = cb;
    this.k = [];
    this.o = {
      0: UnzipPassThrough
    };
    this.p = et;
  }
  Unzip2.prototype.push = function(chunk, final) {
    var _this_1 = this;
    if (!this.onfile)
      err(5);
    if (!this.p)
      err(4);
    if (this.c > 0) {
      var len = Math.min(this.c, chunk.length);
      var toAdd = chunk.subarray(0, len);
      this.c -= len;
      if (this.d)
        this.d.push(toAdd, !this.c);
      else
        this.k[0].push(toAdd);
      chunk = chunk.subarray(len);
      if (chunk.length)
        return this.push(chunk, final);
    } else {
      var f = 0, i = 0, is = void 0, buf = void 0;
      if (!this.p.length)
        buf = chunk;
      else if (!chunk.length)
        buf = this.p;
      else {
        buf = new u8(this.p.length + chunk.length);
        buf.set(this.p), buf.set(chunk, this.p.length);
      }
      var l = buf.length, oc = this.c, add = oc && this.d;
      var _loop_2 = function() {
        var _a2;
        var sig = b4(buf, i);
        if (sig == 67324752) {
          f = 1, is = i;
          this_1.d = null;
          this_1.c = 0;
          var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);
          if (l > i + 30 + fnl + es) {
            var chks_3 = [];
            this_1.k.unshift(chks_3);
            f = 2;
            var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);
            var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);
            if (sc_1 == 4294967295) {
              _a2 = dd ? [-2] : z64e(buf, i), sc_1 = _a2[0], su_1 = _a2[1];
            } else if (dd)
              sc_1 = -1;
            i += es;
            this_1.c = sc_1;
            var d_1;
            var file_1 = {
              name: fn_1,
              compression: cmp_1,
              start: function() {
                if (!file_1.ondata)
                  err(5);
                if (!sc_1)
                  file_1.ondata(null, et, true);
                else {
                  var ctr = _this_1.o[cmp_1];
                  if (!ctr)
                    file_1.ondata(err(14, "unknown compression type " + cmp_1, 1), null, false);
                  d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);
                  d_1.ondata = function(err2, dat3, final2) {
                    file_1.ondata(err2, dat3, final2);
                  };
                  for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {
                    var dat2 = chks_4[_i];
                    d_1.push(dat2, false);
                  }
                  if (_this_1.k[0] == chks_3 && _this_1.c)
                    _this_1.d = d_1;
                  else
                    d_1.push(et, true);
                }
              },
              terminate: function() {
                if (d_1 && d_1.terminate)
                  d_1.terminate();
              }
            };
            if (sc_1 >= 0)
              file_1.size = sc_1, file_1.originalSize = su_1;
            this_1.onfile(file_1);
          }
          return "break";
        } else if (oc) {
          if (sig == 134695760) {
            is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;
            return "break";
          } else if (sig == 33639248) {
            is = i -= 4, f = 3, this_1.c = 0;
            return "break";
          }
        }
      };
      var this_1 = this;
      for (; i < l - 4; ++i) {
        var state_1 = _loop_2();
        if (state_1 === "break")
          break;
      }
      this.p = et;
      if (oc < 0) {
        var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 134695760 && 4)) : buf.subarray(0, i);
        if (add)
          add.push(dat, !!f);
        else
          this.k[+(f == 2)].push(dat);
      }
      if (f & 2)
        return this.push(buf.subarray(i), final);
      this.p = buf.subarray(i);
    }
    if (final) {
      if (this.c)
        err(13);
      this.p = null;
    }
  };
  Unzip2.prototype.register = function(decoder) {
    this.o[decoder.compression] = decoder;
  };
  return Unzip2;
}();
function unzipSync(data, opts) {
  var files = {};
  var e = data.length - 22;
  for (; b4(data, e) != 101010256; --e) {
    if (!e || data.length - e > 65558)
      err(13);
  }
  ;
  var c = b2(data, e + 8);
  if (!c)
    return {};
  var o = b4(data, e + 16);
  var z = o == 4294967295 || c == 65535;
  if (z) {
    var ze = b4(data, e - 12);
    z = b4(data, ze) == 101075792;
    if (z) {
      c = b4(data, ze + 32);
      o = b4(data, ze + 48);
    }
  }
  var fltr = opts && opts.filter;
  for (var i = 0; i < c; ++i) {
    var _a2 = zh(data, o, z), c_2 = _a2[0], sc = _a2[1], su = _a2[2], fn = _a2[3], no = _a2[4], off = _a2[5], b = slzh(data, off);
    o = no;
    if (!fltr || fltr({
      name: fn,
      size: sc,
      originalSize: su,
      compression: c_2
    })) {
      if (!c_2)
        files[fn] = slc(data, b, b + sc);
      else if (c_2 == 8)
        files[fn] = inflateSync(data.subarray(b, b + sc), new u8(su));
      else
        err(14, "unknown compression type " + c_2);
    }
  }
  return files;
}

// node_modules/office-viewer/esm/package/ZipPackageParser.js
var ZipPackageParser = (
  /** @class */
  function() {
    function ZipPackageParser2() {
    }
    ZipPackageParser2.prototype.load = function(docxFile) {
      this.zip = unzipSync(new Uint8Array(docxFile));
    };
    ZipPackageParser2.prototype.getXML = function(filePath) {
      var fileContent = this.getFileByType(filePath, "string");
      var doc = new DOMParser().parseFromString(fileContent, "application/xml");
      var errorNode = doc.getElementsByTagName("parsererror").item(0);
      if (errorNode) {
        throw new Error(errorNode.textContent || "can't parse xml");
      } else {
        return doc;
      }
    };
    ZipPackageParser2.prototype.getFileByType = function(filePath, type) {
      filePath = filePath.startsWith("/") ? filePath.slice(1) : filePath;
      var file = this.zip[filePath];
      if (file) {
        if (type === "string") {
          return strFromU8(file);
        } else if (type === "blob") {
          return new Blob([file]);
        } else if (type === "uint8array") {
          return file;
        }
      }
      console.warn("getFileByType", filePath, "not found");
      return null;
    };
    ZipPackageParser2.prototype.saveFile = function(filePath, content) {
      if (typeof content === "string") {
        content = strToU8(content);
      }
      this.zip[filePath] = content;
    };
    ZipPackageParser2.prototype.fileExists = function(filePath) {
      filePath = filePath.startsWith("/") ? filePath.slice(1) : filePath;
      return filePath in this.zip;
    };
    ZipPackageParser2.prototype.generateZip = function(docContent) {
      this.zip["word/document.xml"] = strToU8(docContent);
      return new Blob([zipSync(this.zip)]);
    };
    return ZipPackageParser2;
  }()
);

// node_modules/office-viewer/esm/render/renderFont.js
function renderFont(fontTable) {
  var e_1, _a2;
  if (!fontTable) {
    return null;
  }
  var fonts = fontTable.fonts;
  if (!fonts || !fonts.length) {
    return null;
  }
  var style = createElement("style");
  var fontContent = "/** embedded fonts **/";
  try {
    for (var _b2 = __values(fontTable.fonts), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var font = _c.value;
      var fontName = font.name.replace(/['\\]/g, "");
      var fontPath = font.url;
      if (fontName && fontPath) {
        fontContent += "\n      @font-face {\n        font-family: '".concat(fontName, "';\n        src: url('").concat(fontPath, "');\n      }\n      ");
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  style.innerHTML = fontContent;
  return style;
}

// node_modules/office-viewer/esm/util/createObject.js
function createObject(superProps, props, properties) {
  if (superProps && Object.isFrozen(superProps)) {
    superProps = cloneObject(superProps);
  }
  var obj = superProps ? Object.create(superProps, __assign(__assign({}, properties), { __super: {
    value: superProps,
    writable: false,
    enumerable: false
  } })) : Object.create(Object.prototype, properties);
  props && isObject(props) && Object.keys(props).forEach(function(key) {
    return obj[key] = props[key];
  });
  return obj;
}
function cloneObject(target, persistOwnProps) {
  if (persistOwnProps === void 0) {
    persistOwnProps = true;
  }
  var obj = target && target.__super ? Object.create(target.__super, {
    __super: {
      value: target.__super,
      writable: false,
      enumerable: false
    }
  }) : Object.create(Object.prototype);
  persistOwnProps && target && Object.keys(target).forEach(function(key) {
    return obj[key] = target[key];
  });
  return obj;
}
function isObject(obj) {
  var typename = typeof obj;
  return obj && typename !== "string" && typename !== "number" && typename !== "boolean" && typename !== "function" && !Array.isArray(obj);
}

// node_modules/office-viewer/esm/util/replaceVar.js
function replaceT(word, t, data) {
  var text = t.textContent || "";
  t.textContent = replaceText(word, text, data);
}
function replaceText(word, text, data) {
  var evalVar = word.renderOptions.evalVar;
  if (text.startsWith("{{")) {
    text = text.replace(/^{{/g, "").replace(/}}$/g, "");
    var result = evalVar(text, data);
    if (result !== void 0 && result !== null) {
      return String(result);
    } else {
      console.warn("var error: [", text, "] not found in data");
      return "";
    }
  }
  return text;
}
var newRelId = 1;
function replaceAlt(word, cNvPr, data, replaceImage) {
  if (replaceImage === void 0) {
    replaceImage = false;
  }
  return __awaiter(this, void 0, void 0, function() {
    var alt, imageURL, parentElement, blip, newId, imageResponse, imageData, pic, blip_1;
    return __generator(this, function(_a2) {
      switch (_a2.label) {
        case 0:
          if (cNvPr.getAttribute("downloaded")) {
            return [
              2
              /*return*/
            ];
          }
          alt = cNvPr.getAttribute("descr") || "";
          imageURL = replaceText(word, alt, data);
          cNvPr.setAttribute("descrVar", imageURL);
          if (!(replaceImage && imageURL))
            return [3, 4];
          parentElement = cNvPr.parentElement.parentElement;
          blip = parentElement.getElementsByTagName("a:blip").item(0);
          if (!blip)
            return [3, 3];
          newId = "rIdn".concat(newRelId);
          blip.setAttribute("r:embed", newId);
          return [4, fetch(imageURL)];
        case 1:
          imageResponse = _a2.sent();
          return [4, imageResponse.arrayBuffer()];
        case 2:
          imageData = _a2.sent();
          word.saveNewImage(newId, new Uint8Array(imageData));
          cNvPr.setAttribute("downloaded", "true");
          newRelId++;
          _a2.label = 3;
        case 3:
          pic = Pic.fromXML(word, parentElement);
          if (pic && pic.blipFill && pic.blipFill.blip) {
            blip_1 = pic.blipFill.blip;
            if (blip_1.embled)
              ;
          }
          _a2.label = 4;
        case 4:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function replaceTableRow(word, tr, replaceImage) {
  if (replaceImage === void 0) {
    replaceImage = false;
  }
  return __awaiter(this, void 0, void 0, function() {
    var evalVar, data, table, tcs, hasLoop, loopArray, tcs_1, tcs_1_1, tc, ts, ts_1, ts_1_1, t, text, arrayNameMatch, arrayMatchResult, arrayName, array, loopArray_1, loopArray_1_1, item, newTr, ts, rowData, ts_2, ts_2_1, t, _a2, _b2, cNvPr, e_1_1, e_2_1;
    var e_3, _c, e_4, _d, e_2, _e, e_5, _f, e_1, _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          evalVar = word.renderOptions.evalVar;
          data = word.renderOptions.data;
          table = tr.parentNode;
          tcs = tr.getElementsByTagName("w:tc");
          hasLoop = false;
          loopArray = [];
          try {
            for (tcs_1 = __values(tcs), tcs_1_1 = tcs_1.next(); !tcs_1_1.done; tcs_1_1 = tcs_1.next()) {
              tc = tcs_1_1.value;
              ts = tc.getElementsByTagName("w:t");
              try {
                for (ts_1 = (e_4 = void 0, __values(ts)), ts_1_1 = ts_1.next(); !ts_1_1.done; ts_1_1 = ts_1.next()) {
                  t = ts_1_1.value;
                  text = t.textContent || "";
                  if (text.startsWith("{{#")) {
                    arrayNameMatch = /{{#([^\}]+)}}/;
                    arrayMatchResult = arrayNameMatch.exec(text);
                    if (arrayMatchResult && arrayMatchResult.length > 0) {
                      hasLoop = true;
                      arrayName = arrayMatchResult[1];
                      array = evalVar(arrayName, data);
                      if (Array.isArray(array)) {
                        loopArray = array;
                      }
                      t.textContent = t.textContent.replace("{{#".concat(arrayName, "}}"), "");
                    }
                  }
                  if (text.indexOf("{{/}}") !== -1) {
                    t.textContent = t.textContent.replace("{{/}}", "");
                  }
                }
              } catch (e_4_1) {
                e_4 = { error: e_4_1 };
              } finally {
                try {
                  if (ts_1_1 && !ts_1_1.done && (_d = ts_1.return))
                    _d.call(ts_1);
                } finally {
                  if (e_4)
                    throw e_4.error;
                }
              }
            }
          } catch (e_3_1) {
            e_3 = { error: e_3_1 };
          } finally {
            try {
              if (tcs_1_1 && !tcs_1_1.done && (_c = tcs_1.return))
                _c.call(tcs_1);
            } finally {
              if (e_3)
                throw e_3.error;
            }
          }
          if (!hasLoop)
            return [3, 16];
          _h.label = 1;
        case 1:
          _h.trys.push([1, 13, 14, 15]);
          loopArray_1 = __values(loopArray), loopArray_1_1 = loopArray_1.next();
          _h.label = 2;
        case 2:
          if (!!loopArray_1_1.done)
            return [3, 12];
          item = loopArray_1_1.value;
          newTr = cloneTr(tr);
          ts = newTr.getElementsByTagName("w:t");
          rowData = createObject(data, item);
          try {
            for (ts_2 = (e_5 = void 0, __values(ts)), ts_2_1 = ts_2.next(); !ts_2_1.done; ts_2_1 = ts_2.next()) {
              t = ts_2_1.value;
              replaceT(word, t, rowData);
            }
          } catch (e_5_1) {
            e_5 = { error: e_5_1 };
          } finally {
            try {
              if (ts_2_1 && !ts_2_1.done && (_f = ts_2.return))
                _f.call(ts_2);
            } finally {
              if (e_5)
                throw e_5.error;
            }
          }
          _h.label = 3;
        case 3:
          _h.trys.push([3, 8, 9, 10]);
          _a2 = (e_1 = void 0, __values(newTr.getElementsByTagName("pic:cNvPr"))), _b2 = _a2.next();
          _h.label = 4;
        case 4:
          if (!!_b2.done)
            return [3, 7];
          cNvPr = _b2.value;
          return [4, replaceAlt(word, cNvPr, rowData, replaceImage)];
        case 5:
          _h.sent();
          _h.label = 6;
        case 6:
          _b2 = _a2.next();
          return [3, 4];
        case 7:
          return [3, 10];
        case 8:
          e_1_1 = _h.sent();
          e_1 = { error: e_1_1 };
          return [3, 10];
        case 9:
          try {
            if (_b2 && !_b2.done && (_g = _a2.return))
              _g.call(_a2);
          } finally {
            if (e_1)
              throw e_1.error;
          }
          return [
            7
            /*endfinally*/
          ];
        case 10:
          table.insertBefore(newTr, tr);
          _h.label = 11;
        case 11:
          loopArray_1_1 = loopArray_1.next();
          return [3, 2];
        case 12:
          return [3, 15];
        case 13:
          e_2_1 = _h.sent();
          e_2 = { error: e_2_1 };
          return [3, 15];
        case 14:
          try {
            if (loopArray_1_1 && !loopArray_1_1.done && (_e = loopArray_1.return))
              _e.call(loopArray_1);
          } finally {
            if (e_2)
              throw e_2.error;
          }
          return [
            7
            /*endfinally*/
          ];
        case 15:
          table.removeChild(tr);
          _h.label = 16;
        case 16:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function cloneTr(tr) {
  var e_6, _a2, e_7, _b2;
  var _c;
  var newTr = tr.cloneNode(true);
  removeAllAttr(newTr);
  var ps = [].slice.call(newTr.getElementsByTagName("w:p"));
  try {
    for (var ps_1 = __values(ps), ps_1_1 = ps_1.next(); !ps_1_1.done; ps_1_1 = ps_1.next()) {
      var p = ps_1_1.value;
      removeAllAttr(p);
    }
  } catch (e_6_1) {
    e_6 = { error: e_6_1 };
  } finally {
    try {
      if (ps_1_1 && !ps_1_1.done && (_a2 = ps_1.return))
        _a2.call(ps_1);
    } finally {
      if (e_6)
        throw e_6.error;
    }
  }
  var cnfStyles = [].slice.call(newTr.getElementsByTagName("w:cnfStyle"));
  try {
    for (var cnfStyles_1 = __values(cnfStyles), cnfStyles_1_1 = cnfStyles_1.next(); !cnfStyles_1_1.done; cnfStyles_1_1 = cnfStyles_1.next()) {
      var cnfStyle = cnfStyles_1_1.value;
      (_c = cnfStyle.parentElement) === null || _c === void 0 ? void 0 : _c.removeChild(cnfStyle);
    }
  } catch (e_7_1) {
    e_7 = { error: e_7_1 };
  } finally {
    try {
      if (cnfStyles_1_1 && !cnfStyles_1_1.done && (_b2 = cnfStyles_1.return))
        _b2.call(cnfStyles_1);
    } finally {
      if (e_7)
        throw e_7.error;
    }
  }
  return newTr;
}
function removeAllAttr(node) {
  while (node.attributes.length > 0) {
    node.removeAttributeNode(node.attributes[0]);
  }
}
function replaceTable(word, documentData, replaceImage) {
  if (replaceImage === void 0) {
    replaceImage = false;
  }
  return __awaiter(this, void 0, void 0, function() {
    var trs, trs_1, trs_1_1, tr, e_8_1;
    var e_8, _a2;
    return __generator(this, function(_b2) {
      switch (_b2.label) {
        case 0:
          trs = [].slice.call(documentData.getElementsByTagName("w:tr"));
          _b2.label = 1;
        case 1:
          _b2.trys.push([1, 6, 7, 8]);
          trs_1 = __values(trs), trs_1_1 = trs_1.next();
          _b2.label = 2;
        case 2:
          if (!!trs_1_1.done)
            return [3, 5];
          tr = trs_1_1.value;
          return [4, replaceTableRow(word, tr, replaceImage)];
        case 3:
          _b2.sent();
          _b2.label = 4;
        case 4:
          trs_1_1 = trs_1.next();
          return [3, 2];
        case 5:
          return [3, 8];
        case 6:
          e_8_1 = _b2.sent();
          e_8 = { error: e_8_1 };
          return [3, 8];
        case 7:
          try {
            if (trs_1_1 && !trs_1_1.done && (_a2 = trs_1.return))
              _a2.call(trs_1);
          } finally {
            if (e_8)
              throw e_8.error;
          }
          return [
            7
            /*endfinally*/
          ];
        case 8:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function replaceSingleImage(word, documentData) {
  return __awaiter(this, void 0, void 0, function() {
    var _a2, _b2, cNvPr, e_9_1;
    var e_9, _c;
    return __generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          _d.trys.push([0, 5, 6, 7]);
          _a2 = __values(documentData.getElementsByTagName("pic:cNvPr")), _b2 = _a2.next();
          _d.label = 1;
        case 1:
          if (!!_b2.done)
            return [3, 4];
          cNvPr = _b2.value;
          return [4, replaceAlt(word, cNvPr, word.renderOptions.data, true)];
        case 2:
          _d.sent();
          _d.label = 3;
        case 3:
          _b2 = _a2.next();
          return [3, 1];
        case 4:
          return [3, 7];
        case 5:
          e_9_1 = _d.sent();
          e_9 = { error: e_9_1 };
          return [3, 7];
        case 6:
          try {
            if (_b2 && !_b2.done && (_c = _a2.return))
              _c.call(_a2);
          } finally {
            if (e_9)
              throw e_9.error;
          }
          return [
            7
            /*endfinally*/
          ];
        case 7:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function replaceVar(word, documentData, replaceImage) {
  if (replaceImage === void 0) {
    replaceImage = false;
  }
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_a2) {
      switch (_a2.label) {
        case 0:
          return [4, replaceTable(word, documentData, replaceImage)];
        case 1:
          _a2.sent();
          if (!replaceImage)
            return [3, 3];
          return [4, replaceSingleImage(word, documentData)];
        case 2:
          _a2.sent();
          _a2.label = 3;
        case 3:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}

// node_modules/office-viewer/esm/openxml/word/Note.js
var Note = (
  /** @class */
  function() {
    function Note2() {
      this.children = [];
    }
    Note2.prototype.addChild = function(child) {
      this.children.push(child);
    };
    Note2.fromXML = function(word, element) {
      var e_1, _a2;
      var note = new Note2();
      try {
        for (var _b2 = __values(element.children), _c = _b2.next(); !_c.done; _c = _b2.next()) {
          var child = _c.value;
          var tagName = child.tagName;
          switch (tagName) {
            case "w:p":
              var paragraph = Paragraph.fromXML(word, child);
              note.addChild(paragraph);
              break;
            case "w:tbl":
              var table = parseTable(word, child);
              note.addChild(table);
              break;
            default:
              console.warn("Note.fromXML unknown tag", tagName, child);
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b2.return))
            _a2.call(_b2);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return note;
    };
    return Note2;
  }()
);

// node_modules/office-viewer/esm/parse/Footnotes.js
function parseFootnotes(word, doc) {
  var e_1, _a2;
  var footnotes = {};
  var footnotesElement = [].slice.call(doc.getElementsByTagName("w:footnote"));
  try {
    for (var footnotesElement_1 = __values(footnotesElement), footnotesElement_1_1 = footnotesElement_1.next(); !footnotesElement_1_1.done; footnotesElement_1_1 = footnotesElement_1.next()) {
      var footnoteElement = footnotesElement_1_1.value;
      var footnote = Note.fromXML(word, footnoteElement);
      footnotes[footnoteElement.getAttribute("w:id")] = footnote;
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (footnotesElement_1_1 && !footnotesElement_1_1.done && (_a2 = footnotesElement_1.return))
        _a2.call(footnotesElement_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return footnotes;
}

// node_modules/office-viewer/esm/parse/parseEndnotes.js
function parseEndnotes(word, doc) {
  var e_1, _a2;
  var endnotes = {};
  var endnotesElement = [].slice.call(doc.getElementsByTagName("w:endnote"));
  try {
    for (var endnotesElement_1 = __values(endnotesElement), endnotesElement_1_1 = endnotesElement_1.next(); !endnotesElement_1_1.done; endnotesElement_1_1 = endnotesElement_1.next()) {
      var endnoteElement = endnotesElement_1_1.value;
      var endnote = Note.fromXML(word, endnoteElement);
      endnotes[endnoteElement.getAttribute("w:id")] = endnote;
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (endnotesElement_1_1 && !endnotesElement_1_1.done && (_a2 = endnotesElement_1.return))
        _a2.call(endnotesElement_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return endnotes;
}

// node_modules/office-viewer/esm/render/renderNotes.js
function renderNote(word, noteRoot, type, id, note) {
  var e_1, _a2;
  var noteChild = note.children;
  var noteElement = createElement("div");
  var mark = createElement("a");
  var fName = type + "-" + id;
  mark.name = fName;
  mark.id = fName;
  noteRoot.appendChild(noteElement);
  try {
    for (var noteChild_1 = __values(noteChild), noteChild_1_1 = noteChild_1.next(); !noteChild_1_1.done; noteChild_1_1 = noteChild_1.next()) {
      var child = noteChild_1_1.value;
      if (child instanceof Paragraph) {
        var p = renderParagraph(word, child);
        appendChild(noteElement, p);
      } else if (child instanceof Table) {
        appendChild(noteElement, renderTable(word, child));
      } else {
        console.warn("unknown child", child);
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (noteChild_1_1 && !noteChild_1_1.done && (_a2 = noteChild_1.return))
        _a2.call(noteChild_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
}
function hasNote(notes) {
  if (!notes) {
    return false;
  }
  for (var id in notes) {
    if (id !== "0" && id !== "-1") {
      return true;
    }
  }
  return false;
}
function renderNotes(word) {
  var noteRoot = createElement("div");
  if (hasNote(word.footNotes)) {
    for (var fId in word.footNotes) {
      renderNote(word, noteRoot, "footnote", fId, word.footNotes[fId]);
    }
  }
  if (hasNote(word.endNotes)) {
    for (var fId in word.endNotes || {}) {
      renderNote(word, noteRoot, "endnote", fId, word.endNotes[fId]);
    }
  }
  if (noteRoot.children.length) {
    return noteRoot;
  } else {
    return null;
  }
}

// node_modules/office-viewer/esm/util/print.js
function loadIframeImages(images) {
  var _this = this;
  var promises = images.map(function(image) {
    return __awaiter(_this, void 0, void 0, function() {
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (!(image.src && image.src !== window.location.href))
              return [3, 2];
            return [4, loadIframeImage(image)];
          case 1:
            _a2.sent();
            _a2.label = 2;
          case 2:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  });
  return Promise.all(promises);
}
function loadIframeImage(image) {
  return new Promise(function(resolve) {
    var pollImage = function() {
      !image || typeof image.naturalWidth === "undefined" || image.naturalWidth === 0 || !image.complete ? setTimeout(pollImage, 500) : resolve();
    };
    pollImage();
  });
}
function performPrint(iframe) {
  var _a2, _b2;
  (_a2 = iframe.contentWindow) === null || _a2 === void 0 ? void 0 : _a2.print();
  (_b2 = iframe.parentNode) === null || _b2 === void 0 ? void 0 : _b2.removeChild(iframe);
}
function printIframe(iframe) {
  var printDocument = iframe.contentDocument;
  var images = printDocument.getElementsByTagName("img");
  if (images.length > 0) {
    loadIframeImages(Array.from(images)).then(function() {
      return performPrint(iframe);
    });
  } else {
    performPrint(iframe);
  }
}

// node_modules/office-viewer/esm/openxml/Settings.js
function parseClrSchemeMapping(element) {
  var e_1, _a2;
  var clrSchemeMapping = {};
  try {
    for (var _b2 = __values(element.attributes), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var attribute = _c.value;
      var name_1 = attribute.name.replace("w:", "");
      var value = attribute.value;
      if (value === "light1") {
        value = "lt1";
      } else if (value === "light2") {
        value = "lt2";
      } else if (value === "dark1") {
        value = "dk1";
      } else if (value === "dark2") {
        value = "dk2";
      }
      clrSchemeMapping[name_1] = value;
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  if (!clrSchemeMapping.bg1) {
    clrSchemeMapping.bg1 = "lt1";
  }
  if (!clrSchemeMapping.bg2) {
    clrSchemeMapping.bg2 = "lt2";
  }
  if (!clrSchemeMapping.tx1) {
    clrSchemeMapping.tx1 = "dk1";
  }
  return clrSchemeMapping;
}
var Settings = (
  /** @class */
  function() {
    function Settings2() {
      this.clrSchemeMapping = {};
      this.autoHyphenation = false;
    }
    Settings2.parse = function(word, doc) {
      var e_2, _a2;
      var settings = new Settings2();
      var rootElement = doc;
      if (doc.firstElementChild && doc.firstElementChild.tagName === "w:settings") {
        rootElement = doc.getElementsByTagName("w:settings").item(0);
      }
      try {
        for (var _b2 = __values(Array.from(rootElement.children)), _c = _b2.next(); !_c.done; _c = _b2.next()) {
          var child = _c.value;
          var tag = child.tagName;
          switch (tag) {
            case "w:clrSchemeMapping":
              settings.clrSchemeMapping = parseClrSchemeMapping(child);
              break;
            case "w:autoHyphenation":
              settings.autoHyphenation = getValBoolean(child, false);
              break;
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b2.return))
            _a2.call(_b2);
        } finally {
          if (e_2)
            throw e_2.error;
        }
      }
      return settings;
    };
    return Settings2;
  }()
);

// node_modules/office-viewer/esm/util/get.js
var get = function(obj, path, defaultValue) {
  if (defaultValue === void 0) {
    defaultValue = void 0;
  }
  var travel = function(regexp) {
    return String.prototype.split.call(path, regexp).filter(Boolean).reduce(function(res, key) {
      return res !== null && res !== void 0 ? res[key] : res;
    }, obj);
  };
  var result = travel(/[,[\]]+?/) || travel(/[,[\].]+?/);
  return result === void 0 || result === obj ? defaultValue : result;
};

// node_modules/office-viewer/esm/util/fileType.js
function check(buffer, headers, options) {
  var e_1, _a2;
  if (options === void 0) {
    options = {};
  }
  var offset = options.offset || 0;
  try {
    for (var _b2 = __values(headers.entries()), _c = _b2.next(); !_c.done; _c = _b2.next()) {
      var _d = __read(_c.value, 2), index2 = _d[0], header = _d[1];
      if (options.mask) {
        if (header !== (options.mask[index2] & buffer[index2 + offset])) {
          return false;
        }
      } else if (header !== buffer[index2 + offset]) {
        return false;
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b2.return))
        _a2.call(_b2);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return true;
}
function stringToBytes(string) {
  return __spreadArray([], __read(string), false).map(function(character) {
    return character.charCodeAt(0);
  });
}
function checkString(buffer, string, options) {
  if (options === void 0) {
    options = {};
  }
  return check(buffer, stringToBytes(string), options);
}
function fileTypeFromBuffer(buffer) {
  if (check(buffer, [137, 80, 78, 71, 13, 10, 26, 10])) {
    return { ext: "png", mime: "image/png" };
  }
  if (check(buffer, [255, 216, 255])) {
    return { ext: "jpg", mime: "image/jpeg" };
  }
  if (check(buffer, [71, 73, 70])) {
    return { ext: "gif", mime: "image/gif" };
  }
  if (check(buffer, [66, 77])) {
    return { ext: "bmp", mime: "image/bmp" };
  }
  if (check(buffer, [197, 208, 211, 198])) {
    return { ext: "eps", mime: "application/eps" };
  }
  if (checkString(buffer, "8BPS")) {
    return { ext: "psd", mime: "image/vnd.adobe.photoshop" };
  }
  if (checkString(buffer, "%PDF")) {
    return { ext: "pdf", mime: "application/pdf" };
  }
  return null;
}

// node_modules/office-viewer/esm/Word.js
var defaultRenderOptions = {
  classPrefix: "docx-viewer",
  page: false,
  pageWrap: true,
  bulletUseFont: true,
  ignoreHeight: true,
  ignoreWidth: false,
  minLineHeight: 1,
  enableVar: false,
  debug: false,
  pageWrapPadding: 20,
  pageMarginBottom: 20,
  pageShadow: true,
  pageBackground: "#FFFFFF",
  pageWrapBackground: "#ECECEC",
  printWaitTime: 100,
  zoomFitWidth: false,
  renderHeader: true,
  renderFooter: true,
  data: {},
  evalVar: function(path, data) {
    return get(data, path);
  }
};
var Word = (
  /** @class */
  function() {
    function Word2(docFile, renderOptions, parser) {
      if (parser === void 0) {
        parser = new ZipPackageParser();
      }
      this.themes = [];
      this.styleIdMap = {};
      this.styleIdNum = 0;
      this.wrapClassName = "docx-viewer-wrapper";
      this.footNotes = {};
      this.endNotes = {};
      this.inited = false;
      this.breakPage = false;
      this.DOCUMENT_RELS = "/word/_rels/document.xml.rels";
      parser.load(docFile);
      this.id = Word2.globalId++;
      this.parser = parser;
      this.renderOptions = __assign(__assign({}, defaultRenderOptions), renderOptions);
      if (this.renderOptions.page) {
        this.renderOptions.ignoreHeight = false;
        this.renderOptions.ignoreWidth = false;
      }
    }
    Word2.prototype.init = function() {
      if (this.inited) {
        return;
      }
      this.initContentType();
      this.initRelation();
      this.initSettings();
      this.initTheme();
      this.initFontTable();
      this.initStyle();
      this.initNumbering();
      this.initNotes();
      this.inited = true;
    };
    Word2.prototype.initTheme = function() {
      var e_1, _a2;
      try {
        for (var _b2 = __values(this.conentTypes.overrides), _c = _b2.next(); !_c.done; _c = _b2.next()) {
          var override = _c.value;
          if (override.partName.startsWith("/word/theme")) {
            var theme = this.parser.getXML(override.partName);
            this.themes.push(parseTheme(theme));
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b2.return))
            _a2.call(_b2);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
    };
    Word2.prototype.initStyle = function() {
      var e_2, _a2;
      try {
        for (var _b2 = __values(this.conentTypes.overrides), _c = _b2.next(); !_c.done; _c = _b2.next()) {
          var override = _c.value;
          if (override.partName.startsWith("/word/styles.xml")) {
            this.styles = parseStyles(this, this.parser.getXML("/word/styles.xml"));
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b2.return))
            _a2.call(_b2);
        } finally {
          if (e_2)
            throw e_2.error;
        }
      }
    };
    Word2.prototype.initSettings = function() {
      var e_3, _a2;
      try {
        for (var _b2 = __values(this.conentTypes.overrides), _c = _b2.next(); !_c.done; _c = _b2.next()) {
          var override = _c.value;
          if (override.partName.startsWith("/word/settings.xml")) {
            this.settings = Settings.parse(this, this.parser.getXML("/word/settings.xml"));
          }
        }
      } catch (e_3_1) {
        e_3 = { error: e_3_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b2.return))
            _a2.call(_b2);
        } finally {
          if (e_3)
            throw e_3.error;
        }
      }
    };
    Word2.prototype.initFontTable = function() {
      var e_4, _a2;
      try {
        for (var _b2 = __values(this.conentTypes.overrides), _c = _b2.next(); !_c.done; _c = _b2.next()) {
          var override = _c.value;
          if (override.partName.startsWith("/word/fontTable.xml")) {
            this.fontTable = FontTable.fromXML(this, this.parser.getXML("/word/fontTable.xml"));
          }
        }
      } catch (e_4_1) {
        e_4 = { error: e_4_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b2.return))
            _a2.call(_b2);
        } finally {
          if (e_4)
            throw e_4.error;
        }
      }
    };
    Word2.prototype.initRelation = function() {
      var rels = {};
      if (this.parser.fileExists("/_rels/.rels")) {
        rels = parseRelationships(this.parser.getXML("/_rels/.rels"), "root");
      }
      this.relationships = rels;
      var documentRels = {};
      if (this.parser.fileExists(this.DOCUMENT_RELS)) {
        documentRels = parseRelationships(this.parser.getXML(this.DOCUMENT_RELS), "word");
      }
      this.documentRels = documentRels;
      var fontTableRels = {};
      if (this.parser.fileExists("/word/_rels/fontTable.xml.rels")) {
        fontTableRels = parseRelationships(this.parser.getXML("/word/_rels/fontTable.xml.rels"), "word");
      }
      this.fontTableRels = fontTableRels;
    };
    Word2.prototype.initContentType = function() {
      var contentType = this.parser.getXML("[Content_Types].xml");
      this.conentTypes = parseContentType(contentType);
    };
    Word2.prototype.initNumbering = function() {
      var e_5, _a2;
      try {
        for (var _b2 = __values(this.conentTypes.overrides), _c = _b2.next(); !_c.done; _c = _b2.next()) {
          var override = _c.value;
          if (override.partName.startsWith("/word/numbering")) {
            var numberingData = this.parser.getXML(override.partName);
            this.numbering = Numbering.fromXML(this, numberingData);
          }
        }
      } catch (e_5_1) {
        e_5 = { error: e_5_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b2.return))
            _a2.call(_b2);
        } finally {
          if (e_5)
            throw e_5.error;
        }
      }
    };
    Word2.prototype.initNotes = function() {
      var e_6, _a2;
      try {
        for (var _b2 = __values(this.conentTypes.overrides), _c = _b2.next(); !_c.done; _c = _b2.next()) {
          var override = _c.value;
          if (override.partName.startsWith("/word/footnotes.xml")) {
            var notesData = this.parser.getXML(override.partName);
            this.footNotes = parseFootnotes(this, notesData);
          }
          if (override.partName.startsWith("/word/endnotes.xml")) {
            var notesData = this.parser.getXML(override.partName);
            this.endNotes = parseEndnotes(this, notesData);
          }
        }
      } catch (e_6_1) {
        e_6 = { error: e_6_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b2.return))
            _a2.call(_b2);
        } finally {
          if (e_6)
            throw e_6.error;
        }
      }
    };
    Word2.prototype.getRelationship = function(id) {
      if (id && this.relationships) {
        return this.relationships[id];
      }
      return null;
    };
    Word2.prototype.getDocumentRels = function(id) {
      if (id && this.documentRels) {
        return this.documentRels[id];
      }
      return null;
    };
    Word2.prototype.getFontTableRels = function(id) {
      if (id && this.fontTableRels) {
        return this.fontTableRels[id];
      }
      return null;
    };
    Word2.prototype.replaceText = function(text) {
      var _this = this;
      if (this.renderOptions.enableVar === false) {
        return text;
      }
      var data = this.renderOptions.data;
      if (text.indexOf("{{") !== -1) {
        text = text.replace(/{{([^{}]+)}}/g, function(all, group) {
          var result = _this.renderOptions.evalVar(group, data);
          if (typeof result === "undefined") {
            return "";
          }
          return String(result);
        });
      }
      return text;
    };
    Word2.prototype.loadWordRelXML = function(relation) {
      var path = relation.target;
      if (relation.part === "word") {
        path = "word/" + path;
      }
      return this.getXML(path);
    };
    Word2.prototype.loadImage = function(relation) {
      var path = relation.target;
      if (relation.part === "word") {
        path = "word/" + path;
      }
      var data = this.parser.getFileByType(path, "blob");
      if (data) {
        return URL.createObjectURL(data);
      }
      return null;
    };
    Word2.prototype.saveNewImage = function(newRelId2, data) {
      if (this.parser.fileExists(this.DOCUMENT_RELS)) {
        var documentRels = this.parser.getXML(this.DOCUMENT_RELS);
        var newRelation = documentRels.getElementsByTagName("Relationship").item(0).cloneNode(true);
        newRelation.setAttributeNS(null, "Id", newRelId2);
        newRelation.setAttributeNS(null, "Type", "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image");
        var ext = "";
        var fileType = fileTypeFromBuffer(data);
        if (fileType) {
          ext = "." + fileType.ext;
        }
        var imagePath = "media/image" + newRelId2 + ext;
        newRelation.setAttributeNS(null, "Target", imagePath);
        documentRels.getElementsByTagName("Relationships")[0].appendChild(newRelation);
        this.parser.saveFile(this.DOCUMENT_RELS.replace(/^\//, ""), buildXML(documentRels));
        this.parser.saveFile("word/" + imagePath, data);
      }
    };
    Word2.prototype.loadFont = function(rId, key) {
      var relation = this.getFontTableRels(rId);
      if (!relation) {
        return null;
      }
      var path = relation.target;
      if (relation.part === "word") {
        path = "word/" + path;
      }
      var data = this.parser.getFileByType(path, "uint8array");
      if (data) {
        return URL.createObjectURL(new Blob([deobfuscate(data, key)]));
      }
      return null;
    };
    Word2.prototype.getXML = function(filePath) {
      return this.parser.getXML(filePath);
    };
    Word2.prototype.getStyleIdDisplayName = function(styleId) {
      if (styleId.match(/^[a-zA-Z]+[a-zA-Z0-9\-\_]*$/)) {
        return this.getClassPrefix() + "-" + styleId;
      }
      if (styleId in this.styleIdMap) {
        return this.styleIdMap[styleId];
      } else {
        this.styleIdMap[styleId] = this.genClassName();
        return this.styleIdMap[styleId];
      }
    };
    Word2.prototype.genClassName = function() {
      return "docx-classname-" + this.styleIdNum++;
    };
    Word2.prototype.appendStyle = function(style) {
      if (style === void 0) {
        style = "";
      }
      var styleElement = createElement("style");
      styleElement.textContent = style;
      this.rootElement.appendChild(styleElement);
    };
    Word2.prototype.getStyleClassName = function(stylId) {
      var style = this.styles.styleMap[stylId];
      if (!style) {
        return [];
      }
      var classNames = [this.getStyleIdDisplayName(stylId)];
      if (style.basedOn) {
        classNames.unshift(this.getStyleIdDisplayName(style.basedOn));
      }
      return classNames;
    };
    Word2.prototype.getStyle = function(styleId) {
      return this.styles.styleMap[styleId];
    };
    Word2.prototype.getClassPrefix = function() {
      return "".concat(this.renderOptions.classPrefix, "-").concat(this.id);
    };
    Word2.prototype.getThemeColor = function(name) {
      var _a2, _b2;
      if (this.settings.clrSchemeMapping) {
        name = this.settings.clrSchemeMapping[name] || name;
      }
      if (this.themes && this.themes.length > 0) {
        var theme = this.themes[0];
        var colors = (_b2 = (_a2 = theme.themeElements) === null || _a2 === void 0 ? void 0 : _a2.clrScheme) === null || _b2 === void 0 ? void 0 : _b2.colors;
        var color = colors === null || colors === void 0 ? void 0 : colors[name];
        if (color) {
          return color;
        } else {
          console.warn("unknown theme color: " + name);
          return (colors === null || colors === void 0 ? void 0 : colors["accent1"]) || "";
        }
      }
      return "";
    };
    Word2.prototype.addClass = function(element, className) {
      element.classList.add("".concat(this.getClassPrefix(), "-").concat(className));
    };
    Word2.prototype.updateVariable = function() {
      if (!this.rootElement || this.renderOptions.enableVar === false) {
        return;
      }
      updateVariableText(this);
    };
    Word2.prototype.download = function(fileName) {
      if (fileName === void 0) {
        fileName = "document.docx";
      }
      return __awaiter(this, void 0, void 0, function() {
        var documentData, ts, i, blob;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              documentData = this.getXML("word/document.xml");
              if (!this.renderOptions.enableVar)
                return [3, 2];
              mergeRun(this, documentData);
              return [4, replaceVar(this, documentData, true)];
            case 1:
              _a2.sent();
              ts = documentData.getElementsByTagName("w:t");
              for (i = 0; i < ts.length; i++) {
                replaceT(this, ts[i], this.renderOptions.data);
              }
              _a2.label = 2;
            case 2:
              blob = this.parser.generateZip(buildXML(documentData));
              downloadBlob(blob, fileName);
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    Word2.prototype.print = function() {
      return __awaiter(this, void 0, void 0, function() {
        var iframe, printDocument;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              iframe = document.createElement("iframe");
              iframe.style.position = "absolute";
              iframe.style.top = "-10000px";
              document.body.appendChild(iframe);
              printDocument = iframe.contentDocument;
              if (!printDocument) {
                console.warn("printDocument is null");
                return [2, null];
              }
              printDocument.write('<style>\n      html, body { margin:0; padding:0 }\n      @page { size: auto; margin: 0mm; }\n      </style>\n      <div id="print"></div>');
              return [4, this.render(printDocument.getElementById("print"), __assign({ pageWrap: false, pageShadow: false, pageMarginBottom: 0, pageWrapPadding: void 0, zoom: 1 }, this.renderOptions.printOptions))];
            case 1:
              _a2.sent();
              setTimeout(function() {
                iframe.focus();
                printIframe(iframe);
              }, this.renderOptions.printWaitTime || 100);
              window.focus();
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    Word2.prototype.render = function(root, renderOptionsOverride) {
      if (renderOptionsOverride === void 0) {
        renderOptionsOverride = {};
      }
      return __awaiter(this, void 0, void 0, function() {
        var renderOptions, isDebug, documentData, document2, documentElement;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              this.init();
              this.currentPage = 0;
              renderOptions = __assign(__assign({}, this.renderOptions), renderOptionsOverride);
              isDebug = renderOptions.debug;
              isDebug && console.log("init", this);
              this.rootElement = root;
              root.innerHTML = "";
              documentData = this.getXML("word/document.xml");
              isDebug && console.log("documentData", documentData);
              if (!renderOptions.enableVar)
                return [3, 2];
              mergeRun(this, documentData);
              return [4, replaceVar(this, documentData)];
            case 1:
              _a2.sent();
              _a2.label = 2;
            case 2:
              document2 = WDocument.fromXML(this, documentData);
              isDebug && console.log("document", document2);
              documentElement = renderDocument(root, this, document2, renderOptions);
              root.classList.add(this.getClassPrefix());
              if (renderOptions.page && renderOptions.pageWrap) {
                root.classList.add(this.wrapClassName);
                root.style.padding = "".concat(renderOptions.pageWrapPadding || 0, "pt");
                root.style.background = renderOptions.pageWrapBackground || "#ECECEC";
              }
              appendChild(root, renderStyle(this));
              appendChild(root, renderFont(this.fontTable));
              appendChild(root, documentElement);
              appendChild(root, renderNotes(this));
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    Word2.globalId = 0;
    return Word2;
  }()
);

// node_modules/office-viewer/esm/index.js
var index = { Word };
export {
  Word,
  index as default
};
//# sourceMappingURL=esm-5NRNVNZF.js.map
