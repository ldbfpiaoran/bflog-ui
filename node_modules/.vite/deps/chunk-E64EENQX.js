import {
  __assign,
  __awaiter,
  __decorate,
  __extends,
  __generator,
  __metadata,
  __read,
  __rest,
  __spreadArray,
  __values
} from "./chunk-N4FYP52A.js";
import {
  destroy,
  flow,
  getEnv,
  getParent,
  isAlive,
  setLivelinessChecking,
  types
} from "./chunk-TJNQ6KM7.js";
import {
  observer
} from "./chunk-SXPZL6IJ.js";
import {
  autorun,
  isObservable,
  isObservableArray,
  observable,
  reaction,
  toJS
} from "./chunk-KYA7D7YK.js";
import {
  init_moment,
  moment_default
} from "./chunk-J7DMGZVC.js";
import {
  _inheritsLoose,
  require_hoist_non_react_statics_cjs,
  require_prop_types
} from "./chunk-DVRASE46.js";
import {
  require_react_dom
} from "./chunk-3QPCRVPD.js";
import {
  require_classnames
} from "./chunk-CA5WU5FY.js";
import {
  _extends,
  _objectWithoutPropertiesLoose
} from "./chunk-Y67KMEH3.js";
import {
  require_react
} from "./chunk-AIVQU27O.js";
import {
  __commonJS,
  __export,
  __toESM
} from "./chunk-LFBQMW2U.js";

// node_modules/lodash/_baseSlice.js
var require_baseSlice = __commonJS({
  "node_modules/lodash/_baseSlice.js"(exports, module) {
    function baseSlice(array, start, end) {
      var index = -1, length = array.length;
      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : end - start >>> 0;
      start >>>= 0;
      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }
    module.exports = baseSlice;
  }
});

// node_modules/lodash/_castSlice.js
var require_castSlice = __commonJS({
  "node_modules/lodash/_castSlice.js"(exports, module) {
    var baseSlice = require_baseSlice();
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === void 0 ? length : end;
      return !start && end >= length ? array : baseSlice(array, start, end);
    }
    module.exports = castSlice;
  }
});

// node_modules/lodash/_hasUnicode.js
var require_hasUnicode = __commonJS({
  "node_modules/lodash/_hasUnicode.js"(exports, module) {
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsZWJ = "\\u200d";
    var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }
    module.exports = hasUnicode;
  }
});

// node_modules/lodash/_asciiToArray.js
var require_asciiToArray = __commonJS({
  "node_modules/lodash/_asciiToArray.js"(exports, module) {
    function asciiToArray(string) {
      return string.split("");
    }
    module.exports = asciiToArray;
  }
});

// node_modules/lodash/_unicodeToArray.js
var require_unicodeToArray = __commonJS({
  "node_modules/lodash/_unicodeToArray.js"(exports, module) {
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsAstral = "[" + rsAstralRange + "]";
    var rsCombo = "[" + rsComboRange + "]";
    var rsFitz = "\\ud83c[\\udffb-\\udfff]";
    var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
    var rsNonAstral = "[^" + rsAstralRange + "]";
    var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
    var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
    var rsZWJ = "\\u200d";
    var reOptMod = rsModifier + "?";
    var rsOptVar = "[" + rsVarRange + "]?";
    var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
    var rsSeq = rsOptVar + reOptMod + rsOptJoin;
    var rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
    var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }
    module.exports = unicodeToArray;
  }
});

// node_modules/lodash/_stringToArray.js
var require_stringToArray = __commonJS({
  "node_modules/lodash/_stringToArray.js"(exports, module) {
    var asciiToArray = require_asciiToArray();
    var hasUnicode = require_hasUnicode();
    var unicodeToArray = require_unicodeToArray();
    function stringToArray(string) {
      return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }
    module.exports = stringToArray;
  }
});

// node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "node_modules/lodash/_freeGlobal.js"(exports, module) {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module.exports = freeGlobal;
  }
});

// node_modules/lodash/_root.js
var require_root = __commonJS({
  "node_modules/lodash/_root.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module.exports = root;
  }
});

// node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "node_modules/lodash/_Symbol.js"(exports, module) {
    var root = require_root();
    var Symbol2 = root.Symbol;
    module.exports = Symbol2;
  }
});

// node_modules/lodash/_arrayMap.js
var require_arrayMap = __commonJS({
  "node_modules/lodash/_arrayMap.js"(exports, module) {
    function arrayMap(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    module.exports = arrayMap;
  }
});

// node_modules/lodash/isArray.js
var require_isArray = __commonJS({
  "node_modules/lodash/isArray.js"(exports, module) {
    var isArray = Array.isArray;
    module.exports = isArray;
  }
});

// node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "node_modules/lodash/_getRawTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module.exports = getRawTag;
  }
});

// node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "node_modules/lodash/_objectToString.js"(exports, module) {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module.exports = objectToString;
  }
});

// node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "node_modules/lodash/_baseGetTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module.exports = baseGetTag;
  }
});

// node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/lodash/isObjectLike.js"(exports, module) {
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module.exports = isObjectLike;
  }
});

// node_modules/lodash/isSymbol.js
var require_isSymbol = __commonJS({
  "node_modules/lodash/isSymbol.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    module.exports = isSymbol;
  }
});

// node_modules/lodash/_baseToString.js
var require_baseToString = __commonJS({
  "node_modules/lodash/_baseToString.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var arrayMap = require_arrayMap();
    var isArray = require_isArray();
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isArray(value)) {
        return arrayMap(value, baseToString) + "";
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module.exports = baseToString;
  }
});

// node_modules/lodash/toString.js
var require_toString = __commonJS({
  "node_modules/lodash/toString.js"(exports, module) {
    var baseToString = require_baseToString();
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    module.exports = toString;
  }
});

// node_modules/lodash/_createCaseFirst.js
var require_createCaseFirst = __commonJS({
  "node_modules/lodash/_createCaseFirst.js"(exports, module) {
    var castSlice = require_castSlice();
    var hasUnicode = require_hasUnicode();
    var stringToArray = require_stringToArray();
    var toString = require_toString();
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);
        var strSymbols = hasUnicode(string) ? stringToArray(string) : void 0;
        var chr = strSymbols ? strSymbols[0] : string.charAt(0);
        var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
        return chr[methodName]() + trailing;
      };
    }
    module.exports = createCaseFirst;
  }
});

// node_modules/lodash/upperFirst.js
var require_upperFirst = __commonJS({
  "node_modules/lodash/upperFirst.js"(exports, module) {
    var createCaseFirst = require_createCaseFirst();
    var upperFirst2 = createCaseFirst("toUpperCase");
    module.exports = upperFirst2;
  }
});

// node_modules/lodash/_baseRepeat.js
var require_baseRepeat = __commonJS({
  "node_modules/lodash/_baseRepeat.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var nativeFloor = Math.floor;
    function baseRepeat(string, n) {
      var result = "";
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);
      return result;
    }
    module.exports = baseRepeat;
  }
});

// node_modules/lodash/_baseProperty.js
var require_baseProperty = __commonJS({
  "node_modules/lodash/_baseProperty.js"(exports, module) {
    function baseProperty(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    module.exports = baseProperty;
  }
});

// node_modules/lodash/_asciiSize.js
var require_asciiSize = __commonJS({
  "node_modules/lodash/_asciiSize.js"(exports, module) {
    var baseProperty = require_baseProperty();
    var asciiSize = baseProperty("length");
    module.exports = asciiSize;
  }
});

// node_modules/lodash/_unicodeSize.js
var require_unicodeSize = __commonJS({
  "node_modules/lodash/_unicodeSize.js"(exports, module) {
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsAstral = "[" + rsAstralRange + "]";
    var rsCombo = "[" + rsComboRange + "]";
    var rsFitz = "\\ud83c[\\udffb-\\udfff]";
    var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
    var rsNonAstral = "[^" + rsAstralRange + "]";
    var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
    var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
    var rsZWJ = "\\u200d";
    var reOptMod = rsModifier + "?";
    var rsOptVar = "[" + rsVarRange + "]?";
    var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
    var rsSeq = rsOptVar + reOptMod + rsOptJoin;
    var rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
    var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
    function unicodeSize(string) {
      var result = reUnicode.lastIndex = 0;
      while (reUnicode.test(string)) {
        ++result;
      }
      return result;
    }
    module.exports = unicodeSize;
  }
});

// node_modules/lodash/_stringSize.js
var require_stringSize = __commonJS({
  "node_modules/lodash/_stringSize.js"(exports, module) {
    var asciiSize = require_asciiSize();
    var hasUnicode = require_hasUnicode();
    var unicodeSize = require_unicodeSize();
    function stringSize(string) {
      return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
    }
    module.exports = stringSize;
  }
});

// node_modules/lodash/_createPadding.js
var require_createPadding = __commonJS({
  "node_modules/lodash/_createPadding.js"(exports, module) {
    var baseRepeat = require_baseRepeat();
    var baseToString = require_baseToString();
    var castSlice = require_castSlice();
    var hasUnicode = require_hasUnicode();
    var stringSize = require_stringSize();
    var stringToArray = require_stringToArray();
    var nativeCeil = Math.ceil;
    function createPadding(length, chars) {
      chars = chars === void 0 ? " " : baseToString(chars);
      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join("") : result.slice(0, length);
    }
    module.exports = createPadding;
  }
});

// node_modules/lodash/_trimmedEndIndex.js
var require_trimmedEndIndex = __commonJS({
  "node_modules/lodash/_trimmedEndIndex.js"(exports, module) {
    var reWhitespace = /\s/;
    function trimmedEndIndex(string) {
      var index = string.length;
      while (index-- && reWhitespace.test(string.charAt(index))) {
      }
      return index;
    }
    module.exports = trimmedEndIndex;
  }
});

// node_modules/lodash/_baseTrim.js
var require_baseTrim = __commonJS({
  "node_modules/lodash/_baseTrim.js"(exports, module) {
    var trimmedEndIndex = require_trimmedEndIndex();
    var reTrimStart = /^\s+/;
    function baseTrim(string) {
      return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
    }
    module.exports = baseTrim;
  }
});

// node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "node_modules/lodash/isObject.js"(exports, module) {
    function isObject5(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    module.exports = isObject5;
  }
});

// node_modules/lodash/toNumber.js
var require_toNumber = __commonJS({
  "node_modules/lodash/toNumber.js"(exports, module) {
    var baseTrim = require_baseTrim();
    var isObject5 = require_isObject();
    var isSymbol = require_isSymbol();
    var NAN = 0 / 0;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    function toNumber2(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject5(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject5(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = toNumber2;
  }
});

// node_modules/lodash/toFinite.js
var require_toFinite = __commonJS({
  "node_modules/lodash/toFinite.js"(exports, module) {
    var toNumber2 = require_toNumber();
    var INFINITY = 1 / 0;
    var MAX_INTEGER = 17976931348623157e292;
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber2(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }
    module.exports = toFinite;
  }
});

// node_modules/lodash/toInteger.js
var require_toInteger = __commonJS({
  "node_modules/lodash/toInteger.js"(exports, module) {
    var toFinite = require_toFinite();
    function toInteger(value) {
      var result = toFinite(value), remainder = result % 1;
      return result === result ? remainder ? result - remainder : result : 0;
    }
    module.exports = toInteger;
  }
});

// node_modules/lodash/padStart.js
var require_padStart = __commonJS({
  "node_modules/lodash/padStart.js"(exports, module) {
    var createPadding = require_createPadding();
    var stringSize = require_stringSize();
    var toInteger = require_toInteger();
    var toString = require_toString();
    function padStart2(string, length, chars) {
      string = toString(string);
      length = toInteger(length);
      var strLength = length ? stringSize(string) : 0;
      return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
    }
    module.exports = padStart2;
  }
});

// node_modules/lodash/capitalize.js
var require_capitalize = __commonJS({
  "node_modules/lodash/capitalize.js"(exports, module) {
    var toString = require_toString();
    var upperFirst2 = require_upperFirst();
    function capitalize3(string) {
      return upperFirst2(toString(string).toLowerCase());
    }
    module.exports = capitalize3;
  }
});

// node_modules/lodash/_basePropertyOf.js
var require_basePropertyOf = __commonJS({
  "node_modules/lodash/_basePropertyOf.js"(exports, module) {
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? void 0 : object[key];
      };
    }
    module.exports = basePropertyOf;
  }
});

// node_modules/lodash/_escapeHtmlChar.js
var require_escapeHtmlChar = __commonJS({
  "node_modules/lodash/_escapeHtmlChar.js"(exports, module) {
    var basePropertyOf = require_basePropertyOf();
    var htmlEscapes = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;"
    };
    var escapeHtmlChar = basePropertyOf(htmlEscapes);
    module.exports = escapeHtmlChar;
  }
});

// node_modules/lodash/escape.js
var require_escape = __commonJS({
  "node_modules/lodash/escape.js"(exports, module) {
    var escapeHtmlChar = require_escapeHtmlChar();
    var toString = require_toString();
    var reUnescapedHtml = /[&<>"']/g;
    var reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    function escape3(string) {
      string = toString(string);
      return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
    }
    module.exports = escape3;
  }
});

// node_modules/lodash/_baseIsRegExp.js
var require_baseIsRegExp = __commonJS({
  "node_modules/lodash/_baseIsRegExp.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var regexpTag = "[object RegExp]";
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }
    module.exports = baseIsRegExp;
  }
});

// node_modules/lodash/_baseUnary.js
var require_baseUnary = __commonJS({
  "node_modules/lodash/_baseUnary.js"(exports, module) {
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    module.exports = baseUnary;
  }
});

// node_modules/lodash/_nodeUtil.js
var require_nodeUtil = __commonJS({
  "node_modules/lodash/_nodeUtil.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types2 = freeModule && freeModule.require && freeModule.require("util").types;
        if (types2) {
          return types2;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    module.exports = nodeUtil;
  }
});

// node_modules/lodash/isRegExp.js
var require_isRegExp = __commonJS({
  "node_modules/lodash/isRegExp.js"(exports, module) {
    var baseIsRegExp = require_baseIsRegExp();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsRegExp = nodeUtil && nodeUtil.isRegExp;
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
    module.exports = isRegExp;
  }
});

// node_modules/lodash/truncate.js
var require_truncate = __commonJS({
  "node_modules/lodash/truncate.js"(exports, module) {
    var baseToString = require_baseToString();
    var castSlice = require_castSlice();
    var hasUnicode = require_hasUnicode();
    var isObject5 = require_isObject();
    var isRegExp = require_isRegExp();
    var stringSize = require_stringSize();
    var stringToArray = require_stringToArray();
    var toInteger = require_toInteger();
    var toString = require_toString();
    var DEFAULT_TRUNC_LENGTH = 30;
    var DEFAULT_TRUNC_OMISSION = "...";
    var reFlags = /\w*$/;
    function truncate2(string, options) {
      var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
      if (isObject5(options)) {
        var separator = "separator" in options ? options.separator : separator;
        length = "length" in options ? toInteger(options.length) : length;
        omission = "omission" in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);
      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
      if (separator === void 0) {
        return result + omission;
      }
      if (strSymbols) {
        end += result.length - end;
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match, substring = result;
          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + "g");
          }
          separator.lastIndex = 0;
          while (match = separator.exec(substring)) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === void 0 ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }
    module.exports = truncate2;
  }
});

// node_modules/lodash/isFunction.js
var require_isFunction = __commonJS({
  "node_modules/lodash/isFunction.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObject5 = require_isObject();
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction(value) {
      if (!isObject5(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    module.exports = isFunction;
  }
});

// node_modules/lodash/_coreJsData.js
var require_coreJsData = __commonJS({
  "node_modules/lodash/_coreJsData.js"(exports, module) {
    var root = require_root();
    var coreJsData = root["__core-js_shared__"];
    module.exports = coreJsData;
  }
});

// node_modules/lodash/_isMasked.js
var require_isMasked = __commonJS({
  "node_modules/lodash/_isMasked.js"(exports, module) {
    var coreJsData = require_coreJsData();
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    module.exports = isMasked;
  }
});

// node_modules/lodash/_toSource.js
var require_toSource = __commonJS({
  "node_modules/lodash/_toSource.js"(exports, module) {
    var funcProto = Function.prototype;
    var funcToString = funcProto.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    module.exports = toSource;
  }
});

// node_modules/lodash/_baseIsNative.js
var require_baseIsNative = __commonJS({
  "node_modules/lodash/_baseIsNative.js"(exports, module) {
    var isFunction = require_isFunction();
    var isMasked = require_isMasked();
    var isObject5 = require_isObject();
    var toSource = require_toSource();
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative(value) {
      if (!isObject5(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    module.exports = baseIsNative;
  }
});

// node_modules/lodash/_getValue.js
var require_getValue = __commonJS({
  "node_modules/lodash/_getValue.js"(exports, module) {
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    module.exports = getValue;
  }
});

// node_modules/lodash/_getNative.js
var require_getNative = __commonJS({
  "node_modules/lodash/_getNative.js"(exports, module) {
    var baseIsNative = require_baseIsNative();
    var getValue = require_getValue();
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    module.exports = getNative;
  }
});

// node_modules/lodash/_nativeCreate.js
var require_nativeCreate = __commonJS({
  "node_modules/lodash/_nativeCreate.js"(exports, module) {
    var getNative = require_getNative();
    var nativeCreate = getNative(Object, "create");
    module.exports = nativeCreate;
  }
});

// node_modules/lodash/_hashClear.js
var require_hashClear = __commonJS({
  "node_modules/lodash/_hashClear.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    module.exports = hashClear;
  }
});

// node_modules/lodash/_hashDelete.js
var require_hashDelete = __commonJS({
  "node_modules/lodash/_hashDelete.js"(exports, module) {
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = hashDelete;
  }
});

// node_modules/lodash/_hashGet.js
var require_hashGet = __commonJS({
  "node_modules/lodash/_hashGet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    module.exports = hashGet;
  }
});

// node_modules/lodash/_hashHas.js
var require_hashHas = __commonJS({
  "node_modules/lodash/_hashHas.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    module.exports = hashHas;
  }
});

// node_modules/lodash/_hashSet.js
var require_hashSet = __commonJS({
  "node_modules/lodash/_hashSet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    module.exports = hashSet;
  }
});

// node_modules/lodash/_Hash.js
var require_Hash = __commonJS({
  "node_modules/lodash/_Hash.js"(exports, module) {
    var hashClear = require_hashClear();
    var hashDelete = require_hashDelete();
    var hashGet = require_hashGet();
    var hashHas = require_hashHas();
    var hashSet = require_hashSet();
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    module.exports = Hash;
  }
});

// node_modules/lodash/_listCacheClear.js
var require_listCacheClear = __commonJS({
  "node_modules/lodash/_listCacheClear.js"(exports, module) {
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    module.exports = listCacheClear;
  }
});

// node_modules/lodash/eq.js
var require_eq = __commonJS({
  "node_modules/lodash/eq.js"(exports, module) {
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    module.exports = eq;
  }
});

// node_modules/lodash/_assocIndexOf.js
var require_assocIndexOf = __commonJS({
  "node_modules/lodash/_assocIndexOf.js"(exports, module) {
    var eq = require_eq();
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    module.exports = assocIndexOf;
  }
});

// node_modules/lodash/_listCacheDelete.js
var require_listCacheDelete = __commonJS({
  "node_modules/lodash/_listCacheDelete.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    module.exports = listCacheDelete;
  }
});

// node_modules/lodash/_listCacheGet.js
var require_listCacheGet = __commonJS({
  "node_modules/lodash/_listCacheGet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    module.exports = listCacheGet;
  }
});

// node_modules/lodash/_listCacheHas.js
var require_listCacheHas = __commonJS({
  "node_modules/lodash/_listCacheHas.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    module.exports = listCacheHas;
  }
});

// node_modules/lodash/_listCacheSet.js
var require_listCacheSet = __commonJS({
  "node_modules/lodash/_listCacheSet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    module.exports = listCacheSet;
  }
});

// node_modules/lodash/_ListCache.js
var require_ListCache = __commonJS({
  "node_modules/lodash/_ListCache.js"(exports, module) {
    var listCacheClear = require_listCacheClear();
    var listCacheDelete = require_listCacheDelete();
    var listCacheGet = require_listCacheGet();
    var listCacheHas = require_listCacheHas();
    var listCacheSet = require_listCacheSet();
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    module.exports = ListCache;
  }
});

// node_modules/lodash/_Map.js
var require_Map = __commonJS({
  "node_modules/lodash/_Map.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Map2 = getNative(root, "Map");
    module.exports = Map2;
  }
});

// node_modules/lodash/_mapCacheClear.js
var require_mapCacheClear = __commonJS({
  "node_modules/lodash/_mapCacheClear.js"(exports, module) {
    var Hash = require_Hash();
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    module.exports = mapCacheClear;
  }
});

// node_modules/lodash/_isKeyable.js
var require_isKeyable = __commonJS({
  "node_modules/lodash/_isKeyable.js"(exports, module) {
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    module.exports = isKeyable;
  }
});

// node_modules/lodash/_getMapData.js
var require_getMapData = __commonJS({
  "node_modules/lodash/_getMapData.js"(exports, module) {
    var isKeyable = require_isKeyable();
    function getMapData(map2, key) {
      var data = map2.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    module.exports = getMapData;
  }
});

// node_modules/lodash/_mapCacheDelete.js
var require_mapCacheDelete = __commonJS({
  "node_modules/lodash/_mapCacheDelete.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = mapCacheDelete;
  }
});

// node_modules/lodash/_mapCacheGet.js
var require_mapCacheGet = __commonJS({
  "node_modules/lodash/_mapCacheGet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    module.exports = mapCacheGet;
  }
});

// node_modules/lodash/_mapCacheHas.js
var require_mapCacheHas = __commonJS({
  "node_modules/lodash/_mapCacheHas.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    module.exports = mapCacheHas;
  }
});

// node_modules/lodash/_mapCacheSet.js
var require_mapCacheSet = __commonJS({
  "node_modules/lodash/_mapCacheSet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    module.exports = mapCacheSet;
  }
});

// node_modules/lodash/_MapCache.js
var require_MapCache = __commonJS({
  "node_modules/lodash/_MapCache.js"(exports, module) {
    var mapCacheClear = require_mapCacheClear();
    var mapCacheDelete = require_mapCacheDelete();
    var mapCacheGet = require_mapCacheGet();
    var mapCacheHas = require_mapCacheHas();
    var mapCacheSet = require_mapCacheSet();
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    module.exports = MapCache;
  }
});

// node_modules/lodash/_setCacheAdd.js
var require_setCacheAdd = __commonJS({
  "node_modules/lodash/_setCacheAdd.js"(exports, module) {
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    module.exports = setCacheAdd;
  }
});

// node_modules/lodash/_setCacheHas.js
var require_setCacheHas = __commonJS({
  "node_modules/lodash/_setCacheHas.js"(exports, module) {
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    module.exports = setCacheHas;
  }
});

// node_modules/lodash/_SetCache.js
var require_SetCache = __commonJS({
  "node_modules/lodash/_SetCache.js"(exports, module) {
    var MapCache = require_MapCache();
    var setCacheAdd = require_setCacheAdd();
    var setCacheHas = require_setCacheHas();
    function SetCache(values2) {
      var index = -1, length = values2 == null ? 0 : values2.length;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values2[index]);
      }
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    module.exports = SetCache;
  }
});

// node_modules/lodash/_baseFindIndex.js
var require_baseFindIndex = __commonJS({
  "node_modules/lodash/_baseFindIndex.js"(exports, module) {
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }
    module.exports = baseFindIndex;
  }
});

// node_modules/lodash/_baseIsNaN.js
var require_baseIsNaN = __commonJS({
  "node_modules/lodash/_baseIsNaN.js"(exports, module) {
    function baseIsNaN(value) {
      return value !== value;
    }
    module.exports = baseIsNaN;
  }
});

// node_modules/lodash/_strictIndexOf.js
var require_strictIndexOf = __commonJS({
  "node_modules/lodash/_strictIndexOf.js"(exports, module) {
    function strictIndexOf(array, value, fromIndex) {
      var index = fromIndex - 1, length = array.length;
      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }
    module.exports = strictIndexOf;
  }
});

// node_modules/lodash/_baseIndexOf.js
var require_baseIndexOf = __commonJS({
  "node_modules/lodash/_baseIndexOf.js"(exports, module) {
    var baseFindIndex = require_baseFindIndex();
    var baseIsNaN = require_baseIsNaN();
    var strictIndexOf = require_strictIndexOf();
    function baseIndexOf(array, value, fromIndex) {
      return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }
    module.exports = baseIndexOf;
  }
});

// node_modules/lodash/_arrayIncludes.js
var require_arrayIncludes = __commonJS({
  "node_modules/lodash/_arrayIncludes.js"(exports, module) {
    var baseIndexOf = require_baseIndexOf();
    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }
    module.exports = arrayIncludes;
  }
});

// node_modules/lodash/_arrayIncludesWith.js
var require_arrayIncludesWith = __commonJS({
  "node_modules/lodash/_arrayIncludesWith.js"(exports, module) {
    function arrayIncludesWith(array, value, comparator) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }
      return false;
    }
    module.exports = arrayIncludesWith;
  }
});

// node_modules/lodash/_cacheHas.js
var require_cacheHas = __commonJS({
  "node_modules/lodash/_cacheHas.js"(exports, module) {
    function cacheHas(cache3, key) {
      return cache3.has(key);
    }
    module.exports = cacheHas;
  }
});

// node_modules/lodash/_Set.js
var require_Set = __commonJS({
  "node_modules/lodash/_Set.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Set2 = getNative(root, "Set");
    module.exports = Set2;
  }
});

// node_modules/lodash/noop.js
var require_noop = __commonJS({
  "node_modules/lodash/noop.js"(exports, module) {
    function noop6() {
    }
    module.exports = noop6;
  }
});

// node_modules/lodash/_setToArray.js
var require_setToArray = __commonJS({
  "node_modules/lodash/_setToArray.js"(exports, module) {
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    module.exports = setToArray;
  }
});

// node_modules/lodash/_createSet.js
var require_createSet = __commonJS({
  "node_modules/lodash/_createSet.js"(exports, module) {
    var Set2 = require_Set();
    var noop6 = require_noop();
    var setToArray = require_setToArray();
    var INFINITY = 1 / 0;
    var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop6 : function(values2) {
      return new Set2(values2);
    };
    module.exports = createSet;
  }
});

// node_modules/lodash/_baseUniq.js
var require_baseUniq = __commonJS({
  "node_modules/lodash/_baseUniq.js"(exports, module) {
    var SetCache = require_SetCache();
    var arrayIncludes = require_arrayIncludes();
    var arrayIncludesWith = require_arrayIncludesWith();
    var cacheHas = require_cacheHas();
    var createSet = require_createSet();
    var setToArray = require_setToArray();
    var LARGE_ARRAY_SIZE = 200;
    function baseUniq(array, iteratee, comparator) {
      var index = -1, includes = arrayIncludes, length = array.length, isCommon = true, result = [], seen = result;
      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      } else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache();
      } else {
        seen = iteratee ? [] : result;
      }
      outer:
        while (++index < length) {
          var value = array[index], computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var seenIndex = seen.length;
            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }
            if (iteratee) {
              seen.push(computed);
            }
            result.push(value);
          } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
      return result;
    }
    module.exports = baseUniq;
  }
});

// node_modules/lodash/uniqWith.js
var require_uniqWith = __commonJS({
  "node_modules/lodash/uniqWith.js"(exports, module) {
    var baseUniq = require_baseUniq();
    function uniqWith3(array, comparator) {
      comparator = typeof comparator == "function" ? comparator : void 0;
      return array && array.length ? baseUniq(array, void 0, comparator) : [];
    }
    module.exports = uniqWith3;
  }
});

// node_modules/lodash/_stackClear.js
var require_stackClear = __commonJS({
  "node_modules/lodash/_stackClear.js"(exports, module) {
    var ListCache = require_ListCache();
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    module.exports = stackClear;
  }
});

// node_modules/lodash/_stackDelete.js
var require_stackDelete = __commonJS({
  "node_modules/lodash/_stackDelete.js"(exports, module) {
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    module.exports = stackDelete;
  }
});

// node_modules/lodash/_stackGet.js
var require_stackGet = __commonJS({
  "node_modules/lodash/_stackGet.js"(exports, module) {
    function stackGet(key) {
      return this.__data__.get(key);
    }
    module.exports = stackGet;
  }
});

// node_modules/lodash/_stackHas.js
var require_stackHas = __commonJS({
  "node_modules/lodash/_stackHas.js"(exports, module) {
    function stackHas(key) {
      return this.__data__.has(key);
    }
    module.exports = stackHas;
  }
});

// node_modules/lodash/_stackSet.js
var require_stackSet = __commonJS({
  "node_modules/lodash/_stackSet.js"(exports, module) {
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    var MapCache = require_MapCache();
    var LARGE_ARRAY_SIZE = 200;
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    module.exports = stackSet;
  }
});

// node_modules/lodash/_Stack.js
var require_Stack = __commonJS({
  "node_modules/lodash/_Stack.js"(exports, module) {
    var ListCache = require_ListCache();
    var stackClear = require_stackClear();
    var stackDelete = require_stackDelete();
    var stackGet = require_stackGet();
    var stackHas = require_stackHas();
    var stackSet = require_stackSet();
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    module.exports = Stack;
  }
});

// node_modules/lodash/_arraySome.js
var require_arraySome = __commonJS({
  "node_modules/lodash/_arraySome.js"(exports, module) {
    function arraySome(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    module.exports = arraySome;
  }
});

// node_modules/lodash/_equalArrays.js
var require_equalArrays = __commonJS({
  "node_modules/lodash/_equalArrays.js"(exports, module) {
    var SetCache = require_SetCache();
    var arraySome = require_arraySome();
    var cacheHas = require_cacheHas();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function equalArrays(array, other, bitmask, customizer, equalFunc2, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc2(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc2(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    module.exports = equalArrays;
  }
});

// node_modules/lodash/_Uint8Array.js
var require_Uint8Array = __commonJS({
  "node_modules/lodash/_Uint8Array.js"(exports, module) {
    var root = require_root();
    var Uint8Array2 = root.Uint8Array;
    module.exports = Uint8Array2;
  }
});

// node_modules/lodash/_mapToArray.js
var require_mapToArray = __commonJS({
  "node_modules/lodash/_mapToArray.js"(exports, module) {
    function mapToArray(map2) {
      var index = -1, result = Array(map2.size);
      map2.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    module.exports = mapToArray;
  }
});

// node_modules/lodash/_equalByTag.js
var require_equalByTag = __commonJS({
  "node_modules/lodash/_equalByTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var Uint8Array2 = require_Uint8Array();
    var eq = require_eq();
    var equalArrays = require_equalArrays();
    var mapToArray = require_mapToArray();
    var setToArray = require_setToArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc2, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc2(new Uint8Array2(object), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc2, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    module.exports = equalByTag;
  }
});

// node_modules/lodash/_arrayPush.js
var require_arrayPush = __commonJS({
  "node_modules/lodash/_arrayPush.js"(exports, module) {
    function arrayPush(array, values2) {
      var index = -1, length = values2.length, offset2 = array.length;
      while (++index < length) {
        array[offset2 + index] = values2[index];
      }
      return array;
    }
    module.exports = arrayPush;
  }
});

// node_modules/lodash/_baseGetAllKeys.js
var require_baseGetAllKeys = __commonJS({
  "node_modules/lodash/_baseGetAllKeys.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var isArray = require_isArray();
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    module.exports = baseGetAllKeys;
  }
});

// node_modules/lodash/_arrayFilter.js
var require_arrayFilter = __commonJS({
  "node_modules/lodash/_arrayFilter.js"(exports, module) {
    function arrayFilter(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    module.exports = arrayFilter;
  }
});

// node_modules/lodash/stubArray.js
var require_stubArray = __commonJS({
  "node_modules/lodash/stubArray.js"(exports, module) {
    function stubArray() {
      return [];
    }
    module.exports = stubArray;
  }
});

// node_modules/lodash/_getSymbols.js
var require_getSymbols = __commonJS({
  "node_modules/lodash/_getSymbols.js"(exports, module) {
    var arrayFilter = require_arrayFilter();
    var stubArray = require_stubArray();
    var objectProto = Object.prototype;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    module.exports = getSymbols;
  }
});

// node_modules/lodash/_baseTimes.js
var require_baseTimes = __commonJS({
  "node_modules/lodash/_baseTimes.js"(exports, module) {
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    module.exports = baseTimes;
  }
});

// node_modules/lodash/_baseIsArguments.js
var require_baseIsArguments = __commonJS({
  "node_modules/lodash/_baseIsArguments.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    module.exports = baseIsArguments;
  }
});

// node_modules/lodash/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/lodash/isArguments.js"(exports, module) {
    var baseIsArguments = require_baseIsArguments();
    var isObjectLike = require_isObjectLike();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    module.exports = isArguments;
  }
});

// node_modules/lodash/stubFalse.js
var require_stubFalse = __commonJS({
  "node_modules/lodash/stubFalse.js"(exports, module) {
    function stubFalse() {
      return false;
    }
    module.exports = stubFalse;
  }
});

// node_modules/lodash/isBuffer.js
var require_isBuffer = __commonJS({
  "node_modules/lodash/isBuffer.js"(exports, module) {
    var root = require_root();
    var stubFalse = require_stubFalse();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer = moduleExports ? root.Buffer : void 0;
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0;
    var isBuffer = nativeIsBuffer || stubFalse;
    module.exports = isBuffer;
  }
});

// node_modules/lodash/_isIndex.js
var require_isIndex = __commonJS({
  "node_modules/lodash/_isIndex.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    module.exports = isIndex;
  }
});

// node_modules/lodash/isLength.js
var require_isLength = __commonJS({
  "node_modules/lodash/isLength.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    module.exports = isLength;
  }
});

// node_modules/lodash/_baseIsTypedArray.js
var require_baseIsTypedArray = __commonJS({
  "node_modules/lodash/_baseIsTypedArray.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isLength = require_isLength();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    module.exports = baseIsTypedArray;
  }
});

// node_modules/lodash/isTypedArray.js
var require_isTypedArray = __commonJS({
  "node_modules/lodash/isTypedArray.js"(exports, module) {
    var baseIsTypedArray = require_baseIsTypedArray();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    module.exports = isTypedArray;
  }
});

// node_modules/lodash/_arrayLikeKeys.js
var require_arrayLikeKeys = __commonJS({
  "node_modules/lodash/_arrayLikeKeys.js"(exports, module) {
    var baseTimes = require_baseTimes();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isIndex = require_isIndex();
    var isTypedArray = require_isTypedArray();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = arrayLikeKeys;
  }
});

// node_modules/lodash/_isPrototype.js
var require_isPrototype = __commonJS({
  "node_modules/lodash/_isPrototype.js"(exports, module) {
    var objectProto = Object.prototype;
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    module.exports = isPrototype;
  }
});

// node_modules/lodash/_overArg.js
var require_overArg = __commonJS({
  "node_modules/lodash/_overArg.js"(exports, module) {
    function overArg(func, transform2) {
      return function(arg) {
        return func(transform2(arg));
      };
    }
    module.exports = overArg;
  }
});

// node_modules/lodash/_nativeKeys.js
var require_nativeKeys = __commonJS({
  "node_modules/lodash/_nativeKeys.js"(exports, module) {
    var overArg = require_overArg();
    var nativeKeys = overArg(Object.keys, Object);
    module.exports = nativeKeys;
  }
});

// node_modules/lodash/_baseKeys.js
var require_baseKeys = __commonJS({
  "node_modules/lodash/_baseKeys.js"(exports, module) {
    var isPrototype = require_isPrototype();
    var nativeKeys = require_nativeKeys();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeys;
  }
});

// node_modules/lodash/isArrayLike.js
var require_isArrayLike = __commonJS({
  "node_modules/lodash/isArrayLike.js"(exports, module) {
    var isFunction = require_isFunction();
    var isLength = require_isLength();
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    module.exports = isArrayLike;
  }
});

// node_modules/lodash/keys.js
var require_keys = __commonJS({
  "node_modules/lodash/keys.js"(exports, module) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeys = require_baseKeys();
    var isArrayLike = require_isArrayLike();
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    module.exports = keys;
  }
});

// node_modules/lodash/_getAllKeys.js
var require_getAllKeys = __commonJS({
  "node_modules/lodash/_getAllKeys.js"(exports, module) {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbols = require_getSymbols();
    var keys = require_keys();
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    module.exports = getAllKeys;
  }
});

// node_modules/lodash/_equalObjects.js
var require_equalObjects = __commonJS({
  "node_modules/lodash/_equalObjects.js"(exports, module) {
    var getAllKeys = require_getAllKeys();
    var COMPARE_PARTIAL_FLAG = 1;
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function equalObjects(object, other, bitmask, customizer, equalFunc2, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc2(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    module.exports = equalObjects;
  }
});

// node_modules/lodash/_DataView.js
var require_DataView = __commonJS({
  "node_modules/lodash/_DataView.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var DataView = getNative(root, "DataView");
    module.exports = DataView;
  }
});

// node_modules/lodash/_Promise.js
var require_Promise = __commonJS({
  "node_modules/lodash/_Promise.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Promise2 = getNative(root, "Promise");
    module.exports = Promise2;
  }
});

// node_modules/lodash/_WeakMap.js
var require_WeakMap = __commonJS({
  "node_modules/lodash/_WeakMap.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var WeakMap2 = getNative(root, "WeakMap");
    module.exports = WeakMap2;
  }
});

// node_modules/lodash/_getTag.js
var require_getTag = __commonJS({
  "node_modules/lodash/_getTag.js"(exports, module) {
    var DataView = require_DataView();
    var Map2 = require_Map();
    var Promise2 = require_Promise();
    var Set2 = require_Set();
    var WeakMap2 = require_WeakMap();
    var baseGetTag = require_baseGetTag();
    var toSource = require_toSource();
    var mapTag = "[object Map]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var setTag = "[object Set]";
    var weakMapTag = "[object WeakMap]";
    var dataViewTag = "[object DataView]";
    var dataViewCtorString = toSource(DataView);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap2);
    var getTag = baseGetTag;
    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    module.exports = getTag;
  }
});

// node_modules/lodash/_baseIsEqualDeep.js
var require_baseIsEqualDeep = __commonJS({
  "node_modules/lodash/_baseIsEqualDeep.js"(exports, module) {
    var Stack = require_Stack();
    var equalArrays = require_equalArrays();
    var equalByTag = require_equalByTag();
    var equalObjects = require_equalObjects();
    var getTag = require_getTag();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isTypedArray = require_isTypedArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var objectTag = "[object Object]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc2, stack) {
      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc2, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc2, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc2(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, bitmask, customizer, equalFunc2, stack);
    }
    module.exports = baseIsEqualDeep;
  }
});

// node_modules/lodash/_baseIsEqual.js
var require_baseIsEqual = __commonJS({
  "node_modules/lodash/_baseIsEqual.js"(exports, module) {
    var baseIsEqualDeep = require_baseIsEqualDeep();
    var isObjectLike = require_isObjectLike();
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    module.exports = baseIsEqual;
  }
});

// node_modules/lodash/_baseIsMatch.js
var require_baseIsMatch = __commonJS({
  "node_modules/lodash/_baseIsMatch.js"(exports, module) {
    var Stack = require_Stack();
    var baseIsEqual = require_baseIsEqual();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length, length = index, noCustomizer = !customizer;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    module.exports = baseIsMatch;
  }
});

// node_modules/lodash/_isStrictComparable.js
var require_isStrictComparable = __commonJS({
  "node_modules/lodash/_isStrictComparable.js"(exports, module) {
    var isObject5 = require_isObject();
    function isStrictComparable(value) {
      return value === value && !isObject5(value);
    }
    module.exports = isStrictComparable;
  }
});

// node_modules/lodash/_getMatchData.js
var require_getMatchData = __commonJS({
  "node_modules/lodash/_getMatchData.js"(exports, module) {
    var isStrictComparable = require_isStrictComparable();
    var keys = require_keys();
    function getMatchData(object) {
      var result = keys(object), length = result.length;
      while (length--) {
        var key = result[length], value = object[key];
        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }
    module.exports = getMatchData;
  }
});

// node_modules/lodash/_matchesStrictComparable.js
var require_matchesStrictComparable = __commonJS({
  "node_modules/lodash/_matchesStrictComparable.js"(exports, module) {
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
      };
    }
    module.exports = matchesStrictComparable;
  }
});

// node_modules/lodash/_baseMatches.js
var require_baseMatches = __commonJS({
  "node_modules/lodash/_baseMatches.js"(exports, module) {
    var baseIsMatch = require_baseIsMatch();
    var getMatchData = require_getMatchData();
    var matchesStrictComparable = require_matchesStrictComparable();
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }
    module.exports = baseMatches;
  }
});

// node_modules/lodash/_isKey.js
var require_isKey = __commonJS({
  "node_modules/lodash/_isKey.js"(exports, module) {
    var isArray = require_isArray();
    var isSymbol = require_isSymbol();
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    module.exports = isKey;
  }
});

// node_modules/lodash/memoize.js
var require_memoize = __commonJS({
  "node_modules/lodash/memoize.js"(exports, module) {
    var MapCache = require_MapCache();
    var FUNC_ERROR_TEXT = "Expected a function";
    function memoize3(func, resolver) {
      if (typeof func != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache3 = memoized.cache;
        if (cache3.has(key)) {
          return cache3.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache3.set(key, result) || cache3;
        return result;
      };
      memoized.cache = new (memoize3.Cache || MapCache)();
      return memoized;
    }
    memoize3.Cache = MapCache;
    module.exports = memoize3;
  }
});

// node_modules/lodash/_memoizeCapped.js
var require_memoizeCapped = __commonJS({
  "node_modules/lodash/_memoizeCapped.js"(exports, module) {
    var memoize3 = require_memoize();
    var MAX_MEMOIZE_SIZE = 500;
    function memoizeCapped(func) {
      var result = memoize3(func, function(key) {
        if (cache3.size === MAX_MEMOIZE_SIZE) {
          cache3.clear();
        }
        return key;
      });
      var cache3 = result.cache;
      return result;
    }
    module.exports = memoizeCapped;
  }
});

// node_modules/lodash/_stringToPath.js
var require_stringToPath = __commonJS({
  "node_modules/lodash/_stringToPath.js"(exports, module) {
    var memoizeCapped = require_memoizeCapped();
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46) {
        result.push("");
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    });
    module.exports = stringToPath;
  }
});

// node_modules/lodash/_castPath.js
var require_castPath = __commonJS({
  "node_modules/lodash/_castPath.js"(exports, module) {
    var isArray = require_isArray();
    var isKey = require_isKey();
    var stringToPath = require_stringToPath();
    var toString = require_toString();
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }
    module.exports = castPath;
  }
});

// node_modules/lodash/_toKey.js
var require_toKey = __commonJS({
  "node_modules/lodash/_toKey.js"(exports, module) {
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module.exports = toKey;
  }
});

// node_modules/lodash/_baseGet.js
var require_baseGet = __commonJS({
  "node_modules/lodash/_baseGet.js"(exports, module) {
    var castPath = require_castPath();
    var toKey = require_toKey();
    function baseGet(object, path) {
      path = castPath(path, object);
      var index = 0, length = path.length;
      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return index && index == length ? object : void 0;
    }
    module.exports = baseGet;
  }
});

// node_modules/lodash/get.js
var require_get = __commonJS({
  "node_modules/lodash/get.js"(exports, module) {
    var baseGet = require_baseGet();
    function get3(object, path, defaultValue) {
      var result = object == null ? void 0 : baseGet(object, path);
      return result === void 0 ? defaultValue : result;
    }
    module.exports = get3;
  }
});

// node_modules/lodash/_baseHasIn.js
var require_baseHasIn = __commonJS({
  "node_modules/lodash/_baseHasIn.js"(exports, module) {
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }
    module.exports = baseHasIn;
  }
});

// node_modules/lodash/_hasPath.js
var require_hasPath = __commonJS({
  "node_modules/lodash/_hasPath.js"(exports, module) {
    var castPath = require_castPath();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isIndex = require_isIndex();
    var isLength = require_isLength();
    var toKey = require_toKey();
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);
      var index = -1, length = path.length, result = false;
      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
    }
    module.exports = hasPath;
  }
});

// node_modules/lodash/hasIn.js
var require_hasIn = __commonJS({
  "node_modules/lodash/hasIn.js"(exports, module) {
    var baseHasIn = require_baseHasIn();
    var hasPath = require_hasPath();
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }
    module.exports = hasIn;
  }
});

// node_modules/lodash/_baseMatchesProperty.js
var require_baseMatchesProperty = __commonJS({
  "node_modules/lodash/_baseMatchesProperty.js"(exports, module) {
    var baseIsEqual = require_baseIsEqual();
    var get3 = require_get();
    var hasIn = require_hasIn();
    var isKey = require_isKey();
    var isStrictComparable = require_isStrictComparable();
    var matchesStrictComparable = require_matchesStrictComparable();
    var toKey = require_toKey();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get3(object, path);
        return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }
    module.exports = baseMatchesProperty;
  }
});

// node_modules/lodash/identity.js
var require_identity = __commonJS({
  "node_modules/lodash/identity.js"(exports, module) {
    function identity(value) {
      return value;
    }
    module.exports = identity;
  }
});

// node_modules/lodash/_basePropertyDeep.js
var require_basePropertyDeep = __commonJS({
  "node_modules/lodash/_basePropertyDeep.js"(exports, module) {
    var baseGet = require_baseGet();
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }
    module.exports = basePropertyDeep;
  }
});

// node_modules/lodash/property.js
var require_property = __commonJS({
  "node_modules/lodash/property.js"(exports, module) {
    var baseProperty = require_baseProperty();
    var basePropertyDeep = require_basePropertyDeep();
    var isKey = require_isKey();
    var toKey = require_toKey();
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }
    module.exports = property;
  }
});

// node_modules/lodash/_baseIteratee.js
var require_baseIteratee = __commonJS({
  "node_modules/lodash/_baseIteratee.js"(exports, module) {
    var baseMatches = require_baseMatches();
    var baseMatchesProperty = require_baseMatchesProperty();
    var identity = require_identity();
    var isArray = require_isArray();
    var property = require_property();
    function baseIteratee(value) {
      if (typeof value == "function") {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == "object") {
        return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }
    module.exports = baseIteratee;
  }
});

// node_modules/lodash/uniqBy.js
var require_uniqBy = __commonJS({
  "node_modules/lodash/uniqBy.js"(exports, module) {
    var baseIteratee = require_baseIteratee();
    var baseUniq = require_baseUniq();
    function uniqBy3(array, iteratee) {
      return array && array.length ? baseUniq(array, baseIteratee(iteratee, 2)) : [];
    }
    module.exports = uniqBy3;
  }
});

// node_modules/lodash/isEqual.js
var require_isEqual = __commonJS({
  "node_modules/lodash/isEqual.js"(exports, module) {
    var baseIsEqual = require_baseIsEqual();
    function isEqual11(value, other) {
      return baseIsEqual(value, other);
    }
    module.exports = isEqual11;
  }
});

// node_modules/lodash/_getPrototype.js
var require_getPrototype = __commonJS({
  "node_modules/lodash/_getPrototype.js"(exports, module) {
    var overArg = require_overArg();
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    module.exports = getPrototype;
  }
});

// node_modules/lodash/isPlainObject.js
var require_isPlainObject = __commonJS({
  "node_modules/lodash/isPlainObject.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var getPrototype = require_getPrototype();
    var isObjectLike = require_isObjectLike();
    var objectTag = "[object Object]";
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectCtorString = funcToString.call(Object);
    function isPlainObject13(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    module.exports = isPlainObject13;
  }
});

// node_modules/lodash/isNumber.js
var require_isNumber = __commonJS({
  "node_modules/lodash/isNumber.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var numberTag = "[object Number]";
    function isNumber3(value) {
      return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
    }
    module.exports = isNumber3;
  }
});

// node_modules/lodash/_arrayEach.js
var require_arrayEach = __commonJS({
  "node_modules/lodash/_arrayEach.js"(exports, module) {
    function arrayEach(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }
    module.exports = arrayEach;
  }
});

// node_modules/lodash/_baseCreate.js
var require_baseCreate = __commonJS({
  "node_modules/lodash/_baseCreate.js"(exports, module) {
    var isObject5 = require_isObject();
    var objectCreate = Object.create;
    var baseCreate = function() {
      function object() {
      }
      return function(proto) {
        if (!isObject5(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    module.exports = baseCreate;
  }
});

// node_modules/lodash/_createBaseFor.js
var require_createBaseFor = __commonJS({
  "node_modules/lodash/_createBaseFor.js"(exports, module) {
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    module.exports = createBaseFor;
  }
});

// node_modules/lodash/_baseFor.js
var require_baseFor = __commonJS({
  "node_modules/lodash/_baseFor.js"(exports, module) {
    var createBaseFor = require_createBaseFor();
    var baseFor = createBaseFor();
    module.exports = baseFor;
  }
});

// node_modules/lodash/_baseForOwn.js
var require_baseForOwn = __commonJS({
  "node_modules/lodash/_baseForOwn.js"(exports, module) {
    var baseFor = require_baseFor();
    var keys = require_keys();
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }
    module.exports = baseForOwn;
  }
});

// node_modules/lodash/transform.js
var require_transform = __commonJS({
  "node_modules/lodash/transform.js"(exports, module) {
    var arrayEach = require_arrayEach();
    var baseCreate = require_baseCreate();
    var baseForOwn = require_baseForOwn();
    var baseIteratee = require_baseIteratee();
    var getPrototype = require_getPrototype();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isFunction = require_isFunction();
    var isObject5 = require_isObject();
    var isTypedArray = require_isTypedArray();
    function transform2(object, iteratee, accumulator) {
      var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
      iteratee = baseIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor() : [];
        } else if (isObject5(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        } else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
        return iteratee(accumulator, value, index, object2);
      });
      return accumulator;
    }
    module.exports = transform2;
  }
});

// node_modules/lodash/_defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/lodash/_defineProperty.js"(exports, module) {
    var getNative = require_getNative();
    var defineProperty2 = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    module.exports = defineProperty2;
  }
});

// node_modules/lodash/_baseAssignValue.js
var require_baseAssignValue = __commonJS({
  "node_modules/lodash/_baseAssignValue.js"(exports, module) {
    var defineProperty2 = require_defineProperty();
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty2) {
        defineProperty2(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    module.exports = baseAssignValue;
  }
});

// node_modules/lodash/_arrayAggregator.js
var require_arrayAggregator = __commonJS({
  "node_modules/lodash/_arrayAggregator.js"(exports, module) {
    function arrayAggregator(array, setter, iteratee, accumulator) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        var value = array[index];
        setter(accumulator, value, iteratee(value), array);
      }
      return accumulator;
    }
    module.exports = arrayAggregator;
  }
});

// node_modules/lodash/_createBaseEach.js
var require_createBaseEach = __commonJS({
  "node_modules/lodash/_createBaseEach.js"(exports, module) {
    var isArrayLike = require_isArrayLike();
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
        while (fromRight ? index-- : ++index < length) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }
    module.exports = createBaseEach;
  }
});

// node_modules/lodash/_baseEach.js
var require_baseEach = __commonJS({
  "node_modules/lodash/_baseEach.js"(exports, module) {
    var baseForOwn = require_baseForOwn();
    var createBaseEach = require_createBaseEach();
    var baseEach = createBaseEach(baseForOwn);
    module.exports = baseEach;
  }
});

// node_modules/lodash/_baseAggregator.js
var require_baseAggregator = __commonJS({
  "node_modules/lodash/_baseAggregator.js"(exports, module) {
    var baseEach = require_baseEach();
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection2) {
        setter(accumulator, value, iteratee(value), collection2);
      });
      return accumulator;
    }
    module.exports = baseAggregator;
  }
});

// node_modules/lodash/_createAggregator.js
var require_createAggregator = __commonJS({
  "node_modules/lodash/_createAggregator.js"(exports, module) {
    var arrayAggregator = require_arrayAggregator();
    var baseAggregator = require_baseAggregator();
    var baseIteratee = require_baseIteratee();
    var isArray = require_isArray();
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
        return func(collection, setter, baseIteratee(iteratee, 2), accumulator);
      };
    }
    module.exports = createAggregator;
  }
});

// node_modules/lodash/groupBy.js
var require_groupBy = __commonJS({
  "node_modules/lodash/groupBy.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var createAggregator = require_createAggregator();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var groupBy2 = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });
    module.exports = groupBy2;
  }
});

// node_modules/lodash/uniq.js
var require_uniq = __commonJS({
  "node_modules/lodash/uniq.js"(exports, module) {
    var baseUniq = require_baseUniq();
    function uniq3(array) {
      return array && array.length ? baseUniq(array) : [];
    }
    module.exports = uniq3;
  }
});

// node_modules/lodash/_baseClamp.js
var require_baseClamp = __commonJS({
  "node_modules/lodash/_baseClamp.js"(exports, module) {
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== void 0) {
          number = number <= upper ? number : upper;
        }
        if (lower !== void 0) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }
    module.exports = baseClamp;
  }
});

// node_modules/lodash/endsWith.js
var require_endsWith = __commonJS({
  "node_modules/lodash/endsWith.js"(exports, module) {
    var baseClamp = require_baseClamp();
    var baseToString = require_baseToString();
    var toInteger = require_toInteger();
    var toString = require_toString();
    function endsWith2(string, target, position2) {
      string = toString(string);
      target = baseToString(target);
      var length = string.length;
      position2 = position2 === void 0 ? length : baseClamp(toInteger(position2), 0, length);
      var end = position2;
      position2 -= target.length;
      return position2 >= 0 && string.slice(position2, end) == target;
    }
    module.exports = endsWith2;
  }
});

// node_modules/lodash/isEmpty.js
var require_isEmpty = __commonJS({
  "node_modules/lodash/isEmpty.js"(exports, module) {
    var baseKeys = require_baseKeys();
    var getTag = require_getTag();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isArrayLike = require_isArrayLike();
    var isBuffer = require_isBuffer();
    var isPrototype = require_isPrototype();
    var isTypedArray = require_isTypedArray();
    var mapTag = "[object Map]";
    var setTag = "[object Set]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function isEmpty5(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }
    module.exports = isEmpty5;
  }
});

// node_modules/lodash/startsWith.js
var require_startsWith = __commonJS({
  "node_modules/lodash/startsWith.js"(exports, module) {
    var baseClamp = require_baseClamp();
    var baseToString = require_baseToString();
    var toInteger = require_toInteger();
    var toString = require_toString();
    function startsWith2(string, target, position2) {
      string = toString(string);
      position2 = position2 == null ? 0 : baseClamp(toInteger(position2), 0, string.length);
      target = baseToString(target);
      return string.slice(position2, position2 + target.length) == target;
    }
    module.exports = startsWith2;
  }
});

// node_modules/lodash/_assignValue.js
var require_assignValue = __commonJS({
  "node_modules/lodash/_assignValue.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    module.exports = assignValue;
  }
});

// node_modules/lodash/_copyObject.js
var require_copyObject = __commonJS({
  "node_modules/lodash/_copyObject.js"(exports, module) {
    var assignValue = require_assignValue();
    var baseAssignValue = require_baseAssignValue();
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index = -1, length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    module.exports = copyObject;
  }
});

// node_modules/lodash/_apply.js
var require_apply = __commonJS({
  "node_modules/lodash/_apply.js"(exports, module) {
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    module.exports = apply;
  }
});

// node_modules/lodash/_overRest.js
var require_overRest = __commonJS({
  "node_modules/lodash/_overRest.js"(exports, module) {
    var apply = require_apply();
    var nativeMax = Math.max;
    function overRest(func, start, transform2) {
      start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform2(array);
        return apply(func, this, otherArgs);
      };
    }
    module.exports = overRest;
  }
});

// node_modules/lodash/constant.js
var require_constant = __commonJS({
  "node_modules/lodash/constant.js"(exports, module) {
    function constant(value) {
      return function() {
        return value;
      };
    }
    module.exports = constant;
  }
});

// node_modules/lodash/_baseSetToString.js
var require_baseSetToString = __commonJS({
  "node_modules/lodash/_baseSetToString.js"(exports, module) {
    var constant = require_constant();
    var defineProperty2 = require_defineProperty();
    var identity = require_identity();
    var baseSetToString = !defineProperty2 ? identity : function(func, string) {
      return defineProperty2(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
      });
    };
    module.exports = baseSetToString;
  }
});

// node_modules/lodash/_shortOut.js
var require_shortOut = __commonJS({
  "node_modules/lodash/_shortOut.js"(exports, module) {
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var nativeNow = Date.now;
    function shortOut(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    module.exports = shortOut;
  }
});

// node_modules/lodash/_setToString.js
var require_setToString = __commonJS({
  "node_modules/lodash/_setToString.js"(exports, module) {
    var baseSetToString = require_baseSetToString();
    var shortOut = require_shortOut();
    var setToString = shortOut(baseSetToString);
    module.exports = setToString;
  }
});

// node_modules/lodash/_baseRest.js
var require_baseRest = __commonJS({
  "node_modules/lodash/_baseRest.js"(exports, module) {
    var identity = require_identity();
    var overRest = require_overRest();
    var setToString = require_setToString();
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + "");
    }
    module.exports = baseRest;
  }
});

// node_modules/lodash/_isIterateeCall.js
var require_isIterateeCall = __commonJS({
  "node_modules/lodash/_isIterateeCall.js"(exports, module) {
    var eq = require_eq();
    var isArrayLike = require_isArrayLike();
    var isIndex = require_isIndex();
    var isObject5 = require_isObject();
    function isIterateeCall(value, index, object) {
      if (!isObject5(object)) {
        return false;
      }
      var type = typeof index;
      if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
        return eq(object[index], value);
      }
      return false;
    }
    module.exports = isIterateeCall;
  }
});

// node_modules/lodash/_createAssigner.js
var require_createAssigner = __commonJS({
  "node_modules/lodash/_createAssigner.js"(exports, module) {
    var baseRest = require_baseRest();
    var isIterateeCall = require_isIterateeCall();
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }
    module.exports = createAssigner;
  }
});

// node_modules/lodash/_nativeKeysIn.js
var require_nativeKeysIn = __commonJS({
  "node_modules/lodash/_nativeKeysIn.js"(exports, module) {
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = nativeKeysIn;
  }
});

// node_modules/lodash/_baseKeysIn.js
var require_baseKeysIn = __commonJS({
  "node_modules/lodash/_baseKeysIn.js"(exports, module) {
    var isObject5 = require_isObject();
    var isPrototype = require_isPrototype();
    var nativeKeysIn = require_nativeKeysIn();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeysIn(object) {
      if (!isObject5(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeysIn;
  }
});

// node_modules/lodash/keysIn.js
var require_keysIn = __commonJS({
  "node_modules/lodash/keysIn.js"(exports, module) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeysIn = require_baseKeysIn();
    var isArrayLike = require_isArrayLike();
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    module.exports = keysIn;
  }
});

// node_modules/lodash/assignInWith.js
var require_assignInWith = __commonJS({
  "node_modules/lodash/assignInWith.js"(exports, module) {
    var copyObject = require_copyObject();
    var createAssigner = require_createAssigner();
    var keysIn = require_keysIn();
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });
    module.exports = assignInWith;
  }
});

// node_modules/lodash/isError.js
var require_isError = __commonJS({
  "node_modules/lodash/isError.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var isPlainObject13 = require_isPlainObject();
    var domExcTag = "[object DOMException]";
    var errorTag = "[object Error]";
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject13(value);
    }
    module.exports = isError;
  }
});

// node_modules/lodash/attempt.js
var require_attempt = __commonJS({
  "node_modules/lodash/attempt.js"(exports, module) {
    var apply = require_apply();
    var baseRest = require_baseRest();
    var isError = require_isError();
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, void 0, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });
    module.exports = attempt;
  }
});

// node_modules/lodash/_baseValues.js
var require_baseValues = __commonJS({
  "node_modules/lodash/_baseValues.js"(exports, module) {
    var arrayMap = require_arrayMap();
    function baseValues(object, props) {
      return arrayMap(props, function(key) {
        return object[key];
      });
    }
    module.exports = baseValues;
  }
});

// node_modules/lodash/_customDefaultsAssignIn.js
var require_customDefaultsAssignIn = __commonJS({
  "node_modules/lodash/_customDefaultsAssignIn.js"(exports, module) {
    var eq = require_eq();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === void 0 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
        return srcValue;
      }
      return objValue;
    }
    module.exports = customDefaultsAssignIn;
  }
});

// node_modules/lodash/_escapeStringChar.js
var require_escapeStringChar = __commonJS({
  "node_modules/lodash/_escapeStringChar.js"(exports, module) {
    var stringEscapes = {
      "\\": "\\",
      "'": "'",
      "\n": "n",
      "\r": "r",
      "\u2028": "u2028",
      "\u2029": "u2029"
    };
    function escapeStringChar(chr) {
      return "\\" + stringEscapes[chr];
    }
    module.exports = escapeStringChar;
  }
});

// node_modules/lodash/_reInterpolate.js
var require_reInterpolate = __commonJS({
  "node_modules/lodash/_reInterpolate.js"(exports, module) {
    var reInterpolate = /<%=([\s\S]+?)%>/g;
    module.exports = reInterpolate;
  }
});

// node_modules/lodash/_reEscape.js
var require_reEscape = __commonJS({
  "node_modules/lodash/_reEscape.js"(exports, module) {
    var reEscape = /<%-([\s\S]+?)%>/g;
    module.exports = reEscape;
  }
});

// node_modules/lodash/_reEvaluate.js
var require_reEvaluate = __commonJS({
  "node_modules/lodash/_reEvaluate.js"(exports, module) {
    var reEvaluate = /<%([\s\S]+?)%>/g;
    module.exports = reEvaluate;
  }
});

// node_modules/lodash/templateSettings.js
var require_templateSettings = __commonJS({
  "node_modules/lodash/templateSettings.js"(exports, module) {
    var escape3 = require_escape();
    var reEscape = require_reEscape();
    var reEvaluate = require_reEvaluate();
    var reInterpolate = require_reInterpolate();
    var templateSettings = {
      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      "escape": reEscape,
      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      "evaluate": reEvaluate,
      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      "interpolate": reInterpolate,
      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      "variable": "",
      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      "imports": {
        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        "_": { "escape": escape3 }
      }
    };
    module.exports = templateSettings;
  }
});

// node_modules/lodash/template.js
var require_template = __commonJS({
  "node_modules/lodash/template.js"(exports, module) {
    var assignInWith = require_assignInWith();
    var attempt = require_attempt();
    var baseValues = require_baseValues();
    var customDefaultsAssignIn = require_customDefaultsAssignIn();
    var escapeStringChar = require_escapeStringChar();
    var isError = require_isError();
    var isIterateeCall = require_isIterateeCall();
    var keys = require_keys();
    var reInterpolate = require_reInterpolate();
    var templateSettings = require_templateSettings();
    var toString = require_toString();
    var INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
    var reEmptyStringLeading = /\b__p \+= '';/g;
    var reEmptyStringMiddle = /\b(__p \+=) '' \+/g;
    var reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    var reNoMatch = /($^)/;
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function template2(string, options, guard) {
      var settings = templateSettings.imports._.templateSettings || templateSettings;
      if (guard && isIterateeCall(string, options, guard)) {
        options = void 0;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);
      var imports2 = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports2), importsValues = baseValues(imports2, importsKeys);
      var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
        "g"
      );
      var sourceURL = hasOwnProperty.call(options, "sourceURL") ? "//# sourceURL=" + (options.sourceURL + "").replace(/\s/g, " ") + "\n" : "";
      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset2) {
        interpolateValue || (interpolateValue = esTemplateValue);
        source += string.slice(index, offset2).replace(reUnescapedString, escapeStringChar);
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset2 + match.length;
        return match;
      });
      source += "';\n";
      var variable = hasOwnProperty.call(options, "variable") && options.variable;
      if (!variable) {
        source = "with (obj) {\n" + source + "\n}\n";
      } else if (reForbiddenIdentifierChars.test(variable)) {
        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
      }
      source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
      source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
      var result = attempt(function() {
        return Function(importsKeys, sourceURL + "return " + source).apply(void 0, importsValues);
      });
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }
    module.exports = template2;
  }
});

// node_modules/lodash/isString.js
var require_isString = __commonJS({
  "node_modules/lodash/isString.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isArray = require_isArray();
    var isObjectLike = require_isObjectLike();
    var stringTag = "[object String]";
    function isString3(value) {
      return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
    }
    module.exports = isString3;
  }
});

// node_modules/lodash/isBoolean.js
var require_isBoolean = __commonJS({
  "node_modules/lodash/isBoolean.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var boolTag = "[object Boolean]";
    function isBoolean2(value) {
      return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
    }
    module.exports = isBoolean2;
  }
});

// node_modules/lodash/last.js
var require_last = __commonJS({
  "node_modules/lodash/last.js"(exports, module) {
    function last2(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : void 0;
    }
    module.exports = last2;
  }
});

// node_modules/lodash/_assignMergeValue.js
var require_assignMergeValue = __commonJS({
  "node_modules/lodash/_assignMergeValue.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    function assignMergeValue(object, key, value) {
      if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    module.exports = assignMergeValue;
  }
});

// node_modules/lodash/_cloneBuffer.js
var require_cloneBuffer = __commonJS({
  "node_modules/lodash/_cloneBuffer.js"(exports, module) {
    var root = require_root();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer = moduleExports ? root.Buffer : void 0;
    var allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    module.exports = cloneBuffer;
  }
});

// node_modules/lodash/_cloneArrayBuffer.js
var require_cloneArrayBuffer = __commonJS({
  "node_modules/lodash/_cloneArrayBuffer.js"(exports, module) {
    var Uint8Array2 = require_Uint8Array();
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
      return result;
    }
    module.exports = cloneArrayBuffer;
  }
});

// node_modules/lodash/_cloneTypedArray.js
var require_cloneTypedArray = __commonJS({
  "node_modules/lodash/_cloneTypedArray.js"(exports, module) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    module.exports = cloneTypedArray;
  }
});

// node_modules/lodash/_copyArray.js
var require_copyArray = __commonJS({
  "node_modules/lodash/_copyArray.js"(exports, module) {
    function copyArray(source, array) {
      var index = -1, length = source.length;
      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }
    module.exports = copyArray;
  }
});

// node_modules/lodash/_initCloneObject.js
var require_initCloneObject = __commonJS({
  "node_modules/lodash/_initCloneObject.js"(exports, module) {
    var baseCreate = require_baseCreate();
    var getPrototype = require_getPrototype();
    var isPrototype = require_isPrototype();
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    module.exports = initCloneObject;
  }
});

// node_modules/lodash/isArrayLikeObject.js
var require_isArrayLikeObject = __commonJS({
  "node_modules/lodash/isArrayLikeObject.js"(exports, module) {
    var isArrayLike = require_isArrayLike();
    var isObjectLike = require_isObjectLike();
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    module.exports = isArrayLikeObject;
  }
});

// node_modules/lodash/_safeGet.js
var require_safeGet = __commonJS({
  "node_modules/lodash/_safeGet.js"(exports, module) {
    function safeGet(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    module.exports = safeGet;
  }
});

// node_modules/lodash/toPlainObject.js
var require_toPlainObject = __commonJS({
  "node_modules/lodash/toPlainObject.js"(exports, module) {
    var copyObject = require_copyObject();
    var keysIn = require_keysIn();
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    module.exports = toPlainObject;
  }
});

// node_modules/lodash/_baseMergeDeep.js
var require_baseMergeDeep = __commonJS({
  "node_modules/lodash/_baseMergeDeep.js"(exports, module) {
    var assignMergeValue = require_assignMergeValue();
    var cloneBuffer = require_cloneBuffer();
    var cloneTypedArray = require_cloneTypedArray();
    var copyArray = require_copyArray();
    var initCloneObject = require_initCloneObject();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isArrayLikeObject = require_isArrayLikeObject();
    var isBuffer = require_isBuffer();
    var isFunction = require_isFunction();
    var isObject5 = require_isObject();
    var isPlainObject13 = require_isPlainObject();
    var isTypedArray = require_isTypedArray();
    var safeGet = require_safeGet();
    var toPlainObject = require_toPlainObject();
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject13(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject5(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    module.exports = baseMergeDeep;
  }
});

// node_modules/lodash/_baseMerge.js
var require_baseMerge = __commonJS({
  "node_modules/lodash/_baseMerge.js"(exports, module) {
    var Stack = require_Stack();
    var assignMergeValue = require_assignMergeValue();
    var baseFor = require_baseFor();
    var baseMergeDeep = require_baseMergeDeep();
    var isObject5 = require_isObject();
    var keysIn = require_keysIn();
    var safeGet = require_safeGet();
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack());
        if (isObject5(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    module.exports = baseMerge;
  }
});

// node_modules/lodash/merge.js
var require_merge = __commonJS({
  "node_modules/lodash/merge.js"(exports, module) {
    var baseMerge = require_baseMerge();
    var createAssigner = require_createAssigner();
    var merge2 = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });
    module.exports = merge2;
  }
});

// node_modules/lodash/isNaN.js
var require_isNaN = __commonJS({
  "node_modules/lodash/isNaN.js"(exports, module) {
    var isNumber3 = require_isNumber();
    function isNaN3(value) {
      return isNumber3(value) && value != +value;
    }
    module.exports = isNaN3;
  }
});

// node_modules/amis-core/node_modules/qs/lib/formats.js
var require_formats = __commonJS({
  "node_modules/amis-core/node_modules/qs/lib/formats.js"(exports, module) {
    "use strict";
    var replace = String.prototype.replace;
    var percentTwenties = /%20/g;
    var Format = {
      RFC1738: "RFC1738",
      RFC3986: "RFC3986"
    };
    module.exports = {
      "default": Format.RFC3986,
      formatters: {
        RFC1738: function(value) {
          return replace.call(value, percentTwenties, "+");
        },
        RFC3986: function(value) {
          return String(value);
        }
      },
      RFC1738: Format.RFC1738,
      RFC3986: Format.RFC3986
    };
  }
});

// node_modules/amis-core/node_modules/qs/lib/utils.js
var require_utils = __commonJS({
  "node_modules/amis-core/node_modules/qs/lib/utils.js"(exports, module) {
    "use strict";
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var hexTable = function() {
      var array = [];
      for (var i = 0; i < 256; ++i) {
        array.push("%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase());
      }
      return array;
    }();
    var compactQueue = function compactQueue2(queue) {
      while (queue.length > 1) {
        var item = queue.pop();
        var obj = item.obj[item.prop];
        if (isArray(obj)) {
          var compacted = [];
          for (var j = 0; j < obj.length; ++j) {
            if (typeof obj[j] !== "undefined") {
              compacted.push(obj[j]);
            }
          }
          item.obj[item.prop] = compacted;
        }
      }
    };
    var arrayToObject = function arrayToObject2(source, options) {
      var obj = options && options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      for (var i = 0; i < source.length; ++i) {
        if (typeof source[i] !== "undefined") {
          obj[i] = source[i];
        }
      }
      return obj;
    };
    var merge2 = function merge3(target, source, options) {
      if (!source) {
        return target;
      }
      if (typeof source !== "object") {
        if (isArray(target)) {
          target.push(source);
        } else if (target && typeof target === "object") {
          if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
            target[source] = true;
          }
        } else {
          return [target, source];
        }
        return target;
      }
      if (!target || typeof target !== "object") {
        return [target].concat(source);
      }
      var mergeTarget = target;
      if (isArray(target) && !isArray(source)) {
        mergeTarget = arrayToObject(target, options);
      }
      if (isArray(target) && isArray(source)) {
        source.forEach(function(item, i) {
          if (has.call(target, i)) {
            var targetItem = target[i];
            if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
              target[i] = merge3(targetItem, item, options);
            } else {
              target.push(item);
            }
          } else {
            target[i] = item;
          }
        });
        return target;
      }
      return Object.keys(source).reduce(function(acc, key) {
        var value = source[key];
        if (has.call(acc, key)) {
          acc[key] = merge3(acc[key], value, options);
        } else {
          acc[key] = value;
        }
        return acc;
      }, mergeTarget);
    };
    var assign = function assignSingleSource(target, source) {
      return Object.keys(source).reduce(function(acc, key) {
        acc[key] = source[key];
        return acc;
      }, target);
    };
    var decode = function(str, decoder, charset) {
      var strWithoutPlus = str.replace(/\+/g, " ");
      if (charset === "iso-8859-1") {
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
      }
      try {
        return decodeURIComponent(strWithoutPlus);
      } catch (e) {
        return strWithoutPlus;
      }
    };
    var encode = function encode2(str, defaultEncoder, charset, kind, format2) {
      if (str.length === 0) {
        return str;
      }
      var string = str;
      if (typeof str === "symbol") {
        string = Symbol.prototype.toString.call(str);
      } else if (typeof str !== "string") {
        string = String(str);
      }
      if (charset === "iso-8859-1") {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
          return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
        });
      }
      var out = "";
      for (var i = 0; i < string.length; ++i) {
        var c = string.charCodeAt(i);
        if (c === 45 || c === 46 || c === 95 || c === 126 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 || format2 === formats.RFC1738 && (c === 40 || c === 41)) {
          out += string.charAt(i);
          continue;
        }
        if (c < 128) {
          out = out + hexTable[c];
          continue;
        }
        if (c < 2048) {
          out = out + (hexTable[192 | c >> 6] + hexTable[128 | c & 63]);
          continue;
        }
        if (c < 55296 || c >= 57344) {
          out = out + (hexTable[224 | c >> 12] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63]);
          continue;
        }
        i += 1;
        c = 65536 + ((c & 1023) << 10 | string.charCodeAt(i) & 1023);
        out += hexTable[240 | c >> 18] + hexTable[128 | c >> 12 & 63] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
      }
      return out;
    };
    var compact = function compact2(value) {
      var queue = [{ obj: { o: value }, prop: "o" }];
      var refs = [];
      for (var i = 0; i < queue.length; ++i) {
        var item = queue[i];
        var obj = item.obj[item.prop];
        var keys = Object.keys(obj);
        for (var j = 0; j < keys.length; ++j) {
          var key = keys[j];
          var val = obj[key];
          if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
            queue.push({ obj, prop: key });
            refs.push(val);
          }
        }
      }
      compactQueue(queue);
      return value;
    };
    var isRegExp = function isRegExp2(obj) {
      return Object.prototype.toString.call(obj) === "[object RegExp]";
    };
    var isBuffer = function isBuffer2(obj) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
    };
    var combine = function combine2(a, b) {
      return [].concat(a, b);
    };
    var maybeMap = function maybeMap2(val, fn) {
      if (isArray(val)) {
        var mapped = [];
        for (var i = 0; i < val.length; i += 1) {
          mapped.push(fn(val[i]));
        }
        return mapped;
      }
      return fn(val);
    };
    module.exports = {
      arrayToObject,
      assign,
      combine,
      compact,
      decode,
      encode,
      isBuffer,
      isRegExp,
      maybeMap,
      merge: merge2
    };
  }
});

// node_modules/amis-core/node_modules/qs/lib/stringify.js
var require_stringify = __commonJS({
  "node_modules/amis-core/node_modules/qs/lib/stringify.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var arrayPrefixGenerators = {
      brackets: function brackets(prefix) {
        return prefix + "[]";
      },
      comma: "comma",
      indices: function indices(prefix, key) {
        return prefix + "[" + key + "]";
      },
      repeat: function repeat(prefix) {
        return prefix;
      }
    };
    var isArray = Array.isArray;
    var split = String.prototype.split;
    var push = Array.prototype.push;
    var pushToArray = function(arr, valueOrArray) {
      push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
    };
    var toISO = Date.prototype.toISOString;
    var defaultFormat = formats["default"];
    var defaults = {
      addQueryPrefix: false,
      allowDots: false,
      charset: "utf-8",
      charsetSentinel: false,
      delimiter: "&",
      encode: true,
      encoder: utils.encode,
      encodeValuesOnly: false,
      format: defaultFormat,
      formatter: formats.formatters[defaultFormat],
      // deprecated
      indices: false,
      serializeDate: function serializeDate(date) {
        return toISO.call(date);
      },
      skipNulls: false,
      strictNullHandling: false
    };
    var isNonNullishPrimitive = function isNonNullishPrimitive2(v) {
      return typeof v === "string" || typeof v === "number" || typeof v === "boolean" || typeof v === "symbol" || typeof v === "bigint";
    };
    var stringify = function stringify2(object, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter2, sort, allowDots, serializeDate, format2, formatter, encodeValuesOnly, charset) {
      var obj = object;
      if (typeof filter2 === "function") {
        obj = filter2(prefix, obj);
      } else if (obj instanceof Date) {
        obj = serializeDate(obj);
      } else if (generateArrayPrefix === "comma" && isArray(obj)) {
        obj = utils.maybeMap(obj, function(value2) {
          if (value2 instanceof Date) {
            return serializeDate(value2);
          }
          return value2;
        });
      }
      if (obj === null) {
        if (strictNullHandling) {
          return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, "key", format2) : prefix;
        }
        obj = "";
      }
      if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
        if (encoder) {
          var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, "key", format2);
          if (generateArrayPrefix === "comma" && encodeValuesOnly) {
            var valuesArray = split.call(String(obj), ",");
            var valuesJoined = "";
            for (var i = 0; i < valuesArray.length; ++i) {
              valuesJoined += (i === 0 ? "" : ",") + formatter(encoder(valuesArray[i], defaults.encoder, charset, "value", format2));
            }
            return [formatter(keyValue) + "=" + valuesJoined];
          }
          return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults.encoder, charset, "value", format2))];
        }
        return [formatter(prefix) + "=" + formatter(String(obj))];
      }
      var values2 = [];
      if (typeof obj === "undefined") {
        return values2;
      }
      var objKeys;
      if (generateArrayPrefix === "comma" && isArray(obj)) {
        objKeys = [{ value: obj.length > 0 ? obj.join(",") || null : void 0 }];
      } else if (isArray(filter2)) {
        objKeys = filter2;
      } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
      }
      for (var j = 0; j < objKeys.length; ++j) {
        var key = objKeys[j];
        var value = typeof key === "object" && typeof key.value !== "undefined" ? key.value : obj[key];
        if (skipNulls && value === null) {
          continue;
        }
        var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(prefix, key) : prefix : prefix + (allowDots ? "." + key : "[" + key + "]");
        pushToArray(values2, stringify2(
          value,
          keyPrefix,
          generateArrayPrefix,
          strictNullHandling,
          skipNulls,
          encoder,
          filter2,
          sort,
          allowDots,
          serializeDate,
          format2,
          formatter,
          encodeValuesOnly,
          charset
        ));
      }
      return values2;
    };
    var normalizeStringifyOptions = function normalizeStringifyOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
        throw new TypeError("Encoder has to be a function.");
      }
      var charset = opts.charset || defaults.charset;
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var format2 = formats["default"];
      if (typeof opts.format !== "undefined") {
        if (!has.call(formats.formatters, opts.format)) {
          throw new TypeError("Unknown format option provided.");
        }
        format2 = opts.format;
      }
      var formatter = formats.formatters[format2];
      var filter2 = defaults.filter;
      if (typeof opts.filter === "function" || isArray(opts.filter)) {
        filter2 = opts.filter;
      }
      return {
        addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults.addQueryPrefix,
        allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        delimiter: typeof opts.delimiter === "undefined" ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === "boolean" ? opts.encode : defaults.encode,
        encoder: typeof opts.encoder === "function" ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter: filter2,
        format: format2,
        formatter,
        serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults.skipNulls,
        sort: typeof opts.sort === "function" ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module.exports = function(object, opts) {
      var obj = object;
      var options = normalizeStringifyOptions(opts);
      var objKeys;
      var filter2;
      if (typeof options.filter === "function") {
        filter2 = options.filter;
        obj = filter2("", obj);
      } else if (isArray(options.filter)) {
        filter2 = options.filter;
        objKeys = filter2;
      }
      var keys = [];
      if (typeof obj !== "object" || obj === null) {
        return "";
      }
      var arrayFormat;
      if (opts && opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
      } else if (opts && "indices" in opts) {
        arrayFormat = opts.indices ? "indices" : "repeat";
      } else {
        arrayFormat = "indices";
      }
      var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
      if (!objKeys) {
        objKeys = Object.keys(obj);
      }
      if (options.sort) {
        objKeys.sort(options.sort);
      }
      for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];
        if (options.skipNulls && obj[key] === null) {
          continue;
        }
        pushToArray(keys, stringify(
          obj[key],
          key,
          generateArrayPrefix,
          options.strictNullHandling,
          options.skipNulls,
          options.encode ? options.encoder : null,
          options.filter,
          options.sort,
          options.allowDots,
          options.serializeDate,
          options.format,
          options.formatter,
          options.encodeValuesOnly,
          options.charset
        ));
      }
      var joined = keys.join(options.delimiter);
      var prefix = options.addQueryPrefix === true ? "?" : "";
      if (options.charsetSentinel) {
        if (options.charset === "iso-8859-1") {
          prefix += "utf8=%26%2310003%3B&";
        } else {
          prefix += "utf8=%E2%9C%93&";
        }
      }
      return joined.length > 0 ? prefix + joined : "";
    };
  }
});

// node_modules/amis-core/node_modules/qs/lib/parse.js
var require_parse = __commonJS({
  "node_modules/amis-core/node_modules/qs/lib/parse.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var defaults = {
      allowDots: false,
      allowPrototypes: false,
      arrayLimit: 20,
      charset: "utf-8",
      charsetSentinel: false,
      comma: false,
      decoder: utils.decode,
      delimiter: "&",
      depth: 5,
      ignoreQueryPrefix: false,
      interpretNumericEntities: false,
      parameterLimit: 1e3,
      parseArrays: true,
      plainObjects: false,
      strictNullHandling: false
    };
    var interpretNumericEntities = function(str) {
      return str.replace(/&#(\d+);/g, function($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
      });
    };
    var parseArrayValue = function(val, options) {
      if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) {
        return val.split(",");
      }
      return val;
    };
    var isoSentinel = "utf8=%26%2310003%3B";
    var charsetSentinel = "utf8=%E2%9C%93";
    var parseValues = function parseQueryStringValues(str, options) {
      var obj = {};
      var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
      var limit = options.parameterLimit === Infinity ? void 0 : options.parameterLimit;
      var parts = cleanStr.split(options.delimiter, limit);
      var skipIndex = -1;
      var i;
      var charset = options.charset;
      if (options.charsetSentinel) {
        for (i = 0; i < parts.length; ++i) {
          if (parts[i].indexOf("utf8=") === 0) {
            if (parts[i] === charsetSentinel) {
              charset = "utf-8";
            } else if (parts[i] === isoSentinel) {
              charset = "iso-8859-1";
            }
            skipIndex = i;
            i = parts.length;
          }
        }
      }
      for (i = 0; i < parts.length; ++i) {
        if (i === skipIndex) {
          continue;
        }
        var part = parts[i];
        var bracketEqualsPos = part.indexOf("]=");
        var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
        var key, val;
        if (pos === -1) {
          key = options.decoder(part, defaults.decoder, charset, "key");
          val = options.strictNullHandling ? null : "";
        } else {
          key = options.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
          val = utils.maybeMap(
            parseArrayValue(part.slice(pos + 1), options),
            function(encodedVal) {
              return options.decoder(encodedVal, defaults.decoder, charset, "value");
            }
          );
        }
        if (val && options.interpretNumericEntities && charset === "iso-8859-1") {
          val = interpretNumericEntities(val);
        }
        if (part.indexOf("[]=") > -1) {
          val = isArray(val) ? [val] : val;
        }
        if (has.call(obj, key)) {
          obj[key] = utils.combine(obj[key], val);
        } else {
          obj[key] = val;
        }
      }
      return obj;
    };
    var parseObject = function(chain, val, options, valuesParsed) {
      var leaf = valuesParsed ? val : parseArrayValue(val, options);
      for (var i = chain.length - 1; i >= 0; --i) {
        var obj;
        var root = chain[i];
        if (root === "[]" && options.parseArrays) {
          obj = [].concat(leaf);
        } else {
          obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
          var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
          var index = parseInt(cleanRoot, 10);
          if (!options.parseArrays && cleanRoot === "") {
            obj = { 0: leaf };
          } else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && (options.parseArrays && index <= options.arrayLimit)) {
            obj = [];
            obj[index] = leaf;
          } else if (cleanRoot !== "__proto__") {
            obj[cleanRoot] = leaf;
          }
        }
        leaf = obj;
      }
      return leaf;
    };
    var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
      if (!givenKey) {
        return;
      }
      var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
      var brackets = /(\[[^[\]]*])/;
      var child = /(\[[^[\]]*])/g;
      var segment = options.depth > 0 && brackets.exec(key);
      var parent = segment ? key.slice(0, segment.index) : key;
      var keys = [];
      if (parent) {
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(parent);
      }
      var i = 0;
      while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
        i += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(segment[1]);
      }
      if (segment) {
        keys.push("[" + key.slice(segment.index) + "]");
      }
      return parseObject(keys, val, options, valuesParsed);
    };
    var normalizeParseOptions = function normalizeParseOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (opts.decoder !== null && opts.decoder !== void 0 && typeof opts.decoder !== "function") {
        throw new TypeError("Decoder has to be a function.");
      }
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
      return {
        allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
        allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
        arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
        decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
        delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
        depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module.exports = function(str, opts) {
      var options = normalizeParseOptions(opts);
      if (str === "" || str === null || typeof str === "undefined") {
        return options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      }
      var tempObj = typeof str === "string" ? parseValues(str, options) : str;
      var obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      var keys = Object.keys(tempObj);
      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options, typeof str === "string");
        obj = utils.merge(obj, newObj, options);
      }
      return utils.compact(obj);
    };
  }
});

// node_modules/amis-core/node_modules/qs/lib/index.js
var require_lib = __commonJS({
  "node_modules/amis-core/node_modules/qs/lib/index.js"(exports, module) {
    "use strict";
    var stringify = require_stringify();
    var parse3 = require_parse();
    var formats = require_formats();
    module.exports = {
      formats,
      parse: parse3,
      stringify
    };
  }
});

// node_modules/lodash/_createFind.js
var require_createFind = __commonJS({
  "node_modules/lodash/_createFind.js"(exports, module) {
    var baseIteratee = require_baseIteratee();
    var isArrayLike = require_isArrayLike();
    var keys = require_keys();
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = baseIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) {
            return iteratee(iterable[key], key, iterable);
          };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : void 0;
      };
    }
    module.exports = createFind;
  }
});

// node_modules/lodash/findIndex.js
var require_findIndex = __commonJS({
  "node_modules/lodash/findIndex.js"(exports, module) {
    var baseFindIndex = require_baseFindIndex();
    var baseIteratee = require_baseIteratee();
    var toInteger = require_toInteger();
    var nativeMax = Math.max;
    function findIndex5(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, baseIteratee(predicate, 3), index);
    }
    module.exports = findIndex5;
  }
});

// node_modules/lodash/find.js
var require_find = __commonJS({
  "node_modules/lodash/find.js"(exports, module) {
    var createFind = require_createFind();
    var findIndex5 = require_findIndex();
    var find11 = createFind(findIndex5);
    module.exports = find11;
  }
});

// node_modules/lodash/_baseAssign.js
var require_baseAssign = __commonJS({
  "node_modules/lodash/_baseAssign.js"(exports, module) {
    var copyObject = require_copyObject();
    var keys = require_keys();
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }
    module.exports = baseAssign;
  }
});

// node_modules/lodash/_baseAssignIn.js
var require_baseAssignIn = __commonJS({
  "node_modules/lodash/_baseAssignIn.js"(exports, module) {
    var copyObject = require_copyObject();
    var keysIn = require_keysIn();
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }
    module.exports = baseAssignIn;
  }
});

// node_modules/lodash/_copySymbols.js
var require_copySymbols = __commonJS({
  "node_modules/lodash/_copySymbols.js"(exports, module) {
    var copyObject = require_copyObject();
    var getSymbols = require_getSymbols();
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }
    module.exports = copySymbols;
  }
});

// node_modules/lodash/_getSymbolsIn.js
var require_getSymbolsIn = __commonJS({
  "node_modules/lodash/_getSymbolsIn.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var getPrototype = require_getPrototype();
    var getSymbols = require_getSymbols();
    var stubArray = require_stubArray();
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };
    module.exports = getSymbolsIn;
  }
});

// node_modules/lodash/_copySymbolsIn.js
var require_copySymbolsIn = __commonJS({
  "node_modules/lodash/_copySymbolsIn.js"(exports, module) {
    var copyObject = require_copyObject();
    var getSymbolsIn = require_getSymbolsIn();
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }
    module.exports = copySymbolsIn;
  }
});

// node_modules/lodash/_getAllKeysIn.js
var require_getAllKeysIn = __commonJS({
  "node_modules/lodash/_getAllKeysIn.js"(exports, module) {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbolsIn = require_getSymbolsIn();
    var keysIn = require_keysIn();
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }
    module.exports = getAllKeysIn;
  }
});

// node_modules/lodash/_initCloneArray.js
var require_initCloneArray = __commonJS({
  "node_modules/lodash/_initCloneArray.js"(exports, module) {
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function initCloneArray(array) {
      var length = array.length, result = new array.constructor(length);
      if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }
    module.exports = initCloneArray;
  }
});

// node_modules/lodash/_cloneDataView.js
var require_cloneDataView = __commonJS({
  "node_modules/lodash/_cloneDataView.js"(exports, module) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }
    module.exports = cloneDataView;
  }
});

// node_modules/lodash/_cloneRegExp.js
var require_cloneRegExp = __commonJS({
  "node_modules/lodash/_cloneRegExp.js"(exports, module) {
    var reFlags = /\w*$/;
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }
    module.exports = cloneRegExp;
  }
});

// node_modules/lodash/_cloneSymbol.js
var require_cloneSymbol = __commonJS({
  "node_modules/lodash/_cloneSymbol.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }
    module.exports = cloneSymbol;
  }
});

// node_modules/lodash/_initCloneByTag.js
var require_initCloneByTag = __commonJS({
  "node_modules/lodash/_initCloneByTag.js"(exports, module) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    var cloneDataView = require_cloneDataView();
    var cloneRegExp = require_cloneRegExp();
    var cloneSymbol = require_cloneSymbol();
    var cloneTypedArray = require_cloneTypedArray();
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);
        case boolTag:
        case dateTag:
          return new Ctor(+object);
        case dataViewTag:
          return cloneDataView(object, isDeep);
        case float32Tag:
        case float64Tag:
        case int8Tag:
        case int16Tag:
        case int32Tag:
        case uint8Tag:
        case uint8ClampedTag:
        case uint16Tag:
        case uint32Tag:
          return cloneTypedArray(object, isDeep);
        case mapTag:
          return new Ctor();
        case numberTag:
        case stringTag:
          return new Ctor(object);
        case regexpTag:
          return cloneRegExp(object);
        case setTag:
          return new Ctor();
        case symbolTag:
          return cloneSymbol(object);
      }
    }
    module.exports = initCloneByTag;
  }
});

// node_modules/lodash/_baseIsMap.js
var require_baseIsMap = __commonJS({
  "node_modules/lodash/_baseIsMap.js"(exports, module) {
    var getTag = require_getTag();
    var isObjectLike = require_isObjectLike();
    var mapTag = "[object Map]";
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }
    module.exports = baseIsMap;
  }
});

// node_modules/lodash/isMap.js
var require_isMap = __commonJS({
  "node_modules/lodash/isMap.js"(exports, module) {
    var baseIsMap = require_baseIsMap();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsMap = nodeUtil && nodeUtil.isMap;
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
    module.exports = isMap;
  }
});

// node_modules/lodash/_baseIsSet.js
var require_baseIsSet = __commonJS({
  "node_modules/lodash/_baseIsSet.js"(exports, module) {
    var getTag = require_getTag();
    var isObjectLike = require_isObjectLike();
    var setTag = "[object Set]";
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }
    module.exports = baseIsSet;
  }
});

// node_modules/lodash/isSet.js
var require_isSet = __commonJS({
  "node_modules/lodash/isSet.js"(exports, module) {
    var baseIsSet = require_baseIsSet();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsSet = nodeUtil && nodeUtil.isSet;
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
    module.exports = isSet;
  }
});

// node_modules/lodash/_baseClone.js
var require_baseClone = __commonJS({
  "node_modules/lodash/_baseClone.js"(exports, module) {
    var Stack = require_Stack();
    var arrayEach = require_arrayEach();
    var assignValue = require_assignValue();
    var baseAssign = require_baseAssign();
    var baseAssignIn = require_baseAssignIn();
    var cloneBuffer = require_cloneBuffer();
    var copyArray = require_copyArray();
    var copySymbols = require_copySymbols();
    var copySymbolsIn = require_copySymbolsIn();
    var getAllKeys = require_getAllKeys();
    var getAllKeysIn = require_getAllKeysIn();
    var getTag = require_getTag();
    var initCloneArray = require_initCloneArray();
    var initCloneByTag = require_initCloneByTag();
    var initCloneObject = require_initCloneObject();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isMap = require_isMap();
    var isObject5 = require_isObject();
    var isSet = require_isSet();
    var keys = require_keys();
    var keysIn = require_keysIn();
    var CLONE_DEEP_FLAG = 1;
    var CLONE_FLAT_FLAG = 2;
    var CLONE_SYMBOLS_FLAG = 4;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== void 0) {
        return result;
      }
      if (!isObject5(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || isFunc && !object) {
          result = isFlat || isFunc ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      stack || (stack = new Stack());
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);
      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key2) {
          result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
        });
      }
      var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
      var props = isArr ? void 0 : keysFunc(value);
      arrayEach(props || value, function(subValue, key2) {
        if (props) {
          key2 = subValue;
          subValue = value[key2];
        }
        assignValue(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
      });
      return result;
    }
    module.exports = baseClone;
  }
});

// node_modules/lodash/_parent.js
var require_parent = __commonJS({
  "node_modules/lodash/_parent.js"(exports, module) {
    var baseGet = require_baseGet();
    var baseSlice = require_baseSlice();
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }
    module.exports = parent;
  }
});

// node_modules/lodash/_baseUnset.js
var require_baseUnset = __commonJS({
  "node_modules/lodash/_baseUnset.js"(exports, module) {
    var castPath = require_castPath();
    var last2 = require_last();
    var parent = require_parent();
    var toKey = require_toKey();
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last2(path))];
    }
    module.exports = baseUnset;
  }
});

// node_modules/lodash/_customOmitClone.js
var require_customOmitClone = __commonJS({
  "node_modules/lodash/_customOmitClone.js"(exports, module) {
    var isPlainObject13 = require_isPlainObject();
    function customOmitClone(value) {
      return isPlainObject13(value) ? void 0 : value;
    }
    module.exports = customOmitClone;
  }
});

// node_modules/lodash/_isFlattenable.js
var require_isFlattenable = __commonJS({
  "node_modules/lodash/_isFlattenable.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }
    module.exports = isFlattenable;
  }
});

// node_modules/lodash/_baseFlatten.js
var require_baseFlatten = __commonJS({
  "node_modules/lodash/_baseFlatten.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var isFlattenable = require_isFlattenable();
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1, length = array.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }
    module.exports = baseFlatten;
  }
});

// node_modules/lodash/flatten.js
var require_flatten = __commonJS({
  "node_modules/lodash/flatten.js"(exports, module) {
    var baseFlatten = require_baseFlatten();
    function flatten3(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }
    module.exports = flatten3;
  }
});

// node_modules/lodash/_flatRest.js
var require_flatRest = __commonJS({
  "node_modules/lodash/_flatRest.js"(exports, module) {
    var flatten3 = require_flatten();
    var overRest = require_overRest();
    var setToString = require_setToString();
    function flatRest(func) {
      return setToString(overRest(func, void 0, flatten3), func + "");
    }
    module.exports = flatRest;
  }
});

// node_modules/lodash/omit.js
var require_omit = __commonJS({
  "node_modules/lodash/omit.js"(exports, module) {
    var arrayMap = require_arrayMap();
    var baseClone = require_baseClone();
    var baseUnset = require_baseUnset();
    var castPath = require_castPath();
    var copyObject = require_copyObject();
    var customOmitClone = require_customOmitClone();
    var flatRest = require_flatRest();
    var getAllKeysIn = require_getAllKeysIn();
    var CLONE_DEEP_FLAG = 1;
    var CLONE_FLAT_FLAG = 2;
    var CLONE_SYMBOLS_FLAG = 4;
    var omit4 = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });
    module.exports = omit4;
  }
});

// node_modules/lodash/chunk.js
var require_chunk = __commonJS({
  "node_modules/lodash/chunk.js"(exports, module) {
    var baseSlice = require_baseSlice();
    var isIterateeCall = require_isIterateeCall();
    var toInteger = require_toInteger();
    var nativeCeil = Math.ceil;
    var nativeMax = Math.max;
    function chunk2(array, size, guard) {
      if (guard ? isIterateeCall(array, size, guard) : size === void 0) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0, resIndex = 0, result = Array(nativeCeil(length / size));
      while (index < length) {
        result[resIndex++] = baseSlice(array, index, index += size);
      }
      return result;
    }
    module.exports = chunk2;
  }
});

// node_modules/lodash/now.js
var require_now = __commonJS({
  "node_modules/lodash/now.js"(exports, module) {
    var root = require_root();
    var now = function() {
      return root.Date.now();
    };
    module.exports = now;
  }
});

// node_modules/lodash/debounce.js
var require_debounce = __commonJS({
  "node_modules/lodash/debounce.js"(exports, module) {
    var isObject5 = require_isObject();
    var now = require_now();
    var toNumber2 = require_toNumber();
    var FUNC_ERROR_TEXT = "Expected a function";
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    function debounce6(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber2(wait) || 0;
      if (isObject5(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber2(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
        return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    module.exports = debounce6;
  }
});

// node_modules/lodash/cloneDeep.js
var require_cloneDeep = __commonJS({
  "node_modules/lodash/cloneDeep.js"(exports, module) {
    var baseClone = require_baseClone();
    var CLONE_DEEP_FLAG = 1;
    var CLONE_SYMBOLS_FLAG = 4;
    function cloneDeep3(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }
    module.exports = cloneDeep3;
  }
});

// node_modules/warning/warning.js
var require_warning = __commonJS({
  "node_modules/warning/warning.js"(exports, module) {
    "use strict";
    var __DEV__ = true;
    var warning3 = function() {
    };
    if (__DEV__) {
      printWarning = function printWarning2(format2, args) {
        var len = arguments.length;
        args = new Array(len > 1 ? len - 1 : 0);
        for (var key = 1; key < len; key++) {
          args[key - 1] = arguments[key];
        }
        var argIndex = 0;
        var message = "Warning: " + format2.replace(/%s/g, function() {
          return args[argIndex++];
        });
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
      warning3 = function(condition, format2, args) {
        var len = arguments.length;
        args = new Array(len > 2 ? len - 2 : 0);
        for (var key = 2; key < len; key++) {
          args[key - 2] = arguments[key];
        }
        if (format2 === void 0) {
          throw new Error(
            "`warning(condition, format, ...args)` requires a warning message argument"
          );
        }
        if (!condition) {
          printWarning.apply(null, [format2].concat(args));
        }
      };
    }
    var printWarning;
    module.exports = warning3;
  }
});

// node_modules/lodash/mapValues.js
var require_mapValues = __commonJS({
  "node_modules/lodash/mapValues.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var baseForOwn = require_baseForOwn();
    var baseIteratee = require_baseIteratee();
    function mapValues3(object, iteratee) {
      var result = {};
      iteratee = baseIteratee(iteratee, 3);
      baseForOwn(object, function(value, key, object2) {
        baseAssignValue(result, key, iteratee(value, key, object2));
      });
      return result;
    }
    module.exports = mapValues3;
  }
});

// node_modules/lodash/_arrayReduce.js
var require_arrayReduce = __commonJS({
  "node_modules/lodash/_arrayReduce.js"(exports, module) {
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1, length = array == null ? 0 : array.length;
      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }
    module.exports = arrayReduce;
  }
});

// node_modules/lodash/_deburrLetter.js
var require_deburrLetter = __commonJS({
  "node_modules/lodash/_deburrLetter.js"(exports, module) {
    var basePropertyOf = require_basePropertyOf();
    var deburredLetters = {
      // Latin-1 Supplement block.
      "À": "A",
      "Á": "A",
      "Â": "A",
      "Ã": "A",
      "Ä": "A",
      "Å": "A",
      "à": "a",
      "á": "a",
      "â": "a",
      "ã": "a",
      "ä": "a",
      "å": "a",
      "Ç": "C",
      "ç": "c",
      "Ð": "D",
      "ð": "d",
      "È": "E",
      "É": "E",
      "Ê": "E",
      "Ë": "E",
      "è": "e",
      "é": "e",
      "ê": "e",
      "ë": "e",
      "Ì": "I",
      "Í": "I",
      "Î": "I",
      "Ï": "I",
      "ì": "i",
      "í": "i",
      "î": "i",
      "ï": "i",
      "Ñ": "N",
      "ñ": "n",
      "Ò": "O",
      "Ó": "O",
      "Ô": "O",
      "Õ": "O",
      "Ö": "O",
      "Ø": "O",
      "ò": "o",
      "ó": "o",
      "ô": "o",
      "õ": "o",
      "ö": "o",
      "ø": "o",
      "Ù": "U",
      "Ú": "U",
      "Û": "U",
      "Ü": "U",
      "ù": "u",
      "ú": "u",
      "û": "u",
      "ü": "u",
      "Ý": "Y",
      "ý": "y",
      "ÿ": "y",
      "Æ": "Ae",
      "æ": "ae",
      "Þ": "Th",
      "þ": "th",
      "ß": "ss",
      // Latin Extended-A block.
      "Ā": "A",
      "Ă": "A",
      "Ą": "A",
      "ā": "a",
      "ă": "a",
      "ą": "a",
      "Ć": "C",
      "Ĉ": "C",
      "Ċ": "C",
      "Č": "C",
      "ć": "c",
      "ĉ": "c",
      "ċ": "c",
      "č": "c",
      "Ď": "D",
      "Đ": "D",
      "ď": "d",
      "đ": "d",
      "Ē": "E",
      "Ĕ": "E",
      "Ė": "E",
      "Ę": "E",
      "Ě": "E",
      "ē": "e",
      "ĕ": "e",
      "ė": "e",
      "ę": "e",
      "ě": "e",
      "Ĝ": "G",
      "Ğ": "G",
      "Ġ": "G",
      "Ģ": "G",
      "ĝ": "g",
      "ğ": "g",
      "ġ": "g",
      "ģ": "g",
      "Ĥ": "H",
      "Ħ": "H",
      "ĥ": "h",
      "ħ": "h",
      "Ĩ": "I",
      "Ī": "I",
      "Ĭ": "I",
      "Į": "I",
      "İ": "I",
      "ĩ": "i",
      "ī": "i",
      "ĭ": "i",
      "į": "i",
      "ı": "i",
      "Ĵ": "J",
      "ĵ": "j",
      "Ķ": "K",
      "ķ": "k",
      "ĸ": "k",
      "Ĺ": "L",
      "Ļ": "L",
      "Ľ": "L",
      "Ŀ": "L",
      "Ł": "L",
      "ĺ": "l",
      "ļ": "l",
      "ľ": "l",
      "ŀ": "l",
      "ł": "l",
      "Ń": "N",
      "Ņ": "N",
      "Ň": "N",
      "Ŋ": "N",
      "ń": "n",
      "ņ": "n",
      "ň": "n",
      "ŋ": "n",
      "Ō": "O",
      "Ŏ": "O",
      "Ő": "O",
      "ō": "o",
      "ŏ": "o",
      "ő": "o",
      "Ŕ": "R",
      "Ŗ": "R",
      "Ř": "R",
      "ŕ": "r",
      "ŗ": "r",
      "ř": "r",
      "Ś": "S",
      "Ŝ": "S",
      "Ş": "S",
      "Š": "S",
      "ś": "s",
      "ŝ": "s",
      "ş": "s",
      "š": "s",
      "Ţ": "T",
      "Ť": "T",
      "Ŧ": "T",
      "ţ": "t",
      "ť": "t",
      "ŧ": "t",
      "Ũ": "U",
      "Ū": "U",
      "Ŭ": "U",
      "Ů": "U",
      "Ű": "U",
      "Ų": "U",
      "ũ": "u",
      "ū": "u",
      "ŭ": "u",
      "ů": "u",
      "ű": "u",
      "ų": "u",
      "Ŵ": "W",
      "ŵ": "w",
      "Ŷ": "Y",
      "ŷ": "y",
      "Ÿ": "Y",
      "Ź": "Z",
      "Ż": "Z",
      "Ž": "Z",
      "ź": "z",
      "ż": "z",
      "ž": "z",
      "Ĳ": "IJ",
      "ĳ": "ij",
      "Œ": "Oe",
      "œ": "oe",
      "ŉ": "'n",
      "ſ": "s"
    };
    var deburrLetter = basePropertyOf(deburredLetters);
    module.exports = deburrLetter;
  }
});

// node_modules/lodash/deburr.js
var require_deburr = __commonJS({
  "node_modules/lodash/deburr.js"(exports, module) {
    var deburrLetter = require_deburrLetter();
    var toString = require_toString();
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsCombo = "[" + rsComboRange + "]";
    var reComboMark = RegExp(rsCombo, "g");
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
    }
    module.exports = deburr;
  }
});

// node_modules/lodash/_asciiWords.js
var require_asciiWords = __commonJS({
  "node_modules/lodash/_asciiWords.js"(exports, module) {
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }
    module.exports = asciiWords;
  }
});

// node_modules/lodash/_hasUnicodeWord.js
var require_hasUnicodeWord = __commonJS({
  "node_modules/lodash/_hasUnicodeWord.js"(exports, module) {
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }
    module.exports = hasUnicodeWord;
  }
});

// node_modules/lodash/_unicodeWords.js
var require_unicodeWords = __commonJS({
  "node_modules/lodash/_unicodeWords.js"(exports, module) {
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsDingbatRange = "\\u2700-\\u27bf";
    var rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff";
    var rsMathOpRange = "\\xac\\xb1\\xd7\\xf7";
    var rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf";
    var rsPunctuationRange = "\\u2000-\\u206f";
    var rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000";
    var rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde";
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    var rsApos = "['’]";
    var rsBreak = "[" + rsBreakRange + "]";
    var rsCombo = "[" + rsComboRange + "]";
    var rsDigits = "\\d+";
    var rsDingbat = "[" + rsDingbatRange + "]";
    var rsLower = "[" + rsLowerRange + "]";
    var rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]";
    var rsFitz = "\\ud83c[\\udffb-\\udfff]";
    var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
    var rsNonAstral = "[^" + rsAstralRange + "]";
    var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
    var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
    var rsUpper = "[" + rsUpperRange + "]";
    var rsZWJ = "\\u200d";
    var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")";
    var rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")";
    var rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?";
    var rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?";
    var reOptMod = rsModifier + "?";
    var rsOptVar = "[" + rsVarRange + "]?";
    var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
    var rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])";
    var rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])";
    var rsSeq = rsOptVar + reOptMod + rsOptJoin;
    var rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq;
    var reUnicodeWord = RegExp([
      rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
      rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
      rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
      rsUpper + "+" + rsOptContrUpper,
      rsOrdUpper,
      rsOrdLower,
      rsDigits,
      rsEmoji
    ].join("|"), "g");
    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }
    module.exports = unicodeWords;
  }
});

// node_modules/lodash/words.js
var require_words = __commonJS({
  "node_modules/lodash/words.js"(exports, module) {
    var asciiWords = require_asciiWords();
    var hasUnicodeWord = require_hasUnicodeWord();
    var toString = require_toString();
    var unicodeWords = require_unicodeWords();
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? void 0 : pattern;
      if (pattern === void 0) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }
    module.exports = words;
  }
});

// node_modules/lodash/_createCompounder.js
var require_createCompounder = __commonJS({
  "node_modules/lodash/_createCompounder.js"(exports, module) {
    var arrayReduce = require_arrayReduce();
    var deburr = require_deburr();
    var words = require_words();
    var rsApos = "['’]";
    var reApos = RegExp(rsApos, "g");
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
      };
    }
    module.exports = createCompounder;
  }
});

// node_modules/lodash/camelCase.js
var require_camelCase = __commonJS({
  "node_modules/lodash/camelCase.js"(exports, module) {
    var capitalize3 = require_capitalize();
    var createCompounder = require_createCompounder();
    var camelCase2 = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize3(word) : word);
    });
    module.exports = camelCase2;
  }
});

// node_modules/lodash/_baseMap.js
var require_baseMap = __commonJS({
  "node_modules/lodash/_baseMap.js"(exports, module) {
    var baseEach = require_baseEach();
    var isArrayLike = require_isArrayLike();
    function baseMap(collection, iteratee) {
      var index = -1, result = isArrayLike(collection) ? Array(collection.length) : [];
      baseEach(collection, function(value, key, collection2) {
        result[++index] = iteratee(value, key, collection2);
      });
      return result;
    }
    module.exports = baseMap;
  }
});

// node_modules/lodash/map.js
var require_map = __commonJS({
  "node_modules/lodash/map.js"(exports, module) {
    var arrayMap = require_arrayMap();
    var baseIteratee = require_baseIteratee();
    var baseMap = require_baseMap();
    var isArray = require_isArray();
    function map2(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, baseIteratee(iteratee, 3));
    }
    module.exports = map2;
  }
});

// node_modules/lodash/kebabCase.js
var require_kebabCase = __commonJS({
  "node_modules/lodash/kebabCase.js"(exports, module) {
    var createCompounder = require_createCompounder();
    var kebabCase2 = createCompounder(function(result, word, index) {
      return result + (index ? "-" : "") + word.toLowerCase();
    });
    module.exports = kebabCase2;
  }
});

// node_modules/invariant/browser.js
var require_browser = __commonJS({
  "node_modules/invariant/browser.js"(exports, module) {
    "use strict";
    var invariant3 = function(condition, format2, a, b, c, d, e, f) {
      if (true) {
        if (format2 === void 0) {
          throw new Error("invariant requires an error message argument");
        }
      }
      if (!condition) {
        var error;
        if (format2 === void 0) {
          error = new Error(
            "Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings."
          );
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(
            format2.replace(/%s/g, function() {
              return args[argIndex++];
            })
          );
          error.name = "Invariant Violation";
        }
        error.framesToPop = 1;
        throw error;
      }
    };
    module.exports = invariant3;
  }
});

// node_modules/lodash/throttle.js
var require_throttle = __commonJS({
  "node_modules/lodash/throttle.js"(exports, module) {
    var debounce6 = require_debounce();
    var isObject5 = require_isObject();
    var FUNC_ERROR_TEXT = "Expected a function";
    function throttle2(func, wait, options) {
      var leading = true, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject5(options)) {
        leading = "leading" in options ? !!options.leading : leading;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      return debounce6(func, wait, {
        "leading": leading,
        "maxWait": wait,
        "trailing": trailing
      });
    }
    module.exports = throttle2;
  }
});

// node_modules/lodash/_baseToPairs.js
var require_baseToPairs = __commonJS({
  "node_modules/lodash/_baseToPairs.js"(exports, module) {
    var arrayMap = require_arrayMap();
    function baseToPairs(object, props) {
      return arrayMap(props, function(key) {
        return [key, object[key]];
      });
    }
    module.exports = baseToPairs;
  }
});

// node_modules/lodash/_setToPairs.js
var require_setToPairs = __commonJS({
  "node_modules/lodash/_setToPairs.js"(exports, module) {
    function setToPairs(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = [value, value];
      });
      return result;
    }
    module.exports = setToPairs;
  }
});

// node_modules/lodash/_createToPairs.js
var require_createToPairs = __commonJS({
  "node_modules/lodash/_createToPairs.js"(exports, module) {
    var baseToPairs = require_baseToPairs();
    var getTag = require_getTag();
    var mapToArray = require_mapToArray();
    var setToPairs = require_setToPairs();
    var mapTag = "[object Map]";
    var setTag = "[object Set]";
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }
    module.exports = createToPairs;
  }
});

// node_modules/lodash/toPairs.js
var require_toPairs = __commonJS({
  "node_modules/lodash/toPairs.js"(exports, module) {
    var createToPairs = require_createToPairs();
    var keys = require_keys();
    var toPairs2 = createToPairs(keys);
    module.exports = toPairs2;
  }
});

// node_modules/lodash/_baseSet.js
var require_baseSet = __commonJS({
  "node_modules/lodash/_baseSet.js"(exports, module) {
    var assignValue = require_assignValue();
    var castPath = require_castPath();
    var isIndex = require_isIndex();
    var isObject5 = require_isObject();
    var toKey = require_toKey();
    function baseSet(object, path, value, customizer) {
      if (!isObject5(object)) {
        return object;
      }
      path = castPath(path, object);
      var index = -1, length = path.length, lastIndex = length - 1, nested = object;
      while (nested != null && ++index < length) {
        var key = toKey(path[index]), newValue = value;
        if (key === "__proto__" || key === "constructor" || key === "prototype") {
          return object;
        }
        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : void 0;
          if (newValue === void 0) {
            newValue = isObject5(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }
    module.exports = baseSet;
  }
});

// node_modules/lodash/_basePickBy.js
var require_basePickBy = __commonJS({
  "node_modules/lodash/_basePickBy.js"(exports, module) {
    var baseGet = require_baseGet();
    var baseSet = require_baseSet();
    var castPath = require_castPath();
    function basePickBy(object, paths, predicate) {
      var index = -1, length = paths.length, result = {};
      while (++index < length) {
        var path = paths[index], value = baseGet(object, path);
        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }
    module.exports = basePickBy;
  }
});

// node_modules/lodash/_basePick.js
var require_basePick = __commonJS({
  "node_modules/lodash/_basePick.js"(exports, module) {
    var basePickBy = require_basePickBy();
    var hasIn = require_hasIn();
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }
    module.exports = basePick;
  }
});

// node_modules/lodash/pick.js
var require_pick = __commonJS({
  "node_modules/lodash/pick.js"(exports, module) {
    var basePick = require_basePick();
    var flatRest = require_flatRest();
    var pick6 = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });
    module.exports = pick6;
  }
});

// node_modules/file-saver/dist/FileSaver.min.js
var require_FileSaver_min = __commonJS({
  "node_modules/file-saver/dist/FileSaver.min.js"(exports, module) {
    (function(a, b) {
      if ("function" == typeof define && define.amd)
        define([], b);
      else if ("undefined" != typeof exports)
        b();
      else {
        b(), a.FileSaver = { exports: {} }.exports;
      }
    })(exports, function() {
      "use strict";
      function b(a2, b2) {
        return "undefined" == typeof b2 ? b2 = { autoBom: false } : "object" != typeof b2 && (console.warn("Deprecated: Expected third argument to be a object"), b2 = { autoBom: !b2 }), b2.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a2.type) ? new Blob(["\uFEFF", a2], { type: a2.type }) : a2;
      }
      function c(a2, b2, c2) {
        var d2 = new XMLHttpRequest();
        d2.open("GET", a2), d2.responseType = "blob", d2.onload = function() {
          g(d2.response, b2, c2);
        }, d2.onerror = function() {
          console.error("could not download file");
        }, d2.send();
      }
      function d(a2) {
        var b2 = new XMLHttpRequest();
        b2.open("HEAD", a2, false);
        try {
          b2.send();
        } catch (a3) {
        }
        return 200 <= b2.status && 299 >= b2.status;
      }
      function e(a2) {
        try {
          a2.dispatchEvent(new MouseEvent("click"));
        } catch (c2) {
          var b2 = document.createEvent("MouseEvents");
          b2.initMouseEvent("click", true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null), a2.dispatchEvent(b2);
        }
      }
      var f = "object" == typeof window && window.window === window ? window : "object" == typeof self && self.self === self ? self : "object" == typeof global && global.global === global ? global : void 0, a = f.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent), g = f.saveAs || ("object" != typeof window || window !== f ? function() {
      } : "download" in HTMLAnchorElement.prototype && !a ? function(b2, g2, h) {
        var i = f.URL || f.webkitURL, j = document.createElement("a");
        g2 = g2 || b2.name || "download", j.download = g2, j.rel = "noopener", "string" == typeof b2 ? (j.href = b2, j.origin === location.origin ? e(j) : d(j.href) ? c(b2, g2, h) : e(j, j.target = "_blank")) : (j.href = i.createObjectURL(b2), setTimeout(function() {
          i.revokeObjectURL(j.href);
        }, 4e4), setTimeout(function() {
          e(j);
        }, 0));
      } : "msSaveOrOpenBlob" in navigator ? function(f2, g2, h) {
        if (g2 = g2 || f2.name || "download", "string" != typeof f2)
          navigator.msSaveOrOpenBlob(b(f2, h), g2);
        else if (d(f2))
          c(f2, g2, h);
        else {
          var i = document.createElement("a");
          i.href = f2, i.target = "_blank", setTimeout(function() {
            e(i);
          });
        }
      } : function(b2, d2, e2, g2) {
        if (g2 = g2 || open("", "_blank"), g2 && (g2.document.title = g2.document.body.innerText = "downloading..."), "string" == typeof b2)
          return c(b2, d2, e2);
        var h = "application/octet-stream" === b2.type, i = /constructor/i.test(f.HTMLElement) || f.safari, j = /CriOS\/[\d]+/.test(navigator.userAgent);
        if ((j || h && i || a) && "undefined" != typeof FileReader) {
          var k = new FileReader();
          k.onloadend = function() {
            var a2 = k.result;
            a2 = j ? a2 : a2.replace(/^data:[^;]*;/, "data:attachment/file;"), g2 ? g2.location.href = a2 : location = a2, g2 = null;
          }, k.readAsDataURL(b2);
        } else {
          var l = f.URL || f.webkitURL, m = l.createObjectURL(b2);
          g2 ? g2.location = m : location.href = m, g2 = null, setTimeout(function() {
            l.revokeObjectURL(m);
          }, 4e4);
        }
      });
      f.saveAs = g.saveAs = g, "undefined" != typeof module && (module.exports = g);
    });
  }
});

// node_modules/remove-accents/index.js
var require_remove_accents = __commonJS({
  "node_modules/remove-accents/index.js"(exports, module) {
    var characterMap = {
      "À": "A",
      "Á": "A",
      "Â": "A",
      "Ã": "A",
      "Ä": "A",
      "Å": "A",
      "Ấ": "A",
      "Ắ": "A",
      "Ẳ": "A",
      "Ẵ": "A",
      "Ặ": "A",
      "Æ": "AE",
      "Ầ": "A",
      "Ằ": "A",
      "Ȃ": "A",
      "Ç": "C",
      "Ḉ": "C",
      "È": "E",
      "É": "E",
      "Ê": "E",
      "Ë": "E",
      "Ế": "E",
      "Ḗ": "E",
      "Ề": "E",
      "Ḕ": "E",
      "Ḝ": "E",
      "Ȇ": "E",
      "Ì": "I",
      "Í": "I",
      "Î": "I",
      "Ï": "I",
      "Ḯ": "I",
      "Ȋ": "I",
      "Ð": "D",
      "Ñ": "N",
      "Ò": "O",
      "Ó": "O",
      "Ô": "O",
      "Õ": "O",
      "Ö": "O",
      "Ø": "O",
      "Ố": "O",
      "Ṍ": "O",
      "Ṓ": "O",
      "Ȏ": "O",
      "Ù": "U",
      "Ú": "U",
      "Û": "U",
      "Ü": "U",
      "Ý": "Y",
      "à": "a",
      "á": "a",
      "â": "a",
      "ã": "a",
      "ä": "a",
      "å": "a",
      "ấ": "a",
      "ắ": "a",
      "ẳ": "a",
      "ẵ": "a",
      "ặ": "a",
      "æ": "ae",
      "ầ": "a",
      "ằ": "a",
      "ȃ": "a",
      "ç": "c",
      "ḉ": "c",
      "è": "e",
      "é": "e",
      "ê": "e",
      "ë": "e",
      "ế": "e",
      "ḗ": "e",
      "ề": "e",
      "ḕ": "e",
      "ḝ": "e",
      "ȇ": "e",
      "ì": "i",
      "í": "i",
      "î": "i",
      "ï": "i",
      "ḯ": "i",
      "ȋ": "i",
      "ð": "d",
      "ñ": "n",
      "ò": "o",
      "ó": "o",
      "ô": "o",
      "õ": "o",
      "ö": "o",
      "ø": "o",
      "ố": "o",
      "ṍ": "o",
      "ṓ": "o",
      "ȏ": "o",
      "ù": "u",
      "ú": "u",
      "û": "u",
      "ü": "u",
      "ý": "y",
      "ÿ": "y",
      "Ā": "A",
      "ā": "a",
      "Ă": "A",
      "ă": "a",
      "Ą": "A",
      "ą": "a",
      "Ć": "C",
      "ć": "c",
      "Ĉ": "C",
      "ĉ": "c",
      "Ċ": "C",
      "ċ": "c",
      "Č": "C",
      "č": "c",
      "C̆": "C",
      "c̆": "c",
      "Ď": "D",
      "ď": "d",
      "Đ": "D",
      "đ": "d",
      "Ē": "E",
      "ē": "e",
      "Ĕ": "E",
      "ĕ": "e",
      "Ė": "E",
      "ė": "e",
      "Ę": "E",
      "ę": "e",
      "Ě": "E",
      "ě": "e",
      "Ĝ": "G",
      "Ǵ": "G",
      "ĝ": "g",
      "ǵ": "g",
      "Ğ": "G",
      "ğ": "g",
      "Ġ": "G",
      "ġ": "g",
      "Ģ": "G",
      "ģ": "g",
      "Ĥ": "H",
      "ĥ": "h",
      "Ħ": "H",
      "ħ": "h",
      "Ḫ": "H",
      "ḫ": "h",
      "Ĩ": "I",
      "ĩ": "i",
      "Ī": "I",
      "ī": "i",
      "Ĭ": "I",
      "ĭ": "i",
      "Į": "I",
      "į": "i",
      "İ": "I",
      "ı": "i",
      "Ĳ": "IJ",
      "ĳ": "ij",
      "Ĵ": "J",
      "ĵ": "j",
      "Ķ": "K",
      "ķ": "k",
      "Ḱ": "K",
      "ḱ": "k",
      "K̆": "K",
      "k̆": "k",
      "Ĺ": "L",
      "ĺ": "l",
      "Ļ": "L",
      "ļ": "l",
      "Ľ": "L",
      "ľ": "l",
      "Ŀ": "L",
      "ŀ": "l",
      "Ł": "l",
      "ł": "l",
      "Ḿ": "M",
      "ḿ": "m",
      "M̆": "M",
      "m̆": "m",
      "Ń": "N",
      "ń": "n",
      "Ņ": "N",
      "ņ": "n",
      "Ň": "N",
      "ň": "n",
      "ŉ": "n",
      "N̆": "N",
      "n̆": "n",
      "Ō": "O",
      "ō": "o",
      "Ŏ": "O",
      "ŏ": "o",
      "Ő": "O",
      "ő": "o",
      "Œ": "OE",
      "œ": "oe",
      "P̆": "P",
      "p̆": "p",
      "Ŕ": "R",
      "ŕ": "r",
      "Ŗ": "R",
      "ŗ": "r",
      "Ř": "R",
      "ř": "r",
      "R̆": "R",
      "r̆": "r",
      "Ȓ": "R",
      "ȓ": "r",
      "Ś": "S",
      "ś": "s",
      "Ŝ": "S",
      "ŝ": "s",
      "Ş": "S",
      "Ș": "S",
      "ș": "s",
      "ş": "s",
      "Š": "S",
      "š": "s",
      "Ţ": "T",
      "ţ": "t",
      "ț": "t",
      "Ț": "T",
      "Ť": "T",
      "ť": "t",
      "Ŧ": "T",
      "ŧ": "t",
      "T̆": "T",
      "t̆": "t",
      "Ũ": "U",
      "ũ": "u",
      "Ū": "U",
      "ū": "u",
      "Ŭ": "U",
      "ŭ": "u",
      "Ů": "U",
      "ů": "u",
      "Ű": "U",
      "ű": "u",
      "Ų": "U",
      "ų": "u",
      "Ȗ": "U",
      "ȗ": "u",
      "V̆": "V",
      "v̆": "v",
      "Ŵ": "W",
      "ŵ": "w",
      "Ẃ": "W",
      "ẃ": "w",
      "X̆": "X",
      "x̆": "x",
      "Ŷ": "Y",
      "ŷ": "y",
      "Ÿ": "Y",
      "Y̆": "Y",
      "y̆": "y",
      "Ź": "Z",
      "ź": "z",
      "Ż": "Z",
      "ż": "z",
      "Ž": "Z",
      "ž": "z",
      "ſ": "s",
      "ƒ": "f",
      "Ơ": "O",
      "ơ": "o",
      "Ư": "U",
      "ư": "u",
      "Ǎ": "A",
      "ǎ": "a",
      "Ǐ": "I",
      "ǐ": "i",
      "Ǒ": "O",
      "ǒ": "o",
      "Ǔ": "U",
      "ǔ": "u",
      "Ǖ": "U",
      "ǖ": "u",
      "Ǘ": "U",
      "ǘ": "u",
      "Ǚ": "U",
      "ǚ": "u",
      "Ǜ": "U",
      "ǜ": "u",
      "Ứ": "U",
      "ứ": "u",
      "Ṹ": "U",
      "ṹ": "u",
      "Ǻ": "A",
      "ǻ": "a",
      "Ǽ": "AE",
      "ǽ": "ae",
      "Ǿ": "O",
      "ǿ": "o",
      "Þ": "TH",
      "þ": "th",
      "Ṕ": "P",
      "ṕ": "p",
      "Ṥ": "S",
      "ṥ": "s",
      "X́": "X",
      "x́": "x",
      "Ѓ": "Г",
      "ѓ": "г",
      "Ќ": "К",
      "ќ": "к",
      "A̋": "A",
      "a̋": "a",
      "E̋": "E",
      "e̋": "e",
      "I̋": "I",
      "i̋": "i",
      "Ǹ": "N",
      "ǹ": "n",
      "Ồ": "O",
      "ồ": "o",
      "Ṑ": "O",
      "ṑ": "o",
      "Ừ": "U",
      "ừ": "u",
      "Ẁ": "W",
      "ẁ": "w",
      "Ỳ": "Y",
      "ỳ": "y",
      "Ȁ": "A",
      "ȁ": "a",
      "Ȅ": "E",
      "ȅ": "e",
      "Ȉ": "I",
      "ȉ": "i",
      "Ȍ": "O",
      "ȍ": "o",
      "Ȑ": "R",
      "ȑ": "r",
      "Ȕ": "U",
      "ȕ": "u",
      "B̌": "B",
      "b̌": "b",
      "Č̣": "C",
      "č̣": "c",
      "Ê̌": "E",
      "ê̌": "e",
      "F̌": "F",
      "f̌": "f",
      "Ǧ": "G",
      "ǧ": "g",
      "Ȟ": "H",
      "ȟ": "h",
      "J̌": "J",
      "ǰ": "j",
      "Ǩ": "K",
      "ǩ": "k",
      "M̌": "M",
      "m̌": "m",
      "P̌": "P",
      "p̌": "p",
      "Q̌": "Q",
      "q̌": "q",
      "Ř̩": "R",
      "ř̩": "r",
      "Ṧ": "S",
      "ṧ": "s",
      "V̌": "V",
      "v̌": "v",
      "W̌": "W",
      "w̌": "w",
      "X̌": "X",
      "x̌": "x",
      "Y̌": "Y",
      "y̌": "y",
      "A̧": "A",
      "a̧": "a",
      "B̧": "B",
      "b̧": "b",
      "Ḑ": "D",
      "ḑ": "d",
      "Ȩ": "E",
      "ȩ": "e",
      "Ɛ̧": "E",
      "ɛ̧": "e",
      "Ḩ": "H",
      "ḩ": "h",
      "I̧": "I",
      "i̧": "i",
      "Ɨ̧": "I",
      "ɨ̧": "i",
      "M̧": "M",
      "m̧": "m",
      "O̧": "O",
      "o̧": "o",
      "Q̧": "Q",
      "q̧": "q",
      "U̧": "U",
      "u̧": "u",
      "X̧": "X",
      "x̧": "x",
      "Z̧": "Z",
      "z̧": "z"
    };
    var chars = Object.keys(characterMap).join("|");
    var allAccents = new RegExp(chars, "g");
    var firstAccent = new RegExp(chars, "");
    var removeAccents2 = function(string) {
      return string.replace(allAccents, function(match) {
        return characterMap[match];
      });
    };
    var hasAccents = function(string) {
      return !!string.match(firstAccent);
    };
    module.exports = removeAccents2;
    module.exports.has = hasAccents;
    module.exports.remove = removeAccents2;
  }
});

// node_modules/lodash/_baseSortBy.js
var require_baseSortBy = __commonJS({
  "node_modules/lodash/_baseSortBy.js"(exports, module) {
    function baseSortBy(array, comparer) {
      var length = array.length;
      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }
    module.exports = baseSortBy;
  }
});

// node_modules/lodash/_compareAscending.js
var require_compareAscending = __commonJS({
  "node_modules/lodash/_compareAscending.js"(exports, module) {
    var isSymbol = require_isSymbol();
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== void 0, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
        var othIsDefined = other !== void 0, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
        if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
          return 1;
        }
        if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }
    module.exports = compareAscending;
  }
});

// node_modules/lodash/_compareMultiple.js
var require_compareMultiple = __commonJS({
  "node_modules/lodash/_compareMultiple.js"(exports, module) {
    var compareAscending = require_compareAscending();
    function compareMultiple(object, other, orders) {
      var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == "desc" ? -1 : 1);
        }
      }
      return object.index - other.index;
    }
    module.exports = compareMultiple;
  }
});

// node_modules/lodash/_baseOrderBy.js
var require_baseOrderBy = __commonJS({
  "node_modules/lodash/_baseOrderBy.js"(exports, module) {
    var arrayMap = require_arrayMap();
    var baseGet = require_baseGet();
    var baseIteratee = require_baseIteratee();
    var baseMap = require_baseMap();
    var baseSortBy = require_baseSortBy();
    var baseUnary = require_baseUnary();
    var compareMultiple = require_compareMultiple();
    var identity = require_identity();
    var isArray = require_isArray();
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            };
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }
      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(baseIteratee));
      var result = baseMap(collection, function(value, key, collection2) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { "criteria": criteria, "index": ++index, "value": value };
      });
      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }
    module.exports = baseOrderBy;
  }
});

// node_modules/lodash/sortBy.js
var require_sortBy = __commonJS({
  "node_modules/lodash/sortBy.js"(exports, module) {
    var baseFlatten = require_baseFlatten();
    var baseOrderBy = require_baseOrderBy();
    var baseRest = require_baseRest();
    var isIterateeCall = require_isIterateeCall();
    var sortBy2 = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });
    module.exports = sortBy2;
  }
});

// node_modules/lodash/isEqualWith.js
var require_isEqualWith = __commonJS({
  "node_modules/lodash/isEqualWith.js"(exports, module) {
    var baseIsEqual = require_baseIsEqual();
    function isEqualWith2(value, other, customizer) {
      customizer = typeof customizer == "function" ? customizer : void 0;
      var result = customizer ? customizer(value, other) : void 0;
      return result === void 0 ? baseIsEqual(value, other, void 0, customizer) : !!result;
    }
    module.exports = isEqualWith2;
  }
});

// node_modules/lodash/values.js
var require_values = __commonJS({
  "node_modules/lodash/values.js"(exports, module) {
    var baseValues = require_baseValues();
    var keys = require_keys();
    function values2(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }
    module.exports = values2;
  }
});

// node_modules/lodash/_baseDifference.js
var require_baseDifference = __commonJS({
  "node_modules/lodash/_baseDifference.js"(exports, module) {
    var SetCache = require_SetCache();
    var arrayIncludes = require_arrayIncludes();
    var arrayIncludesWith = require_arrayIncludesWith();
    var arrayMap = require_arrayMap();
    var baseUnary = require_baseUnary();
    var cacheHas = require_cacheHas();
    var LARGE_ARRAY_SIZE = 200;
    function baseDifference(array, values2, iteratee, comparator) {
      var index = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values2.length;
      if (!length) {
        return result;
      }
      if (iteratee) {
        values2 = arrayMap(values2, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      } else if (values2.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values2 = new SetCache(values2);
      }
      outer:
        while (++index < length) {
          var value = array[index], computed = iteratee == null ? value : iteratee(value);
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;
            while (valuesIndex--) {
              if (values2[valuesIndex] === computed) {
                continue outer;
              }
            }
            result.push(value);
          } else if (!includes(values2, computed, comparator)) {
            result.push(value);
          }
        }
      return result;
    }
    module.exports = baseDifference;
  }
});

// node_modules/lodash/difference.js
var require_difference = __commonJS({
  "node_modules/lodash/difference.js"(exports, module) {
    var baseDifference = require_baseDifference();
    var baseFlatten = require_baseFlatten();
    var baseRest = require_baseRest();
    var isArrayLikeObject = require_isArrayLikeObject();
    var difference3 = baseRest(function(array, values2) {
      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
    });
    module.exports = difference3;
  }
});

// node_modules/amis-formula/esm/evalutor.js
init_moment();
var import_upperFirst = __toESM(require_upperFirst());
var import_padStart = __toESM(require_padStart());
var import_capitalize = __toESM(require_capitalize());
var import_escape = __toESM(require_escape());
var import_truncate = __toESM(require_truncate());
var import_uniqWith = __toESM(require_uniqWith());
var import_uniqBy = __toESM(require_uniqBy());
var import_isEqual = __toESM(require_isEqual());
var import_isPlainObject = __toESM(require_isPlainObject());
var import_get = __toESM(require_get());
var import_isNumber = __toESM(require_isNumber());

// node_modules/amis-formula/esm/error.js
var FormulaEvalError = (
  /** @class */
  function(_super) {
    __extends(FormulaEvalError2, _super);
    function FormulaEvalError2(message) {
      var _this = _super.call(this, message) || this;
      _this.name = "FormulaEvalError";
      return _this;
    }
    return FormulaEvalError2;
  }(Error)
);

// node_modules/amis-formula/esm/evalutor.js
var Evaluator = (
  /** @class */
  function() {
    function Evaluator2(context, options) {
      if (options === void 0) {
        options = {
          defaultFilter: "html"
        };
      }
      this.options = options;
      this.functions = {};
      this.contextStack = [];
      this.context = context;
      this.contextStack.push(function(varname) {
        return varname === "&" ? context : context === null || context === void 0 ? void 0 : context[varname];
      });
      this.filters = __assign(__assign(__assign({}, Evaluator2.defaultFilters), this.filters), options === null || options === void 0 ? void 0 : options.filters);
      this.functions = __assign(__assign(__assign({}, Evaluator2.defaultFunctions), this.functions), options === null || options === void 0 ? void 0 : options.functions);
    }
    Evaluator2.setDefaultFilters = function(filters2) {
      Evaluator2.defaultFilters = __assign(__assign({}, Evaluator2.defaultFilters), filters2);
    };
    Evaluator2.setDefaultFunctions = function(funtions) {
      Evaluator2.defaultFunctions = __assign(__assign({}, Evaluator2.defaultFunctions), funtions);
    };
    Evaluator2.prototype.evalute = function(ast) {
      if (ast && ast.type) {
        var name_1 = ast.type.replace(/(?:_|\-)(\w)/g, function(_, l) {
          return l.toUpperCase();
        });
        var fn = this.functions[name_1] || this[name_1];
        if (!fn) {
          throw new Error("".concat(ast.type, " unkown."));
        }
        return fn.call(this, ast);
      } else {
        return ast;
      }
    };
    Evaluator2.prototype.document = function(ast) {
      var _this = this;
      if (!ast.body.length) {
        return void 0;
      }
      var isString3 = ast.body.length > 1;
      var content = ast.body.map(function(item) {
        var result = _this.evalute(item);
        if (isString3 && result == null) {
          return "";
        }
        return result;
      });
      return content.length === 1 ? content[0] : content.join("");
    };
    Evaluator2.prototype.filter = function(ast) {
      var _this = this;
      var input = this.evalute(ast.input);
      var filters2 = ast.filters.concat();
      var context = {
        filter: void 0,
        data: this.context,
        restFilters: filters2
      };
      while (filters2.length) {
        var filter2 = filters2.shift();
        var fn = this.filters[filter2.name];
        if (!fn) {
          throw new Error("filter `".concat(filter2.name, "` not exists."));
        }
        context.filter = filter2;
        input = fn.apply(context, [input].concat(filter2.args.map(function(item) {
          if ((item === null || item === void 0 ? void 0 : item.type) === "mixed") {
            return item.body.map(function(item2) {
              return typeof item2 === "string" ? item2 : _this.evalute(item2);
            }).join("");
          } else if (item.type) {
            return _this.evalute(item);
          }
          return item;
        })));
      }
      return input;
    };
    Evaluator2.prototype.raw = function(ast) {
      return ast.value;
    };
    Evaluator2.prototype.script = function(ast) {
      var _a3;
      var defaultFilter = this.options.defaultFilter;
      if (defaultFilter && ~["getter", "variable"].indexOf((_a3 = ast.body) === null || _a3 === void 0 ? void 0 : _a3.type)) {
        ast.body = {
          type: "filter",
          input: ast.body,
          filters: [
            {
              name: defaultFilter.replace(/^\s*\|\s*/, ""),
              args: []
            }
          ]
        };
      }
      return this.evalute(ast.body);
    };
    Evaluator2.prototype.expressionList = function(ast) {
      var _this = this;
      return ast.body.reduce(function(prev, current) {
        return _this.evalute(current);
      });
    };
    Evaluator2.prototype.template = function(ast) {
      var _this = this;
      return ast.body.map(function(arg) {
        return _this.evalute(arg);
      }).join("");
    };
    Evaluator2.prototype.templateRaw = function(ast) {
      return ast.value;
    };
    Evaluator2.prototype.getter = function(ast) {
      var _a3;
      var host = this.evalute(ast.host);
      var key = this.evalute(ast.key);
      if (typeof key === "undefined" && ((_a3 = ast.key) === null || _a3 === void 0 ? void 0 : _a3.type) === "variable") {
        key = ast.key.name;
      }
      return host === null || host === void 0 ? void 0 : host[key];
    };
    Evaluator2.prototype.unary = function(ast) {
      var value = this.evalute(ast.value);
      switch (ast.op) {
        case "+":
          return +value;
        case "-":
          return -value;
        case "~":
          return ~value;
        case "!":
          return !value;
      }
    };
    Evaluator2.prototype.formatNumber = function(value, int) {
      if (int === void 0) {
        int = false;
      }
      var typeName = typeof value;
      if (typeName === "string") {
        return (int ? parseInt(value, 10) : parseFloat(value)) || 0;
      } else if (typeName === "number" && int) {
        return Math.round(value);
      }
      return value !== null && value !== void 0 ? value : 0;
    };
    Evaluator2.prototype.power = function(ast) {
      var left = this.evalute(ast.left);
      var right = this.evalute(ast.right);
      return Math.pow(this.formatNumber(left), this.formatNumber(right));
    };
    Evaluator2.prototype.multiply = function(ast) {
      var left = this.evalute(ast.left);
      var right = this.evalute(ast.right);
      return stripNumber(this.formatNumber(left) * this.formatNumber(right));
    };
    Evaluator2.prototype.divide = function(ast) {
      var left = this.evalute(ast.left);
      var right = this.evalute(ast.right);
      return stripNumber(this.formatNumber(left) / this.formatNumber(right));
    };
    Evaluator2.prototype.remainder = function(ast) {
      var left = this.evalute(ast.left);
      var right = this.evalute(ast.right);
      return this.formatNumber(left) % this.formatNumber(right);
    };
    Evaluator2.prototype.add = function(ast) {
      var left = this.evalute(ast.left);
      var right = this.evalute(ast.right);
      if (isNaN(left) || isNaN(right)) {
        return left + right;
      }
      return stripNumber(this.formatNumber(left) + this.formatNumber(right));
    };
    Evaluator2.prototype.minus = function(ast) {
      var left = this.evalute(ast.left);
      var right = this.evalute(ast.right);
      return stripNumber(this.formatNumber(left) - this.formatNumber(right));
    };
    Evaluator2.prototype.shift = function(ast) {
      var left = this.evalute(ast.left);
      var right = this.formatNumber(this.evalute(ast.right), true);
      if (ast.op === "<<") {
        return left << right;
      } else if (ast.op == ">>") {
        return left >> right;
      } else {
        return left >>> right;
      }
    };
    Evaluator2.prototype.lt = function(ast) {
      var left = this.evalute(ast.left);
      var right = this.evalute(ast.right);
      return left < right;
    };
    Evaluator2.prototype.gt = function(ast) {
      var left = this.evalute(ast.left);
      var right = this.evalute(ast.right);
      return left > right;
    };
    Evaluator2.prototype.le = function(ast) {
      var left = this.evalute(ast.left);
      var right = this.evalute(ast.right);
      return left <= right;
    };
    Evaluator2.prototype.ge = function(ast) {
      var left = this.evalute(ast.left);
      var right = this.evalute(ast.right);
      return left >= right;
    };
    Evaluator2.prototype.eq = function(ast) {
      var left = this.evalute(ast.left);
      var right = this.evalute(ast.right);
      return left == right;
    };
    Evaluator2.prototype.ne = function(ast) {
      var left = this.evalute(ast.left);
      var right = this.evalute(ast.right);
      return left != right;
    };
    Evaluator2.prototype.streq = function(ast) {
      var left = this.evalute(ast.left);
      var right = this.evalute(ast.right);
      return left === right;
    };
    Evaluator2.prototype.strneq = function(ast) {
      var left = this.evalute(ast.left);
      var right = this.evalute(ast.right);
      return left !== right;
    };
    Evaluator2.prototype.binary = function(ast) {
      var left = this.evalute(ast.left);
      var right = this.evalute(ast.right);
      if (ast.op === "&") {
        return left & right;
      } else if (ast.op === "^") {
        return left ^ right;
      } else {
        return left | right;
      }
    };
    Evaluator2.prototype.and = function(ast) {
      var left = this.evalute(ast.left);
      return left && this.evalute(ast.right);
    };
    Evaluator2.prototype.or = function(ast) {
      var left = this.evalute(ast.left);
      return left || this.evalute(ast.right);
    };
    Evaluator2.prototype.number = function(ast) {
      return ast.value;
    };
    Evaluator2.prototype.convertHostGetterToVariable = function(ast) {
      var _a3, _b3;
      if (ast.type !== "getter") {
        return ast;
      }
      var gettter = ast;
      var keys = [];
      while (((_a3 = gettter.host) === null || _a3 === void 0 ? void 0 : _a3.type) === "getter") {
        keys.push("host");
        gettter = gettter.host;
      }
      if (((_b3 = gettter.host) === null || _b3 === void 0 ? void 0 : _b3.type) === "variable" && gettter.host.name === "&") {
        var ret = {
          host: ast
        };
        var host = keys.reduce(function(host2, key) {
          host2[key] = __assign({}, host2[key]);
          return host2[key];
        }, ret);
        host.host = {
          start: host.host.start,
          end: host.host.end,
          type: "variable",
          name: this.evalute(host.host.key)
        };
        return ret.host;
      }
      return ast;
    };
    Evaluator2.prototype.nsVariable = function(ast) {
      var _this = this;
      var body = ast.body;
      if (ast.namespace === "window") {
        this.contextStack.push(function(name) {
          return name === "&" ? window : window[name];
        });
      } else if (ast.namespace === "cookie") {
        body = this.convertHostGetterToVariable(body);
        this.contextStack.push(function(name) {
          return getCookie(name);
        });
      } else if (ast.namespace === "ls" || ast.namespace === "ss") {
        var ns_1 = ast.namespace;
        body = this.convertHostGetterToVariable(body);
        this.contextStack.push(function(name) {
          var raw = ns_1 === "ss" ? sessionStorage.getItem(name) : localStorage.getItem(name);
          if (typeof raw === "string") {
            if (/^\d+$/.test(raw)) {
              var parsed = JSON.parse(raw);
              return "".concat(parsed) === raw ? parsed : raw;
            }
            return parseJson(raw, raw);
          }
          return void 0;
        });
      } else {
        throw new Error("Unsupported namespace: " + ast.namespace);
      }
      var result = this.evalute(body);
      (result === null || result === void 0 ? void 0 : result.then) ? result.then(function() {
        return _this.contextStack.pop();
      }) : this.contextStack.pop();
      return result;
    };
    Evaluator2.prototype.variable = function(ast) {
      var contextGetter = this.contextStack[this.contextStack.length - 1];
      return contextGetter(ast.name);
    };
    Evaluator2.prototype.identifier = function(ast) {
      return ast.name;
    };
    Evaluator2.prototype.array = function(ast) {
      var _this = this;
      return ast.members.map(function(member) {
        return _this.evalute(member);
      });
    };
    Evaluator2.prototype.literal = function(ast) {
      return ast.value;
    };
    Evaluator2.prototype.string = function(ast) {
      return ast.value;
    };
    Evaluator2.prototype.object = function(ast) {
      var _this = this;
      var object = {};
      ast.members.forEach(function(_a3) {
        var key = _a3.key, value = _a3.value;
        object[_this.evalute(key)] = _this.evalute(value);
      });
      return object;
    };
    Evaluator2.prototype.conditional = function(ast) {
      return this.evalute(ast.test) ? this.evalute(ast.consequent) : this.evalute(ast.alternate);
    };
    Evaluator2.prototype.funcCall = function(ast) {
      var _this = this;
      var fnName = "fn".concat(ast.identifier);
      var fn = this.functions[fnName] || this[fnName] || this.filters.hasOwnProperty(ast.identifier) && this.filters[ast.identifier];
      if (!fn) {
        throw new FormulaEvalError("".concat(ast.identifier, "函数没有定义"));
      }
      var args = ast.args;
      if (~["IF", "AND", "OR", "XOR", "IFS"].indexOf(ast.identifier)) {
        args = args.map(function(a) {
          return function() {
            return _this.evalute(a);
          };
        });
      } else {
        args = args.map(function(a) {
          return _this.evalute(a);
        });
      }
      return fn.apply(this, args);
    };
    Evaluator2.prototype.anonymousFunction = function(ast) {
      return ast;
    };
    Evaluator2.prototype.callAnonymousFunction = function(ast, args) {
      var ctx = createObject(this.contextStack[this.contextStack.length - 1]("&") || {}, {});
      ast.args.forEach(function(arg) {
        if (arg.type !== "variable") {
          throw new Error("expected a variable as argument");
        }
        ctx[arg.name] = args.shift();
      });
      this.contextStack.push(function(varName) {
        return varName === "&" ? ctx : ctx[varName];
      });
      var result = this.evalute(ast.return);
      this.contextStack.pop();
      return result;
    };
    Evaluator2.prototype.fnIF = function(condition, trueValue, falseValue) {
      return condition() ? trueValue() : falseValue();
    };
    Evaluator2.prototype.fnAND = function() {
      var condtions = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        condtions[_i] = arguments[_i];
      }
      return condtions.every(function(c) {
        return c();
      });
    };
    Evaluator2.prototype.fnOR = function() {
      var condtions = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        condtions[_i] = arguments[_i];
      }
      return condtions.some(function(c) {
        return c();
      });
    };
    Evaluator2.prototype.fnXOR = function() {
      var condtions = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        condtions[_i] = arguments[_i];
      }
      return !!(condtions.filter(function(c) {
        return c();
      }).length % 2);
    };
    Evaluator2.prototype.fnIFS = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      if (args.length % 2) {
        args.splice(args.length - 1, 0, function() {
          return true;
        });
      }
      while (args.length) {
        var c = args.shift();
        var v = args.shift();
        if (c()) {
          return v();
        }
      }
      return;
    };
    Evaluator2.prototype.fnABS = function(a) {
      a = this.formatNumber(a);
      return Math.abs(a);
    };
    Evaluator2.prototype.fnMAX = function() {
      var _this = this;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var arr = normalizeArgs(args);
      return Math.max.apply(Math, arr.map(function(item) {
        return _this.formatNumber(item);
      }));
    };
    Evaluator2.prototype.fnMIN = function() {
      var _this = this;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var arr = normalizeArgs(args);
      return Math.min.apply(Math, arr.map(function(item) {
        return _this.formatNumber(item);
      }));
    };
    Evaluator2.prototype.fnSUM = function() {
      var _this = this;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var arr = normalizeArgs(args);
      return arr.reduce(function(sum, a) {
        return sum + _this.formatNumber(a) || 0;
      }, 0);
    };
    Evaluator2.prototype.fnINT = function(n) {
      return Math.floor(this.formatNumber(n));
    };
    Evaluator2.prototype.fnMOD = function(a, b) {
      return this.formatNumber(a) % this.formatNumber(b);
    };
    Evaluator2.prototype.fnPI = function() {
      return Math.PI;
    };
    Evaluator2.prototype.fnROUND = function(a, b) {
      if (b === void 0) {
        b = 2;
      }
      a = this.formatNumber(a);
      b = this.formatNumber(b);
      var bResult = Math.round(b);
      if (bResult) {
        var c = Math.pow(10, bResult);
        return Math.round(a * c) / c;
      }
      return Math.round(a);
    };
    Evaluator2.prototype.fnFLOOR = function(a, b) {
      if (b === void 0) {
        b = 2;
      }
      a = this.formatNumber(a);
      b = this.formatNumber(b);
      var bResult = Math.round(b);
      if (bResult) {
        var c = Math.pow(10, bResult);
        return Math.floor(a * c) / c;
      }
      return Math.floor(a);
    };
    Evaluator2.prototype.fnCEIL = function(a, b) {
      if (b === void 0) {
        b = 2;
      }
      a = this.formatNumber(a);
      b = this.formatNumber(b);
      var bResult = Math.round(b);
      if (bResult) {
        var c = Math.pow(10, bResult);
        return Math.ceil(a * c) / c;
      }
      return Math.ceil(a);
    };
    Evaluator2.prototype.fnSQRT = function(n) {
      return Math.sqrt(this.formatNumber(n));
    };
    Evaluator2.prototype.fnAVG = function() {
      var _this = this;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var arr = normalizeArgs(args);
      return this.fnSUM.apply(this, arr.map(function(item) {
        return _this.formatNumber(item);
      })) / arr.length;
    };
    Evaluator2.prototype.fnDEVSQ = function() {
      var e_1, _a3;
      var _this = this;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      if (args.length === 0) {
        return null;
      }
      var arr = normalizeArgs(args);
      var nums = arr.map(function(item) {
        return _this.formatNumber(item);
      });
      var sum = nums.reduce(function(sum2, a) {
        return sum2 + a || 0;
      }, 0);
      var mean = sum / nums.length;
      var result = 0;
      try {
        for (var nums_1 = __values(nums), nums_1_1 = nums_1.next(); !nums_1_1.done; nums_1_1 = nums_1.next()) {
          var num = nums_1_1.value;
          result += Math.pow(num - mean, 2);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (nums_1_1 && !nums_1_1.done && (_a3 = nums_1.return))
            _a3.call(nums_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return result;
    };
    Evaluator2.prototype.fnAVEDEV = function() {
      var e_2, _a3;
      var _this = this;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      if (args.length === 0) {
        return null;
      }
      var arr = args;
      if (args.length === 1 && Array.isArray(args[0])) {
        arr = args[0];
      }
      var nums = arr.map(function(item) {
        return _this.formatNumber(item);
      });
      var sum = nums.reduce(function(sum2, a) {
        return sum2 + a || 0;
      }, 0);
      var mean = sum / nums.length;
      var result = 0;
      try {
        for (var nums_2 = __values(nums), nums_2_1 = nums_2.next(); !nums_2_1.done; nums_2_1 = nums_2.next()) {
          var num = nums_2_1.value;
          result += Math.abs(num - mean);
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (nums_2_1 && !nums_2_1.done && (_a3 = nums_2.return))
            _a3.call(nums_2);
        } finally {
          if (e_2)
            throw e_2.error;
        }
      }
      return result / nums.length;
    };
    Evaluator2.prototype.fnHARMEAN = function() {
      var e_3, _a3;
      var _this = this;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      if (args.length === 0) {
        return null;
      }
      var arr = args;
      if (args.length === 1 && Array.isArray(args[0])) {
        arr = args[0];
      }
      var nums = arr.map(function(item) {
        return _this.formatNumber(item);
      });
      var den = 0;
      try {
        for (var nums_3 = __values(nums), nums_3_1 = nums_3.next(); !nums_3_1.done; nums_3_1 = nums_3.next()) {
          var num = nums_3_1.value;
          den += 1 / num;
        }
      } catch (e_3_1) {
        e_3 = { error: e_3_1 };
      } finally {
        try {
          if (nums_3_1 && !nums_3_1.done && (_a3 = nums_3.return))
            _a3.call(nums_3);
        } finally {
          if (e_3)
            throw e_3.error;
        }
      }
      return nums.length / den;
    };
    Evaluator2.prototype.fnLARGE = function(nums, k) {
      var _this = this;
      if (nums.length === 0) {
        return null;
      }
      var numsFormat = nums.map(function(item) {
        return _this.formatNumber(item);
      });
      if (k < 0 || numsFormat.length < k) {
        return null;
      }
      return numsFormat.sort(function(a, b) {
        return b - a;
      })[k - 1];
    };
    Evaluator2.prototype.fnUPPERMONEY = function(n) {
      var _a3;
      n = this.formatNumber(n);
      var maxLen = 14;
      if (((_a3 = n.toString().split(".")[0]) === null || _a3 === void 0 ? void 0 : _a3.length) > maxLen) {
        return "最大数额只支持到兆(既小数点前".concat(maxLen, "位)");
      }
      var fraction = ["角", "分"];
      var digit = ["零", "壹", "贰", "叁", "肆", "伍", "陆", "柒", "捌", "玖"];
      var unit = [
        ["元", "万", "亿", "兆"],
        ["", "拾", "佰", "仟"]
      ];
      var head = n < 0 ? "欠" : "";
      n = Math.abs(n);
      var s = "";
      for (var i = 0; i < fraction.length; i++) {
        s += (digit[Math.floor(n * 10 * Math.pow(10, i)) % 10] + fraction[i]).replace(/零./, "");
      }
      s = s || "整";
      n = Math.floor(n);
      for (var i = 0; i < unit[0].length && n > 0; i++) {
        var p = "";
        for (var j = 0; j < unit[1].length && n > 0; j++) {
          p = digit[n % 10] + unit[1][j] + p;
          n = Math.floor(n / 10);
        }
        s = p.replace(/(零.)*零$/, "").replace(/^$/, "零") + unit[0][i] + s;
      }
      return head + s.replace(/(零.)*零元/, "元").replace(/(零.)+/g, "零").replace(/^整$/, "零元整");
    };
    Evaluator2.prototype.fnRAND = function() {
      return Math.random();
    };
    Evaluator2.prototype.fnLAST = function(arr) {
      return arr.length ? arr[arr.length - 1] : null;
    };
    Evaluator2.prototype.fnPOW = function(base, exponent) {
      if (!(0, import_isNumber.default)(base) || !(0, import_isNumber.default)(exponent)) {
        return base;
      }
      return Math.pow(base, exponent);
    };
    Evaluator2.prototype.normalizeText = function(raw) {
      if (raw instanceof Date) {
        return moment_default(raw).format();
      }
      return "".concat(raw);
    };
    Evaluator2.prototype.fnLEFT = function(text, len) {
      text = this.normalizeText(text);
      return text.substring(0, len);
    };
    Evaluator2.prototype.fnRIGHT = function(text, len) {
      text = this.normalizeText(text);
      return text.substring(text.length - len, text.length);
    };
    Evaluator2.prototype.fnLEN = function(text) {
      text = this.normalizeText(text);
      return text === null || text === void 0 ? void 0 : text.length;
    };
    Evaluator2.prototype.fnLENGTH = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return this.fnLEN.call(this, args);
    };
    Evaluator2.prototype.fnISEMPTY = function(text) {
      return !text || !String(text).trim();
    };
    Evaluator2.prototype.fnCONCATENATE = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return args.join("");
    };
    Evaluator2.prototype.fnCHAR = function(code) {
      return String.fromCharCode(code);
    };
    Evaluator2.prototype.fnLOWER = function(text) {
      text = this.normalizeText(text);
      return text.toLowerCase();
    };
    Evaluator2.prototype.fnUPPER = function(text) {
      text = this.normalizeText(text);
      return text.toUpperCase();
    };
    Evaluator2.prototype.fnUPPERFIRST = function(text) {
      text = this.normalizeText(text);
      return (0, import_upperFirst.default)(text);
    };
    Evaluator2.prototype.fnPADSTART = function(text, num, pad) {
      text = this.normalizeText(text);
      return (0, import_padStart.default)(text, num, pad);
    };
    Evaluator2.prototype.fnCAPITALIZE = function(text) {
      text = this.normalizeText(text);
      return (0, import_capitalize.default)(text);
    };
    Evaluator2.prototype.fnESCAPE = function(text) {
      text = this.normalizeText(text);
      return (0, import_escape.default)(text);
    };
    Evaluator2.prototype.fnTRUNCATE = function(text, length) {
      text = this.normalizeText(text);
      return (0, import_truncate.default)(text, { length });
    };
    Evaluator2.prototype.fnBEFORELAST = function(text, delimiter) {
      if (delimiter === void 0) {
        delimiter = ".";
      }
      text = this.normalizeText(text);
      delimiter = this.normalizeText(delimiter);
      return text.split(delimiter).slice(0, -1).join(delimiter) || text + "";
    };
    Evaluator2.prototype.fnSPLIT = function(text, sep) {
      if (sep === void 0) {
        sep = ",";
      }
      text = this.normalizeText(text);
      return text.split(sep);
    };
    Evaluator2.prototype.fnTRIM = function(text) {
      text = this.normalizeText(text);
      return text.trim();
    };
    Evaluator2.prototype.fnSTRIPTAG = function(text) {
      text = this.normalizeText(text);
      return text.replace(/<\/?[^>]+(>|$)/g, "");
    };
    Evaluator2.prototype.fnLINEBREAK = function(text) {
      text = this.normalizeText(text);
      return text.replace(/(?:\r\n|\r|\n)/g, "<br/>");
    };
    Evaluator2.prototype.fnSTARTSWITH = function(text, search) {
      search = this.normalizeText(search);
      if (!search) {
        return false;
      }
      text = this.normalizeText(text);
      return text.indexOf(search) === 0;
    };
    Evaluator2.prototype.fnENDSWITH = function(text, search) {
      search = this.normalizeText(search);
      if (!search) {
        return false;
      }
      text = this.normalizeText(text);
      return text.indexOf(search, text.length - search.length) !== -1;
    };
    Evaluator2.prototype.fnCONTAINS = function(text, search) {
      search = this.normalizeText(search);
      if (!search) {
        return false;
      }
      text = this.normalizeText(text);
      return !!~text.indexOf(search);
    };
    Evaluator2.prototype.fnREPLACE = function(text, search, replace) {
      text = this.normalizeText(text);
      search = this.normalizeText(search);
      replace = this.normalizeText(replace);
      var result = text;
      if (typeof replace === "undefined" || !search) {
        return result;
      }
      while (true) {
        var idx = result.indexOf(search);
        if (!~idx) {
          break;
        }
        result = result.substring(0, idx) + replace + result.substring(idx + search.length);
      }
      return result;
    };
    Evaluator2.prototype.fnSEARCH = function(text, search, start) {
      if (start === void 0) {
        start = 0;
      }
      search = this.normalizeText(search);
      text = this.normalizeText(text);
      start = this.formatNumber(start);
      var idx = text.indexOf(search, start);
      if (~idx && search) {
        return idx;
      }
      return -1;
    };
    Evaluator2.prototype.fnMID = function(text, from, len) {
      text = this.normalizeText(text);
      from = this.formatNumber(from);
      len = this.formatNumber(len);
      return text.substring(from, from + len);
    };
    Evaluator2.prototype.fnBASENAME = function(text) {
      text = this.normalizeText(text);
      return text.split(/[\\/]/).pop();
    };
    Evaluator2.prototype.fnUUID = function(length) {
      if (length === void 0) {
        length = 36;
      }
      var len = Math.min(Math.max(length, 0), 36);
      return uuidv4().slice(0, len);
    };
    Evaluator2.prototype.fnDATE = function(year, month, day, hour, minute, second) {
      if (month === void 0) {
        return new Date(year);
      }
      return new Date(year, month, day, hour, minute, second);
    };
    Evaluator2.prototype.fnTIMESTAMP = function(date, format2) {
      return parseInt(moment_default(this.normalizeDate(date)).format(format2 === "x" ? "x" : "X"), 10);
    };
    Evaluator2.prototype.fnTODAY = function() {
      return /* @__PURE__ */ new Date();
    };
    Evaluator2.prototype.fnNOW = function() {
      return /* @__PURE__ */ new Date();
    };
    Evaluator2.prototype.fnWEEKDAY = function(date, type) {
      var md = moment_default(this.normalizeDate(date));
      return type === 2 ? md.isoWeekday() : md.weekday();
    };
    Evaluator2.prototype.fnWEEK = function(date, isISO) {
      if (isISO === void 0) {
        isISO = false;
      }
      var md = moment_default(this.normalizeDate(date));
      return isISO ? md.isoWeek() : md.week();
    };
    Evaluator2.prototype.fnDATETOSTR = function(date, format2) {
      if (format2 === void 0) {
        format2 = "YYYY-MM-DD HH:mm:ss";
      }
      date = this.normalizeDate(date);
      return moment_default(date).format(format2);
    };
    Evaluator2.prototype.fnDATERANGESPLIT = function(daterange, key, format2, delimiter) {
      var _this = this;
      if (delimiter === void 0) {
        delimiter = ",";
      }
      if (!daterange || typeof daterange !== "string") {
        return daterange;
      }
      var dateArr = daterange.split(delimiter).map(function(item) {
        return item && format2 ? moment_default(_this.normalizeDate(item.trim())).format(format2) : item.trim();
      });
      if ([0, "0", "start"].includes(key)) {
        return dateArr[0];
      }
      if ([1, "1", "end"].includes(key)) {
        return dateArr[1];
      }
      return dateArr;
    };
    Evaluator2.prototype.fnSTARTOF = function(date, unit, format2) {
      var md = moment_default(this.normalizeDate(date)).startOf(unit || "day");
      return format2 ? md.format(format2) : md.toDate();
    };
    Evaluator2.prototype.fnENDOF = function(date, unit, format2) {
      var md = moment_default(this.normalizeDate(date)).endOf(unit || "day");
      return format2 ? md.format(format2) : md.toDate();
    };
    Evaluator2.prototype.normalizeDate = function(raw) {
      if (typeof raw === "string" || typeof raw === "number") {
        var formats = ["", "YYYY-MM-DD HH:mm:ss", "X"];
        if (/^\d{10}((\.\d+)*)$/.test(raw.toString())) {
          formats = ["X", "x", "YYYY-MM-DD HH:mm:ss", ""];
        } else if (/^\d{13}((\.\d+)*)$/.test(raw.toString())) {
          formats = ["x", "X", "YYYY-MM-DD HH:mm:ss", ""];
        }
        while (formats.length) {
          var format2 = formats.shift();
          var date = moment_default(raw, format2);
          if (date.isValid()) {
            return date.toDate();
          }
        }
      }
      return raw;
    };
    Evaluator2.prototype.normalizeDateRange = function(raw) {
      var _this = this;
      return (Array.isArray(raw) ? raw : raw.split(",")).map(function(item) {
        return _this.normalizeDate(String(item).trim());
      });
    };
    Evaluator2.prototype.fnYEAR = function(date) {
      date = this.normalizeDate(date);
      return date.getFullYear();
    };
    Evaluator2.prototype.fnMONTH = function(date) {
      date = this.normalizeDate(date);
      return date.getMonth() + 1;
    };
    Evaluator2.prototype.fnDAY = function(date) {
      date = this.normalizeDate(date);
      return date.getDate();
    };
    Evaluator2.prototype.fnHOUR = function(date) {
      date = this.normalizeDate(date);
      return date.getHours();
    };
    Evaluator2.prototype.fnMINUTE = function(date) {
      date = this.normalizeDate(date);
      return date.getMinutes();
    };
    Evaluator2.prototype.fnSECOND = function(date) {
      date = this.normalizeDate(date);
      return date.getSeconds();
    };
    Evaluator2.prototype.fnYEARS = function(endDate, startDate) {
      endDate = this.normalizeDate(endDate);
      startDate = this.normalizeDate(startDate);
      return moment_default(endDate).diff(moment_default(startDate), "year");
    };
    Evaluator2.prototype.fnMINUTES = function(endDate, startDate) {
      endDate = this.normalizeDate(endDate);
      startDate = this.normalizeDate(startDate);
      return moment_default(endDate).diff(moment_default(startDate), "minutes");
    };
    Evaluator2.prototype.fnDAYS = function(endDate, startDate) {
      endDate = this.normalizeDate(endDate);
      startDate = this.normalizeDate(startDate);
      return moment_default(endDate).diff(moment_default(startDate), "days");
    };
    Evaluator2.prototype.fnHOURS = function(endDate, startDate) {
      endDate = this.normalizeDate(endDate);
      startDate = this.normalizeDate(startDate);
      return moment_default(endDate).diff(moment_default(startDate), "hour");
    };
    Evaluator2.prototype.fnDATEMODIFY = function(date, num, format2) {
      date = this.normalizeDate(date);
      return moment_default(date).add(num, format2).toDate();
    };
    Evaluator2.prototype.fnSTRTODATE = function(value, format2) {
      if (format2 === void 0) {
        format2 = "";
      }
      return moment_default(value, format2).toDate();
    };
    Evaluator2.prototype.fnISBEFORE = function(a, b, unit) {
      if (unit === void 0) {
        unit = "day";
      }
      a = this.normalizeDate(a);
      b = this.normalizeDate(b);
      return moment_default(a).isBefore(moment_default(b), unit);
    };
    Evaluator2.prototype.fnISAFTER = function(a, b, unit) {
      if (unit === void 0) {
        unit = "day";
      }
      a = this.normalizeDate(a);
      b = this.normalizeDate(b);
      return moment_default(a).isAfter(moment_default(b), unit);
    };
    Evaluator2.prototype.fnBETWEENRANGE = function(date, daterange, unit, inclusivity) {
      if (unit === void 0) {
        unit = "day";
      }
      if (inclusivity === void 0) {
        inclusivity = "[]";
      }
      var range2 = this.normalizeDateRange(daterange);
      return moment_default(this.normalizeDate(date)).isBetween(range2[0], range2[1], unit, inclusivity);
    };
    Evaluator2.prototype.fnISSAMEORBEFORE = function(a, b, unit) {
      if (unit === void 0) {
        unit = "day";
      }
      a = this.normalizeDate(a);
      b = this.normalizeDate(b);
      return moment_default(a).isSameOrBefore(moment_default(b), unit);
    };
    Evaluator2.prototype.fnISSAMEORAFTER = function(a, b, unit) {
      if (unit === void 0) {
        unit = "day";
      }
      a = this.normalizeDate(a);
      b = this.normalizeDate(b);
      return moment_default(a).isSameOrAfter(moment_default(b), unit);
    };
    Evaluator2.prototype.fnCOUNT = function(value) {
      return Array.isArray(value) ? value.length : value ? 1 : 0;
    };
    Evaluator2.prototype.fnARRAYMAP = function(value, iterator) {
      var _this = this;
      if (!iterator || iterator.type !== "anonymous_function") {
        throw new Error("expected an anonymous function get " + iterator);
      }
      return (Array.isArray(value) ? value : []).map(function(item, index, arr) {
        return _this.callAnonymousFunction(iterator, [item, index, arr]);
      });
    };
    Evaluator2.prototype.fnARRAYFILTER = function(value, iterator) {
      var _this = this;
      if (!iterator || iterator.type !== "anonymous_function") {
        throw new Error("expected an anonymous function get " + iterator);
      }
      return (Array.isArray(value) ? value : []).filter(function(item, index, arr) {
        return _this.callAnonymousFunction(iterator, [item, index, arr]);
      });
    };
    Evaluator2.prototype.fnARRAYFINDINDEX = function(arr, iterator) {
      var _this = this;
      if (!iterator || iterator.type !== "anonymous_function") {
        throw new Error("expected an anonymous function get " + iterator);
      }
      return (Array.isArray(arr) ? arr : []).findIndex(function(item, index, arr2) {
        return _this.callAnonymousFunction(iterator, [item, index, arr2]);
      });
    };
    Evaluator2.prototype.fnARRAYFIND = function(arr, iterator) {
      var _this = this;
      if (!iterator || iterator.type !== "anonymous_function") {
        throw new Error("expected an anonymous function get " + iterator);
      }
      return (Array.isArray(arr) ? arr : []).find(function(item, index, arr2) {
        return _this.callAnonymousFunction(iterator, [item, index, arr2]);
      });
    };
    Evaluator2.prototype.fnARRAYSOME = function(arr, iterator) {
      var _this = this;
      if (!iterator || iterator.type !== "anonymous_function") {
        throw new Error("expected an anonymous function get " + iterator);
      }
      return (Array.isArray(arr) ? arr : []).some(function(item, index, arr2) {
        return _this.callAnonymousFunction(iterator, [item, index, arr2]);
      });
    };
    Evaluator2.prototype.fnARRAYEVERY = function(arr, iterator) {
      var _this = this;
      if (!iterator || iterator.type !== "anonymous_function") {
        throw new Error("expected an anonymous function get " + iterator);
      }
      return (Array.isArray(arr) ? arr : []).every(function(item, index, arr2) {
        return _this.callAnonymousFunction(iterator, [item, index, arr2]);
      });
    };
    Evaluator2.prototype.fnARRAYINCLUDES = function(arr, item) {
      return (Array.isArray(arr) ? arr : []).includes(item);
    };
    Evaluator2.prototype.fnCOMPACT = function(arr) {
      var e_4, _a3;
      if (Array.isArray(arr)) {
        var resIndex = 0;
        var result = [];
        try {
          for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {
            var item = arr_1_1.value;
            if (item) {
              result[resIndex++] = item;
            }
          }
        } catch (e_4_1) {
          e_4 = { error: e_4_1 };
        } finally {
          try {
            if (arr_1_1 && !arr_1_1.done && (_a3 = arr_1.return))
              _a3.call(arr_1);
          } finally {
            if (e_4)
              throw e_4.error;
          }
        }
        return result;
      } else {
        return [];
      }
    };
    Evaluator2.prototype.fnJOIN = function(arr, separator) {
      if (separator === void 0) {
        separator = "";
      }
      if (Array.isArray(arr)) {
        return arr.join(separator);
      } else {
        return "";
      }
    };
    Evaluator2.prototype.fnCONCAT = function() {
      var arr = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        arr[_i] = arguments[_i];
      }
      if ((arr === null || arr === void 0 ? void 0 : arr[0]) && !Array.isArray(arr[0])) {
        arr[0] = [arr[0]];
      }
      return arr.reduce(function(a, b) {
        return a.concat(b);
      }, []).filter(function(item) {
        return item;
      });
    };
    Evaluator2.prototype.fnUNIQ = function(arr, field) {
      return field ? (0, import_uniqBy.default)(arr, field) : (0, import_uniqWith.default)(arr, import_isEqual.default);
    };
    Evaluator2.prototype.fnENCODEJSON = function(obj) {
      return JSON.stringify(obj);
    };
    Evaluator2.prototype.fnDECODEJSON = function(str) {
      return JSON.parse(str);
    };
    Evaluator2.prototype.fnGET = function(obj, path, defaultValue) {
      return (0, import_get.default)(obj, path, defaultValue);
    };
    Evaluator2.prototype.fnISTYPE = function(target, type) {
      switch (type) {
        case "string":
          return typeof target === "string";
        case "number":
          return typeof target === "number";
        case "array":
          return Array.isArray(target);
        case "date":
          return !!(target && target instanceof Date);
        case "plain-object":
          return (0, import_isPlainObject.default)(target);
        case "nil":
          return !target;
      }
      return false;
    };
    Evaluator2.defaultFilters = {};
    Evaluator2.defaultFunctions = {};
    return Evaluator2;
  }()
);
function getCookie(name) {
  var value = "; ".concat(document.cookie);
  var parts = value.split("; ".concat(name, "="));
  if (parts.length === 2) {
    return parts.pop().split(";").shift();
  }
  return void 0;
}
function parseJson(str, defaultValue) {
  try {
    return JSON.parse(str);
  } catch (e) {
    return defaultValue;
  }
}
function stripNumber(number) {
  if (typeof number === "number" && !Number.isInteger(number)) {
    return parseFloat(number.toPrecision(16));
  } else {
    return number;
  }
}
function normalizeArgs(args) {
  if (args.length === 1 && Array.isArray(args[0])) {
    args = args[0];
  }
  return args;
}
function createObject(superProps, props, properties) {
  var obj = superProps ? Object.create(superProps, __assign(__assign({}, properties), { __super: {
    value: superProps,
    writable: false,
    enumerable: false
  } })) : Object.create(Object.prototype, properties);
  props && Object.keys(props).forEach(function(key) {
    return obj[key] = props[key];
  });
  return obj;
}
function createStr() {
  return ("00000000000000000" + (Math.random() * 18446744073709552e3).toString(16)).slice(-16);
}
function uuidv4() {
  var a = createStr();
  var b = createStr();
  return a.slice(0, 8) + "-" + a.slice(8, 12) + "-4" + a.slice(13) + "-a" + b.slice(1, 4) + "-" + b.slice(4);
}

// node_modules/amis-formula/esm/evalutorForAsync.js
function runSequence(arr, fn) {
  return __awaiter(this, void 0, void 0, function() {
    var result;
    var _this = this;
    return __generator(this, function(_a3) {
      switch (_a3.label) {
        case 0:
          result = [];
          return [4, arr.reduce(function(promise, item, index) {
            return __awaiter(_this, void 0, void 0, function() {
              var _a4, _b3;
              return __generator(this, function(_c) {
                switch (_c.label) {
                  case 0:
                    return [4, promise];
                  case 1:
                    _c.sent();
                    _b3 = (_a4 = result).push;
                    return [4, fn(item, index)];
                  case 2:
                    _b3.apply(_a4, [_c.sent()]);
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          }, Promise.resolve())];
        case 1:
          _a3.sent();
          return [2, result];
      }
    });
  });
}
var AsyncEvaluator = (
  /** @class */
  function(_super) {
    __extends(AsyncEvaluator2, _super);
    function AsyncEvaluator2(data, options) {
      return _super.call(this, data, options) || this;
    }
    AsyncEvaluator2.prototype.document = function(ast) {
      return __awaiter(this, void 0, void 0, function() {
        var isString3, content;
        var _this = this;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              if (!ast.body.length) {
                return [2, void 0];
              }
              isString3 = ast.body.length > 1;
              return [4, runSequence(ast.body, function(item) {
                return __awaiter(_this, void 0, void 0, function() {
                  var result;
                  return __generator(this, function(_a4) {
                    result = this.evalute(item);
                    if (isString3 && result == null) {
                      return [2, ""];
                    }
                    return [2, result];
                  });
                });
              })];
            case 1:
              content = _a3.sent();
              return [2, content.length === 1 ? content[0] : content.join("")];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.filter = function(ast) {
      return __awaiter(this, void 0, void 0, function() {
        var input, filters2, context, filter2, fn, argsRes;
        var _this = this;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.evalute(ast.input)];
            case 1:
              input = _a3.sent();
              filters2 = ast.filters.concat();
              context = {
                filter: void 0,
                data: this.context,
                restFilters: filters2
              };
              _a3.label = 2;
            case 2:
              if (!filters2.length)
                return [3, 4];
              filter2 = filters2.shift();
              fn = this.filters[filter2.name];
              if (!fn) {
                throw new Error("filter `".concat(filter2.name, "` not exists."));
              }
              context.filter = filter2;
              return [4, runSequence(filter2.args, function(item) {
                return __awaiter(_this, void 0, void 0, function() {
                  var res;
                  var _this2 = this;
                  return __generator(this, function(_a4) {
                    switch (_a4.label) {
                      case 0:
                        if (!((item === null || item === void 0 ? void 0 : item.type) === "mixed"))
                          return [3, 2];
                        return [4, runSequence(item.body, function(item2) {
                          return typeof item2 === "string" ? item2 : _this2.evalute(item2);
                        })];
                      case 1:
                        res = _a4.sent();
                        return [2, res.join("")];
                      case 2:
                        if (item.type) {
                          return [2, this.evalute(item)];
                        }
                        _a4.label = 3;
                      case 3:
                        return [2, item];
                    }
                  });
                });
              })];
            case 3:
              argsRes = _a3.sent();
              input = fn.apply(context, [input].concat(argsRes));
              return [3, 2];
            case 4:
              return [2, input];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.template = function(ast) {
      return __awaiter(this, void 0, void 0, function() {
        var args;
        var _this = this;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, runSequence(ast.body, function(arg) {
                return _this.evalute(arg);
              })];
            case 1:
              args = _a3.sent();
              return [2, args.join("")];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.getter = function(ast) {
      var _a3;
      return __awaiter(this, void 0, void 0, function() {
        var host, key;
        return __generator(this, function(_b3) {
          switch (_b3.label) {
            case 0:
              return [4, this.evalute(ast.host)];
            case 1:
              host = _b3.sent();
              return [4, this.evalute(ast.key)];
            case 2:
              key = _b3.sent();
              if (typeof key === "undefined" && ((_a3 = ast.key) === null || _a3 === void 0 ? void 0 : _a3.type) === "variable") {
                key = ast.key.name;
              }
              return [2, host === null || host === void 0 ? void 0 : host[key]];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.unary = function(ast) {
      return __awaiter(this, void 0, void 0, function() {
        var value;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.evalute(ast.value)];
            case 1:
              value = _a3.sent();
              switch (ast.op) {
                case "+":
                  return [2, +value];
                case "-":
                  return [2, -value];
                case "~":
                  return [2, ~value];
                case "!":
                  return [2, !value];
              }
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.power = function(ast) {
      return __awaiter(this, void 0, void 0, function() {
        var left, right;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.evalute(ast.left)];
            case 1:
              left = _a3.sent();
              return [4, this.evalute(ast.right)];
            case 2:
              right = _a3.sent();
              return [2, Math.pow(this.formatNumber(left), this.formatNumber(right))];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.multiply = function(ast) {
      return __awaiter(this, void 0, void 0, function() {
        var left, right;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.evalute(ast.left)];
            case 1:
              left = _a3.sent();
              return [4, this.evalute(ast.right)];
            case 2:
              right = _a3.sent();
              return [2, stripNumber(this.formatNumber(left) * this.formatNumber(right))];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.divide = function(ast) {
      return __awaiter(this, void 0, void 0, function() {
        var left, right;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.evalute(ast.left)];
            case 1:
              left = _a3.sent();
              return [4, this.evalute(ast.right)];
            case 2:
              right = _a3.sent();
              return [2, stripNumber(this.formatNumber(left) / this.formatNumber(right))];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.remainder = function(ast) {
      return __awaiter(this, void 0, void 0, function() {
        var left, right;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.evalute(ast.left)];
            case 1:
              left = _a3.sent();
              return [4, this.evalute(ast.right)];
            case 2:
              right = _a3.sent();
              return [2, this.formatNumber(left) % this.formatNumber(right)];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.add = function(ast) {
      return __awaiter(this, void 0, void 0, function() {
        var left, right;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.evalute(ast.left)];
            case 1:
              left = _a3.sent();
              return [4, this.evalute(ast.right)];
            case 2:
              right = _a3.sent();
              if (isNaN(left) || isNaN(right)) {
                return [2, left + right];
              }
              return [2, stripNumber(this.formatNumber(left) + this.formatNumber(right))];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.minus = function(ast) {
      return __awaiter(this, void 0, void 0, function() {
        var left, right;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.evalute(ast.left)];
            case 1:
              left = _a3.sent();
              return [4, this.evalute(ast.right)];
            case 2:
              right = _a3.sent();
              return [2, stripNumber(this.formatNumber(left) - this.formatNumber(right))];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.shift = function(ast) {
      return __awaiter(this, void 0, void 0, function() {
        var left, right;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.evalute(ast.left)];
            case 1:
              left = _a3.sent();
              return [4, this.formatNumber(this.evalute(ast.right), true)];
            case 2:
              right = _a3.sent();
              if (ast.op === "<<") {
                return [2, left << right];
              } else if (ast.op == ">>") {
                return [2, left >> right];
              } else {
                return [2, left >>> right];
              }
          }
        });
      });
    };
    AsyncEvaluator2.prototype.lt = function(ast) {
      return __awaiter(this, void 0, void 0, function() {
        var left, right;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.evalute(ast.left)];
            case 1:
              left = _a3.sent();
              return [4, this.evalute(ast.right)];
            case 2:
              right = _a3.sent();
              return [2, left < right];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.gt = function(ast) {
      return __awaiter(this, void 0, void 0, function() {
        var left, right;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.evalute(ast.left)];
            case 1:
              left = _a3.sent();
              return [4, this.evalute(ast.right)];
            case 2:
              right = _a3.sent();
              return [2, left > right];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.le = function(ast) {
      return __awaiter(this, void 0, void 0, function() {
        var left, right;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.evalute(ast.left)];
            case 1:
              left = _a3.sent();
              return [4, this.evalute(ast.right)];
            case 2:
              right = _a3.sent();
              return [2, left <= right];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.ge = function(ast) {
      return __awaiter(this, void 0, void 0, function() {
        var left, right;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.evalute(ast.left)];
            case 1:
              left = _a3.sent();
              return [4, this.evalute(ast.right)];
            case 2:
              right = _a3.sent();
              return [2, left >= right];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.eq = function(ast) {
      return __awaiter(this, void 0, void 0, function() {
        var left, right;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.evalute(ast.left)];
            case 1:
              left = _a3.sent();
              return [4, this.evalute(ast.right)];
            case 2:
              right = _a3.sent();
              return [2, left == right];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.ne = function(ast) {
      return __awaiter(this, void 0, void 0, function() {
        var left, right;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.evalute(ast.left)];
            case 1:
              left = _a3.sent();
              return [4, this.evalute(ast.right)];
            case 2:
              right = _a3.sent();
              return [2, left != right];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.streq = function(ast) {
      return __awaiter(this, void 0, void 0, function() {
        var left, right;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.evalute(ast.left)];
            case 1:
              left = _a3.sent();
              return [4, this.evalute(ast.right)];
            case 2:
              right = _a3.sent();
              return [2, left === right];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.strneq = function(ast) {
      return __awaiter(this, void 0, void 0, function() {
        var left, right;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.evalute(ast.left)];
            case 1:
              left = _a3.sent();
              return [4, this.evalute(ast.right)];
            case 2:
              right = _a3.sent();
              return [2, left !== right];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.binary = function(ast) {
      return __awaiter(this, void 0, void 0, function() {
        var left, right;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.evalute(ast.left)];
            case 1:
              left = _a3.sent();
              return [4, this.evalute(ast.right)];
            case 2:
              right = _a3.sent();
              if (ast.op === "&") {
                return [2, left & right];
              } else if (ast.op === "^") {
                return [2, left ^ right];
              } else {
                return [2, left | right];
              }
          }
        });
      });
    };
    AsyncEvaluator2.prototype.and = function(ast) {
      return __awaiter(this, void 0, void 0, function() {
        var left;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.evalute(ast.left)];
            case 1:
              left = _a3.sent();
              return [2, left && this.evalute(ast.right)];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.or = function(ast) {
      return __awaiter(this, void 0, void 0, function() {
        var left;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.evalute(ast.left)];
            case 1:
              left = _a3.sent();
              return [2, left || this.evalute(ast.right)];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.array = function(ast) {
      var _this = this;
      return runSequence(ast.members, function(member) {
        return _this.evalute(member);
      });
    };
    AsyncEvaluator2.prototype.object = function(ast) {
      return __awaiter(this, void 0, void 0, function() {
        var object;
        var _this = this;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              object = {};
              return [4, ast.members.reduce(function(promise, _a4, index) {
                var key = _a4.key, value = _a4.value;
                return __awaiter(_this, void 0, void 0, function() {
                  var objKey, objVal;
                  return __generator(this, function(_b3) {
                    switch (_b3.label) {
                      case 0:
                        return [4, promise];
                      case 1:
                        _b3.sent();
                        return [4, this.evalute(key)];
                      case 2:
                        objKey = _b3.sent();
                        return [4, this.evalute(value)];
                      case 3:
                        objVal = _b3.sent();
                        object[objKey] = objVal;
                        return [
                          2
                          /*return*/
                        ];
                    }
                  });
                });
              }, Promise.resolve())];
            case 1:
              _a3.sent();
              return [2, object];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.conditional = function(ast) {
      return __awaiter(this, void 0, void 0, function() {
        var _a3;
        return __generator(this, function(_b3) {
          switch (_b3.label) {
            case 0:
              return [4, this.evalute(ast.test)];
            case 1:
              if (!_b3.sent())
                return [3, 3];
              return [4, this.evalute(ast.consequent)];
            case 2:
              _a3 = _b3.sent();
              return [3, 5];
            case 3:
              return [4, this.evalute(ast.alternate)];
            case 4:
              _a3 = _b3.sent();
              _b3.label = 5;
            case 5:
              return [2, _a3];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.funcCall = function(ast) {
      return __awaiter(this, void 0, void 0, function() {
        var fnName, fn, args;
        var _this = this;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              fnName = "fn".concat(ast.identifier);
              fn = this.functions[fnName] || this[fnName] || this.filters.hasOwnProperty(ast.identifier) && this.filters[ast.identifier];
              if (!fn) {
                throw new FormulaEvalError("".concat(ast.identifier, "函数没有定义"));
              }
              args = ast.args;
              if (!~["IF", "AND", "OR", "XOR", "IFS"].indexOf(ast.identifier))
                return [3, 1];
              args = args.map(function(a) {
                return function() {
                  return _this.evalute(a);
                };
              });
              return [3, 3];
            case 1:
              return [4, runSequence(args, function(a) {
                return _this.evalute(a);
              })];
            case 2:
              args = _a3.sent();
              _a3.label = 3;
            case 3:
              return [2, fn.apply(this, args)];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.callAnonymousFunction = function(ast, args) {
      return __awaiter(this, void 0, void 0, function() {
        var ctx, result;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              ctx = createObject(this.contextStack[this.contextStack.length - 1]("&") || {}, {});
              ast.args.forEach(function(arg) {
                if (arg.type !== "variable") {
                  throw new Error("expected a variable as argument");
                }
                ctx[arg.name] = args.shift();
              });
              this.contextStack.push(function(varName) {
                return varName === "&" ? ctx : ctx[varName];
              });
              return [4, this.evalute(ast.return)];
            case 1:
              result = _a3.sent();
              this.contextStack.pop();
              return [2, result];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.fnIF = function(condition, trueValue, falseValue) {
      return __awaiter(this, void 0, void 0, function() {
        var _a3;
        return __generator(this, function(_b3) {
          switch (_b3.label) {
            case 0:
              return [4, condition()];
            case 1:
              if (!_b3.sent())
                return [3, 3];
              return [4, trueValue()];
            case 2:
              _a3 = _b3.sent();
              return [3, 5];
            case 3:
              return [4, falseValue()];
            case 4:
              _a3 = _b3.sent();
              _b3.label = 5;
            case 5:
              return [2, _a3];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.fnAND = function() {
      var condtions = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        condtions[_i] = arguments[_i];
      }
      return __awaiter(this, void 0, void 0, function() {
        var _this = this;
        return __generator(this, function(_a3) {
          if (!condtions.length) {
            return [2, false];
          }
          return [2, condtions.reduce(function(promise, c) {
            return __awaiter(_this, void 0, void 0, function() {
              var result;
              return __generator(this, function(_a4) {
                switch (_a4.label) {
                  case 0:
                    return [4, promise];
                  case 1:
                    result = _a4.sent();
                    if (result) {
                      return [2, c()];
                    }
                    return [2, result];
                }
              });
            });
          }, Promise.resolve(true))];
        });
      });
    };
    AsyncEvaluator2.prototype.fnOR = function() {
      var condtions = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        condtions[_i] = arguments[_i];
      }
      return __awaiter(this, void 0, void 0, function() {
        var _this = this;
        return __generator(this, function(_a3) {
          if (!condtions.length) {
            return [2, false];
          }
          return [2, condtions.reduce(function(promise, c) {
            return __awaiter(_this, void 0, void 0, function() {
              var result;
              return __generator(this, function(_a4) {
                switch (_a4.label) {
                  case 0:
                    return [4, promise];
                  case 1:
                    result = _a4.sent();
                    if (result) {
                      return [2, true];
                    }
                    return [2, c()];
                }
              });
            });
          }, Promise.resolve(false))];
        });
      });
    };
    AsyncEvaluator2.prototype.fnXOR = function() {
      var condtions = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        condtions[_i] = arguments[_i];
      }
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              if (!condtions.length) {
                return [2, false];
              }
              return [4, runSequence(condtions, function(c) {
                return c();
              })];
            case 1:
              return [2, !!(_a3.sent().filter(function(item) {
                return item;
              }).length % 2)];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.fnIFS = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return __awaiter(this, void 0, void 0, function() {
        var c, v;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              if (args.length % 2) {
                args.splice(args.length - 1, 0, function() {
                  return true;
                });
              }
              _a3.label = 1;
            case 1:
              if (!args.length)
                return [3, 5];
              c = args.shift();
              v = args.shift();
              return [4, c()];
            case 2:
              if (!_a3.sent())
                return [3, 4];
              return [4, v()];
            case 3:
              return [2, _a3.sent()];
            case 4:
              return [3, 1];
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.fnARRAYMAP = function(value, iterator) {
      var _this = this;
      if (!iterator || iterator.type !== "anonymous_function") {
        throw new Error("expected an anonymous function get " + iterator);
      }
      return (Array.isArray(value) ? value : []).reduce(function(promise, item, index) {
        return __awaiter(_this, void 0, void 0, function() {
          var arr, _a3, _b3;
          return __generator(this, function(_c) {
            switch (_c.label) {
              case 0:
                return [4, promise];
              case 1:
                arr = _c.sent();
                _b3 = (_a3 = arr).push;
                return [4, this.callAnonymousFunction(iterator, [item, index])];
              case 2:
                _b3.apply(_a3, [_c.sent()]);
                return [2, arr];
            }
          });
        });
      }, Promise.resolve([]));
    };
    AsyncEvaluator2.prototype.fnARRAYFILTER = function(value, iterator) {
      return __awaiter(this, void 0, void 0, function() {
        var _this = this;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              if (!iterator || iterator.type !== "anonymous_function") {
                throw new Error("expected an anonymous function get " + iterator);
              }
              return [4, (Array.isArray(value) ? value : []).reduce(function(promise, item, index) {
                return __awaiter(_this, void 0, void 0, function() {
                  var arr, hit;
                  return __generator(this, function(_a4) {
                    switch (_a4.label) {
                      case 0:
                        return [4, promise];
                      case 1:
                        arr = _a4.sent();
                        return [4, this.callAnonymousFunction(iterator, [item, index])];
                      case 2:
                        hit = _a4.sent();
                        if (hit) {
                          arr.push(item);
                        }
                        return [2, arr];
                    }
                  });
                });
              }, Promise.resolve([]))];
            case 1:
              return [2, _a3.sent()];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.fnARRAYFINDINDEX = function(arr, iterator) {
      return __awaiter(this, void 0, void 0, function() {
        var hitIndex;
        var _this = this;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              if (!iterator || iterator.type !== "anonymous_function") {
                throw new Error("expected an anonymous function get " + iterator);
              }
              hitIndex = -1;
              return [4, (Array.isArray(arr) ? arr : []).reduce(function(promise, item, index) {
                return __awaiter(_this, void 0, void 0, function() {
                  var hit;
                  return __generator(this, function(_a4) {
                    switch (_a4.label) {
                      case 0:
                        return [4, promise];
                      case 1:
                        _a4.sent();
                        return [4, this.callAnonymousFunction(iterator, [item, index])];
                      case 2:
                        hit = _a4.sent();
                        if (hit) {
                          hitIndex = index;
                        }
                        return [
                          2
                          /*return*/
                        ];
                    }
                  });
                });
              }, Promise.resolve())];
            case 1:
              _a3.sent();
              return [2, hitIndex];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.fnARRAYFIND = function(arr, iterator) {
      return __awaiter(this, void 0, void 0, function() {
        var hitItem;
        var _this = this;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              if (!iterator || iterator.type !== "anonymous_function") {
                throw new Error("expected an anonymous function get " + iterator);
              }
              hitItem = void 0;
              return [4, (Array.isArray(arr) ? arr : []).reduce(function(promise, item, index) {
                return __awaiter(_this, void 0, void 0, function() {
                  var hit;
                  return __generator(this, function(_a4) {
                    switch (_a4.label) {
                      case 0:
                        return [4, promise];
                      case 1:
                        _a4.sent();
                        return [4, this.callAnonymousFunction(iterator, [item, index])];
                      case 2:
                        hit = _a4.sent();
                        if (hit) {
                          hitItem = item;
                        }
                        return [
                          2
                          /*return*/
                        ];
                    }
                  });
                });
              }, Promise.resolve())];
            case 1:
              _a3.sent();
              return [2, hitItem];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.fnARRAYSOME = function(arr, iterator) {
      return __awaiter(this, void 0, void 0, function() {
        var result;
        var _this = this;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              if (!iterator || iterator.type !== "anonymous_function") {
                throw new Error("expected an anonymous function get " + iterator);
              }
              return [4, (Array.isArray(arr) ? arr : []).reduce(function(promise, item, index) {
                return __awaiter(_this, void 0, void 0, function() {
                  var prev, hit;
                  return __generator(this, function(_a4) {
                    switch (_a4.label) {
                      case 0:
                        return [4, promise];
                      case 1:
                        prev = _a4.sent();
                        return [4, this.callAnonymousFunction(iterator, [item, index])];
                      case 2:
                        hit = _a4.sent();
                        return [2, prev || hit];
                    }
                  });
                });
              }, Promise.resolve(false))];
            case 1:
              result = _a3.sent();
              return [2, result];
          }
        });
      });
    };
    AsyncEvaluator2.prototype.fnARRAYEVERY = function(arr, iterator) {
      return __awaiter(this, void 0, void 0, function() {
        var result;
        var _this = this;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              if (!iterator || iterator.type !== "anonymous_function") {
                throw new Error("expected an anonymous function get " + iterator);
              }
              return [4, (Array.isArray(arr) ? arr : []).reduce(function(promise, item, index) {
                return __awaiter(_this, void 0, void 0, function() {
                  var prev, hit;
                  return __generator(this, function(_a4) {
                    switch (_a4.label) {
                      case 0:
                        return [4, promise];
                      case 1:
                        prev = _a4.sent();
                        return [4, this.callAnonymousFunction(iterator, [item, index])];
                      case 2:
                        hit = _a4.sent();
                        return [2, prev && hit];
                    }
                  });
                });
              }, Promise.resolve(true))];
            case 1:
              result = _a3.sent();
              return [2, result];
          }
        });
      });
    };
    return AsyncEvaluator2;
  }(Evaluator)
);

// node_modules/amis-formula/esm/filter.js
var entityMap = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;",
  "/": "&#x2F;"
};
var escapeHtml = function(str) {
  return String(str).replace(/[&<>"'\/]/g, function(s) {
    return entityMap[s];
  });
};
var filters = {
  raw: function(input) {
    return input;
  },
  html: function(input) {
    if (input == null) {
      return input;
    }
    return escapeHtml(input);
  }
};
function registerFilter(name, fn) {
  filters[name] = fn;
  Evaluator.setDefaultFilters(filters);
}
function extendsFilters(value) {
  Object.assign(filters, value);
  Evaluator.setDefaultFilters(filters);
}
function getFilters() {
  return filters;
}

// node_modules/amis-formula/esm/lexer.js
var TokenName = {};
TokenName[
  1
  /* TokenEnum.BooleanLiteral */
] = "Boolean";
TokenName[
  2
  /* TokenEnum.RAW */
] = "Raw";
TokenName[
  3
  /* TokenEnum.Variable */
] = "Variable";
TokenName[
  4
  /* TokenEnum.OpenScript */
] = "OpenScript";
TokenName[
  5
  /* TokenEnum.CloseScript */
] = "CloseScript";
TokenName[
  6
  /* TokenEnum.EOF */
] = "EOF";
TokenName[
  7
  /* TokenEnum.Identifier */
] = "Identifier";
TokenName[
  8
  /* TokenEnum.Literal */
] = "Literal";
TokenName[
  9
  /* TokenEnum.NumericLiteral */
] = "Numeric";
TokenName[
  10
  /* TokenEnum.Punctuator */
] = "Punctuator";
TokenName[
  11
  /* TokenEnum.StringLiteral */
] = "String";
TokenName[
  12
  /* TokenEnum.RegularExpression */
] = "RegularExpression";
TokenName[
  13
  /* TokenEnum.TemplateRaw */
] = "TemplateRaw";
TokenName[
  14
  /* TokenEnum.TemplateLeftBrace */
] = "TemplateLeftBrace";
TokenName[
  15
  /* TokenEnum.TemplateRightBrace */
] = "TemplateRightBrace";
TokenName[
  16
  /* TokenEnum.OpenFilter */
] = "OpenFilter";
TokenName[
  17
  /* TokenEnum.Char */
] = "Char";
var mainStates = {
  START: 0,
  SCRIPT: 1,
  EXPRESSION: 2,
  BLOCK: 3,
  Template: 4,
  Filter: 5
};
var rawStates = {
  START: 0,
  ESCAPE: 1
};
var numberStates = {
  START: 0,
  ZERO: 1,
  DIGIT: 2,
  POINT: 3,
  DIGIT_FRACTION: 4,
  EXP: 5
};
var stringStates = {
  START: 0,
  START_QUOTE_OR_CHAR: 1,
  ESCAPE: 2
};
var punctuatorList = [
  "===",
  "!==",
  ">>>",
  "==",
  "!=",
  "<>",
  "<=",
  ">=",
  "||",
  "&&",
  "++",
  "--",
  "<<",
  ">>",
  "**",
  "+=",
  "*=",
  "/=",
  "<",
  ">",
  "=",
  "*",
  "/",
  "-",
  "+",
  "^",
  "!",
  "~",
  "%",
  "&",
  "|",
  "(",
  ")",
  "[",
  "]",
  "{",
  "}",
  "?",
  ":",
  ";",
  ",",
  ".",
  "$"
];
var escapes = {
  '"': 0,
  "\\": 1,
  "/": 2,
  "b": 3,
  "f": 4,
  "n": 5,
  "r": 6,
  "t": 7,
  "u": 8
  // 4 hexadecimal digits
};
function isDigit1to9(char) {
  return char >= "1" && char <= "9";
}
function isDigit(char) {
  return char >= "0" && char <= "9";
}
function isExp(char) {
  return char === "e" || char === "E";
}
function escapeString(text, allowedLetter) {
  if (allowedLetter === void 0) {
    allowedLetter = [];
  }
  return text.replace(/\\(.)/g, function(_, text2) {
    return text2 === "b" ? "\b" : text2 === "f" ? "\f" : text2 === "n" ? "\n" : text2 === "r" ? "\r" : text2 === "t" ? "	" : text2 === "v" ? "\v" : ~allowedLetter.indexOf(text2) ? text2 : _;
  });
}
function formatNumber(value) {
  return Number(value);
}
function lexer(input, options) {
  if (options === void 0) {
    options = {};
  }
  var line = 1;
  var column = 1;
  var index = 0;
  var mainState = mainStates.START;
  var states = [mainState];
  var tokenCache = [];
  options = __assign({}, options);
  var allowFilter = options.allowFilter !== false;
  if (!options.isFilter) {
    var filterKeys_1 = Object.keys(getFilters());
    if (options.filters) {
      filterKeys_1.push.apply(filterKeys_1, __spreadArray([], __read(Object.keys(options.filters)), false));
    }
    options.isFilter = function(name) {
      return filterKeys_1.includes(name);
    };
  }
  if (options.evalMode || options.variableMode) {
    pushState(mainStates.EXPRESSION);
  }
  function pushState(state) {
    states.push(mainState = state);
  }
  function popState() {
    states.pop();
    mainState = states[states.length - 1];
  }
  function position2(value) {
    if (value && typeof value === "string") {
      var lines = value.split(/[\r\n]+/);
      return {
        index: index + value.length,
        line: line + lines.length - 1,
        column: column + lines[lines.length - 1].length
      };
    }
    return { index, line, column };
  }
  function eof() {
    if (index >= input.length) {
      return {
        type: TokenName[
          6
          /* TokenEnum.EOF */
        ],
        value: void 0,
        start: position2(),
        end: position2()
      };
    }
  }
  function raw() {
    if (mainState !== mainStates.START) {
      return null;
    }
    var buffer = "";
    var state = rawStates.START;
    var i = index;
    while (i < input.length) {
      var ch = input[i];
      if (state === rawStates.ESCAPE) {
        if (escapes.hasOwnProperty(ch) || ch === "$") {
          buffer += ch;
          i++;
          state = rawStates.START;
        } else {
          var pos = position2(buffer + ch);
          throw new SyntaxError("Unexpected token ".concat(ch, " in ").concat(pos.line, ":").concat(pos.column));
        }
      } else {
        if (ch === "\\") {
          buffer += ch;
          i++;
          state = rawStates.ESCAPE;
          continue;
        } else if (ch === "$") {
          var nextCh = input[i + 1];
          if (nextCh === "{") {
            break;
          } else if (nextCh === "$") {
            tokenCache.push({
              type: TokenName[
                3
                /* TokenEnum.Variable */
              ],
              value: "&",
              raw: "$$",
              start: position2(input.substring(index, i)),
              end: position2(input.substring(index, i + 2))
            });
            break;
          } else {
            var match = /^[a-zA-Z0-9_]+(?:\.[a-zA-Z0-9_]+)*/.exec(input.substring(i + 1));
            if (match) {
              tokenCache.push({
                type: TokenName[
                  3
                  /* TokenEnum.Variable */
                ],
                value: match[0],
                raw: match[0],
                start: position2(input.substring(index, i)),
                end: position2(input.substring(index, i + 1 + match[0].length))
              });
              break;
            }
          }
        }
        i++;
        buffer += ch;
      }
    }
    if (i > index) {
      return {
        type: TokenName[
          2
          /* TokenEnum.RAW */
        ],
        value: escapeString(buffer, ["`", "$"]),
        raw: buffer,
        start: position2(),
        end: position2(buffer)
      };
    }
    return tokenCache.length ? tokenCache.shift() : null;
  }
  function openScript() {
    if (mainState === mainStates.Template || mainState === mainStates.EXPRESSION) {
      return null;
    }
    var ch = input[index];
    if (ch === "$") {
      var nextCh = input[index + 1];
      if (nextCh === "{") {
        pushState(mainStates.SCRIPT);
        var value = input.substring(index, index + 2);
        return {
          type: TokenName[
            4
            /* TokenEnum.OpenScript */
          ],
          value,
          start: position2(),
          end: position2(value)
        };
      }
    }
    return null;
  }
  function expression() {
    if (mainState !== mainStates.SCRIPT && mainState !== mainStates.EXPRESSION && mainState !== mainStates.BLOCK && mainState !== mainStates.Filter) {
      return null;
    }
    var token = literal() || identifier() || numberLiteral() || stringLiteral() || punctuator() || char();
    if ((token === null || token === void 0 ? void 0 : token.value) === "{" && token.type == "Punctuator") {
      pushState(mainStates.BLOCK);
    } else if ((token === null || token === void 0 ? void 0 : token.value) === "}" && token.type == "Punctuator") {
      if (mainState === mainStates.Filter) {
        popState();
      }
      var prevState = mainState;
      popState();
      if (prevState === mainStates.SCRIPT || prevState === mainStates.EXPRESSION) {
        return {
          type: TokenName[
            prevState === mainStates.EXPRESSION ? 15 : 5
            /* TokenEnum.CloseScript */
          ],
          value: token.value,
          start: position2(),
          end: position2(token.value)
        };
      }
    }
    if (mainState === mainStates.SCRIPT && (token === null || token === void 0 ? void 0 : token.type) == "Punctuator" && token.value === "|" && allowFilter) {
      if (options === null || options === void 0 ? void 0 : options.isFilter) {
        var restInput = input.substring(token.start.index + 1).trim();
        var m = /^[A-Za-z0-9_$@][A-Za-z0-9_\-$@]*/.exec(restInput);
        if (!m || !options.isFilter(m[0])) {
          return token;
        }
      }
      pushState(mainStates.Filter);
      return {
        type: TokenName[
          16
          /* TokenEnum.OpenFilter */
        ],
        value: "|",
        start: position2(),
        end: position2("|")
      };
    } else if (mainState === mainStates.Filter && (token === null || token === void 0 ? void 0 : token.value) === "|" && token.type == "Punctuator") {
      return {
        type: TokenName[
          16
          /* TokenEnum.OpenFilter */
        ],
        value: "|",
        start: position2(),
        end: position2("|")
      };
    }
    if (!token && input[index] === "`") {
      pushState(mainStates.Template);
      return {
        type: TokenName[
          10
          /* TokenEnum.Punctuator */
        ],
        value: "`",
        start: position2(),
        end: position2("`")
      };
    }
    return token;
  }
  function char() {
    if (mainState !== mainStates.Filter) {
      return null;
    }
    var i = index;
    var ch = input[i];
    if (ch === "\\") {
      var nextCh = input[i + 1];
      if (nextCh === "$" || ~punctuatorList.indexOf(nextCh) || escapes.hasOwnProperty(nextCh)) {
        i++;
        ch = nextCh === "b" ? "\b" : nextCh === "f" ? "\f" : nextCh === "n" ? "\n" : nextCh === "r" ? "\r" : nextCh === "t" ? "	" : nextCh === "v" ? "\v" : nextCh;
      } else {
        var pos = position2(input.substring(index, index + 2));
        throw new SyntaxError("Unexpected token ".concat(nextCh, " in ").concat(pos.line, ":").concat(pos.column));
      }
    }
    var token = {
      type: TokenName[
        17
        /* TokenEnum.Char */
      ],
      value: ch,
      start: position2(),
      end: position2(input.substring(index, i + 1))
    };
    return token;
  }
  function template2() {
    if (mainState !== mainStates.Template) {
      return null;
    }
    var state = stringStates.START;
    var i = index;
    while (i < input.length) {
      var ch = input[i];
      if (state === stringStates.ESCAPE) {
        if (escapes.hasOwnProperty(ch) || ch === "`" || ch === "$") {
          i++;
          state = stringStates.START_QUOTE_OR_CHAR;
        } else {
          var pos = position2(input.substring(index, i + 1));
          throw new SyntaxError("Unexpected token ".concat(ch, " in ").concat(pos.line, ":").concat(pos.column));
        }
      } else if (ch === "\\") {
        i++;
        state = stringStates.ESCAPE;
      } else if (ch === "`") {
        popState();
        tokenCache.push({
          type: TokenName[
            10
            /* TokenEnum.Punctuator */
          ],
          value: "`",
          start: position2(input.substring(index, i)),
          end: position2(input.substring(index, i + 1))
        });
        break;
      } else if (ch === "$") {
        var nextCh = input[i + 1];
        if (nextCh === "{") {
          pushState(mainStates.EXPRESSION);
          tokenCache.push({
            type: TokenName[
              14
              /* TokenEnum.TemplateLeftBrace */
            ],
            value: "${",
            start: position2(input.substring(index, i)),
            end: position2(input.substring(index, i + 2))
          });
          break;
        }
        i++;
      } else {
        i++;
      }
    }
    if (i > index) {
      var value = input.substring(index, i);
      return {
        type: TokenName[
          13
          /* TokenEnum.TemplateRaw */
        ],
        value: escapeString(value, ["`", "$"]),
        raw: value,
        start: position2(),
        end: position2(value)
      };
    }
    return tokenCache.length ? tokenCache.shift() : null;
  }
  function skipWhiteSpace() {
    while (index < input.length) {
      var ch = input[index];
      if (ch === "\r") {
        index++;
        line++;
        column = 1;
        if (input.charAt(index) === "\n") {
          index++;
        }
      } else if (ch === "\n") {
        index++;
        line++;
        column = 1;
      } else if (ch === "	" || ch === " ") {
        index++;
        column++;
      } else {
        break;
      }
    }
  }
  function punctuator() {
    var find11 = punctuatorList.find(function(punctuator2) {
      return input.substring(index, index + punctuator2.length) === punctuator2;
    });
    if (find11) {
      return {
        type: TokenName[
          10
          /* TokenEnum.Punctuator */
        ],
        value: find11,
        start: position2(),
        end: position2(find11)
      };
    }
    return null;
  }
  function literal() {
    var match = input.substring(index).match(/^\w{4,10}/);
    if (!match) {
      return null;
    }
    var keyword = match[0].toLowerCase();
    var value = keyword;
    var isLiteral = false;
    if (keyword === "true" || keyword === "null") {
      isLiteral = true;
      value = keyword === "true" ? true : null;
    } else if (keyword === "false") {
      isLiteral = true;
      value = false;
    } else if (keyword === "undefined") {
      isLiteral = true;
      value = void 0;
    }
    if (isLiteral) {
      return {
        type: value === true || value === false ? TokenName[
          1
          /* TokenEnum.BooleanLiteral */
        ] : TokenName[
          8
          /* TokenEnum.Literal */
        ],
        value,
        raw: keyword,
        start: position2(),
        end: position2(keyword)
      };
    }
    return null;
  }
  function numberLiteral() {
    var i = index;
    var passedValueIndex = i;
    var state = numberStates.START;
    iterator:
      while (i < input.length) {
        var char_1 = input.charAt(i);
        switch (state) {
          case numberStates.START: {
            if (char_1 === "0") {
              passedValueIndex = i + 1;
              state = numberStates.ZERO;
            } else if (isDigit1to9(char_1)) {
              passedValueIndex = i + 1;
              state = numberStates.DIGIT;
            } else {
              return null;
            }
            break;
          }
          case numberStates.ZERO: {
            if (char_1 === ".") {
              state = numberStates.POINT;
            } else if (isExp(char_1)) {
              state = numberStates.EXP;
            } else {
              break iterator;
            }
            break;
          }
          case numberStates.DIGIT: {
            if (isDigit(char_1)) {
              passedValueIndex = i + 1;
            } else if (char_1 === ".") {
              state = numberStates.POINT;
            } else if (isExp(char_1)) {
              state = numberStates.EXP;
            } else {
              break iterator;
            }
            break;
          }
          case numberStates.POINT: {
            if (isDigit(char_1)) {
              passedValueIndex = i + 1;
              state = numberStates.DIGIT_FRACTION;
            } else {
              break iterator;
            }
            break;
          }
          case numberStates.DIGIT_FRACTION: {
            if (isDigit(char_1)) {
              passedValueIndex = i + 1;
            } else if (isExp(char_1)) {
              state = numberStates.EXP;
            } else {
              break iterator;
            }
            break;
          }
        }
        i++;
      }
    if (passedValueIndex > 0) {
      var value = input.slice(index, passedValueIndex);
      return {
        type: TokenName[
          9
          /* TokenEnum.NumericLiteral */
        ],
        value: formatNumber(value),
        raw: value,
        start: position2(),
        end: position2(value)
      };
    }
    return null;
  }
  function stringLiteral() {
    var startQuote = '"';
    var state = stringStates.START;
    var i = index;
    while (i < input.length) {
      var ch = input[i];
      if (state === stringStates.START) {
        if (ch === '"' || ch === "'") {
          startQuote = ch;
          i++;
          state = stringStates.START_QUOTE_OR_CHAR;
        } else {
          break;
        }
      } else if (state === stringStates.ESCAPE) {
        if (escapes.hasOwnProperty(ch) || ch === startQuote) {
          i++;
          state = stringStates.START_QUOTE_OR_CHAR;
        } else {
          var pos = position2(input.substring(index, i + 1));
          throw new SyntaxError("Unexpected token ".concat(ch, " in ").concat(pos.line, ":").concat(pos.column));
        }
      } else if (ch === "\\") {
        i++;
        state = stringStates.ESCAPE;
      } else if (ch === startQuote) {
        i++;
        break;
      } else {
        i++;
      }
    }
    if (i > index) {
      var value = input.substring(index, i);
      return {
        type: TokenName[
          11
          /* TokenEnum.StringLiteral */
        ],
        value: escapeString(value.substring(1, value.length - 1), [startQuote]),
        raw: value,
        start: position2(),
        end: position2(value)
      };
    }
    return null;
  }
  function identifier() {
    var reg = (options === null || options === void 0 ? void 0 : options.variableMode) ? /^[\u4e00-\u9fa5A-Za-z0-9_$@][\u4e00-\u9fa5A-Za-z0-9_\-$@]*/ : /^(?:[\u4e00-\u9fa5A-Za-z_$@]([\u4e00-\u9fa5A-Za-z0-9_$@]|\\(?:\.|\[|\]|\(|\)|\{|\}|\s|=|!|>|<|\||&|\+|-|\*|\/|\^|~|%|&|\?|:|;|,))*|\d+[\u4e00-\u9fa5A-Za-z_$@](?:[\u4e00-\u9fa5A-Za-z0-9_$@]|\\(?:\.|\[|\]|\(|\)|\{|\}|\s|=|!|>|<|\||&|\+|-|\*|\/|\^|~|%|&|\?|:|;|,))*)/;
    var match = reg.exec(
      input.substring(index, index + 256)
      // 变量长度不能超过 256
    );
    if (match) {
      return {
        type: TokenName[
          7
          /* TokenEnum.Identifier */
        ],
        value: match[0].replace(/\\(\.|\[|\]|\(|\)|\{|\}|\s|=|!|>|<|\||&|\+|-|\*|\/|\^|~|%|&|\?|:|;|,)/g, function(_, v) {
          return v;
        }),
        start: position2(),
        end: position2(match[0])
      };
    }
    return null;
  }
  function getNextToken() {
    if (tokenCache.length) {
      return tokenCache.shift();
    }
    if (mainState === mainStates.SCRIPT || mainState === mainStates.EXPRESSION || mainState === mainStates.BLOCK) {
      skipWhiteSpace();
    }
    return eof() || raw() || openScript() || expression() || template2();
  }
  return {
    next: function() {
      var token = getNextToken();
      if (token) {
        index = token.end.index;
        line = token.end.line;
        column = token.end.column;
        return token;
      }
      var pos = position2();
      throw new SyntaxError('unexpected character "'.concat(input[index], '" at ').concat(pos.line, ":").concat(pos.column));
    }
  };
}

// node_modules/amis-formula/esm/parser.js
var argListStates = {
  START: 0,
  COMMA: 1,
  SET: 2
};
var tempalteStates = {
  START: 0,
  SCRIPTING: 1
};
var objectStates = {
  START: 0,
  KEY: 1,
  COLON: 2,
  VALUE: 3,
  COMMA: 4
};
function parse(input, options) {
  var _a3;
  var token;
  var lexer$1 = lexer(input, options);
  var tokens = [];
  var tokenChunk = [];
  var variableNamespaces = (_a3 = options === null || options === void 0 ? void 0 : options.variableNamespaces) !== null && _a3 !== void 0 ? _a3 : [
    "window",
    "cookie",
    "ls",
    "ss"
  ];
  if (!Array.isArray(variableNamespaces)) {
    variableNamespaces = [];
  }
  function next() {
    token = tokenChunk.length ? tokenChunk.shift() : lexer$1.next();
    if (!token) {
      throw new TypeError("next token is undefined");
    }
    tokens.push(token);
  }
  function back() {
    tokenChunk.unshift(tokens.pop());
    token = tokens[tokens.length - 1];
  }
  function matchPunctuator(operator) {
    return token.type === TokenName[
      10
      /* TokenEnum.Punctuator */
    ] && (Array.isArray(operator) ? ~operator.indexOf(token.value) : token.value === operator);
  }
  function fatal() {
    throw TypeError("Unexpected token ".concat(token.value, " in ").concat(token.start.line, ":").concat(token.start.column));
  }
  function assert(result) {
    if (!result) {
      fatal();
    }
    return result;
  }
  function expression() {
    return assignmentExpression();
  }
  function skipWhiteSpaceChar() {
    while (token.type === TokenName[
      17
      /* TokenEnum.Char */
    ] && /^\s+$/m.test(token.value)) {
      next();
    }
  }
  function collectFilterArg() {
    var arg = [];
    while (!matchPunctuator(":") && token.type !== TokenName[
      16
      /* TokenEnum.OpenFilter */
    ] && token.type !== TokenName[
      5
      /* TokenEnum.CloseScript */
    ]) {
      var item = literal() || numberLiteral() || stringLiteral() || template2() || arrayLiteral() || rawScript() || objectLiteral();
      if (item) {
        arg.push(item);
      } else {
        assert(~[
          TokenName[
            7
            /* TokenEnum.Identifier */
          ],
          TokenName[
            10
            /* TokenEnum.Punctuator */
          ],
          TokenName[
            17
            /* TokenEnum.Char */
          ]
        ].indexOf(token.type));
        if (arg.length && typeof arg[arg.length - 1] === "string") {
          arg[arg.length - 1] += token.raw || token.value;
        } else {
          arg.push(token.raw || token.value);
        }
        next();
      }
    }
    if (arg.length && typeof arg[arg.length - 1] === "string") {
      arg[arg.length - 1] = arg[arg.length - 1].replace(/\s+$/, "");
      if (!arg[arg.length - 1]) {
        arg.pop();
      }
    }
    return arg;
  }
  function complexExpression() {
    var ast2 = expression();
    var filters2 = [];
    while (token.type === TokenName[
      16
      /* TokenEnum.OpenFilter */
    ]) {
      next();
      skipWhiteSpaceChar();
      var name_1 = assert(identifier());
      var fnName = name_1.name;
      var args = [];
      skipWhiteSpaceChar();
      while (matchPunctuator(":")) {
        next();
        skipWhiteSpaceChar();
        var argContents = collectFilterArg();
        if (argContents.length === 1) {
          argContents = argContents[0];
        } else if (!argContents.length) {
          argContents = "";
        }
        args.push(Array.isArray(argContents) ? {
          type: "mixed",
          body: argContents
        } : argContents);
      }
      filters2.push({
        name: fnName,
        args
      });
    }
    if (filters2.length) {
      ast2 = {
        type: "filter",
        input: ast2,
        filters: filters2,
        start: ast2.start,
        end: filters2[filters2.length - 1].end
      };
    }
    return ast2;
  }
  function arrowFunction() {
    var ast2 = argList() || variable();
    var args = [];
    var start;
    if ((ast2 === null || ast2 === void 0 ? void 0 : ast2.type) === "variable") {
      args = [ast2];
      start = ast2.start;
    } else if ((ast2 === null || ast2 === void 0 ? void 0 : ast2.type) === "arg-list") {
      start = ast2.start;
      args = ast2.body;
    }
    if (Array.isArray(args) && matchPunctuator("=")) {
      next();
      if (matchPunctuator(">")) {
        next();
        var body = assert(expression());
        return {
          type: "anonymous_function",
          args,
          return: body,
          start,
          end: body.end
        };
      } else {
        back();
      }
    }
    return ast2;
  }
  function conditionalExpression() {
    var ast2 = logicalOrExpression();
    if (!ast2) {
      return null;
    }
    if (matchPunctuator("?")) {
      next();
      var consequent = assignmentExpression();
      assert(consequent);
      assert(matchPunctuator(":"));
      next();
      var alternate = assignmentExpression();
      assert(alternate);
      return {
        type: "conditional",
        test: ast2,
        consequent,
        alternate,
        start: ast2.start,
        end: alternate.end
      };
    }
    return ast2;
  }
  function binaryExpressionParser(type, operator, parseFunction, rightParseFunction, leftKey, rightKey) {
    var _a4;
    if (rightParseFunction === void 0) {
      rightParseFunction = parseFunction;
    }
    if (leftKey === void 0) {
      leftKey = "left";
    }
    if (rightKey === void 0) {
      rightKey = "right";
    }
    var ast2 = parseFunction();
    if (!ast2) {
      return null;
    }
    if (matchPunctuator(operator)) {
      while (matchPunctuator(operator)) {
        next();
        var right = assert(rightParseFunction());
        ast2 = (_a4 = {
          type,
          op: operator
        }, _a4[leftKey] = ast2, _a4[rightKey] = right, _a4.start = ast2.start, _a4.end = right.end, _a4);
      }
    }
    return ast2;
  }
  function logicalOrExpression() {
    return binaryExpressionParser("or", "||", logicalAndExpression);
  }
  function logicalAndExpression() {
    return binaryExpressionParser("and", "&&", bitwiseOrExpression);
  }
  function bitwiseOrExpression() {
    return binaryExpressionParser("binary", "|", bitwiseXOrExpression);
  }
  function bitwiseXOrExpression() {
    return binaryExpressionParser("binary", "^", bitwiseAndExpression);
  }
  function bitwiseAndExpression() {
    return binaryExpressionParser("binary", "&", equalityExpression);
  }
  function equalityExpression() {
    return binaryExpressionParser("eq", "==", function() {
      return binaryExpressionParser("ne", "!=", function() {
        return binaryExpressionParser("streq", "===", function() {
          return binaryExpressionParser("strneq", "!==", relationalExpression);
        });
      });
    });
  }
  function relationalExpression() {
    return binaryExpressionParser("lt", "<", function() {
      return binaryExpressionParser("gt", ">", function() {
        return binaryExpressionParser("le", "<=", function() {
          return binaryExpressionParser("ge", ">=", shiftExpression);
        });
      });
    });
  }
  function shiftExpression() {
    return binaryExpressionParser("shift", "<<", function() {
      return binaryExpressionParser("shift", ">>", function() {
        return binaryExpressionParser("shift", ">>>", additiveExpression);
      });
    });
  }
  function additiveExpression() {
    return binaryExpressionParser("add", "+", function() {
      return binaryExpressionParser("minus", "-", multiplicativeExpression);
    });
  }
  function multiplicativeExpression() {
    return binaryExpressionParser("multiply", "*", function() {
      return binaryExpressionParser("divide", "/", function() {
        return binaryExpressionParser("remainder", "%", powerExpression);
      });
    });
  }
  function powerExpression() {
    return binaryExpressionParser("power", "**", unaryExpression);
  }
  function unaryExpression() {
    var unaryOperators = ["+", "-", "~", "!"];
    var stack = [];
    while (matchPunctuator(unaryOperators)) {
      stack.push(token);
      next();
    }
    var ast2 = postfixExpression();
    assert(!stack.length || ast2);
    while (stack.length) {
      var op = stack.pop();
      ast2 = {
        type: "unary",
        op: op.value,
        value: ast2,
        start: op.start,
        end: op.end
      };
    }
    return ast2;
  }
  function postfixExpression(parseFunction) {
    if (parseFunction === void 0) {
      parseFunction = leftHandSideExpression;
    }
    var ast2 = parseFunction();
    if (!ast2) {
      return null;
    }
    while (matchPunctuator("[") || matchPunctuator(".")) {
      var isDot = matchPunctuator(".");
      next();
      var right = assert(isDot ? identifier() || numberLiteral() || rawScript() : expression());
      if (!isDot) {
        assert(matchPunctuator("]"));
        next();
      }
      ast2 = {
        type: "getter",
        host: ast2,
        key: right,
        start: ast2.start,
        end: right.end
      };
    }
    return ast2;
  }
  function leftHandSideExpression() {
    return functionCall() || arrowFunction() || primaryExpression();
  }
  function varibleKey(allowVariable, inObject) {
    if (allowVariable === void 0) {
      allowVariable = false;
    }
    if (inObject === void 0) {
      inObject = false;
    }
    return (allowVariable ? variable() : identifier()) || stringLiteral() || numberLiteral() || (inObject ? objectTemplateKey() : template2());
  }
  function objectTemplateKey() {
    if (matchPunctuator("[")) {
      next();
      var key = assert(template2());
      assert(matchPunctuator("]"));
      next();
      return key;
    }
    return null;
  }
  function stringLiteral() {
    if (token.type === TokenName[
      11
      /* TokenEnum.StringLiteral */
    ]) {
      var cToken = token;
      next();
      return {
        type: "string",
        value: cToken.value,
        start: cToken.start,
        end: cToken.end
      };
    }
    return null;
  }
  function numberLiteral() {
    if (token.type === TokenName[
      9
      /* TokenEnum.NumericLiteral */
    ]) {
      var value = token.value;
      var cToken = token;
      next();
      return {
        type: "literal",
        value,
        start: cToken.start,
        end: cToken.end
      };
    }
    return null;
  }
  function template2() {
    if (matchPunctuator("`")) {
      var start = token;
      var end = start;
      next();
      var state = tempalteStates.START;
      var ast_1 = {
        type: "template",
        body: [],
        start: start.start,
        end: start.end
      };
      while (true) {
        if (state === tempalteStates.SCRIPTING) {
          var exp = assert(expression());
          ast_1.body.push(exp);
          assert(token.type === TokenName[
            15
            /* TokenEnum.TemplateRightBrace */
          ]);
          next();
          state = tempalteStates.START;
        } else {
          if (matchPunctuator("`")) {
            end = token;
            next();
            break;
          } else if (token.type === TokenName[
            14
            /* TokenEnum.TemplateLeftBrace */
          ]) {
            next();
            state = tempalteStates.SCRIPTING;
          } else if (token.type === TokenName[
            13
            /* TokenEnum.TemplateRaw */
          ]) {
            ast_1.body.push({
              type: "template_raw",
              value: token.value,
              start: token.start,
              end: token.end
            });
            next();
          } else {
            fatal();
          }
        }
      }
      ast_1.end = end.end;
      return ast_1;
    }
    return null;
  }
  function identifier() {
    if (token.type === TokenName[
      7
      /* TokenEnum.Identifier */
    ]) {
      var cToken = token;
      next();
      return {
        type: "identifier",
        name: cToken.value,
        start: cToken.start,
        end: cToken.end
      };
    }
    return null;
  }
  function primaryExpression() {
    return variable() || literal() || numberLiteral() || stringLiteral() || template2() || arrayLiteral() || objectLiteral() || function() {
      var ast2 = expressionList();
      if ((ast2 === null || ast2 === void 0 ? void 0 : ast2.body.length) === 1) {
        return ast2.body[0];
      }
      return ast2;
    }() || rawScript();
  }
  function literal() {
    if (token.type === TokenName[
      8
      /* TokenEnum.Literal */
    ] || token.type === TokenName[
      1
      /* TokenEnum.BooleanLiteral */
    ]) {
      var value = token.value;
      var cToken = token;
      next();
      return {
        type: "literal",
        value,
        start: cToken.start,
        end: cToken.end
      };
    }
    return null;
  }
  function functionCall() {
    if (token.type === TokenName[
      7
      /* TokenEnum.Identifier */
    ]) {
      var id = token;
      next();
      if (matchPunctuator("(")) {
        var argList_1 = expressionList();
        assert(argList_1);
        return {
          type: "func_call",
          identifier: id.value,
          args: argList_1 === null || argList_1 === void 0 ? void 0 : argList_1.body,
          start: id.start,
          end: argList_1.end
        };
      } else {
        back();
      }
    }
    return null;
  }
  function arrayLiteral() {
    if (matchPunctuator("[")) {
      var argList_2 = expressionList("[", "]");
      assert(argList_2);
      return {
        type: "array",
        members: argList_2 === null || argList_2 === void 0 ? void 0 : argList_2.body,
        start: argList_2.start,
        end: argList_2.end
      };
    }
    return null;
  }
  function expressionList(startOP, endOp) {
    if (startOP === void 0) {
      startOP = "(";
    }
    if (endOp === void 0) {
      endOp = ")";
    }
    if (matchPunctuator(startOP)) {
      var start = token;
      var end = void 0;
      next();
      var args = [];
      var state = argListStates.START;
      while (true) {
        if (state === argListStates.COMMA || !matchPunctuator(endOp)) {
          var arg = assert(expression());
          args.push(arg);
          state = argListStates.START;
          if (matchPunctuator(",")) {
            next();
            state = argListStates.COMMA;
          }
        } else if (matchPunctuator(endOp)) {
          end = token;
          next();
          break;
        }
      }
      return {
        type: "expression-list",
        body: args,
        start: start.start,
        end: end.end
      };
    }
    return null;
  }
  function argList(startOP, endOp) {
    if (startOP === void 0) {
      startOP = "(";
    }
    if (endOp === void 0) {
      endOp = ")";
    }
    var count = 0;
    var rollback = function() {
      while (count-- > 0) {
        back();
      }
      return null;
    };
    if (matchPunctuator(startOP)) {
      var start = token;
      var end = start;
      next();
      count++;
      var args = [];
      var state = argListStates.START;
      while (!matchPunctuator(endOp)) {
        if (state === argListStates.COMMA || state === argListStates.START) {
          var arg = variable(false);
          if (!arg) {
            return rollback();
          }
          count++;
          args.push(arg);
          state = argListStates.SET;
        } else if (state === argListStates.SET && matchPunctuator(",")) {
          next();
          count++;
          state = argListStates.COMMA;
        } else {
          return rollback();
        }
      }
      if (matchPunctuator(endOp)) {
        end = token;
        next();
        return {
          type: "arg-list",
          body: args,
          start: start.start,
          end: end.end
        };
      } else {
        return rollback();
      }
    }
    return null;
  }
  function objectLiteral() {
    if (matchPunctuator("{")) {
      var start = token;
      var end = start;
      next();
      var ast_2 = {
        type: "object",
        members: [],
        start: start.start,
        end: start.end
      };
      var state = objectStates.START;
      var key = void 0, value = void 0;
      while (true) {
        if (state === objectStates.KEY) {
          assert(matchPunctuator(":"));
          next();
          state = objectStates.COLON;
        } else if (state === objectStates.COLON) {
          value = assert(expression());
          ast_2.members.push({
            key,
            value
          });
          state = objectStates.VALUE;
        } else if (state === objectStates.VALUE) {
          if (matchPunctuator(",")) {
            next();
            state = objectStates.COMMA;
          } else if (matchPunctuator("}")) {
            end = token;
            next();
            break;
          } else {
            fatal();
          }
        } else {
          if (state != objectStates.COMMA && matchPunctuator("}")) {
            end = token;
            next();
            break;
          }
          key = assert(varibleKey(false, true));
          state = objectStates.KEY;
        }
      }
      ast_2.end = end.end;
      return ast_2;
    }
    return null;
  }
  function assignmentExpression() {
    return conditionalExpression();
  }
  function contents() {
    var node = {
      type: "document",
      body: [],
      start: token.start,
      end: token.end
    };
    while (token.type !== TokenName[
      6
      /* TokenEnum.EOF */
    ]) {
      var ast_3 = raw() || rawScript() || oldVariable();
      if (!ast_3) {
        break;
      }
      node.body.push(ast_3);
    }
    if (node.body.length) {
      node.end = node.body[node.body.length - 1].end;
    }
    return node;
  }
  function raw() {
    if (token.type !== TokenName[
      2
      /* TokenEnum.RAW */
    ]) {
      return null;
    }
    var cToken = token;
    next();
    return {
      type: "raw",
      value: cToken.value,
      start: cToken.start,
      end: cToken.end
    };
  }
  function rawScript() {
    if (token.type !== TokenName[
      4
      /* TokenEnum.OpenScript */
    ]) {
      return null;
    }
    var start = token;
    var end = start;
    next();
    var exp = assert(complexExpression());
    assert(token.type === TokenName[
      5
      /* TokenEnum.CloseScript */
    ]);
    end = token;
    next();
    return {
      type: "script",
      body: exp,
      start: start.start,
      end: end.end
    };
  }
  function variable(allowNameSpace) {
    if (allowNameSpace === void 0) {
      allowNameSpace = true;
    }
    if (token.type === TokenName[
      7
      /* TokenEnum.Identifier */
    ]) {
      var cToken = token;
      next();
      if (allowNameSpace && matchPunctuator(":") && ~variableNamespaces.indexOf(cToken.value)) {
        next();
        var body = assert(postfixExpression());
        return {
          type: "ns-variable",
          namespace: cToken.value,
          body,
          start: cToken.start,
          end: body.end
        };
      }
      return {
        type: "variable",
        name: cToken.value,
        start: cToken.start,
        end: cToken.end
      };
    } else if (matchPunctuator("&")) {
      var v = token;
      next();
      return {
        type: "variable",
        name: "&",
        start: v.start,
        end: v.end
      };
    }
    return null;
  }
  function oldVariable() {
    if (token.type !== TokenName[
      3
      /* TokenEnum.Variable */
    ]) {
      return null;
    }
    var prevToken = token;
    next();
    return {
      type: "script",
      body: prevToken.value.split(".").reduce(function(prev, key) {
        return prev ? {
          type: "getter",
          host: prev,
          key,
          start: prevToken.start,
          end: prevToken.end
        } : {
          type: "variable",
          name: key,
          start: prevToken.start,
          end: prevToken.end
        };
      }, null),
      start: prevToken.start,
      end: prevToken.end
    };
  }
  next();
  var ast = (options === null || options === void 0 ? void 0 : options.variableMode) ? postfixExpression(variable) : (options === null || options === void 0 ? void 0 : options.evalMode) ? expression() : contents();
  assert((token === null || token === void 0 ? void 0 : token.type) === TokenName[
    6
    /* TokenEnum.EOF */
  ]);
  return ast;
}

// node_modules/amis-formula/esm/function.js
var functions = {};
function registerFunction(name, fn) {
  functions["fn".concat(name)] = fn;
  Evaluator.setDefaultFunctions(functions);
}
var functionDocs = {};

// node_modules/amis-formula/esm/index.js
function evaluate(astOrString, data, options) {
  var ast = astOrString;
  if (typeof astOrString === "string") {
    ast = parse(astOrString, options);
  }
  return new Evaluator(data, options).evalute(ast);
}
function evaluateForAsync(astOrString, data, options) {
  return __awaiter(this, void 0, void 0, function() {
    var ast;
    return __generator(this, function(_a3) {
      ast = astOrString;
      if (typeof astOrString === "string") {
        ast = parse(astOrString, options);
      }
      return [2, new AsyncEvaluator(data, options).evalute(ast)];
    });
  });
}
Evaluator.setDefaultFilters(getFilters());
AsyncEvaluator.setDefaultFilters(getFilters());

// node_modules/amis-core/esm/utils/tokenize.js
var tokenize = function(str, data, defaultFilter) {
  if (defaultFilter === void 0) {
    defaultFilter = "| html";
  }
  if (!str || typeof str !== "string") {
    return str;
  }
  try {
    var ast = parse(str, {
      evalMode: false,
      allowFilter: true
    });
    var result = new Evaluator(data, {
      defaultFilter
    }).evalute(ast);
    return "".concat(result == null ? "" : result);
  } catch (e) {
    console.warn(e);
    return str;
  }
};

// node_modules/amis-core/esm/utils/memoryParse.js
var cache = {};
function memoryParse(input, options) {
  if (options === void 0) {
    options = {
      evalMode: false
    };
  }
  if (typeof input !== "string") {
    return;
  }
  var key = input + JSON.stringify(options);
  if (cache[key]) {
    return cache[key];
  }
  var ast = parse(input, options);
  cache[key] = ast;
  return ast;
}

// node_modules/amis-core/esm/utils/resolveVariableAndFilterForAsync.js
var formulaEvalErrorHandler;
function setFormulaEvalErrorHandler(fn) {
  formulaEvalErrorHandler = fn;
}
var resolveVariableAndFilterForAsync = function(path, data, defaultFilter, fallbackValue, skipFormulaEvalErrorHandler) {
  if (data === void 0) {
    data = {};
  }
  if (defaultFilter === void 0) {
    defaultFilter = "| html";
  }
  if (fallbackValue === void 0) {
    fallbackValue = function(value) {
      return value;
    };
  }
  if (skipFormulaEvalErrorHandler === void 0) {
    skipFormulaEvalErrorHandler = false;
  }
  return __awaiter(void 0, void 0, void 0, function() {
    var ast, ret, e_1;
    return __generator(this, function(_a3) {
      switch (_a3.label) {
        case 0:
          if (!path || typeof path !== "string") {
            return [2, void 0];
          }
          _a3.label = 1;
        case 1:
          _a3.trys.push([1, 3, , 4]);
          ast = memoryParse(path, {
            evalMode: false,
            allowFilter: true
          });
          return [4, new AsyncEvaluator(data, {
            defaultFilter
          }).evalute(ast)];
        case 2:
          ret = _a3.sent();
          return [2, ret == null && !~path.indexOf("default") && !~path.indexOf("now") ? fallbackValue(ret) : ret];
        case 3:
          e_1 = _a3.sent();
          if (e_1.name === "FormulaEvalError") {
            if (!skipFormulaEvalErrorHandler) {
              return [2, formulaEvalErrorHandler === null || formulaEvalErrorHandler === void 0 ? void 0 : formulaEvalErrorHandler(path, data, defaultFilter, fallbackValue)];
            }
            throw e_1;
          }
          console.warn(e_1);
          return [2, void 0];
        case 4:
          return [
            2
            /*return*/
          ];
      }
    });
  });
};

// node_modules/amis-core/esm/utils/keyToPath.js
var keyToPath = function(string) {
  if (string === void 0) {
    string = "";
  }
  var result = [];
  if (string.charCodeAt(0) === ".".charCodeAt(0)) {
    result.push("");
  }
  string.replace(new RegExp(`[^.[\\]]+|\\[(?:([^"'][^[]*)|(["'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))`, "g"), function(match, expression, quote, subString) {
    var key = match;
    if (quote) {
      key = subString.replace(/\\(\\)?/g, "$1");
    } else if (expression) {
      key = expression.trim();
    }
    result.push(key);
    return "";
  });
  return result;
};

// node_modules/amis-core/esm/utils/getVariable.js
function getVariable(data, key, canAccessSuper) {
  if (canAccessSuper === void 0) {
    canAccessSuper = true;
  }
  if (!data || !key || typeof data !== "object") {
    return void 0;
  } else if (canAccessSuper ? key in data : data.hasOwnProperty(key)) {
    return data[key];
  }
  return keyToPath(key).reduce(function(obj, key2) {
    return obj && typeof obj === "object" && (canAccessSuper ? key2 in obj : obj.hasOwnProperty(key2)) ? obj[key2] : void 0;
  }, data);
}

// node_modules/amis-core/esm/utils/resolveVariable.js
function resolveVariable(path, data, canAccessSuper) {
  if (data === void 0) {
    data = {};
  }
  if (path === "&" || path == "$$") {
    return data;
  } else if (!path || typeof path !== "string") {
    return void 0;
  } else if (!~path.indexOf(":")) {
    return getVariable(data, path[0] === "$" ? path.substring(1) : path, canAccessSuper);
  }
  try {
    return new Evaluator(data).evalute(memoryParse(path, {
      variableMode: true,
      allowFilter: false
    }));
  } catch (e) {
    return void 0;
  }
}

// node_modules/amis-core/esm/utils/makeSorter.js
function makeSorter(key, method, order) {
  return function(a, b) {
    if (!a || !b) {
      return 0;
    }
    var va = resolveVariable(key, a);
    var vb = resolveVariable(key, b);
    var result = 0;
    if (method === "numerical") {
      result = (parseFloat(va) || 0) - (parseFloat(vb) || 0);
    } else {
      result = String(va).localeCompare(String(vb));
    }
    return result * (order === "desc" ? -1 : 1);
  };
}

// node_modules/amis-core/esm/utils/object.js
var import_isPlainObject2 = __toESM(require_isPlainObject());
function createObject2(superProps, props, properties) {
  if (superProps && Object.isFrozen(superProps)) {
    superProps = cloneObject(superProps);
  }
  var obj = superProps ? Object.create(superProps, __assign(__assign({}, properties), { __super: {
    value: superProps,
    writable: false,
    enumerable: false
  } })) : Object.create(Object.prototype, properties);
  props && isObject(props) && Object.keys(props).forEach(function(key) {
    return obj[key] = props[key];
  });
  return obj;
}
function extractObjectChain(value) {
  var result = value ? [value] : [];
  while (value === null || value === void 0 ? void 0 : value.__super) {
    result.unshift(value.__super);
    value = value.__super;
  }
  return result;
}
function createObjectFromChain(chain) {
  return chain.filter(function(item) {
    return item;
  }).reduce(function(proto, value) {
    proto = proto || Object.prototype;
    if (Object.isFrozen(proto)) {
      proto = cloneObject(proto);
    }
    return Object.assign(Object.create(proto, {
      __super: {
        value: proto,
        writable: false,
        enumerable: false
      }
    }), value);
  });
}
function injectObjectChain(obj, value) {
  var chain = extractObjectChain(obj);
  chain.splice(chain.length - 1, 0, value);
  return createObjectFromChain(chain);
}
function cloneObject(target, persistOwnProps) {
  if (persistOwnProps === void 0) {
    persistOwnProps = true;
  }
  var obj = target && target.__super ? Object.create(target.__super, {
    __super: {
      value: target.__super,
      writable: false,
      enumerable: false
    }
  }) : Object.create(Object.prototype);
  persistOwnProps && target && Object.keys(target).forEach(function(key) {
    return obj[key] = target[key];
  });
  return obj;
}
function extendObject(target, src, persistOwnProps) {
  if (persistOwnProps === void 0) {
    persistOwnProps = true;
  }
  var obj = cloneObject(target, persistOwnProps);
  src && Object.keys(src).forEach(function(key) {
    return obj[key] = src[key];
  });
  return obj;
}
function isObject(obj) {
  var typename = typeof obj;
  return obj && typename !== "string" && typename !== "number" && typename !== "boolean" && typename !== "function" && !Array.isArray(obj);
}
function setVariable(data, key, value, convertKeyToPath) {
  data = data || {};
  if (key in data) {
    data[key] = value;
    return;
  }
  var parts = convertKeyToPath !== false ? keyToPath(key) : [key];
  var last2 = parts.pop();
  var stack = [];
  while (parts.length) {
    var host = data;
    var key_1 = parts.shift();
    if ((0, import_isPlainObject2.default)(data[key_1])) {
      data = data[key_1] = __assign({}, data[key_1]);
    } else if (Array.isArray(data[key_1])) {
      data[key_1] = data[key_1].concat();
      data = data[key_1];
    } else if (data[key_1]) {
      data[key_1] = {};
      data = data[key_1];
    } else {
      if (/^\d+$/.test(key_1) && stack.length) {
        var prev = stack[stack.length - 1];
        if (!Array.isArray(prev.host[prev.key]) && !Object.keys(prev.host[prev.key]).length) {
          host = data = prev.host[prev.key] = [];
        }
      }
      data[key_1] = {};
      data = data[key_1];
    }
    stack.push({
      host,
      key: key_1
    });
  }
  data[last2] = value;
}
function deleteVariable(data, key) {
  if (!data) {
    return;
  } else if (data.hasOwnProperty(key)) {
    delete data[key];
    return;
  }
  var parts = keyToPath(key);
  var last2 = parts.pop();
  while (parts.length) {
    var key_2 = parts.shift();
    if ((0, import_isPlainObject2.default)(data[key_2])) {
      data = data[key_2] = __assign({}, data[key_2]);
    } else if (data[key_2]) {
      throw new Error("目标路径不是纯对象，不能修改");
    } else {
      break;
    }
  }
  if (data && data.hasOwnProperty && data.hasOwnProperty(last2)) {
    delete data[last2];
  }
}
function pickValues(names, data) {
  var _a3;
  var arr;
  if (!names || (arr = names.split(",")) && arr.length < 2) {
    var idx = names.indexOf("~");
    if (~idx) {
      var key = names.substring(0, idx);
      var target = names.substring(idx + 1);
      return _a3 = {}, _a3[key] = resolveVariable(target, data), _a3;
    }
    return resolveVariable(names, data);
  }
  var ret = {};
  arr.forEach(function(name) {
    var idx2 = name.indexOf("~");
    var target2 = name;
    if (~idx2) {
      target2 = name.substring(idx2 + 1);
      name = name.substring(0, idx2);
    }
    setVariable(ret, name, resolveVariable(target2, data));
  });
  return ret;
}

// node_modules/amis-core/esm/utils/string2regExp.js
function string2regExp(value, caseSensitive) {
  if (caseSensitive === void 0) {
    caseSensitive = false;
  }
  if (typeof value !== "string") {
    throw new TypeError("Expected a string");
  }
  return new RegExp(value.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d"), !caseSensitive ? "i" : "");
}

// node_modules/amis-core/esm/utils/escapeHtml.js
var entityMap2 = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;",
  "/": "&#x2F;"
};
var escapeHtml2 = function(str) {
  return String(str).replace(/[&<>"'\/]/g, function(s) {
    return entityMap2[s];
  });
};

// node_modules/amis-core/esm/utils/formatDuration.js
function formatDuration(value) {
  var unit = ["秒", "分", "时", "天", "月", "季", "年"];
  var steps = [1, 60, 3600, 86400, 2592e3, 7776e3, 31104e3];
  var len = steps.length;
  var parts = [];
  while (len--) {
    if (steps[len] && value >= steps[len]) {
      parts.push(Math.floor(value / steps[len]) + unit[len]);
      value %= steps[len];
    } else if (len === 0 && value) {
      parts.push((value.toFixed ? value.toFixed(2) : "0") + unit[0]);
    }
  }
  return parts.join("");
}

// node_modules/amis-core/esm/utils/prettyBytes.js
var UNITS = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
var prettyBytes = function(num, step) {
  if (step === void 0) {
    step = 1e3;
  }
  if (num && typeof num === "string") {
    if (num.endsWith("B")) {
      return num;
    }
    num = parseFloat(num);
  }
  if (!Number.isFinite(num)) {
    throw new TypeError("Expected a finite number, got ".concat(typeof num, ": ").concat(num));
  }
  var neg = num < 0;
  if (neg) {
    num = -num;
  }
  if (num < 1) {
    return (neg ? "-" : "") + num + " B";
  }
  var exponent = Math.min(Math.floor(Math.log(num) / Math.log(step)), UNITS.length - 1);
  var numStr = Number((num / Math.pow(step, exponent)).toPrecision(3));
  var unit = UNITS[exponent];
  return (neg ? "-" : "") + numStr + " " + unit;
};

// node_modules/amis-core/esm/utils/stripNumber.js
function stripNumber2(number) {
  if (typeof number === "number" && !Number.isInteger(number)) {
    return parseFloat(number.toPrecision(16));
  } else {
    return number;
  }
}

// node_modules/amis-core/esm/utils/date.js
init_moment();
var timeUnitMap = {
  year: "Y",
  month: "M",
  week: "w",
  weekday: "W",
  day: "d",
  hour: "h",
  minute: "m",
  min: "m",
  second: "s",
  millisecond: "ms"
};
var relativeValueRe = /^(.+)?(\+|-)(\d+)(minute|min|hour|day|week|month|year|weekday|second|millisecond)s?$/i;
var filterDate = function(value, data, format2, utc) {
  if (data === void 0) {
    data = {};
  }
  if (format2 === void 0) {
    format2 = "X";
  }
  if (utc === void 0) {
    utc = false;
  }
  var m, mm = utc ? moment_default.utc : moment_default;
  if (typeof value === "string") {
    value = value.trim();
  }
  var date = /* @__PURE__ */ new Date();
  value = tokenize(value, createObject2(data, {
    now: mm().toDate(),
    today: mm([date.getFullYear(), date.getMonth(), date.getDate()])
  }), "| raw");
  if (value && typeof value === "string" && (m = relativeValueRe.exec(value))) {
    var date_1 = /* @__PURE__ */ new Date();
    var step = parseInt(m[3], 10);
    var from = m[1] ? filterDate(m[1], data, format2, utc) : mm(/(minute|min|hour|second)s?/.test(m[4]) ? [
      date_1.getFullYear(),
      date_1.getMonth(),
      date_1.getDate(),
      date_1.getHours(),
      date_1.getMinutes(),
      date_1.getSeconds()
    ] : [date_1.getFullYear(), date_1.getMonth(), date_1.getDate()]);
    return m[2] === "-" ? from.subtract(step, timeUnitMap[m[4]]) : from.add(step, timeUnitMap[m[4]]);
  } else if (value === "now") {
    return mm();
  } else if (value === "today") {
    var date_2 = /* @__PURE__ */ new Date();
    return mm([date_2.getFullYear(), date_2.getMonth(), date_2.getDate()]);
  } else {
    var result = mm(value);
    return result.isValid() ? result : mm(value, format2);
  }
};
function parseDuration(str) {
  var matches = /^((?:\-|\+)?(?:\d*\.)?\d+)(minute|min|hour|day|week|month|quarter|year|weekday|second|millisecond)s?$/.exec(str);
  if (matches) {
    var duration = moment_default.duration(parseFloat(matches[1]), matches[2]);
    if (moment_default.isDuration(duration)) {
      return duration;
    }
  }
  return;
}
function normalizeDate(value, format2) {
  if (!value || value === "0") {
    return void 0;
  }
  var v = moment_default(value, format2, true);
  if (v.isValid()) {
    return v;
  }
  if (typeof value === "string" || typeof value === "number") {
    var formats = ["", "YYYY-MM-DD HH:mm:ss", "X"];
    if (/^\d{10}((\.\d+)*)$/.test(value.toString())) {
      formats = ["X", "x", "YYYY-MM-DD HH:mm:ss", ""];
    } else if (/^\d{13}((\.\d+)*)$/.test(value.toString())) {
      formats = ["x", "X", "YYYY-MM-DD HH:mm:ss", ""];
    }
    while (formats.length) {
      var format_1 = formats.shift();
      var date = moment_default(value, format_1);
      if (date.isValid()) {
        return date;
      }
    }
  }
  return void 0;
}

// node_modules/amis-core/esm/utils/tpl-builtin.js
init_moment();
var import_isPlainObject3 = __toESM(require_isPlainObject());

// node_modules/amis-core/esm/utils/filter.js
init_moment();
var import_transform = __toESM(require_transform());
var import_groupBy = __toESM(require_groupBy());
var import_uniqBy2 = __toESM(require_uniqBy());
var import_uniq = __toESM(require_uniq());
function conditionalFilter(input, hasAlternate, filterContext, test, trueValue, falseValue, astOffset) {
  var _a3, _b3, _c;
  if (astOffset === void 0) {
    astOffset = 1;
  }
  (hasAlternate || test) && skipRestTest(filterContext.restFilters);
  var result = test ? trueValue : falseValue;
  var ast = test ? (_a3 = filterContext.filter) === null || _a3 === void 0 ? void 0 : _a3.args[0 + astOffset] : (_b3 = filterContext.filter) === null || _b3 === void 0 ? void 0 : _b3.args[1 + astOffset];
  return test || hasAlternate ? (_c = getStrOrVariable(result, filterContext.data, ast)) !== null && _c !== void 0 ? _c : result : input;
}
function getStrOrVariable(value, data, ast) {
  if ((ast === null || ast === void 0 ? void 0 : ast.type) && ast.type !== "literal") {
    return value;
  }
  return typeof value === "string" && /,/.test(value) ? value.split(/\s*,\s*/).filter(function(item) {
    return item;
  }) : typeof value === "string" ? resolveVariable(value, data) : value;
}
function str2array(list) {
  if (list && typeof list === "string") {
    if (/^\[.*\]$/.test(list)) {
      return list.substring(1, list.length - 1).split(/\s*,\s*/).filter(function(item) {
        return item;
      });
    } else {
      return list.split(/\s*,\s*/).filter(function(item) {
        return item;
      });
    }
  }
  return list;
}
function skipRestTest(restFilters) {
  var _a3;
  while (~[
    "isTrue",
    "isFalse",
    "isMatch",
    "isEquals",
    "notMatch",
    "notEquals"
  ].indexOf((_a3 = restFilters[0]) === null || _a3 === void 0 ? void 0 : _a3.name)) {
    restFilters.shift();
  }
}
extendsFilters({
  map: function(input, fn) {
    var _this = this;
    var arg = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      arg[_i - 2] = arguments[_i];
    }
    return Array.isArray(input) && filters[fn] ? input.map(function(item) {
      var _a3;
      return (_a3 = filters[fn]).call.apply(_a3, __spreadArray([_this, item], __read(arg), false));
    }) : input;
  },
  html: function(input) {
    if (input == null) {
      return input;
    }
    return escapeHtml2(input);
  },
  json: function(input, tabSize) {
    if (tabSize === void 0) {
      tabSize = 2;
    }
    return tabSize ? JSON.stringify(input, null, parseInt(tabSize, 10)) : JSON.stringify(input);
  },
  toJson: function(input) {
    if (typeof input !== "string") {
      return input;
    }
    try {
      return JSON.parse(input);
    } catch (e) {
      return null;
    }
  },
  toInt: function(input) {
    return typeof input === "string" ? parseInt(input, 10) : input;
  },
  toFloat: function(input) {
    return typeof input === "string" ? parseFloat(input) : input;
  },
  raw: function(input) {
    return input;
  },
  now: function() {
    return /* @__PURE__ */ new Date();
  },
  toDate: function(input, inputFormat) {
    if (inputFormat === void 0) {
      inputFormat = "";
    }
    var date = moment_default(input, inputFormat);
    return date.isValid() ? date.toDate() : void 0;
  },
  fromNow: function(input, inputFormat) {
    if (inputFormat === void 0) {
      inputFormat = "";
    }
    return moment_default(input, inputFormat).fromNow();
  },
  dateModify: function(input, modifier, amount, unit) {
    if (modifier === void 0) {
      modifier = "add";
    }
    if (amount === void 0) {
      amount = 0;
    }
    if (unit === void 0) {
      unit = "days";
    }
    if (!(input instanceof Date)) {
      input = moment_default(input).isValid() ? moment_default(input).toDate() : moment_default().toDate();
    }
    if (modifier === "endOf" || modifier === "startOf") {
      return moment_default(input)[modifier === "endOf" ? "endOf" : "startOf"](amount || "day").toDate();
    }
    return moment_default(input)[modifier === "add" ? "add" : "subtract"](parseInt(amount, 10) || 0, unit).toDate();
  },
  date: function(input, format2, inputFormat) {
    if (format2 === void 0) {
      format2 = "LLL";
    }
    if (inputFormat === void 0) {
      inputFormat = "X";
    }
    return moment_default(input, inputFormat).format(format2);
  },
  number: function(input) {
    var parts = String(input).split(".");
    parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    return parts.join(".");
  },
  trim: function(input) {
    return typeof input === "string" ? input.trim() : input;
  },
  percent: function(input, decimals) {
    if (decimals === void 0) {
      decimals = 0;
    }
    input = parseFloat(input) || 0;
    decimals = parseInt(decimals, 10) || 0;
    var whole = input * 100;
    var multiplier = Math.pow(10, decimals);
    return (Math.round(whole * multiplier) / multiplier).toFixed(decimals) + "%";
  },
  duration: function(input) {
    return input ? formatDuration(input) : input;
  },
  bytes: function(input, step) {
    var _a3;
    if (step === void 0) {
      step = 1e3;
    }
    return input ? prettyBytes(input, (_a3 = parseInt(step, 10)) !== null && _a3 !== void 0 ? _a3 : 1e3) : input;
  },
  round: function(input, decimals) {
    var _a3;
    if (decimals === void 0) {
      decimals = 2;
    }
    if (isNaN(input)) {
      return 0;
    }
    decimals = (_a3 = parseInt(decimals, 10)) !== null && _a3 !== void 0 ? _a3 : 2;
    var multiplier = Math.pow(10, decimals);
    return (Math.round(input * multiplier) / multiplier).toFixed(decimals);
  },
  truncate: function(input, length, end) {
    if (typeof input !== "string") {
      return input;
    }
    end = end || "...";
    if (length == null) {
      return input;
    }
    length = parseInt(length, 10) || 200;
    return input.substring(0, length) + (input.length > length ? end : "");
  },
  url_encode: function(input) {
    if (input == null) {
      return "";
    }
    return encodeURIComponent(input);
  },
  url_decode: function(input) {
    var _a3;
    var result;
    try {
      result = decodeURIComponent(input);
    } catch (e) {
      console.warn("[amis] ".concat((_a3 = e === null || e === void 0 ? void 0 : e.name) !== null && _a3 !== void 0 ? _a3 : "URIError", ": input string is not valid."));
    }
    return result;
  },
  default: function(input, defaultValue, strict) {
    var _a3;
    if (strict === void 0) {
      strict = false;
    }
    return (_a3 = strict ? input : input ? input : void 0) !== null && _a3 !== void 0 ? _a3 : function() {
      try {
        if (defaultValue === "undefined") {
          return void 0;
        }
        return JSON.parse(defaultValue);
      } catch (e) {
        return defaultValue;
      }
    }();
  },
  join: function(input, glue) {
    return input && input.join ? input.join(glue) : input;
  },
  split: function(input, delimiter) {
    if (delimiter === void 0) {
      delimiter = ",";
    }
    return typeof input === "string" ? input.split(delimiter) : input;
  },
  sortBy: function(input, key, method, order) {
    if (key === void 0) {
      key = "&";
    }
    if (method === void 0) {
      method = "alpha";
    }
    return Array.isArray(input) ? input.sort(makeSorter(key, method, order)) : input;
  },
  objectToArray: function(input, label, value) {
    if (label === void 0) {
      label = "label";
    }
    if (value === void 0) {
      value = "value";
    }
    return (0, import_transform.default)(input, function(result, v, k) {
      var _a3;
      (result || (result = [])).push((_a3 = {}, _a3[label] = v, _a3[value] = k, _a3));
    }, []);
  },
  unique: function(input, key) {
    return Array.isArray(input) ? key ? (0, import_uniqBy2.default)(input, key) : (0, import_uniq.default)(input) : input;
  },
  topAndOther: function(input, len, labelField, restLabel) {
    if (len === void 0) {
      len = 10;
    }
    if (labelField === void 0) {
      labelField = "name";
    }
    if (restLabel === void 0) {
      restLabel = "其他";
    }
    if (Array.isArray(input) && len) {
      var grouped_1 = (0, import_groupBy.default)(input, function(item) {
        var index = input.indexOf(item) + 1;
        return index >= len ? len : index;
      });
      return Object.keys(grouped_1).map(function(key, index) {
        var group = grouped_1[key];
        var obj = group.reduce(function(obj2, item) {
          Object.keys(item).forEach(function(key2) {
            if (!obj2.hasOwnProperty(key2) || key2 === "labelField") {
              obj2[key2] = item[key2];
            } else if (typeof item[key2] === "number" && typeof obj2[key2] === "number") {
              obj2[key2] += item[key2];
            } else if (typeof item[key2] === "string" && /^(?:\-|\.)\d/.test(item[key2]) && typeof obj2[key2] === "number") {
              obj2[key2] += parseFloat(item[key2]) || 0;
            } else if (typeof item[key2] === "string" && typeof obj2[key2] === "string") {
              obj2[key2] += ", ".concat(item[key2]);
            } else {
              obj2[key2] = item[key2];
            }
          });
          return obj2;
        }, {});
        if (index === len - 1) {
          obj[labelField] = restLabel || "其他";
        }
        return obj;
      });
    }
    return input;
  },
  first: function(input) {
    return input && input[0];
  },
  nth: function(input, nth) {
    if (nth === void 0) {
      nth = 0;
    }
    return input && input[nth];
  },
  last: function(input) {
    return input && (input.length ? input[input.length - 1] : null);
  },
  minus: function(input, step) {
    var _a3;
    if (step === void 0) {
      step = 1;
    }
    return stripNumber2((Number(input) || 0) - Number(getStrOrVariable(step, this.data, (_a3 = this.filter) === null || _a3 === void 0 ? void 0 : _a3.args[0])));
  },
  plus: function(input, step) {
    var _a3;
    if (step === void 0) {
      step = 1;
    }
    return stripNumber2((Number(input) || 0) + Number(getStrOrVariable(step, this.data, (_a3 = this.filter) === null || _a3 === void 0 ? void 0 : _a3.args[0])));
  },
  times: function(input, step) {
    var _a3;
    if (step === void 0) {
      step = 1;
    }
    return stripNumber2((Number(input) || 0) * Number(getStrOrVariable(step, this.data, (_a3 = this.filter) === null || _a3 === void 0 ? void 0 : _a3.args[0])));
  },
  division: function(input, step) {
    var _a3;
    if (step === void 0) {
      step = 1;
    }
    return stripNumber2((Number(input) || 0) / Number(getStrOrVariable(step, this.data, (_a3 = this.filter) === null || _a3 === void 0 ? void 0 : _a3.args[0])));
  },
  count: function(input) {
    return Array.isArray(input) || typeof input === "string" ? input.length : 0;
  },
  sum: function(input, field) {
    if (!Array.isArray(input)) {
      return input;
    }
    var restult = input.reduce(function(sum, item) {
      return sum + (parseFloat(field ? pickValues(field, item) : item) || 0);
    }, 0);
    return stripNumber2(restult);
  },
  abs: function(input) {
    return typeof input === "number" ? Math.abs(input) : input;
  },
  pick: function(input, path) {
    if (path === void 0) {
      path = "&";
    }
    return Array.isArray(input) && !/^\d+$/.test(path) ? input.map(function(item, index) {
      return pickValues(path, createObject2({ index }, item));
    }) : pickValues(path, input);
  },
  pick_if_exist: function(input, path) {
    if (path === void 0) {
      path = "&";
    }
    return Array.isArray(input) ? input.map(function(item) {
      return resolveVariable(path, item) || item;
    }) : resolveVariable(path, input) || input;
  },
  str2date: function(input, inputFormat, outputFormat) {
    if (inputFormat === void 0) {
      inputFormat = "X";
    }
    if (outputFormat === void 0) {
      outputFormat = "X";
    }
    return input ? filterDate(input, this.data, inputFormat).format(outputFormat) : "";
  },
  asArray: function(input) {
    return Array.isArray(input) ? input : input ? [input] : input;
  },
  concat: function(input) {
    var _this = this;
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    return Array.isArray(input) ? input.concat.apply(input, __spreadArray([], __read(args.map(function(arg, index) {
      var _a3;
      return getStrOrVariable(arg, _this.data, (_a3 = _this.filter) === null || _a3 === void 0 ? void 0 : _a3.args[index]);
    })), false)) : input;
  },
  filter: function(input, keys, expOrDirective, arg1) {
    var _a3, _b3, _c, _d;
    if (!Array.isArray(input) || !keys || !expOrDirective) {
      return input;
    }
    var directive = expOrDirective;
    var fn = function() {
      return true;
    };
    if (directive === "isTrue") {
      fn = function(value) {
        return !!value;
      };
    } else if (directive === "isFalse") {
      fn = function(value) {
        return !value;
      };
    } else if (directive === "isExists") {
      fn = function(value) {
        return typeof value !== "undefined";
      };
    } else if (directive === "equals" || directive === "equal") {
      arg1 = arg1 ? getStrOrVariable(arg1, this.data, (_a3 = this.filter) === null || _a3 === void 0 ? void 0 : _a3.args[2]) : "";
      fn = function(value) {
        return arg1 == value;
      };
    } else if (directive === "isIn") {
      var list_1 = arg1 ? getStrOrVariable(arg1, this.data, (_b3 = this.filter) === null || _b3 === void 0 ? void 0 : _b3.args[2]) : [];
      list_1 = str2array(list_1);
      list_1 = Array.isArray(list_1) ? list_1 : list_1 ? [list_1] : [];
      fn = function(value) {
        return list_1.length ? !!~list_1.indexOf(value) : true;
      };
    } else if (directive === "notIn") {
      var list_2 = arg1 ? getStrOrVariable(arg1, this.data, (_c = this.filter) === null || _c === void 0 ? void 0 : _c.args[2]) : [];
      list_2 = str2array(list_2);
      list_2 = Array.isArray(list_2) ? list_2 : list_2 ? [list_2] : [];
      fn = function(value) {
        return !~list_2.indexOf(value);
      };
    } else {
      if (directive !== "match") {
        directive = "match";
        arg1 = expOrDirective;
      }
      arg1 = arg1 ? getStrOrVariable(arg1, this.data, (_d = this.filter) === null || _d === void 0 ? void 0 : _d.args[2]) : "";
      if (!arg1) {
        return input;
      }
      var reg_1 = string2regExp("".concat(arg1), false);
      fn = function(value) {
        return reg_1.test(String(value));
      };
    }
    var isAsterisk = /\s*\*\s*/.test(keys);
    keys = keys.split(/\s*,\s*/);
    return input.filter(function(item) {
      return (isAsterisk ? Object.keys(item) : keys).some(function(key) {
        return fn(resolveVariable(key, item), key, item);
      });
    });
  },
  base64Encode: function(str) {
    return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function toSolidBytes(match, p1) {
      return String.fromCharCode("0x" + p1);
    }));
  },
  base64Decode: function(str) {
    return decodeURIComponent(atob(str).split("").map(function(c) {
      return "%" + ("00" + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(""));
  },
  substring: function(input, start, end) {
    return input && typeof input === "string" ? input.substring(start, end) : input;
  },
  lowerCase: function(input) {
    return input && typeof input === "string" ? input.toLowerCase() : input;
  },
  upperCase: function(input) {
    return input && typeof input === "string" ? input.toUpperCase() : input;
  },
  isTrue: function(input, trueValue, falseValue) {
    var hasAlternate = arguments.length > 2;
    return conditionalFilter(input, hasAlternate, this, !!input, trueValue, falseValue, 0);
  },
  isFalse: function(input, trueValue, falseValue) {
    var hasAlternate = arguments.length > 2;
    return conditionalFilter(input, hasAlternate, this, !input, trueValue, falseValue, 0);
  },
  isMatch: function(input, matchArg, trueValue, falseValue) {
    var _a3, _b3;
    var hasAlternate = arguments.length > 3;
    matchArg = (_b3 = getStrOrVariable(matchArg, this.data, (_a3 = this.filter) === null || _a3 === void 0 ? void 0 : _a3.args[0])) !== null && _b3 !== void 0 ? _b3 : matchArg;
    return conditionalFilter(input, hasAlternate, this, matchArg && string2regExp("".concat(matchArg), false).test(String(input)), trueValue, falseValue);
  },
  notMatch: function(input, matchArg, trueValue, falseValue) {
    var _a3, _b3;
    var hasAlternate = arguments.length > 3;
    matchArg = (_b3 = getStrOrVariable(matchArg, this.data, (_a3 = this.filter) === null || _a3 === void 0 ? void 0 : _a3.args[0])) !== null && _b3 !== void 0 ? _b3 : matchArg;
    return conditionalFilter(input, hasAlternate, this, matchArg && !string2regExp("".concat(matchArg), false).test(String(input)), trueValue, falseValue);
  },
  isEquals: function(input, equalsValue, trueValue, falseValue) {
    var _a3, _b3;
    equalsValue = (_b3 = getStrOrVariable(equalsValue, this.data, (_a3 = this.filter) === null || _a3 === void 0 ? void 0 : _a3.args[0])) !== null && _b3 !== void 0 ? _b3 : equalsValue;
    var hasAlternate = arguments.length > 3;
    return conditionalFilter(input, hasAlternate, this, input === equalsValue, trueValue, falseValue);
  },
  notEquals: function(input, equalsValue, trueValue, falseValue) {
    var _a3, _b3;
    equalsValue = (_b3 = getStrOrVariable(equalsValue, this.data, (_a3 = this.filter) === null || _a3 === void 0 ? void 0 : _a3.args[0])) !== null && _b3 !== void 0 ? _b3 : equalsValue;
    var hasAlternate = arguments.length > 3;
    return conditionalFilter(input, hasAlternate, this, input !== equalsValue, trueValue, falseValue);
  }
});

// node_modules/amis-core/esm/utils/tpl-builtin.js
function matchSynatax(str) {
  var from = 0;
  while (true) {
    var idx = str.indexOf("$", from);
    if (~idx) {
      var nextToken = str[idx + 1];
      if (!nextToken || ~['"', "'", " "].indexOf(nextToken)) {
        from = idx + 1;
        continue;
      }
      var prevToken = str[idx - 1];
      if (prevToken && prevToken === "\\") {
        from = idx + 1;
        continue;
      }
      return true;
    } else {
      break;
    }
  }
  return false;
}
function register() {
  var _this = this;
  return {
    name: "builtin",
    test: function(str) {
      return typeof str === "string" && matchSynatax(str);
    },
    removeEscapeToken: function(str) {
      return typeof str === "string" ? str.replace(/\\\$/g, "$") : str;
    },
    compile: function(str, data, defaultFilter) {
      if (defaultFilter === void 0) {
        defaultFilter = "| html";
      }
      try {
        return tokenize(str, data, defaultFilter);
      } catch (e) {
        return "error: ".concat(e.message);
      }
    },
    asyncCompile: function(str, data, defaultFilter) {
      if (defaultFilter === void 0) {
        defaultFilter = "| html";
      }
      return __awaiter(_this, void 0, void 0, function() {
        return __generator(this, function(_a3) {
          try {
            return [2, resolveVariableAndFilterForAsync(str, data, defaultFilter)];
          } catch (e) {
            return [2, "error: ".concat(e.message)];
          }
          return [
            2
            /*return*/
          ];
        });
      });
    }
  };
}

// node_modules/amis-core/esm/utils/resolveCondition.js
var import_get2 = __toESM(require_get());
var import_endsWith = __toESM(require_endsWith());
var import_isEmpty = __toESM(require_isEmpty());
var import_isEqual2 = __toESM(require_isEqual());
var import_startsWith = __toESM(require_startsWith());
init_moment();
var import_capitalize2 = __toESM(require_capitalize());
var conditionResolverMap = {};
var DEFAULT_RESULT = true;
var conditionComputeErrorHandler;
function resolveCondition(conditions, data, defaultResult) {
  if (defaultResult === void 0) {
    defaultResult = true;
  }
  return __awaiter(this, void 0, void 0, function() {
    var e_1;
    return __generator(this, function(_a3) {
      switch (_a3.label) {
        case 0:
          if (!conditions || !conditions.conjunction || !Array.isArray(conditions.children) || !conditions.children.length) {
            return [2, defaultResult];
          }
          _a3.label = 1;
        case 1:
          _a3.trys.push([1, 3, , 6]);
          return [4, computeConditions(conditions.children, conditions.conjunction, data)];
        case 2:
          return [2, _a3.sent()];
        case 3:
          e_1 = _a3.sent();
          if (!(e_1.name === "FormulaEvalError"))
            return [3, 5];
          return [4, conditionComputeErrorHandler === null || conditionComputeErrorHandler === void 0 ? void 0 : conditionComputeErrorHandler(conditions.children, conditions.conjunction, data)];
        case 4:
          return [2, _a3.sent()];
        case 5:
          return [2, defaultResult];
        case 6:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function computeConditions(conditions, conjunction, data) {
  if (conjunction === void 0) {
    conjunction = "and";
  }
  return __awaiter(this, void 0, void 0, function() {
    var computeResult, index, len, item, result, _a3;
    return __generator(this, function(_b3) {
      switch (_b3.label) {
        case 0:
          computeResult = true;
          index = 0, len = conditions.length;
          _b3.label = 1;
        case 1:
          if (!(index < len))
            return [3, 7];
          item = conditions[index];
          if (!(item.conjunction && Array.isArray(item.children) && item.children.length))
            return [3, 3];
          return [4, computeConditions(item.children, item.conjunction, data)];
        case 2:
          _a3 = _b3.sent();
          return [3, 5];
        case 3:
          return [4, computeCondition(item, index, data)];
        case 4:
          _a3 = _b3.sent();
          _b3.label = 5;
        case 5:
          result = _a3;
          computeResult = !!result;
          if (result && conjunction === "or" || !result && conjunction === "and") {
            return [3, 7];
          }
          _b3.label = 6;
        case 6:
          index++;
          return [3, 1];
        case 7:
          return [2, computeResult];
      }
    });
  });
}
function computeCondition(rule, index, data) {
  var _a3;
  return __awaiter(this, void 0, void 0, function() {
    var leftValue, rightValue, func;
    return __generator(this, function(_b3) {
      switch (_b3.label) {
        case 0:
          leftValue = (0, import_get2.default)(data, rule.left.field);
          return [4, resolveVariableAndFilterForAsync(rule.right, data, void 0, void 0, true)];
        case 1:
          rightValue = _b3.sent();
          func = (_a3 = conditionResolverMap["".concat(rule.op, "For").concat((0, import_capitalize2.default)(rule.left.type))]) !== null && _a3 !== void 0 ? _a3 : conditionResolverMap[rule.op];
          return [2, func ? func(leftValue, rightValue, rule.left.type) : DEFAULT_RESULT];
      }
    });
  });
}
function startsWithFunc(left, right) {
  if (left === void 0 || right === void 0) {
    return DEFAULT_RESULT;
  }
  return (0, import_startsWith.default)(left, right);
}
function endsWithFunc(left, right) {
  if (left === void 0 || right === void 0) {
    return DEFAULT_RESULT;
  }
  return (0, import_endsWith.default)(left, right);
}
function equalFunc(left, right) {
  return (0, import_isEqual2.default)(left, right);
}
function notEqualFunc(left, right) {
  return !(0, import_isEqual2.default)(left, right);
}
function isEmptyFunc(left) {
  if (typeof left === "string") {
    return !left;
  } else if (typeof left === "number") {
    return left === void 0;
  } else if (Array.isArray(left)) {
    return !left.length;
  } else if (typeof left === "object") {
    return (0, import_isEmpty.default)(left);
  }
  return DEFAULT_RESULT;
}
function isNotEmptyFunc(left) {
  if (typeof left === "string") {
    return !left;
  } else if (typeof left === "number") {
    return left !== void 0;
  } else if (Array.isArray(left)) {
    return !!left.length;
  } else if (typeof left === "object") {
    return !(0, import_isEmpty.default)(left);
  }
  return DEFAULT_RESULT;
}
function greaterFunc(left, right) {
  if (left === void 0 || right === void 0) {
    return DEFAULT_RESULT;
  }
  return parseFloat(left) > parseFloat(right);
}
function normalizeDate2(raw) {
  if (typeof raw === "string" || typeof raw === "number") {
    var formats = ["", "YYYY-MM-DD HH:mm:ss", "X"];
    if (/^\d{10}((\.\d+)*)$/.test(raw.toString())) {
      formats = ["X", "x", "YYYY-MM-DD HH:mm:ss", ""];
    } else if (/^\d{13}((\.\d+)*)$/.test(raw.toString())) {
      formats = ["x", "X", "YYYY-MM-DD HH:mm:ss", ""];
    }
    while (formats.length) {
      var format2 = formats.shift();
      var date = moment_default(raw, format2);
      if (date.isValid()) {
        return date.toDate();
      }
    }
  }
  return raw;
}
function normalizeDateRange(raw) {
  return (Array.isArray(raw) ? raw : raw.split(",")).map(function(item) {
    return normalizeDate2(String(item).trim());
  });
}
function greaterForDateFunc(left, right) {
  left = normalizeDate2(left);
  right = normalizeDate2(right);
  return moment_default(left).isAfter(moment_default(right), "s");
}
function greaterOrEqualForDateFunc(left, right) {
  left = normalizeDate2(left);
  right = normalizeDate2(right);
  return moment_default(left).isSameOrAfter(moment_default(right), "s");
}
function greaterOrEqualFunc(left, right) {
  if (left === void 0 || right === void 0) {
    return DEFAULT_RESULT;
  }
  return parseFloat(left) >= parseFloat(right);
}
function lessFunc(left, right) {
  if (left === void 0 || right === void 0) {
    return DEFAULT_RESULT;
  }
  return parseFloat(left) < parseFloat(right);
}
function lessForDateFunc(left, right) {
  left = normalizeDate2(left);
  right = normalizeDate2(right);
  return moment_default(left).isBefore(moment_default(right), "s");
}
function lessOrEqualForDateFunc(left, right) {
  left = normalizeDate2(left);
  right = normalizeDate2(right);
  return moment_default(left).isSameOrBefore(moment_default(right), "s");
}
function lessOrEqualFunc(left, right) {
  if (left === void 0 || right === void 0) {
    return DEFAULT_RESULT;
  }
  return parseFloat(left) <= parseFloat(right);
}
function likeFunc(left, right) {
  if (left === void 0 || right === void 0) {
    return DEFAULT_RESULT;
  }
  return !!~left.indexOf(right);
}
function notLikeFunc(left, right) {
  if (left === void 0 || right === void 0) {
    return DEFAULT_RESULT;
  }
  return !~left.indexOf(right);
}
function betweenFunc(left, right) {
  if (typeof left === "number" && right !== void 0) {
    var _a3 = __read(right.sort(), 2), min = _a3[0], max = _a3[1];
    return left >= parseFloat(min) && left <= parseFloat(max);
  }
  return DEFAULT_RESULT;
}
function betweenForDateFunc(left, right) {
  if (right !== void 0) {
    var _a3 = __read(normalizeDateRange(right), 2), min = _a3[0], max = _a3[1];
    return moment_default(normalizeDate2(left)).isBetween(min, max, "s", "[]");
  }
  return DEFAULT_RESULT;
}
function notBetweenFunc(left, right) {
  if (typeof left === "number" && right !== void 0) {
    var _a3 = __read(right.sort(), 2), min = _a3[0], max = _a3[1];
    return left < parseFloat(min) && left > parseFloat(max);
  }
  return DEFAULT_RESULT;
}
function notBetweenForDateFunc(left, right) {
  if (right !== void 0) {
    var _a3 = __read(normalizeDateRange(right), 2), min = _a3[0], max = _a3[1];
    return !moment_default(normalizeDate2(left)).isBetween(min, max, "s", "[]");
  }
  return DEFAULT_RESULT;
}
function selectAnyInFunc(left, right) {
  if (!Array.isArray(right)) {
    return DEFAULT_RESULT;
  }
  if (Array.isArray(left)) {
    return right.every(function(item) {
      return left.includes(item);
    });
  }
  return right.includes(left);
}
function selectNotAnyInFunc(left, right) {
  if (!Array.isArray(right)) {
    return DEFAULT_RESULT;
  }
  if (Array.isArray(left)) {
    return !right.every(function(item) {
      return left.includes(item);
    });
  }
  return !right.includes(left);
}
function registerConditionComputer(op, func, fieldType) {
  conditionResolverMap["".concat(op).concat(fieldType ? "For" + (0, import_capitalize2.default)(fieldType) : "")] = func;
}
function getConditionComputers() {
  return conditionResolverMap;
}
function setConditionComputeErrorHandler(fn) {
  conditionComputeErrorHandler = fn;
}
registerConditionComputer("greater", greaterFunc);
registerConditionComputer("greater", greaterForDateFunc, "date");
registerConditionComputer("greater", greaterForDateFunc, "time");
registerConditionComputer("greater", greaterForDateFunc, "datetime");
registerConditionComputer("greater_or_equal", greaterOrEqualFunc);
registerConditionComputer("greater_or_equal", greaterOrEqualForDateFunc, "date");
registerConditionComputer("greater_or_equal", greaterOrEqualForDateFunc, "time");
registerConditionComputer("greater_or_equal", greaterOrEqualForDateFunc, "datetime");
registerConditionComputer("less", lessFunc);
registerConditionComputer("less", lessForDateFunc, "date");
registerConditionComputer("less", lessForDateFunc, "time");
registerConditionComputer("less", lessForDateFunc, "datetime");
registerConditionComputer("less_or_equal", lessOrEqualFunc);
registerConditionComputer("less_or_equal", lessOrEqualForDateFunc, "date");
registerConditionComputer("less_or_equal", lessOrEqualForDateFunc, "time");
registerConditionComputer("less_or_equal", lessOrEqualForDateFunc, "datetime");
registerConditionComputer("is_empty", isEmptyFunc);
registerConditionComputer("is_not_empty", isNotEmptyFunc);
registerConditionComputer("between", betweenFunc);
registerConditionComputer("between", betweenForDateFunc, "date");
registerConditionComputer("between", betweenForDateFunc, "time");
registerConditionComputer("between", betweenForDateFunc, "datetime");
registerConditionComputer("not_between", notBetweenFunc);
registerConditionComputer("not_between", notBetweenForDateFunc, "date");
registerConditionComputer("not_between", notBetweenForDateFunc, "time");
registerConditionComputer("not_between", notBetweenForDateFunc, "datetime");
registerConditionComputer("equal", equalFunc);
registerConditionComputer("not_equal", notEqualFunc);
registerConditionComputer("like", likeFunc);
registerConditionComputer("not_like", notLikeFunc);
registerConditionComputer("select_any_in", selectAnyInFunc);
registerConditionComputer("select_not_any_in", selectNotAnyInFunc);
registerConditionComputer("starts_with", startsWithFunc);
registerConditionComputer("ends_with", endsWithFunc);

// node_modules/amis-core/esm/utils/tpl-lodash.js
var import_template = __toESM(require_template());
init_moment();
var import_isPlainObject4 = __toESM(require_isPlainObject());
var imports = {
  default: void 0,
  moment: moment_default,
  countDown: function(end) {
    if (!end) {
      return "--";
    }
    var date = new Date(parseInt(end, 10) * 1e3);
    var now = Date.now();
    if (date.getTime() < now) {
      return "已结束";
    }
    return Math.ceil((date.getTime() - now) / (1e3 * 60 * 60 * 24)) + "天";
  },
  formatDate: function(value, format2, inputFormat) {
    if (format2 === void 0) {
      format2 = "LLL";
    }
    if (inputFormat === void 0) {
      inputFormat = "";
    }
    return moment_default(value, inputFormat).format(format2);
  }
};
var EVAL_CACHE = {};
function lodashCompile(str, data) {
  try {
    var filters2 = getFilters();
    var finnalImports = __assign(__assign(__assign({}, filters2), { formatTimeStamp: filters2.date, formatNumber: filters2.number, defaultValue: filters2.defaut }), imports);
    delete finnalImports.default;
    var fn = EVAL_CACHE[str] || (EVAL_CACHE[str] = (0, import_template.default)(str, {
      imports: finnalImports,
      variable: "data",
      // 如果不传这个，默认模板语法也存在 ${xxx} 语法，这个跟内置语法规则冲突。
      // 为了不带来困惑，禁用掉这种用法。
      interpolate: /<%=([\s\S]+?)%>/g
    }));
    return fn.call(data, data);
  } catch (e) {
    return '<span class="text-danger">'.concat(e.message, "</span>");
  }
}
function register2() {
  return {
    name: "lodash",
    test: function(str) {
      return !!~str.indexOf("<%");
    },
    compile: function(str, data) {
      return lodashCompile(str, data);
    },
    asyncCompile: function(str, data) {
      return lodashCompile(str, data);
    }
  };
}

// node_modules/amis-core/esm/utils/tpl.js
var enginers = {};
function registerTplEnginer(name, enginer) {
  enginers[name] = enginer;
}
function filter(tpl, data) {
  if (data === void 0) {
    data = {};
  }
  var rest = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    rest[_i - 2] = arguments[_i];
  }
  if (!tpl || typeof tpl !== "string") {
    return "";
  }
  var keys = Object.keys(enginers);
  for (var i = 0, len = keys.length; i < len; i++) {
    var enginer = enginers[keys[i]];
    if (enginer.test(tpl)) {
      return enginer.compile.apply(enginer, __spreadArray([tpl, data], __read(rest), false));
    } else if (enginer.removeEscapeToken) {
      tpl = enginer.removeEscapeToken(tpl);
    }
  }
  return tpl;
}
function asyncFilter(tpl, data) {
  if (data === void 0) {
    data = {};
  }
  var rest = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    rest[_i - 2] = arguments[_i];
  }
  if (!tpl || typeof tpl !== "string") {
    return Promise.resolve("");
  }
  var keys = Object.keys(enginers);
  for (var i = 0, len = keys.length; i < len; i++) {
    var enginer = enginers[keys[i]];
    if (enginer.test(tpl)) {
      return enginer.asyncCompile.apply(enginer, __spreadArray([tpl, data], __read(rest), false));
    } else if (enginer.removeEscapeToken) {
      tpl = enginer.removeEscapeToken(tpl);
    }
  }
  return tpl;
}
var EVAL_CACHE2 = {};
var customEvalExpressionFn;
function setCustomEvalExpression(fn) {
  customEvalExpressionFn = fn;
}
function evalExpression(expression, data) {
  if (typeof customEvalExpressionFn === "function") {
    return customEvalExpressionFn(expression, data);
  }
  if (!expression || typeof expression !== "string") {
    return false;
  }
  try {
    if (typeof expression === "string" && expression.substring(0, 2) === "${" && expression[expression.length - 1] === "}") {
      return !!evalFormula(expression, data);
    }
    var debug2 = false;
    var idx = expression.indexOf("debugger");
    if (~idx) {
      debug2 = true;
      expression = expression.replace(/debugger;?/, "");
    }
    var fn = void 0;
    if (expression in EVAL_CACHE2) {
      fn = EVAL_CACHE2[expression];
    } else {
      fn = new Function("data", "utils", "with(data) {".concat(debug2 ? "debugger;" : "", "return !!(").concat(expression, ");}"));
      EVAL_CACHE2[expression] = fn;
    }
    data = data || {};
    return fn.call(data, data, getFilters());
  } catch (e) {
    console.warn(expression, e);
    return false;
  }
}
function evalExpressionWithConditionBuilder(expression, data, defaultResult) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_a3) {
      switch (_a3.label) {
        case 0:
          if (!(Object.prototype.toString.call(expression) === "[object Object]"))
            return [3, 2];
          return [4, resolveCondition(expression, data, defaultResult)];
        case 1:
          return [2, _a3.sent()];
        case 2:
          return [2, evalExpression(String(expression), data)];
      }
    });
  });
}
var AST_CACHE = {};
function evalFormula(expression, data) {
  var ast = AST_CACHE[expression] || parse(expression, {
    evalMode: false
  });
  AST_CACHE[expression] = ast;
  return evaluate(ast, data, {
    defaultFilter: "raw"
  });
}
var customEvalJsFn;
function setCustomEvalJs(fn) {
  customEvalJsFn = fn;
}
function evalJS(js, data) {
  if (typeof customEvalJsFn === "function") {
    return customEvalJsFn(js, data);
  }
  try {
    if (typeof js === "string" && js.substring(0, 2) === "${" && js[js.length - 1] === "}") {
      return evalFormula(js, data);
    }
    var fn = new Function("data", "utils", "with(data) {".concat(/^\s*return\b/.test(js) ? "" : "return ").concat(js, ";}"));
    data = data || {};
    return fn.call(data, data, getFilters());
  } catch (e) {
    console.warn(js, e);
    return null;
  }
}
[register, register2].forEach(function(fn) {
  if (!fn)
    return;
  var info = fn();
  registerTplEnginer(info.name, {
    test: info.test,
    compile: info.compile,
    asyncCompile: info.asyncCompile,
    removeEscapeToken: info.removeEscapeToken
  });
});

// node_modules/amis-core/esm/utils/autobind.js
var defineProperty = Object.defineProperty;
var getPrototypeOf = Object.getPrototypeOf;
function bind(fn, thisArg) {
  if (fn.bind) {
    return fn.bind(thisArg);
  }
  return function __autobind__() {
    return fn.apply(thisArg, arguments);
  };
}
var mapStore;
function getBoundSuper(obj, fn) {
  if (typeof WeakMap === "undefined") {
    throw new Error("Using @autobind on ".concat(fn.name, "() requires WeakMap support due to its use of super.").concat(fn.name, "()\n        See https://github.com/jayphelps/core-decorators.js/issues/20"));
  }
  if (!mapStore) {
    mapStore = /* @__PURE__ */ new WeakMap();
  }
  if (!mapStore.has(obj)) {
    mapStore.set(obj, /* @__PURE__ */ new WeakMap());
  }
  var superStore = mapStore.get(obj);
  if (!superStore.has(fn)) {
    superStore.set(fn, bind(fn, obj));
  }
  return superStore.get(fn);
}
function createDefaultSetter(key) {
  return function set(newValue) {
    defineProperty(this, key, {
      configurable: true,
      writable: true,
      // IS enumerable when reassigned by the outside word
      enumerable: true,
      value: newValue
    });
    return newValue;
  };
}
function autobindMethod(target, key, _a3) {
  var fn = _a3.value, configurable = _a3.configurable, enumerable = _a3.enumerable;
  if (typeof fn !== "function") {
    throw new SyntaxError("@autobind can only be used on functions, not: ".concat(fn));
  }
  var constructor = target.constructor;
  return {
    configurable,
    enumerable,
    get: function() {
      if (this === target) {
        return fn;
      }
      if (this.constructor !== constructor && getPrototypeOf(this).constructor === constructor) {
        return fn;
      }
      if (this.constructor !== constructor && key in this.constructor.prototype) {
        return getBoundSuper(this, fn);
      }
      var boundFn = bind(fn, this);
      defineProperty(this, key, {
        configurable: true,
        writable: true,
        // NOT enumerable when it's a bound method
        enumerable: false,
        value: boundFn
      });
      return boundFn;
    },
    set: createDefaultSetter(key)
  };
}

// node_modules/amis-core/esm/utils/isPureVariable.js
function isPureVariable(path) {
  if (typeof path === "string") {
    try {
      var ast = memoryParse(path);
      return ast.body.length === 1 && ast.body[0].type === "script";
    } catch (err) {
      return false;
    }
  }
  return false;
}

// node_modules/amis-core/esm/utils/resolveVariableAndFilter.js
var resolveVariableAndFilter = function(path, data, defaultFilter, fallbackValue) {
  if (data === void 0) {
    data = {};
  }
  if (defaultFilter === void 0) {
    defaultFilter = "| html";
  }
  if (fallbackValue === void 0) {
    fallbackValue = function(value) {
      return value;
    };
  }
  if (!path || typeof path !== "string") {
    return void 0;
  }
  try {
    var ast = parse(path, {
      evalMode: false,
      allowFilter: true
    });
    var ret = new Evaluator(data, {
      defaultFilter
    }).evalute(ast);
    return ret == null && !~path.indexOf("default") && !~path.indexOf("now") ? fallbackValue(ret) : ret;
  } catch (e) {
    console.warn(e);
    return void 0;
  }
};

// node_modules/amis-core/esm/utils/grammar.js
function traverseAst(ast, iterator) {
  if (!ast || !ast.type) {
    return;
  }
  iterator(ast);
  Object.keys(ast).forEach(function(key) {
    var value = ast[key];
    if (Array.isArray(value)) {
      value.forEach(function(child) {
        return traverseAst(child, iterator);
      });
    } else {
      traverseAst(value, iterator);
    }
  });
}
var COLLECT_EXPRESSION_CACHE = {};
function collectVariables(strOrAst, execMode) {
  var variables = [];
  if (typeof strOrAst === "string" && COLLECT_EXPRESSION_CACHE[strOrAst]) {
    return COLLECT_EXPRESSION_CACHE[strOrAst];
  }
  var ast = typeof strOrAst === "string" ? memoryParse(strOrAst, {
    evalMode: execMode !== null && execMode !== void 0 ? execMode : false
  }) : strOrAst;
  traverseAst(ast, function(item) {
    if (item.type === "variable") {
      variables.push(item.name);
    }
  });
  if (typeof strOrAst === "string") {
    COLLECT_EXPRESSION_CACHE[strOrAst] = variables;
  }
  return variables;
}

// node_modules/amis-core/esm/utils/formula.js
var import_isObject = __toESM(require_isObject());
var import_isString = __toESM(require_isString());
var import_isBoolean = __toESM(require_isBoolean());
init_moment();
var import_isPlainObject5 = __toESM(require_isPlainObject());
var FORMULA_EVAL_CACHE = {};
var FormulaExec = {
  tpl: function(expression, data) {
    var curData = data || {};
    return filter(expression, curData);
  },
  formula: function(expression, data) {
    if (/^\$\{([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]{2,3}){1,2})\}$/.test(expression)) {
      return expression.substring(2, expression.length - 1);
    }
    var curData = data || {};
    var result = void 0;
    try {
      result = resolveVariableAndFilter(expression, curData, "| raw");
    } catch (e) {
      console.warn("[formula]表达式执行异常，当前表达式: ", expression, "，当前上下文数据: ", data);
      return expression;
    }
    return result;
  },
  evalFormula: function(expression, data) {
    var curData = data || {};
    var result = void 0;
    try {
      result = evaluate(expression, curData, {
        evalMode: true,
        allowFilter: false
      });
    } catch (e) {
      console.warn("[evalFormula]表达式执行异常，当前表达式: ", expression, "，当前上下文数据: ", data);
      return expression;
    }
    return result !== null && result !== void 0 ? result : expression;
  },
  js: function(expression, data) {
    var debug2 = false;
    var idx = expression.indexOf("debugger");
    if (~idx) {
      debug2 = true;
      expression = expression.replace(/debugger;?/, "");
    }
    var fn;
    if (expression in FORMULA_EVAL_CACHE) {
      fn = FORMULA_EVAL_CACHE[expression];
    } else {
      fn = new Function("data", "utils", "with(data) {".concat(debug2 ? "debugger;" : "", "return (").concat(expression, ");}"));
      FORMULA_EVAL_CACHE[expression] = fn;
    }
    data = data || {};
    var curResult = void 0;
    try {
      curResult = fn.call(data, data, getFilters());
    } catch (e) {
      console.warn("[formula:js]表达式执行异常，当前表达式: ", expression, "，当前上下文数据: ", data);
      return expression;
    }
    return curResult;
  },
  var: function(expression, data) {
    var curData = data || {};
    var result = getVariable(curData, expression);
    return result !== null && result !== void 0 ? result : expression;
  },
  collect: function(expression) {
    var variables = [];
    if ((0, import_isObject.default)(expression) || (0, import_isString.default)(expression)) {
      variables = collectVariables(expression);
    } else {
      variables = [];
    }
    return variables;
  }
};
function formulaExec(value, data, execMode) {
  if (!value) {
    return "";
  }
  var OpenFormulaExecEvalMode = false;
  var curExecMode = "";
  if ((0, import_isBoolean.default)(execMode)) {
    OpenFormulaExecEvalMode = execMode;
  } else if ((0, import_isString.default)(execMode)) {
    curExecMode = execMode;
  }
  if (!(0, import_isString.default)(value)) {
    return value;
  } else if (curExecMode && FormulaExec[curExecMode]) {
    return FormulaExec[curExecMode](value, data);
  }
  var curValue = value.trim();
  if (OpenFormulaExecEvalMode && /^[0-9a-zA-Z_]+$/.test(curValue)) {
    var curValueTemp = FormulaExec["var"](curValue, data);
    return curValueTemp !== null && curValueTemp !== void 0 ? curValueTemp : curValue;
  } else if (curValue.startsWith("${") && curValue.endsWith("}")) {
    return FormulaExec["formula"](curValue, data);
  } else if (isExpression(curValue)) {
    return FormulaExec["formula"](curValue, data);
  } else if (/(\${).+(\})/.test(curValue)) {
    return FormulaExec["tpl"](curValue, data);
  } else if (OpenFormulaExecEvalMode) {
    return FormulaExec["evalFormula"](curValue, data);
  } else {
    return curValue;
  }
}
function registerFormulaExec(execMode, formulaExec2) {
  if (FormulaExec[execMode]) {
    console.error("registerFormulaExec: 运算器注册失败，存在同名运算器（$(execMode)）。");
  } else {
    FormulaExec[execMode] = formulaExec2;
  }
}
function isExpression(expression) {
  if (!expression || !(0, import_isString.default)(expression)) {
    return false;
  }
  return /(^|[^\\])\$\{.+\}/.test(expression);
}
function isNeedFormula(expression, prevData, curData) {
  try {
    var variables = FormulaExec.collect(expression);
    return variables.some(function(variable) {
      return FormulaExec.var(variable, prevData) !== FormulaExec.var(variable, curData);
    });
  } catch (e) {
    console.warn("[isNeedFormula]表达式执行异常，当前表达式: ", expression, "，当前上下文数据: ", curData);
    return false;
  }
}
function replaceExpression(expression) {
  if (expression && (0, import_isString.default)(expression) && /(\\)(\${).+(\})/.test(expression)) {
    return expression.replace(/\\\$\{/g, "${");
  }
  return expression;
}

// node_modules/amis-core/esm/utils/helper.js
var helper_exports = {};
__export(helper_exports, {
  JSONTraverse: () => JSONTraverse,
  JSONValueMap: () => JSONValueMap,
  SkipOperation: () => SkipOperation,
  ValidateError: () => ValidateError,
  __uri: () => __uri,
  anyChanged: () => anyChanged,
  autobind: () => autobind,
  buildTrackExpression: () => buildTrackExpression,
  bulkBindFunctions: () => bulkBindFunctions,
  camel: () => camel,
  chainEvents: () => chainEvents,
  chainFunctions: () => chainFunctions,
  changedEffect: () => changedEffect,
  cloneObject: () => cloneObject,
  convertArrayValueToMoment: () => convertArrayValueToMoment,
  countTree: () => countTree,
  createObject: () => createObject2,
  deleteVariable: () => deleteVariable,
  detectPropValueChanged: () => detectPropValueChanged,
  difference: () => difference,
  differenceFromAll: () => differenceFromAll,
  eachTree: () => eachTree,
  evalTrackExpression: () => evalTrackExpression,
  everyTree: () => everyTree,
  extendObject: () => extendObject,
  filterTree: () => filterTree,
  findIndex: () => findIndex,
  findObjectsWithKey: () => findObjectsWithKey,
  findTree: () => findTree,
  findTreeAll: () => findTreeAll,
  findTreeIndex: () => findTreeIndex,
  flattenTree: () => flattenTree,
  flattenTreeWithLeafNodes: () => flattenTreeWithLeafNodes,
  getLevelFromClassName: () => getLevelFromClassName,
  getPropValue: () => getPropValue,
  getRange: () => getRange,
  getScrollParent: () => getScrollParent,
  getScrollbarWidth: () => getScrollbarWidth,
  getTree: () => getTree,
  getTreeAncestors: () => getTreeAncestors,
  getTreeDepth: () => getTreeDepth,
  getTreeParent: () => getTreeParent,
  getVariable: () => getVariable,
  getWidthRate: () => getWidthRate,
  guid: () => guid,
  hasAbility: () => hasAbility,
  hasFile: () => hasFile,
  hasOwnPropertyInPath: () => hasOwnPropertyInPath,
  hasVisibleExpression: () => hasVisibleExpression,
  hashCode: () => hashCode,
  immutableExtends: () => immutableExtends,
  importLazyComponent: () => importLazyComponent,
  injectPropsToObject: () => injectPropsToObject,
  isArrayChildrenModified: () => isArrayChildrenModified,
  isBreakpoint: () => isBreakpoint,
  isClickOnInput: () => isClickOnInput,
  isDisabled: () => isDisabled,
  isEmpty: () => isEmpty2,
  isMobile: () => isMobile,
  isNumeric: () => isNumeric,
  isObject: () => isObject,
  isObjectShallowModified: () => isObjectShallowModified,
  isSuperDataModified: () => isSuperDataModified,
  isUnfolded: () => isUnfolded,
  isVisible: () => isVisible,
  keyToPath: () => keyToPath,
  lcFirst: () => lcFirst,
  loadScript: () => loadScript,
  loadStyle: () => loadStyle,
  makeColumnClassBuild: () => makeColumnClassBuild,
  makeHorizontalDeeper: () => makeHorizontalDeeper,
  mapObject: () => mapObject,
  mapTree: () => mapTree,
  noop: () => noop,
  normalizeNodePath: () => normalizeNodePath,
  object2formData: () => object2formData,
  omitControls: () => omitControls,
  padArr: () => padArr,
  parsePrimitiveQueryString: () => parsePrimitiveQueryString,
  parseQuery: () => parseQuery,
  pickEventsProps: () => pickEventsProps,
  preventDefault: () => preventDefault,
  promisify: () => promisify,
  qsparse: () => qsparse,
  qsstringify: () => qsstringify,
  range: () => range,
  removeHTMLTag: () => removeHTMLTag,
  repeatCount: () => repeatCount,
  replaceUrlParams: () => replaceUrlParams,
  rmUndefined: () => rmUndefined,
  setVariable: () => setVariable,
  someTree: () => someTree,
  sortArray: () => sortArray,
  spliceTree: () => spliceTree,
  string2regExp: () => string2regExp,
  syncDataFromSuper: () => syncDataFromSuper,
  ucFirst: () => ucFirst,
  until: () => until,
  uuid: () => uuid,
  uuidv4: () => uuidv42,
  visibilityFilter: () => visibilityFilter
});
var import_uniq2 = __toESM(require_uniq());
var import_last = __toESM(require_last());
var import_merge = __toESM(require_merge());
var import_isPlainObject6 = __toESM(require_isPlainObject());
var import_isEqual3 = __toESM(require_isEqual());
var import_isNaN = __toESM(require_isNaN());
var import_isNumber2 = __toESM(require_isNumber());
var import_isString2 = __toESM(require_isString());
var import_qs = __toESM(require_lib());

// node_modules/amis-core/node_modules/path-to-regexp/dist.es2015/index.js
function lexer2(str) {
  var tokens = [];
  var i = 0;
  while (i < str.length) {
    var char = str[i];
    if (char === "*" || char === "+" || char === "?") {
      tokens.push({ type: "MODIFIER", index: i, value: str[i++] });
      continue;
    }
    if (char === "\\") {
      tokens.push({ type: "ESCAPED_CHAR", index: i++, value: str[i++] });
      continue;
    }
    if (char === "{") {
      tokens.push({ type: "OPEN", index: i, value: str[i++] });
      continue;
    }
    if (char === "}") {
      tokens.push({ type: "CLOSE", index: i, value: str[i++] });
      continue;
    }
    if (char === ":") {
      var name = "";
      var j = i + 1;
      while (j < str.length) {
        var code = str.charCodeAt(j);
        if (
          // `0-9`
          code >= 48 && code <= 57 || // `A-Z`
          code >= 65 && code <= 90 || // `a-z`
          code >= 97 && code <= 122 || // `_`
          code === 95
        ) {
          name += str[j++];
          continue;
        }
        break;
      }
      if (!name)
        throw new TypeError("Missing parameter name at " + i);
      tokens.push({ type: "NAME", index: i, value: name });
      i = j;
      continue;
    }
    if (char === "(") {
      var count = 1;
      var pattern = "";
      var j = i + 1;
      if (str[j] === "?") {
        throw new TypeError('Pattern cannot start with "?" at ' + j);
      }
      while (j < str.length) {
        if (str[j] === "\\") {
          pattern += str[j++] + str[j++];
          continue;
        }
        if (str[j] === ")") {
          count--;
          if (count === 0) {
            j++;
            break;
          }
        } else if (str[j] === "(") {
          count++;
          if (str[j + 1] !== "?") {
            throw new TypeError("Capturing groups are not allowed at " + j);
          }
        }
        pattern += str[j++];
      }
      if (count)
        throw new TypeError("Unbalanced pattern at " + i);
      if (!pattern)
        throw new TypeError("Missing pattern at " + i);
      tokens.push({ type: "PATTERN", index: i, value: pattern });
      i = j;
      continue;
    }
    tokens.push({ type: "CHAR", index: i, value: str[i++] });
  }
  tokens.push({ type: "END", index: i, value: "" });
  return tokens;
}
function parse2(str, options) {
  if (options === void 0) {
    options = {};
  }
  var tokens = lexer2(str);
  var _a3 = options.prefixes, prefixes = _a3 === void 0 ? "./" : _a3;
  var defaultPattern = "[^" + escapeString2(options.delimiter || "/#?") + "]+?";
  var result = [];
  var key = 0;
  var i = 0;
  var path = "";
  var tryConsume = function(type) {
    if (i < tokens.length && tokens[i].type === type)
      return tokens[i++].value;
  };
  var mustConsume = function(type) {
    var value2 = tryConsume(type);
    if (value2 !== void 0)
      return value2;
    var _a4 = tokens[i], nextType = _a4.type, index = _a4.index;
    throw new TypeError("Unexpected " + nextType + " at " + index + ", expected " + type);
  };
  var consumeText = function() {
    var result2 = "";
    var value2;
    while (value2 = tryConsume("CHAR") || tryConsume("ESCAPED_CHAR")) {
      result2 += value2;
    }
    return result2;
  };
  while (i < tokens.length) {
    var char = tryConsume("CHAR");
    var name = tryConsume("NAME");
    var pattern = tryConsume("PATTERN");
    if (name || pattern) {
      var prefix = char || "";
      if (prefixes.indexOf(prefix) === -1) {
        path += prefix;
        prefix = "";
      }
      if (path) {
        result.push(path);
        path = "";
      }
      result.push({
        name: name || key++,
        prefix,
        suffix: "",
        pattern: pattern || defaultPattern,
        modifier: tryConsume("MODIFIER") || ""
      });
      continue;
    }
    var value = char || tryConsume("ESCAPED_CHAR");
    if (value) {
      path += value;
      continue;
    }
    if (path) {
      result.push(path);
      path = "";
    }
    var open2 = tryConsume("OPEN");
    if (open2) {
      var prefix = consumeText();
      var name_1 = tryConsume("NAME") || "";
      var pattern_1 = tryConsume("PATTERN") || "";
      var suffix = consumeText();
      mustConsume("CLOSE");
      result.push({
        name: name_1 || (pattern_1 ? key++ : ""),
        pattern: name_1 && !pattern_1 ? defaultPattern : pattern_1,
        prefix,
        suffix,
        modifier: tryConsume("MODIFIER") || ""
      });
      continue;
    }
    mustConsume("END");
  }
  return result;
}
function compile(str, options) {
  return tokensToFunction(parse2(str, options), options);
}
function tokensToFunction(tokens, options) {
  if (options === void 0) {
    options = {};
  }
  var reFlags = flags(options);
  var _a3 = options.encode, encode = _a3 === void 0 ? function(x) {
    return x;
  } : _a3, _b3 = options.validate, validate2 = _b3 === void 0 ? true : _b3;
  var matches = tokens.map(function(token) {
    if (typeof token === "object") {
      return new RegExp("^(?:" + token.pattern + ")$", reFlags);
    }
  });
  return function(data) {
    var path = "";
    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];
      if (typeof token === "string") {
        path += token;
        continue;
      }
      var value = data ? data[token.name] : void 0;
      var optional = token.modifier === "?" || token.modifier === "*";
      var repeat = token.modifier === "*" || token.modifier === "+";
      if (Array.isArray(value)) {
        if (!repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but got an array');
        }
        if (value.length === 0) {
          if (optional)
            continue;
          throw new TypeError('Expected "' + token.name + '" to not be empty');
        }
        for (var j = 0; j < value.length; j++) {
          var segment = encode(value[j], token);
          if (validate2 && !matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but got "' + segment + '"');
          }
          path += token.prefix + segment + token.suffix;
        }
        continue;
      }
      if (typeof value === "string" || typeof value === "number") {
        var segment = encode(String(value), token);
        if (validate2 && !matches[i].test(segment)) {
          throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but got "' + segment + '"');
        }
        path += token.prefix + segment + token.suffix;
        continue;
      }
      if (optional)
        continue;
      var typeOfMessage = repeat ? "an array" : "a string";
      throw new TypeError('Expected "' + token.name + '" to be ' + typeOfMessage);
    }
    return path;
  };
}
function escapeString2(str) {
  return str.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
}
function flags(options) {
  return options && options.sensitive ? "" : "i";
}

// node_modules/amis-core/esm/utils/helper.js
init_moment();
function preventDefault(event) {
  if (typeof event.cancelable !== "boolean" || event.cancelable) {
    event.preventDefault();
  }
}
function isMobile() {
  var _a3, _b3;
  return (_b3 = (_a3 = window).matchMedia) === null || _b3 === void 0 ? void 0 : _b3.call(_a3, "(max-width: 768px)").matches;
}
function range(num, min, max) {
  return Math.min(Math.max(num, min), max);
}
function injectPropsToObject(target, props) {
  var sup = Object.create(target.__super || null);
  Object.keys(props).forEach(function(key) {
    return sup[key] = props[key];
  });
  var result = Object.create(sup);
  Object.keys(target).forEach(function(key) {
    return result[key] = target[key];
  });
  return result;
}
function isSuperDataModified(data, prevData, store2) {
  var keys;
  if (store2 && store2.storeType === "FormStore") {
    keys = (0, import_uniq2.default)(store2.items.map(function(item) {
      return "".concat(item.name).replace(/\..*$/, "");
    }).concat(Object.keys(store2.data)));
  } else {
    keys = Object.keys(store2.data);
  }
  if (Array.isArray(keys) && keys.length) {
    return keys.some(function(key) {
      return data[key] !== prevData[key];
    });
  }
  return false;
}
function syncDataFromSuper(data, superObject, prevSuperObject, store2, force) {
  var obj = __assign({}, data);
  var keys = [];
  if (store2 && store2.storeType === "FormStore") {
    keys = (0, import_uniq2.default)(store2.items.map(function(item) {
      return "".concat(item.name).replace(/\..*$/, "");
    }).concat(Object.keys(obj)));
  } else if (force) {
    keys = Object.keys(obj);
  }
  if (superObject || prevSuperObject) {
    keys.forEach(function(key) {
      if (!key) {
        return;
      }
      if ((superObject && typeof superObject[key] !== "undefined" || prevSuperObject && typeof prevSuperObject[key] !== "undefined") && (prevSuperObject && !superObject || !prevSuperObject && superObject || prevSuperObject[key] !== superObject[key])) {
        obj[key] = superObject[key];
      }
    });
  }
  return obj;
}
function guid() {
  function s4() {
    return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1);
  }
  return s4() + s4() + s4();
}
function findIndex(arr, detect) {
  for (var i = 0, len = arr.length; i < len; i++) {
    if (detect(arr[i], i)) {
      return i;
    }
  }
  return -1;
}
function hasOwnPropertyInPath(data, key) {
  var parts = keyToPath(key);
  while (parts.length) {
    var key_1 = parts.shift();
    if (!isObject(data) || !data.hasOwnProperty(key_1)) {
      return false;
    }
    data = data[key_1];
  }
  return true;
}
function noop() {
}
function anyChanged(attrs, from, to, strictMode) {
  if (strictMode === void 0) {
    strictMode = true;
  }
  return (typeof attrs === "string" ? attrs.split(",").map(function(item) {
    return item.trim();
  }) : attrs).some(function(key) {
    return strictMode ? from[key] !== to[key] : from[key] != to[key];
  });
}
function changedEffect(attrs, origin, data, effect, strictMode) {
  if (strictMode === void 0) {
    strictMode = true;
  }
  var changes = {};
  var keys = typeof attrs === "string" ? attrs.split(",").map(function(item) {
    return item.trim();
  }) : attrs;
  keys.forEach(function(key) {
    if (strictMode ? origin[key] !== data[key] : origin[key] != data[key]) {
      changes[key] = data[key];
    }
  });
  Object.keys(changes).length && effect(changes);
}
function rmUndefined(obj) {
  var newObj = {};
  if (typeof obj !== "object") {
    return obj;
  }
  var keys = Object.keys(obj);
  keys.forEach(function(key) {
    if (obj[key] !== void 0) {
      newObj[key] = obj[key];
    }
  });
  return newObj;
}
function isObjectShallowModified(prev, next, strictModeOrFunc, ignoreUndefined, stack) {
  if (strictModeOrFunc === void 0) {
    strictModeOrFunc = true;
  }
  if (ignoreUndefined === void 0) {
    ignoreUndefined = false;
  }
  if (stack === void 0) {
    stack = [];
  }
  if (Array.isArray(prev) && Array.isArray(next)) {
    return prev.length !== next.length ? true : prev.some(function(prev2, index) {
      return isObjectShallowModified(prev2, next[index], strictModeOrFunc, ignoreUndefined, stack);
    });
  }
  if ((0, import_isNaN.default)(prev) && (0, import_isNaN.default)(next)) {
    return false;
  }
  if (null == prev || null == next || !isObject(prev) || !isObject(next) || // 不是 Object.create 创建的对象
  // 不是 plain object
  prev.constructor !== Object || next.constructor !== Object) {
    if (strictModeOrFunc && typeof strictModeOrFunc === "function") {
      return strictModeOrFunc(prev, next);
    }
    return strictModeOrFunc ? prev !== next : prev != next;
  }
  if (ignoreUndefined) {
    prev = rmUndefined(prev);
    next = rmUndefined(next);
  }
  var keys = Object.keys(prev);
  var nextKeys = Object.keys(next);
  if (keys.length !== nextKeys.length || keys.sort().join(",") !== nextKeys.sort().join(",")) {
    return true;
  }
  if (~stack.indexOf(prev)) {
    return false;
  }
  stack.push(prev);
  for (var i = keys.length - 1; i >= 0; i--) {
    var key = keys[i];
    if (isObjectShallowModified(prev[key], next[key], strictModeOrFunc, ignoreUndefined, stack)) {
      return true;
    }
  }
  return false;
}
function isArrayChildrenModified(prev, next, strictMode) {
  if (strictMode === void 0) {
    strictMode = true;
  }
  if (!Array.isArray(prev) || !Array.isArray(next)) {
    return strictMode ? prev !== next : prev != next;
  }
  if (prev.length !== next.length) {
    return true;
  }
  for (var i = prev.length - 1; i >= 0; i--) {
    if (strictMode ? prev[i] !== next[i] : prev[i] != next[i] || isArrayChildrenModified(prev[i].children, next[i].children, strictMode)) {
      return true;
    }
  }
  return false;
}
function immutableExtends(to, from, deep) {
  if (!isObject(to) || !isObject(from)) {
    return to;
  }
  var ret = to;
  Object.keys(from).forEach(function(key) {
    var origin = to[key];
    var value = from[key];
    if (origin !== value) {
      ret = ret !== to ? ret : __assign({}, to);
      ret[key] = value;
    }
  });
  return ret;
}
function makeColumnClassBuild(steps, classNameTpl) {
  if (classNameTpl === void 0) {
    classNameTpl = "col-sm-$value";
  }
  var count = 12;
  var step = Math.floor(count / steps);
  return function(schema) {
    if (schema.columnClassName && /\bcol-(?:xs|sm|md|lg)-(\d+)\b/.test(schema.columnClassName)) {
      var flex = parseInt(RegExp.$1, 10);
      count -= flex;
      steps--;
      step = Math.floor(count / steps);
      return schema.columnClassName;
    }
    if (schema.columnClassName) {
      count -= step;
      steps--;
      return schema.columnClassName;
    }
    count -= step;
    steps--;
    return classNameTpl.replace("$value", "" + step);
  };
}
function hasVisibleExpression(schema) {
  return !!(schema.visibleOn || schema.hiddenOn);
}
function isVisible(schema, data) {
  return !(schema.hidden || schema.visible === false || schema.hiddenOn && evalExpression(schema.hiddenOn, data) || schema.visibleOn && !evalExpression(schema.visibleOn, data));
}
function isUnfolded(node, config) {
  var foldedField = config.foldedField, unfoldedField = config.unfoldedField;
  unfoldedField || (unfoldedField = "unfolded");
  foldedField || (foldedField = "folded");
  if (unfoldedField && typeof node[unfoldedField] !== "undefined") {
    return !!node[unfoldedField];
  }
  if (foldedField && typeof node[foldedField] !== "undefined") {
    return !node[foldedField];
  }
  return false;
}
function visibilityFilter(items, data) {
  return items.filter(function(item) {
    return isVisible(item, data);
  });
}
function isDisabled(schema, data) {
  return schema.disabled || schema.disabledOn && evalExpression(schema.disabledOn, data);
}
function hasAbility(schema, ability, data, defaultValue) {
  if (defaultValue === void 0) {
    defaultValue = true;
  }
  return schema.hasOwnProperty(ability) ? schema[ability] : schema.hasOwnProperty("".concat(ability, "On")) ? evalExpression(schema["".concat(ability, "On")], data || schema) : defaultValue;
}
function makeHorizontalDeeper(horizontal, count) {
  if (count > 1 && /\bcol-(xs|sm|md|lg)-(\d+)\b/.test(horizontal.left)) {
    var flex = parseInt(RegExp.$2, 10) * count;
    return {
      leftFixed: horizontal.leftFixed,
      left: flex,
      right: 12 - flex,
      offset: flex
    };
  } else if (count > 1 && typeof horizontal.left === "number") {
    var flex = horizontal.left * count;
    return {
      leftFixed: horizontal.leftFixed,
      left: flex,
      right: 12 - flex,
      offset: flex
    };
  }
  return horizontal;
}
function promisify(fn) {
  if (fn._promisified) {
    return fn;
  }
  var promisified = function() {
    try {
      var ret_1 = fn.apply(null, arguments);
      if (ret_1 && ret_1.then) {
        return ret_1;
      }
      if (typeof ret_1 === "function") {
        return new Promise(function(resolve, reject) {
          return ret_1(function(error, value) {
            return error ? reject(error) : resolve(value);
          });
        });
      }
      return Promise.resolve(ret_1);
    } catch (e) {
      return Promise.reject(e);
    }
  };
  promisified.raw = fn;
  promisified._promisified = true;
  return promisified;
}
function getScrollParent(node, compute) {
  if (compute === void 0) {
    compute = function() {
      return true;
    };
  }
  if (node == null) {
    return null;
  }
  var style = getComputedStyle(node);
  if (!style) {
    return null;
  }
  var text = style.getPropertyValue("overflow") + style.getPropertyValue("overflow-x") + style.getPropertyValue("overflow-y");
  if (node.nodeName === "BODY" || /auto|scroll/.test(text) && compute(node)) {
    return node;
  }
  return getScrollParent(node.parentNode, compute);
}
function difference(object, base, keepProps) {
  function changes(object2, base2) {
    if (isObject(object2) && isObject(base2)) {
      var keys = (0, import_uniq2.default)(Object.keys(object2).concat(Object.keys(base2)));
      var result_1 = {};
      keys.forEach(function(key) {
        var a = object2[key];
        var b = base2[key];
        if (keepProps && ~keepProps.indexOf(key)) {
          result_1[key] = a;
        }
        if ((0, import_isEqual3.default)(a, b)) {
          return;
        }
        if (!object2.hasOwnProperty(key)) {
          result_1[key] = void 0;
        } else if (Array.isArray(a) && Array.isArray(b)) {
          result_1[key] = a;
        } else {
          result_1[key] = changes(a, b);
        }
      });
      return result_1;
    }
    return object2;
  }
  return changes(object, base);
}
var padArr = function(arr, size, fillUndefined) {
  if (size === void 0) {
    size = 4;
  }
  if (fillUndefined === void 0) {
    fillUndefined = false;
  }
  var ret = [[]];
  var pool = arr.concat();
  var from = 0;
  while (pool.length || fillUndefined && ret[ret.length - 1].length < size) {
    var host = ret[from] || (ret[from] = []);
    if (host.length >= size) {
      from += 1;
      continue;
    }
    host.push(pool.shift());
  }
  return ret;
};
function __uri(id) {
  return id;
}
function isBreakpoint(str) {
  if (typeof str !== "string") {
    return !!str;
  }
  var breaks = str.split(/\s*,\s*|\s+/);
  if (window.matchMedia) {
    return breaks.some(function(item) {
      return item === "*" || item === "xs" && matchMedia("screen and (max-width: 767px)").matches || item === "sm" && matchMedia("screen and (min-width: 768px) and (max-width: 991px)").matches || item === "md" && matchMedia("screen and (min-width: 992px) and (max-width: 1199px)").matches || item === "lg" && matchMedia("screen and (min-width: 1200px)").matches;
    });
  } else {
    var width_1 = window.innerWidth;
    return breaks.some(function(item) {
      return item === "*" || item === "xs" && width_1 < 768 || item === "sm" && width_1 >= 768 && width_1 < 992 || item === "md" && width_1 >= 992 && width_1 < 1200 || item === "lg" && width_1 >= 1200;
    });
  }
}
function until(fn, when, getCanceler, interval) {
  var _this = this;
  if (interval === void 0) {
    interval = 5e3;
  }
  var timer;
  var stoped = false;
  return new Promise(function(resolve, reject) {
    var cancel = function() {
      clearTimeout(timer);
      stoped = true;
    };
    var check = function() {
      return __awaiter(_this, void 0, void 0, function() {
        var ret, e_1;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              _a3.trys.push([0, 2, , 3]);
              return [4, fn()];
            case 1:
              ret = _a3.sent();
              if (stoped) {
                return [
                  2
                  /*return*/
                ];
              } else if (when(ret)) {
                stoped = true;
                resolve(ret);
              } else {
                timer = setTimeout(check, interval);
              }
              return [3, 3];
            case 2:
              e_1 = _a3.sent();
              reject(e_1);
              return [3, 3];
            case 3:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    check();
    getCanceler && getCanceler(cancel);
  });
}
function omitControls(controls, omitItems) {
  return controls.filter(function(control) {
    return !~omitItems.indexOf(control.name || control._name);
  });
}
function isEmpty2(thing) {
  return !(isObject(thing) && Object.keys(thing).length);
}
var uuid = function() {
  return (+/* @__PURE__ */ new Date()).toString(36);
};
var createStr2 = function() {
  return ("00000000000000000" + (Math.random() * 18446744073709552e3).toString(16)).slice(-16);
};
var uuidv42 = function() {
  var a = createStr2();
  var b = createStr2();
  return a.slice(0, 8) + "-" + a.slice(8, 12) + "-4" + a.slice(13) + "-a" + b.slice(1, 4) + "-" + b.slice(4);
};
function mapTree(tree, iterator, level, depthFirst, paths, indexes) {
  if (level === void 0) {
    level = 1;
  }
  if (depthFirst === void 0) {
    depthFirst = false;
  }
  if (paths === void 0) {
    paths = [];
  }
  if (indexes === void 0) {
    indexes = [];
  }
  return tree.map(function(item, index) {
    if (depthFirst) {
      var children = item.children ? mapTree(item.children, iterator, level + 1, depthFirst, paths.concat(item), indexes.concat(index)) : void 0;
      children && (item = __assign(__assign({}, item), { children }));
      item = iterator(item, index, level, paths, indexes.concat(index)) || __assign({}, item);
      return item;
    }
    item = iterator(item, index, level, paths, indexes.concat(index)) || __assign({}, item);
    if (item.children && item.children.splice) {
      item.children = mapTree(item.children, iterator, level + 1, depthFirst, paths.concat(item), indexes.concat(index));
    }
    return item;
  });
}
function eachTree(tree, iterator, level, paths) {
  var _a3;
  if (level === void 0) {
    level = 1;
  }
  if (paths === void 0) {
    paths = [];
  }
  var length = tree.length;
  for (var i = 0; i < length; i++) {
    var item = tree[i];
    var res = iterator(item, i, level, paths);
    if (res === "break") {
      break;
    }
    if (res === "continue") {
      continue;
    }
    if ((_a3 = item.children) === null || _a3 === void 0 ? void 0 : _a3.splice) {
      eachTree(item.children, iterator, level + 1, paths.concat(item));
    }
  }
}
var findTreeCache = {
  tree: null,
  map: null
};
function findTree(tree, iterator, withCache) {
  var isValidateKey = function(value2) {
    return value2 !== "" && ((0, import_isString2.default)(value2) || (0, import_isNumber2.default)(value2));
  };
  if (withCache && isValidateKey(withCache.value)) {
    var resolve_1 = withCache.resolve, value = withCache.value, foundEffect = withCache.foundEffect;
    if (tree !== findTreeCache.tree || !findTreeCache.map) {
      var map_1 = /* @__PURE__ */ new Map();
      eachTree(tree, function(item, key, level, paths) {
        var mapKey = resolve_1 ? resolve_1(item) : item;
        isValidateKey(mapKey) && map_1.set(String(mapKey), [item, key, level, paths]);
      });
      findTreeCache.map = map_1;
      findTreeCache.tree = tree;
    }
    var res = findTreeCache.map.get(String(value));
    if (res != null) {
      foundEffect && foundEffect.apply(null, res.slice());
      return res[0];
    }
  }
  var result = null;
  everyTree(tree, function(item, key, level, paths) {
    if (iterator(item, key, level, paths)) {
      result = item;
      return false;
    }
    return true;
  });
  return result;
}
function findTreeAll(tree, iterator) {
  var result = [];
  everyTree(tree, function(item, key, level, paths) {
    if (iterator(item, key, level, paths)) {
      result.push(item);
    }
    return true;
  });
  return result;
}
function findTreeIndex(tree, iterator, withCache) {
  var idx = [];
  var foundEffect = function(item, index, level, paths) {
    idx = [index];
    paths = paths.concat();
    paths.unshift({
      children: tree
    });
    for (var i = paths.length - 1; i > 0; i--) {
      var prev = paths[i - 1];
      var current = paths[i];
      idx.unshift(prev.children.indexOf(current));
    }
  };
  findTree(tree, function(item, index, level, paths) {
    if (iterator(item, index, level, paths)) {
      foundEffect(item, index, level, paths);
      return true;
    }
    return false;
  }, !withCache ? void 0 : __assign(__assign({}, withCache), { foundEffect }));
  return idx.length ? idx : void 0;
}
function getTree(tree, idx) {
  var indexes = Array.isArray(idx) ? idx.concat() : [idx];
  var lastIndex = indexes.pop();
  var list = tree;
  for (var i = 0, len = indexes.length; i < len; i++) {
    var index = indexes[i];
    if (!list[index]) {
      list = null;
      break;
    }
    list = list[index].children;
  }
  return list ? list[lastIndex] : void 0;
}
function filterTree(tree, iterator, level, depthFirst, paths) {
  if (level === void 0) {
    level = 1;
  }
  if (depthFirst === void 0) {
    depthFirst = false;
  }
  if (paths === void 0) {
    paths = [];
  }
  if (depthFirst) {
    return tree.map(function(item) {
      var children = item.children ? filterTree(item.children, iterator, level + 1, depthFirst, paths.concat(item)) : void 0;
      if (Array.isArray(children) && Array.isArray(item.children)) {
        item = __assign(__assign({}, item), { children });
      }
      return item;
    }).filter(function(item, index) {
      return iterator(item, index, level, paths);
    });
  }
  return tree.filter(function(item, index) {
    return iterator(item, index, level, paths);
  }).map(function(item) {
    var _a3;
    if ((_a3 = item.children) === null || _a3 === void 0 ? void 0 : _a3.splice) {
      var children = filterTree(item.children, iterator, level + 1, depthFirst, paths.concat(item));
      if (Array.isArray(children) && Array.isArray(item.children)) {
        item = __assign(__assign({}, item), { children });
      }
    }
    return item;
  });
}
function everyTree(tree, iterator, level, paths, indexes) {
  var _a3;
  var stack = [];
  stack.push({ item: null, index: -1, level: 1, paths: [], indexes: [] });
  while (stack.length > 0) {
    var _b3 = stack.pop(), item = _b3.item, index = _b3.index, level_1 = _b3.level, paths_1 = _b3.paths, indexes_1 = _b3.indexes;
    if (index >= 0) {
      var value = iterator(item, index, level_1, paths_1, indexes_1);
      if (value && ((_a3 = item.children) === null || _a3 === void 0 ? void 0 : _a3.splice)) {
        var children = item.children;
        for (var i = children.length - 1; i >= 0; i--) {
          stack.push({
            item: children[i],
            index: i,
            level: level_1 + 1,
            paths: paths_1.concat(item),
            indexes: indexes_1.concat(index)
          });
        }
      } else if (!value) {
        return false;
      }
    } else {
      if (!Array.isArray(tree) && !isObservableArray(tree)) {
        return false;
      }
      for (var i = tree.length - 1; i >= 0; i--) {
        stack.push({
          item: tree[i],
          index: i,
          level: 1,
          paths: [],
          indexes: []
        });
      }
    }
  }
  return true;
}
function someTree(tree, iterator) {
  var result = false;
  everyTree(tree, function(item, key, level, paths) {
    if (iterator(item, key, level, paths)) {
      result = true;
      return false;
    }
    return true;
  });
  return result;
}
function flattenTree(tree, mapper) {
  var flattened = [];
  eachTree(tree, function(item, index, level, paths) {
    return flattened.push(mapper ? mapper(item, index, level, paths) : item);
  });
  return flattened;
}
function flattenTreeWithLeafNodes(tree, mapper) {
  var flattened = [];
  eachTree(tree, function(item, index) {
    if (!item.hasOwnProperty("children")) {
      flattened.push(mapper ? mapper(item, index) : item);
    }
  });
  return flattened;
}
function spliceTree(tree, idx, deleteCount) {
  if (deleteCount === void 0) {
    deleteCount = 0;
  }
  var items = [];
  for (var _i = 3; _i < arguments.length; _i++) {
    items[_i - 3] = arguments[_i];
  }
  var list = tree.concat();
  if (typeof idx === "number") {
    list.splice.apply(list, __spreadArray([idx, deleteCount], __read(items), false));
  } else if (Array.isArray(idx) && idx.length) {
    idx = idx.concat();
    var lastIdx = idx.pop();
    var host = idx.reduce(function(list2, idx2) {
      var child = __assign(__assign({}, list2[idx2]), { children: list2[idx2].children ? list2[idx2].children.concat() : [] });
      list2[idx2] = child;
      return child.children;
    }, list);
    host.splice.apply(host, __spreadArray([lastIdx, deleteCount], __read(items), false));
  }
  return list;
}
function getTreeDepth(tree) {
  if (Array.isArray(tree) && tree.length === 0) {
    return 0;
  }
  return Math.max.apply(Math, __spreadArray([], __read(tree.map(function(item) {
    if (Array.isArray(item.children)) {
      return 1 + getTreeDepth(item.children);
    }
    return 1;
  })), false));
}
function getTreeAncestors(tree, value, includeSelf) {
  if (includeSelf === void 0) {
    includeSelf = false;
  }
  var ancestors = null;
  findTree(tree, function(item, index, level, paths) {
    if (item === value) {
      ancestors = paths;
      if (includeSelf) {
        ancestors.push(item);
      }
      return true;
    }
    return false;
  });
  return ancestors;
}
function getTreeParent(tree, value) {
  var ancestors = getTreeAncestors(tree, value);
  return (ancestors === null || ancestors === void 0 ? void 0 : ancestors.length) ? ancestors[ancestors.length - 1] : null;
}
function countTree(tree, iterator) {
  var count = 0;
  eachTree(tree, function(item, key, level, paths) {
    if (!iterator || iterator(item, key, level, paths)) {
      count++;
    }
  });
  return count;
}
function ucFirst(str) {
  return typeof str === "string" ? str.substring(0, 1).toUpperCase() + str.substring(1) : str;
}
function lcFirst(str) {
  return str ? str.substring(0, 1).toLowerCase() + str.substring(1) : "";
}
function camel(str) {
  return str ? str.split(/[\s_\-]/).map(function(item, index) {
    return index === 0 ? lcFirst(item) : ucFirst(item);
  }).join("") : "";
}
function getWidthRate(value, strictMode) {
  if (strictMode === void 0) {
    strictMode = false;
  }
  if (typeof value === "string" && /\bcol\-\w+\-(\d+)\b/.test(value)) {
    return parseInt(RegExp.$1, 10);
  }
  return strictMode ? 0 : value || 0;
}
function getLevelFromClassName(value, defaultValue) {
  if (defaultValue === void 0) {
    defaultValue = "default";
  }
  if (/\b(?:btn|text)-(link|primary|secondary|info|success|warning|danger|light|dark)\b/.test(value)) {
    return RegExp.$1;
  }
  return defaultValue;
}
function pickEventsProps(props) {
  var ret = {};
  props && Object.keys(props).forEach(function(key) {
    return /^on/.test(key) && (ret[key] = props[key]);
  });
  return ret;
}
var autobind = autobindMethod;
var bulkBindFunctions = function(context, funNames) {
  funNames.forEach(function(key) {
    return context[key] = context[key].bind(context);
  });
};
function sortArray(items, field, dir, fieldGetter) {
  return items.sort(function(a, b) {
    var ret;
    var a1 = fieldGetter ? fieldGetter(a, field) : a[field];
    var b1 = fieldGetter ? fieldGetter(b, field) : b[field];
    if (typeof a1 === "number" && typeof b1 === "number") {
      ret = a1 < b1 ? -1 : a1 === b1 ? 0 : 1;
    } else {
      ret = String(a1).localeCompare(String(b1));
    }
    return ret * dir;
  });
}
function hasFile(object) {
  return Object.keys(object).some(function(key) {
    var value = object[key];
    return value instanceof File || Array.isArray(value) && value.length && value[0] instanceof File;
  });
}
function qsstringify(data, options, keepEmptyArray) {
  if (options === void 0) {
    options = {
      arrayFormat: "indices",
      encodeValuesOnly: true
    };
  }
  if (keepEmptyArray) {
    data = JSONValueMap(data, function(value) {
      return Array.isArray(value) && !value.length ? "" : value;
    });
  }
  return import_qs.default.stringify(data, options);
}
function qsparse(data, options) {
  if (options === void 0) {
    options = {
      arrayFormat: "indices",
      encodeValuesOnly: true,
      depth: 1e3,
      arrayLimit: 1e3
      /** array元素数量超出限制，会被自动转化为object格式，默认值1000 */
    };
  }
  return import_qs.default.parse(data, options);
}
function object2formData(data, options, fd) {
  if (options === void 0) {
    options = {
      arrayFormat: "indices",
      encodeValuesOnly: true
    };
  }
  if (fd === void 0) {
    fd = new FormData();
  }
  var fileObjects = [];
  var others = {};
  Object.keys(data).forEach(function(key) {
    var value = data[key];
    if (value instanceof File) {
      fileObjects.push([key, value]);
    } else if (Array.isArray(value) && value.length && value[0] instanceof File) {
      value.forEach(function(value2) {
        return fileObjects.push(["".concat(key, "[]"), value2]);
      });
    } else {
      others[key] = value;
    }
  });
  qsstringify(others, options).split("&").forEach(function(item) {
    var parts = item.split("=");
    parts[0] && fd.append(parts[0], decodeURIComponent(parts[1]));
  });
  fileObjects.forEach(function(fileObject) {
    return fd.append(fileObject[0], fileObject[1], fileObject[1].name);
  });
  return fd;
}
function chainFunctions() {
  var fns3 = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    fns3[_i] = arguments[_i];
  }
  return function() {
    var args = [];
    for (var _i2 = 0; _i2 < arguments.length; _i2++) {
      args[_i2] = arguments[_i2];
    }
    return fns3.reduce(function(ret, fn) {
      return ret === false ? false : typeof fn == "function" ? fn.apply(void 0, __spreadArray([], __read(args), false)) : void 0;
    }, void 0);
  };
}
function chainEvents(props, schema) {
  var ret = {};
  Object.keys(props).forEach(function(key) {
    var _a3;
    if (key.substr(0, 2) === "on" && typeof props[key] === "function" && typeof schema[key] === "function" && schema[key] !== props[key]) {
      if (props.formStore && key === "onChange") {
        ret[key] = props[key];
      } else {
        ret[key] = chainFunctions(schema[key], props[key]);
      }
    } else {
      ret[key] = (_a3 = props[key]) !== null && _a3 !== void 0 ? _a3 : schema[key];
    }
  });
  return ret;
}
function mapObject(value, valueMapper, skipFn, keyMapper) {
  skipFn = skipFn && typeof skipFn === "function" ? skipFn : function(value2) {
    if (value2 instanceof File) {
      return true;
    }
    return false;
  };
  if (skipFn(value)) {
    return value;
  }
  if (Array.isArray(value)) {
    return value.map(function(item) {
      return mapObject(item, valueMapper, skipFn, keyMapper);
    });
  }
  if (isObject(value)) {
    var tmpValue_1 = {};
    Object.keys(value).forEach(function(key) {
      var newKey = keyMapper ? keyMapper(key) : key;
      tmpValue_1[newKey] = mapObject(value[key], valueMapper, skipFn, keyMapper);
    });
    return tmpValue_1;
  }
  return valueMapper(value);
}
function loadScript(src) {
  return new Promise(function(ok, fail) {
    var script = document.createElement("script");
    script.onerror = function(reason) {
      return fail(reason);
    };
    if (~src.indexOf("{{callback}}")) {
      var callbackFn_1 = "loadscriptcallback_".concat(uuid());
      window[callbackFn_1] = function() {
        ok();
        delete window[callbackFn_1];
      };
      src = src.replace("{{callback}}", callbackFn_1);
    } else {
      script.onload = function() {
        return ok();
      };
    }
    script.src = src;
    document.head.appendChild(script);
  });
}
function loadStyle(href) {
  return new Promise(function(ok, fail) {
    var link = document.createElement("link");
    link.rel = "stylesheet";
    link.onerror = function(reason) {
      return fail(reason);
    };
    link.onload = function() {
      return ok();
    };
    link.href = href;
    document.head.appendChild(link);
  });
}
var SkipOperation = (
  /** @class */
  function(_super) {
    __extends(SkipOperation2, _super);
    function SkipOperation2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return SkipOperation2;
  }(Error)
);
var ValidateError = (
  /** @class */
  function(_super) {
    __extends(ValidateError2, _super);
    function ValidateError2(message, error) {
      var _this = _super.call(this) || this;
      _this.name = "ValidateError";
      _this.message = message;
      _this.detail = error;
      return _this;
    }
    return ValidateError2;
  }(Error)
);
function isCyclic(obj) {
  var seenObjects = [];
  function detect(obj2) {
    if (obj2 && typeof obj2 === "object") {
      if (seenObjects.indexOf(obj2) !== -1) {
        return true;
      }
      seenObjects.push(obj2);
      for (var key in obj2) {
        if (obj2.hasOwnProperty(key) && detect(obj2[key])) {
          return true;
        }
      }
    }
    return false;
  }
  return detect(obj);
}
function internalFindObjectsWithKey(obj, key) {
  var objects = [];
  for (var k in obj) {
    if (!obj.hasOwnProperty(k))
      continue;
    if (k === key) {
      objects.push(obj);
    } else if (typeof obj[k] === "object") {
      objects = objects.concat(internalFindObjectsWithKey(obj[k], key));
    }
  }
  return objects;
}
function findObjectsWithKey(obj, key) {
  if (isCyclic(obj)) {
    return [];
  }
  return internalFindObjectsWithKey(obj, key);
}
var scrollbarWidth;
function getScrollbarWidth() {
  if (typeof scrollbarWidth !== "undefined") {
    return scrollbarWidth;
  }
  var outer = document.createElement("div");
  outer.style.visibility = "hidden";
  outer.style.overflow = "scroll";
  outer.style.msOverflowStyle = "scrollbar";
  document.body.appendChild(outer);
  var inner = document.createElement("div");
  outer.appendChild(inner);
  scrollbarWidth = outer.offsetWidth - inner.offsetWidth;
  outer.parentNode.removeChild(outer);
  return scrollbarWidth;
}
function resolveValueByName(data, name, canAccessSuper) {
  return isPureVariable(name) ? resolveVariableAndFilter(name, data, "|raw") : resolveVariable(name, data, canAccessSuper);
}
function getPropValue(props, getter, canAccessSuper) {
  var _a3, _b3;
  if (canAccessSuper === void 0) {
    canAccessSuper = props.canAccessSuperData;
  }
  var name = props.name, value = props.value, data = props.data, defaultValue = props.defaultValue;
  return (_b3 = (_a3 = value !== null && value !== void 0 ? value : getter === null || getter === void 0 ? void 0 : getter(props)) !== null && _a3 !== void 0 ? _a3 : resolveValueByName(data, name, canAccessSuper)) !== null && _b3 !== void 0 ? _b3 : isExpression(defaultValue) ? resolveVariableAndFilter(defaultValue, data) : replaceExpression(defaultValue);
}
function detectPropValueChanged(props, prevProps, onChange, getter) {
  var nextValue;
  if (typeof props.value !== "undefined") {
    props.value !== prevProps.value && onChange(props.value);
  } else if ((nextValue = getter === null || getter === void 0 ? void 0 : getter(props)) !== void 0) {
    nextValue !== getter(prevProps) && onChange(nextValue);
  } else if (typeof props.name === "string" && (nextValue = resolveValueByName(props.data, props.name)) !== void 0) {
    nextValue !== resolveValueByName(prevProps.data, prevProps.name) && onChange(nextValue);
  } else if (props.defaultValue !== prevProps.defaultValue) {
    onChange(props.defaultValue);
  }
}
function removeHTMLTag(str) {
  return typeof str === "string" ? str.replace(/<\/?[^>]+(>|$)/g, "") : str;
}
function normalizeNodePath(value, enableNodePath, labelField, valueField, pathSeparator, delimiter) {
  var _a3;
  if (labelField === void 0) {
    labelField = "label";
  }
  if (valueField === void 0) {
    valueField = "value";
  }
  if (pathSeparator === void 0) {
    pathSeparator = "/";
  }
  if (delimiter === void 0) {
    delimiter = ",";
  }
  var nodeValueArray = [];
  var nodePathArray = [];
  var getLastNodeFromPath = function(path) {
    return (0, import_last.default)(path ? path.toString().split(pathSeparator) : []);
  };
  if (typeof value === "undefined" || !enableNodePath) {
    return { nodeValueArray, nodePathArray };
  }
  if (Array.isArray(value)) {
    value.forEach(function(nodePath) {
      var _a4;
      if (nodePath && nodePath.hasOwnProperty(valueField)) {
        nodeValueArray.push(__assign(__assign({}, nodePath), (_a4 = {}, _a4[labelField] = getLastNodeFromPath(nodePath[labelField]), _a4[valueField] = getLastNodeFromPath(nodePath[valueField]), _a4)));
        nodePathArray.push(nodePath[valueField]);
      } else {
        nodeValueArray.push(getLastNodeFromPath(nodePath));
        nodePathArray.push(nodePath);
      }
    });
  } else if (typeof value === "string") {
    value.toString().split(delimiter).forEach(function(path) {
      nodeValueArray.push(getLastNodeFromPath(path));
      nodePathArray.push(path);
    });
  } else {
    nodeValueArray.push(__assign(__assign({}, value), (_a3 = {}, _a3[labelField] = getLastNodeFromPath(value[labelField]), _a3[valueField || "value"] = getLastNodeFromPath(value[valueField]), _a3)));
    nodePathArray.push(value[valueField]);
  }
  return { nodeValueArray, nodePathArray };
}
function isClickOnInput(e) {
  var target = e.target;
  var formItem;
  return !!(!e.currentTarget.contains(target) || ~["INPUT", "TEXTAREA"].indexOf(target.tagName) || (formItem = target.closest('button, a, [data-role="form-item"], label[data-role="checkbox"]')) && e.currentTarget.contains(formItem));
}
function hashCode(s) {
  return s.split("").reduce(function(a, b) {
    a = (a << 5) - a + b.charCodeAt(0);
    return a & a;
  }, 0);
}
function JSONTraverse(json, mapper, maxDeep) {
  if (maxDeep === void 0) {
    maxDeep = Number.MAX_VALUE;
  }
  if (maxDeep <= 0) {
    return;
  }
  Object.keys(json).forEach(function(key) {
    var value = json[key];
    if (!isObservable(value)) {
      if ((0, import_isPlainObject6.default)(value) || Array.isArray(value)) {
        JSONTraverse(value, mapper, maxDeep - 1);
      } else {
        mapper(value, key, json);
      }
    }
  });
}
function JSONValueMap(json, mapper, deepFirst, stack) {
  if (deepFirst === void 0) {
    deepFirst = false;
  }
  if (stack === void 0) {
    stack = [];
  }
  if (!(0, import_isPlainObject6.default)(json) && !Array.isArray(json)) {
    return json;
  }
  var iterator = function(origin, key, host, stack2) {
    var _a3, _b3;
    if (stack2 === void 0) {
      stack2 = [];
    }
    if (deepFirst) {
      var value = JSONValueMap(origin, mapper, deepFirst, stack2);
      return (_a3 = mapper(value, key, host, stack2)) !== null && _a3 !== void 0 ? _a3 : value;
    }
    var maped = (_b3 = mapper(origin, key, host, stack2)) !== null && _b3 !== void 0 ? _b3 : origin;
    if (maped === origin) {
      return JSONValueMap(origin, mapper, deepFirst, stack2);
    }
    return maped;
  };
  if (Array.isArray(json)) {
    var modified_1 = false;
    var arr = json.map(function(value, index) {
      var newValue = iterator(value, index, json, [json].concat(stack));
      modified_1 = modified_1 || newValue !== value;
      return newValue;
    });
    return modified_1 ? arr : json;
  }
  var modified = false;
  var toUpdate = {};
  Object.keys(json).forEach(function(key) {
    var value = json[key];
    var result = iterator(value, key, json, [json].concat(stack));
    if (result !== value) {
      modified = true;
      toUpdate[key] = result;
    }
  });
  return modified ? __assign(__assign({}, json), toUpdate) : json;
}
function convertArrayValueToMoment(value, types2, mom) {
  if (value.length === 0)
    return mom;
  for (var i = 0; i < types2.length; i++) {
    var type = types2[i];
    mom.set(type, value[i]);
  }
  return mom;
}
function getRange(min, max, step) {
  if (step === void 0) {
    step = 1;
  }
  var arr = [];
  for (var i = min; i <= max; i += step) {
    arr.push(i);
  }
  return arr;
}
function repeatCount(count, iterator) {
  var result = [];
  var index = 0;
  while (count--) {
    result.push(iterator(index++));
  }
  return result;
}
function isNumeric(value) {
  if (typeof value === "number") {
    return true;
  }
  return /^[-+]?(?:\d*[.])?\d+$/.test(value);
}
function parsePrimitiveQueryString(rawQuery) {
  if (!(0, import_isPlainObject6.default)(rawQuery)) {
    return rawQuery;
  }
  var query = JSONValueMap(rawQuery, function(value) {
    if (value === "true" || value === "false") {
      return value === "true";
    }
    return value;
  });
  return query;
}
function parseQuery(location2, options) {
  var _a3;
  var _b3 = (options || {}).parsePrimitive, parsePrimitive = _b3 === void 0 ? false : _b3;
  var query = location2 && !(location2 instanceof Location) && (location2 === null || location2 === void 0 ? void 0 : location2.query) || location2 && (location2 === null || location2 === void 0 ? void 0 : location2.search) && qsparse(location2.search.substring(1)) || window.location.search && qsparse(window.location.search.substring(1));
  var normalizedQuery = (0, import_isPlainObject6.default)(query) ? parsePrimitive ? parsePrimitiveQueryString(query) : query : {};
  var hash = (_a3 = window.location) === null || _a3 === void 0 ? void 0 : _a3.hash;
  var hashQuery = {};
  var idx = -1;
  if (typeof hash === "string" && ~(idx = hash.indexOf("?"))) {
    hashQuery = qsparse(hash.substring(idx + 1));
  }
  return (0, import_merge.default)(normalizedQuery, hashQuery);
}
var differenceFromAllCache = {
  allOptions: null,
  options: null,
  res: []
};
function differenceFromAll(allOptions, options, getValue) {
  if (allOptions === differenceFromAllCache.allOptions && options === differenceFromAllCache.options) {
    return differenceFromAllCache.res;
  }
  var map2 = new Map(allOptions.map(function(item) {
    return [getValue(item), item];
  }));
  var res = options.filter(function(item) {
    return !map2.get(getValue(item));
  });
  differenceFromAllCache.allOptions = allOptions;
  differenceFromAllCache.options = options;
  differenceFromAllCache.res = res;
  return res;
}
function buildTrackExpression(schema) {
  if (!(0, import_isPlainObject6.default)(schema) && !Array.isArray(schema)) {
    return "";
  }
  var trackExpressions = [];
  JSONTraverse(
    schema,
    function(value, key) {
      if (typeof value !== "string") {
        return;
      }
      if (key === "name") {
        trackExpressions.push(isPureVariable(value) ? value : "${".concat(value, "}"));
      } else if (key === "source") {
        trackExpressions.push(value);
      } else if (key.endsWith("On") || key === "condition" || key === "trackExpression") {
        trackExpressions.push(value.startsWith("${") ? value : "<script>".concat(value, "<\/script>"));
      } else if (value.includes("$")) {
        trackExpressions.push(value);
      }
    },
    10
    // 最多遍历 10 层
  );
  return trackExpressions.join("|");
}
function evalTrackExpression(expression, data) {
  if (typeof expression !== "string") {
    return "";
  }
  var parts = [];
  while (true) {
    var idx = expression.indexOf("<script>");
    if (idx === -1) {
      break;
    }
    var endIdx = expression.indexOf("<\/script>");
    if (endIdx === -1) {
      throw new Error("Invalid trackExpression miss end script token `<\/script>`");
    }
    if (idx) {
      parts.push({
        type: "text",
        value: expression.substring(0, idx)
      });
    }
    parts.push({
      type: "script",
      value: expression.substring(idx + 8, endIdx)
    });
    expression = expression.substring(endIdx + 9);
  }
  expression && parts.push({
    type: "text",
    value: expression
  });
  return parts.map(function(item) {
    if (item.type === "text") {
      return tokenize(item.value, data);
    }
    return evalExpression(item.value, data);
  }).join("");
}
function importLazyComponent(mod) {
  return mod.default.__esModule ? mod.default : mod;
}
function replaceUrlParams(path, params) {
  if (typeof path === "string" && /\:\w+/.test(path)) {
    return compile(path)(params);
  }
  return path;
}

// node_modules/amis-core/esm/utils/dataMapping.js
var import_isPlainObject7 = __toESM(require_isPlainObject());
function resolveMapping(value, data, defaultFilter, ignoreIfNotMatch) {
  if (defaultFilter === void 0) {
    defaultFilter = "| raw";
  }
  if (ignoreIfNotMatch === void 0) {
    ignoreIfNotMatch = false;
  }
  var result = typeof value === "string" && isPureVariable(value) ? resolveVariableAndFilter(value, data, defaultFilter, function() {
    return "";
  }) : typeof value === "string" && ~value.indexOf("$") ? tokenize(value, data, defaultFilter) : value;
  if (ignoreIfNotMatch && (result == null || result === "")) {
    return value;
  }
  return result;
}
function resolveMappingObject(value, data) {
  var e_1, _a3;
  try {
    for (var _b3 = __values(Object.keys(value)), _c = _b3.next(); !_c.done; _c = _b3.next()) {
      var key = _c.value;
      if (typeof value[key] === "string") {
        value[key] = resolveMapping(value[key], data);
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a3 = _b3.return))
        _a3.call(_b3);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return value;
}
function dataMapping(to, from, ignoreFunction, convertKeyToPath, ignoreIfNotMatch) {
  if (from === void 0) {
    from = {};
  }
  if (ignoreFunction === void 0) {
    ignoreFunction = false;
  }
  if (ignoreIfNotMatch === void 0) {
    ignoreIfNotMatch = false;
  }
  if (Array.isArray(to)) {
    return to.map(function(item) {
      return dataMapping(item, from, ignoreFunction, convertKeyToPath, ignoreIfNotMatch);
    });
  } else if (typeof to === "string") {
    return resolveMapping(to, from, void 0, ignoreIfNotMatch);
  } else if (!(0, import_isPlainObject7.default)(to)) {
    return to;
  }
  var ret = {};
  var keys = Object.keys(to);
  if (keys.length === 1 && keys[0][0] === "$" && (0, import_isPlainObject7.default)(to[keys[0]])) {
    var left = resolveMapping(keys[0], from, "| raw");
    if (!Array.isArray(left) && ignoreIfNotMatch) {
      ret[keys[0]] = to[keys[0]];
    } else {
      var arr = Array.isArray(left) ? left : [];
      var mapping_1 = to[keys[0]];
      ret = arr.map(function(raw) {
        return dataMapping(mapping_1, createObject2(from, __assign({ item: raw }, raw)), ignoreFunction, convertKeyToPath, ignoreIfNotMatch);
      });
    }
  } else {
    var objectKeys = Object.keys(to);
    var idx = objectKeys.indexOf("&");
    if (~idx) {
      var value_1 = to["&"];
      objectKeys.splice(idx, 1);
      if (value_1 === "$$") {
        ret = __assign(__assign({}, ret), from);
      } else {
        var keys_1;
        var v = (0, import_isPlainObject7.default)(value_1) && (keys_1 = Object.keys(value_1)) && keys_1.length === 1 && from[keys_1[0].substring(1)] && Array.isArray(from[keys_1[0].substring(1)]) ? from[keys_1[0].substring(1)].map(function(raw) {
          return dataMapping(value_1[keys_1[0]], createObject2(from, raw), ignoreFunction, convertKeyToPath, ignoreIfNotMatch);
        }) : resolveMapping(value_1, from, void 0, ignoreIfNotMatch);
        if (Array.isArray(v) || typeof v === "string") {
          ret = v;
        } else if (typeof v === "function") {
          ret = __assign(__assign({}, ret), v(from));
        } else {
          ret = __assign(__assign({}, ret), v);
        }
      }
    }
    objectKeys.forEach(function(key) {
      var value = to[key];
      if (typeof ignoreFunction === "function" && ignoreFunction(key, value)) {
        setVariable(ret, key, value, convertKeyToPath);
      } else if (value === "$$") {
        setVariable(ret, key, from, convertKeyToPath);
      } else if (typeof value === "string" && value.length > 0 && value[0] === "$") {
        var v2 = resolveMapping(value, from, void 0, ignoreIfNotMatch);
        setVariable(ret, key, v2, convertKeyToPath);
        if (v2 === "__undefined") {
          deleteVariable(ret, key);
        }
      } else if ((0, import_isPlainObject7.default)(value) || Array.isArray(value)) {
        setVariable(ret, key, dataMapping(value, from, ignoreFunction, convertKeyToPath, ignoreIfNotMatch), convertKeyToPath);
      } else if (typeof value == "string" && ~value.indexOf("$")) {
        setVariable(ret, key, resolveMapping(value, from, void 0, ignoreIfNotMatch), convertKeyToPath);
      } else if (typeof value === "function" && ignoreFunction !== true) {
        setVariable(ret, key, value(from), convertKeyToPath);
      } else {
        setVariable(ret, key, value, convertKeyToPath);
        if (value === "__undefined") {
          deleteVariable(ret, key);
        }
      }
    });
  }
  return ret;
}

// node_modules/amis-core/esm/utils/SimpleMap.js
var import_find = __toESM(require_find());
var import_findIndex = __toESM(require_findIndex());
var SimpleMap = (
  /** @class */
  function() {
    function SimpleMap2() {
      this.list = [];
    }
    SimpleMap2.prototype.has = function(key) {
      var resolved = (0, import_find.default)(this.list, function(item) {
        return item.key === key;
      });
      return !!resolved;
    };
    SimpleMap2.prototype.set = function(key, value) {
      this.list.push({
        key,
        value
      });
    };
    SimpleMap2.prototype.get = function(key) {
      var resolved = (0, import_find.default)(this.list, function(item) {
        return item.key === key;
      });
      return resolved ? resolved.value : null;
    };
    SimpleMap2.prototype.delete = function(key) {
      var idx = (0, import_findIndex.default)(this.list, function(item) {
        return item.key === key;
      });
      ~idx && this.list.splice(idx, 1);
    };
    SimpleMap2.prototype.dispose = function() {
      this.list.splice(0, this.list.length);
    };
    return SimpleMap2;
  }()
);

// node_modules/amis-core/esm/store/manager.js
var stores = {};
function addStore(store2) {
  if (stores[store2.id]) {
    return stores[store2.id];
  }
  stores[store2.id] = store2;
  if (store2.parentId && !/(?:dialog|drawer)$/.test(store2.path)) {
    var parent_1 = stores[store2.parentId];
    parent_1.addChildId(store2.id);
  }
  cleanUp();
  return store2;
}
var toDelete = [];
function removeStore(store2) {
  var id = store2.id;
  toDelete.push(id);
  store2.dispose(cleanUp);
}
function cleanUp() {
  var index = toDelete.length - 1;
  while (index >= 0) {
    var id = toDelete[index];
    var store2 = stores[id];
    if (store2 && !isAlive(store2)) {
      delete stores[id];
      toDelete.splice(index, 1);
    } else {
      index--;
    }
  }
}
function getStoreById(id) {
  return stores[id];
}
function getStores() {
  return stores;
}

// node_modules/amis-core/esm/store/node.js
var StoreNode = types.model("StoreNode", {
  id: types.identifier,
  path: "",
  storeType: types.string,
  disposed: false,
  parentId: "",
  childrenIds: types.optional(types.array(types.string), [])
}).views(function(self2) {
  return {
    get parentStore() {
      return isAlive(self2) && self2.parentId ? getStoreById(self2.parentId) : null;
    },
    get __() {
      return getEnv(self2).translate;
    },
    get hasChildren() {
      return !!self2.childrenIds.length;
    },
    get children() {
      return self2.childrenIds.map(function(item) {
        return getStoreById(item);
      });
    }
  };
}).actions(function(self2) {
  function addChildId(id) {
    self2.childrenIds.push(id);
  }
  function removeChildId(id) {
    var childrenIds = self2.childrenIds.filter(function(item) {
      return item !== id;
    });
    self2.childrenIds.replace(childrenIds);
    self2.disposed && dispose();
  }
  function dispose(callback) {
    self2.disposed = true;
    if (/(?:dialog|drawer)$/.test(self2.path)) {
      destroy(self2);
      callback === null || callback === void 0 ? void 0 : callback();
    } else if (!self2.childrenIds.length) {
      var parent_1 = self2.parentStore;
      parent_1 && isAlive(parent_1) && parent_1.onChildStoreDispose(self2);
      destroy(self2);
      callback === null || callback === void 0 ? void 0 : callback();
    }
  }
  return {
    onChildStoreDispose: function(child) {
      removeChildId(child.id);
    },
    syncProps: function(props, prevProps, list) {
      if (list === void 0) {
        list = Object.keys(props);
      }
      var target = self2;
      list.forEach(function(key) {
        if (prevProps && props[key] === prevProps[key]) {
          return;
        }
        var setter = "set".concat(key.substring(0, 1).toUpperCase()).concat(key.substring(1));
        if (typeof target[setter] === "function") {
          target[setter](props[key]);
        } else if (target.hasOwnProperty(key)) {
          target[key] = props[key];
        }
      });
    },
    dispose,
    addChildId,
    removeChildId
  };
});

// node_modules/amis-core/esm/utils/offset.js
function offset(node) {
  var doc = node === null || node === void 0 ? void 0 : node.ownerDocument;
  var box = { top: 0, left: 0, height: 0, width: 0 };
  var docElem = doc && doc.documentElement;
  if (!docElem || !docElem.contains(node))
    return box;
  if (node.getBoundingClientRect !== void 0)
    box = node.getBoundingClientRect();
  box = {
    top: box.top + docElem.scrollTop - (docElem.clientTop || 0),
    left: box.left + docElem.scrollLeft - (docElem.clientLeft || 0),
    width: box.width,
    height: box.height
  };
  return box;
}

// node_modules/amis-core/esm/utils/offsetParent.js
var isHTMLElement = function(e) {
  return !!e && "offsetParent" in e;
};
function offsetParent(node) {
  var doc = node === null || node === void 0 ? void 0 : node.ownerDocument;
  var parent = node && node.offsetParent;
  while (isHTMLElement(parent) && parent.nodeName !== "HTML" && getComputedStyle(parent).getPropertyValue("position") === "static") {
    parent = parent.offsetParent;
  }
  return parent || doc.documentElement;
}

// node_modules/amis-core/esm/utils/position.js
var nodeName = function(node) {
  return node.nodeName && node.nodeName.toLowerCase();
};
function position(node, offsetParent$1) {
  var parentOffset = { top: 0, left: 0 };
  var offset$1;
  if (getComputedStyle(node).getPropertyValue("position") === "fixed") {
    offset$1 = node.getBoundingClientRect();
  } else {
    var parent_1 = offsetParent$1 || offsetParent(node);
    offset$1 = offset(node);
    if (parent_1 === node) {
      return {
        top: 0,
        left: 0,
        width: offset$1.width,
        height: offset$1.height
      };
    }
    if (nodeName(parent_1) !== "html")
      parentOffset = offset(parent_1);
    var borderTop = String(getComputedStyle(parent_1).getPropertyValue("border-top-width") || 0);
    parentOffset.top += parseInt(borderTop, 10) - parent_1.scrollTop || 0;
    var borderLeft = String(getComputedStyle(parent_1).getPropertyValue("border-left-width") || 0);
    parentOffset.left += parseInt(borderLeft, 10) - parent_1.scrollLeft || 0;
  }
  var marginTop = String(getComputedStyle(node).getPropertyValue("margin-top") || 0);
  var marginLeft = String(getComputedStyle(node).getPropertyValue("margin-left") || 0);
  return __assign(__assign({}, offset$1), { top: offset$1.top - parentOffset.top - (parseInt(marginTop, 10) || 0), left: offset$1.left - parentOffset.left - (parseInt(marginLeft, 10) || 0) });
}

// node_modules/amis-core/esm/utils/debug.js
var import_react = __toESM(require_react());
var import_classnames = __toESM(require_classnames());
var import_react_dom = __toESM(require_react_dom());
var JsonView = import_react.default.lazy(function() {
  return import("./main-DY3XGFJ7.js").then(importLazyComponent);
});
(function() {
  function Log() {
    this.cat = "";
    this.level = "";
    this.msg = "";
    this.ext = "";
  }
  __decorate([
    observable,
    __metadata("design:type", Object)
  ], Log.prototype, "cat", void 0);
  __decorate([
    observable,
    __metadata("design:type", Object)
  ], Log.prototype, "level", void 0);
  __decorate([
    observable,
    __metadata("design:type", Object)
  ], Log.prototype, "msg", void 0);
  __decorate([
    observable,
    __metadata("design:type", Object)
  ], Log.prototype, "ext", void 0);
  return Log;
})();
var AMISDebugStore = (
  /** @class */
  function() {
    function AMISDebugStore2() {
      this.tab = "log";
      this.position = "right";
      this.logs = [];
      this.isExpanded = false;
      this.inspectMode = false;
    }
    __decorate([
      observable,
      __metadata("design:type", String)
    ], AMISDebugStore2.prototype, "tab", void 0);
    __decorate([
      observable,
      __metadata("design:type", String)
    ], AMISDebugStore2.prototype, "position", void 0);
    __decorate([
      observable,
      __metadata("design:type", Array)
    ], AMISDebugStore2.prototype, "logs", void 0);
    __decorate([
      observable,
      __metadata("design:type", Object)
    ], AMISDebugStore2.prototype, "isExpanded", void 0);
    __decorate([
      observable,
      __metadata("design:type", Object)
    ], AMISDebugStore2.prototype, "inspectMode", void 0);
    __decorate([
      observable,
      __metadata("design:type", String)
    ], AMISDebugStore2.prototype, "hoverId", void 0);
    __decorate([
      observable,
      __metadata("design:type", String)
    ], AMISDebugStore2.prototype, "activeId", void 0);
    __decorate([
      observable,
      __metadata("design:type", Number)
    ], AMISDebugStore2.prototype, "ellipsisThreshold", void 0);
    return AMISDebugStore2;
  }()
);
var store = new AMISDebugStore();
var ComponentInfo = {};
var LogView = observer(function(_a3) {
  var _b3;
  var store2 = _a3.store;
  var logs = store2.logs;
  var ellipsisThreshold = (_b3 = store2.ellipsisThreshold) !== null && _b3 !== void 0 ? _b3 : 50;
  return import_react.default.createElement(import_react.default.Fragment, null, logs.map(function(log, index) {
    return import_react.default.createElement(
      "div",
      { className: "AMISDebug-logLine", key: "log-".concat(index) },
      import_react.default.createElement(
        "div",
        { className: "AMISDebug-logLineMsg" },
        "[",
        log.cat,
        "] ",
        log.msg
      ),
      log.ext ? import_react.default.createElement(
        import_react.default.Suspense,
        { fallback: import_react.default.createElement("div", null, "Loading...") },
        import_react.default.createElement(JsonView, { name: null, theme: "monokai", src: JSON.parse(log.ext), collapsed: true, enableClipboard: false, displayDataTypes: false, collapseStringsAfterLength: ellipsisThreshold, iconStyle: "square" })
      ) : null
    );
  }));
});
var AMISDebug = observer(function(_a3) {
  var e_1, _b3;
  var _c, _d;
  var store2 = _a3.store;
  var activeId = store2.activeId;
  var activeComponentInspect = ComponentInfo[activeId];
  var start = ((_d = (_c = activeComponentInspect === null || activeComponentInspect === void 0 ? void 0 : activeComponentInspect.component) === null || _c === void 0 ? void 0 : _c.props) === null || _d === void 0 ? void 0 : _d.data) || {};
  var stacks = [start];
  while (Object.getPrototypeOf(start) !== Object.prototype) {
    var superData = Object.getPrototypeOf(start);
    if (Object.prototype.toString.call(superData) !== "[object Object]") {
      break;
    }
    stacks.push(superData);
    start = superData;
  }
  var stackDataView = [];
  if (Object.keys(stacks[0]).length || stacks.length > 1) {
    var level = 0;
    try {
      for (var stacks_1 = __values(stacks), stacks_1_1 = stacks_1.next(); !stacks_1_1.done; stacks_1_1 = stacks_1.next()) {
        var stack = stacks_1_1.value;
        stackDataView.push(import_react.default.createElement(
          "div",
          { key: "data-".concat(level) },
          import_react.default.createElement(
            "h3",
            null,
            "Data Level-",
            level
          ),
          import_react.default.createElement(
            import_react.default.Suspense,
            { fallback: import_react.default.createElement("div", null, "Loading...") },
            import_react.default.createElement(JsonView, { key: "dataview-".concat(stack), name: null, theme: "monokai", src: stack, collapsed: level === 0 ? false : true, enableClipboard: false, displayDataTypes: false, iconStyle: "square" })
          )
        ));
        level += 1;
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (stacks_1_1 && !stacks_1_1.done && (_b3 = stacks_1.return))
          _b3.call(stacks_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  }
  var panelRef = (0, import_react.useRef)(null);
  var _e = __read((0, import_react.useState)(false), 2), isResizing = _e[0], setResizing = _e[1];
  var _f = __read((0, import_react.useState)(0), 2), startX = _f[0], setStartX = _f[1];
  var _g = __read((0, import_react.useState)(0), 2), panelWidth = _g[0], setPanelWidth = _g[1];
  (0, import_react.useEffect)(function() {
    var handleMouseUp = function() {
      setResizing(false);
    };
    var handleMouseMove2 = function(e) {
      if (!isResizing) {
        return;
      }
      var xOffset = store2.position === "right" ? e.clientX - startX : startX - e.clientX;
      var panel = panelRef.current;
      var targetWidth = Math.max(200, panelWidth - xOffset);
      panel.style.width = targetWidth + "px";
      if (e.stopPropagation)
        e.stopPropagation();
      if (e.preventDefault)
        e.preventDefault();
      e.cancelBubble = true;
      return false;
    };
    if (isResizing) {
      document.addEventListener("mousemove", handleMouseMove2);
      document.addEventListener("mouseup", handleMouseUp);
    }
    return function() {
      if (isResizing) {
        document.removeEventListener("mousemove", handleMouseMove2);
        document.removeEventListener("mouseup", handleMouseUp);
      }
    };
  }, [isResizing]);
  return import_react.default.createElement(
    "div",
    { className: (0, import_classnames.default)("AMISDebug", {
      "is-expanded": store2.isExpanded,
      "is-left": store2.position === "left"
    }), ref: panelRef },
    import_react.default.createElement("div", { className: "AMISDebug-toggle", title: "open debug", onClick: function() {
      store2.isExpanded = true;
    } }, store2.isExpanded ? import_react.default.createElement("i", { className: "fas fa-times" }) : import_react.default.createElement("i", { className: "fas fa-bug" })),
    import_react.default.createElement(
      "div",
      { className: (0, import_classnames.default)("AMISDebug-content") },
      import_react.default.createElement(
        "div",
        { className: "AMISDebug-close", title: "Close", onClick: function() {
          store2.isExpanded = false;
          store2.activeId = "";
          store2.hoverId = "";
        } },
        import_react.default.createElement("i", { className: "fas fa-times" })
      ),
      import_react.default.createElement("div", { className: "AMISDebug-resize", onMouseDown: function(event) {
        setStartX(event.clientX);
        setPanelWidth(parseInt(getComputedStyle(panelRef.current).getPropertyValue("width"), 10));
        setResizing(true);
      } }),
      import_react.default.createElement(
        "div",
        { className: "AMISDebug-tab" },
        import_react.default.createElement("button", { className: (0, import_classnames.default)({ active: store2.tab === "log" }), onClick: function() {
          store2.tab = "log";
        } }, "Log"),
        import_react.default.createElement("button", { className: (0, import_classnames.default)({ active: store2.tab === "inspect" }), onClick: function() {
          store2.tab = "inspect";
        } }, "Inspect")
      ),
      import_react.default.createElement("div", { className: "AMISDebug-changePosition" }, store2.position === "right" ? import_react.default.createElement("i", { className: "fas fa-chevron-left", title: "move to left", onClick: function() {
        store2.position = "left";
      } }) : import_react.default.createElement("i", { className: "fas fa-chevron-right", title: "move to right", onClick: function() {
        store2.position = "right";
      } })),
      store2.tab === "log" ? import_react.default.createElement(
        "div",
        { className: "AMISDebug-log" },
        import_react.default.createElement("button", { onClick: function() {
          store2.logs = [];
        } }, "Clear Log"),
        import_react.default.createElement(LogView, { store: store2 })
      ) : null,
      store2.tab === "inspect" ? import_react.default.createElement("div", { className: "AMISDebug-inspect" }, activeId ? import_react.default.createElement(
        import_react.default.Fragment,
        null,
        import_react.default.createElement(
          "h3",
          null,
          "Component:",
          " ",
          import_react.default.createElement("span", { className: "primary" }, activeComponentInspect.name)
        ),
        stackDataView
      ) : "Click component to display inspect") : null
    )
  );
});
function handleMouseMove(e) {
  if (!store.isExpanded) {
    return;
  }
  var dom = e.target;
  var target = dom.closest("[data-debug-id]");
  if (target) {
    store.hoverId = target.getAttribute("data-debug-id");
  }
}
function handleMouseclick(e) {
  if (!store.isExpanded) {
    return;
  }
  var dom = e.target;
  var target = dom.closest("[data-debug-id]");
  if (target && !target.closest(".AMISDebug")) {
    store.activeId = target.getAttribute("data-debug-id");
    store.tab = "inspect";
  }
}
var amisHoverBox = document.createElement("div");
amisHoverBox.className = "AMISDebug-hoverBox";
var amisActiveBox = document.createElement("div");
amisActiveBox.className = "AMISDebug-activeBox";
autorun(function() {
  var hoverId = store.hoverId;
  var hoverElement = document.querySelector('[data-debug-id="'.concat(hoverId, '"]'));
  if (hoverElement) {
    var offset2 = position(hoverElement, document.body);
    amisHoverBox.style.top = "".concat(offset2.top, "px");
    amisHoverBox.style.left = "".concat(offset2.left, "px");
    amisHoverBox.style.width = "".concat(offset2.width, "px");
    amisHoverBox.style.height = "".concat(offset2.height, "px");
  } else {
    amisHoverBox.style.top = "-999999px";
  }
});
autorun(function() {
  var activeId = store.activeId;
  var activeElement = document.querySelector('[data-debug-id="'.concat(activeId, '"]'));
  if (activeElement) {
    var offset2 = position(activeElement, document.body);
    amisActiveBox.style.top = "".concat(offset2.top, "px");
    amisActiveBox.style.left = "".concat(offset2.left, "px");
    amisActiveBox.style.width = "".concat(offset2.width, "px");
    amisActiveBox.style.height = "".concat(offset2.height, "px");
  } else {
    amisActiveBox.style.top = "-999999px";
  }
});
var isEnabled = false;
var unmount;
function enableDebug() {
  if (isEnabled) {
    return;
  }
  isEnabled = true;
  var amisDebugElement = document.createElement("div");
  document.body.appendChild(amisDebugElement);
  var element = import_react.default.createElement(AMISDebug, { store });
  (0, import_react_dom.render)(element, amisDebugElement);
  unmount = function() {
    (0, import_react_dom.unmountComponentAtNode)(amisDebugElement);
    document.body.removeChild(amisDebugElement);
  };
  document.body.appendChild(amisHoverBox);
  document.body.appendChild(amisActiveBox);
  document.addEventListener("mousemove", handleMouseMove);
  document.addEventListener("click", handleMouseclick);
}
function disableDebug() {
  if (!isEnabled) {
    return;
  }
  isEnabled = false;
  unmount === null || unmount === void 0 ? void 0 : unmount();
  document.body.removeChild(amisHoverBox);
  document.body.removeChild(amisActiveBox);
  document.removeEventListener("mousemove", handleMouseMove);
  document.removeEventListener("click", handleMouseclick);
}
var DebugWrapper = (
  /** @class */
  function(_super) {
    __extends(DebugWrapper2, _super);
    function DebugWrapper2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.debugId = uuidv42();
      return _this;
    }
    DebugWrapper2.prototype.componentDidMount = function() {
      var root = (0, import_react_dom.findDOMNode)(this);
      if (!root) {
        return;
      }
      var renderer = this.props.renderer;
      root.setAttribute("data-debug-id", this.debugId);
      ComponentInfo[this.debugId] = {
        name: renderer.name,
        component: this.props.children
      };
    };
    DebugWrapper2.prototype.componentDidUpdate = function(prevProps) {
      var renderer = this.props.renderer;
      if (!ComponentInfo[this.debugId]) {
        return;
      }
      ComponentInfo[this.debugId] = {
        name: renderer.name,
        component: this.props.children
      };
    };
    DebugWrapper2.prototype.componentWillUnmount = function() {
      delete ComponentInfo[this.debugId];
    };
    DebugWrapper2.prototype.render = function() {
      return this.props.children;
    };
    return DebugWrapper2;
  }(import_react.Component)
);
function debug(cat, msg, ext) {
  if (!isEnabled) {
    return;
  }
  console.groupCollapsed("[amis debug]", msg);
  console.debug(ext);
  console.groupEnd();
  var log = {
    cat,
    level: "debug",
    msg,
    ext: JSON.stringify(ext)
  };
  store.logs.push(log);
}
function warning(cat, msg, ext) {
  if (!isEnabled) {
    return;
  }
  var log = {
    cat,
    level: "warn",
    msg,
    ext: JSON.stringify(ext)
  };
  console.groupCollapsed("amis debug", msg);
  console.trace(log);
  console.groupEnd();
  store.logs.push(log);
}
function traceProps(props, prevProps, componentName) {
  console.log(componentName, Object.keys(props).map(function(key) {
    if (props[key] !== prevProps[key]) {
      if (key === "data") {
        return "data[".concat(Object.keys(props[key]).map(function(item) {
          if (props[key][item] !== prevProps[key][item]) {
            return "".concat(item);
          }
          return "";
        }).filter(function(item) {
          return item;
        }).join(", "), "]");
      }
      return key;
    }
    return "";
  }).filter(function(item) {
    return item;
  }));
}

// node_modules/amis-core/esm/utils/api.js
var import_omit = __toESM(require_omit());
init_moment();
var import_isPlainObject8 = __toESM(require_isPlainObject());
var rSchema = /(?:^|raw\:)(get|post|put|delete|patch|options|head|jsonp|js):/i;
var apiCaches = [];
var isIE = !!document.documentMode;
function normalizeApi(api, defaultMethod) {
  if (defaultMethod === void 0) {
    defaultMethod = "get";
  }
  if (typeof api === "string") {
    var method = rSchema.test(api) ? RegExp.$1 : "";
    method && (api = api.replace(method + ":", ""));
    api = {
      method: method || defaultMethod,
      url: api
    };
  } else {
    api = __assign({}, api);
  }
  api.url = typeof api.url === "string" ? api.url.trim() : api.url;
  return api;
}
function buildApi(api, data, options) {
  if (options === void 0) {
    options = {};
  }
  api = normalizeApi(api, options.method);
  var autoAppend = options.autoAppend, ignoreData = options.ignoreData, rest = __rest(options, ["autoAppend", "ignoreData"]);
  api.config = __assign({}, rest);
  api.method = (api.method || options.method || "get").toLowerCase();
  if (api.headers) {
    api.headers = dataMapping(api.headers, data, void 0, false);
  }
  if (api.requestAdaptor && typeof api.requestAdaptor === "string") {
    api.requestAdaptor = str2AsyncFunction(api.requestAdaptor, "api", "context");
  }
  if (api.adaptor && typeof api.adaptor === "string") {
    api.adaptor = str2AsyncFunction(api.adaptor, "payload", "response", "api", "context");
  }
  if (!data) {
    return api;
  } else if (data instanceof FormData || data instanceof Blob || data instanceof ArrayBuffer) {
    api.data = data;
    return api;
  }
  var raw = api.url = api.url || "";
  var ast = void 0;
  try {
    ast = memoryParse(api.url);
  } catch (e) {
    console.warn("api 配置语法出错：".concat(e));
    return api;
  }
  var url = ast.body.map(function(item, index) {
    return item.type === "raw" ? item.value : "__expression__".concat(index, "__");
  }).join("");
  var idx = url.indexOf("?");
  var replaceExpression2 = function(fragment, defaultFilter, defVal) {
    if (defaultFilter === void 0) {
      defaultFilter = "url_encode";
    }
    if (defVal === void 0) {
      defVal = void 0;
    }
    return fragment.replace(/__expression__(\d+)__/g, function(_, index) {
      var _a3;
      return (_a3 = evaluate(ast.body[index], data, {
        defaultFilter
      })) !== null && _a3 !== void 0 ? _a3 : defVal;
    });
  };
  var queryStringify = function(query2) {
    return qsstringify(query2, (api === null || api === void 0 ? void 0 : api.filterEmptyQuery) ? {
      filter: function(key, value) {
        return value === "" ? void 0 : value;
      }
    } : void 0);
  };
  var attachDataToQuery = function(apiObject, ctx, merge2) {
    var idx2 = apiObject.url.indexOf("?");
    if (~idx2) {
      var params2 = apiObject.query = __assign(__assign(__assign({}, qsparse(apiObject.url.substring(idx2 + 1))), apiObject.query), ctx);
      apiObject.url = apiObject.url.substring(0, idx2) + "?" + queryStringify(params2);
    } else {
      apiObject.query = __assign(__assign({}, apiObject.query), ctx);
      var query2 = queryStringify(merge2 ? apiObject.query : ctx);
      if (query2) {
        apiObject.url = "".concat(apiObject.url, "?").concat(query2);
      }
    }
    return apiObject;
  };
  if (~idx) {
    var hashIdx = url.indexOf("#");
    var params = qsparse(url.substring(idx + 1, ~hashIdx && hashIdx > idx ? hashIdx : void 0));
    JSONTraverse(params, function(value, key, host) {
      var _a3;
      if (typeof value === "string" && /^__expression__(\d+)__$/.test(value)) {
        host[key] = (_a3 = evaluate(ast.body[RegExp.$1].body, data)) !== null && _a3 !== void 0 ? _a3 : "";
      } else if (typeof value === "string") {
        host[key] = replaceExpression2(host[key], "raw", "");
      }
    });
    var left = replaceExpression2(url.substring(0, idx), "raw", "");
    Object.assign(params, api.query);
    api.url = left + (~left.indexOf("?") ? "&" : "?") + queryStringify(api.query = dataMapping(params, data, void 0, api.convertKeyToPath)) + (~hashIdx && hashIdx > idx ? replaceExpression2(url.substring(hashIdx)) : "");
  } else {
    api.url = replaceExpression2(url, "raw", "");
  }
  if (ignoreData) {
    return api;
  }
  var hasCustomData = api.data;
  if (api.data) {
    api.body = api.data = dataMapping(api.data, data, void 0, api.convertKeyToPath);
  } else if (api.method === "post" || api.method === "put" || api.method === "patch") {
    api.body = api.data = data;
  }
  if (api.query) {
    api.query = dataMapping(api.query, data, void 0, api.convertKeyToPath);
  }
  if (api.method === "get" || api.method === "jsonp" || api.method === "js") {
    if (!api.data && (!~raw.indexOf("$") && autoAppend || api.forceAppendDataToQuery)) {
      api.data = data;
      api.query = __assign(__assign({}, api.query), data);
    } else if (api.attachDataToQuery === false && api.data && (!~raw.indexOf("$") && autoAppend || api.forceAppendDataToQuery)) {
      api = attachDataToQuery(api, data, false);
    }
    if (api.data && api.attachDataToQuery !== false) {
      api = attachDataToQuery(api, api.data, true);
      delete api.data;
    }
  } else if (api.method) {
    var idx_1 = api.url.indexOf("?");
    if (~idx_1) {
      var params = api.query = __assign(__assign({}, qsparse(api.url.substring(idx_1 + 1))), api.query);
      api.url = api.url.substring(0, idx_1) + "?" + queryStringify(params);
    } else {
      var query = queryStringify(api.query);
      if (query) {
        api.url = "".concat(api.url, "?").concat(query);
      }
    }
  }
  if (api.graphql) {
    if (api.method === "get") {
      api.query = api.data = __assign(__assign({}, api.query), { query: api.graphql });
    } else if (api.method === "post" || api.method === "put" || api.method === "patch") {
      api.body = api.data = {
        query: api.graphql,
        operationName: api.operationName,
        variables: cloneObject(api.data)
      };
    }
  } else if (api.jsonql) {
    api.method = "post";
    api.jsonql = dataMapping(
      api.jsonql,
      /** 需要上层数据域的内容 */
      extendObject(data, __assign(__assign({}, api.query), data), false),
      void 0,
      false,
      true
    );
    api.body = api.data = hasCustomData && api.jsonql ? {
      data: api.data,
      jsonql: api.jsonql
    } : api.jsonql;
    if (api.forceAppendDataToQuery) {
      api = attachDataToQuery(api, data, true);
    }
  }
  return api;
}
function str2function(contents) {
  var args = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    args[_i - 1] = arguments[_i];
  }
  try {
    var fn = new (Function.bind.apply(Function, __spreadArray(__spreadArray([void 0], __read(args), false), [contents], false)))();
    return fn;
  } catch (e) {
    console.warn(e);
    return null;
  }
}
var AsyncFunction = Object.getPrototypeOf(function() {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_a3) {
      return [
        2
        /*return*/
      ];
    });
  });
}).constructor;
function str2AsyncFunction(contents) {
  var args = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    args[_i - 1] = arguments[_i];
  }
  try {
    var fn = new (AsyncFunction.bind.apply(AsyncFunction, __spreadArray(__spreadArray([void 0], __read(args), false), [contents], false)))();
    return fn;
  } catch (e) {
    console.warn(e);
    return null;
  }
}
function callStrFunction(fn, argNames) {
  var args = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    args[_i - 2] = arguments[_i];
  }
  if (typeof fn === "function") {
    return fn.apply(this, args);
  } else if (typeof fn === "string" && fn) {
    var func = str2function.apply(void 0, __spreadArray([fn], __read(argNames), false));
    return func === null || func === void 0 ? void 0 : func.apply(this, args);
  }
}
function responseAdaptor(ret, api) {
  var data = ret.data;
  var hasStatusField = true;
  if (!data) {
    throw new Error("Response is empty");
  }
  if (typeof data === "string") {
    var contentType = ret.headers["content-type"] || "";
    if (ret.headers && contentType.startsWith("text/") && !contentType.includes("markdown") && api.responseType !== "blob") {
      try {
        data = JSON.parse(data);
        if (typeof data === "undefined") {
          throw new Error("Response should be JSON");
        }
      } catch (e) {
        var responseBrief = typeof data === "string" ? escapeHtml2(data.substring(0, 100)) : "";
        throw new Error("Response should be JSON\n ".concat(responseBrief));
      }
    } else {
      if (api.responseType === "blob") {
        throw new Error('Should have "Content-Disposition" in Header');
      } else if (!contentType.includes("markdown")) {
        throw new Error('Content is wrong content-type:"'.concat(contentType, '" content: ').concat(escapeHtml2(data.substring(0, 100))));
      }
    }
  }
  if (data.hasOwnProperty("errorCode")) {
    data.status = data.errorCode;
    data.msg = data.errorMessage || data.errorMsg;
  } else if (data.hasOwnProperty("errno")) {
    data.status = data.errno;
    data.msg = data.errmsg || data.errstr || data.msg;
  } else if (data.hasOwnProperty("no")) {
    data.status = data.no;
    data.msg = data.error || data.msg;
  } else if (data.hasOwnProperty("error")) {
    if (typeof data.error === "object" && data.error.hasOwnProperty("code")) {
      data.status = data.error.code;
      data.msg = data.error.message;
    } else {
      data.status = data.error;
      data.msg = data.errmsg || data.msg;
    }
  }
  if (!data.hasOwnProperty("status")) {
    hasStatusField = false;
  }
  var payload = {
    ok: hasStatusField === false || data.status == 0,
    status: hasStatusField === false ? 0 : data.status,
    msg: data.msg || data.message,
    defaultMsg: data.defaultMsg,
    msgTimeout: data.msgTimeout,
    data: !data.data && !hasStatusField ? data : data.data
    // 兼容直接返回数据的情况
  };
  if (data && data.type) {
    payload.data = data;
  }
  if (payload.status == 422) {
    payload.errors = data.errors;
  }
  debug("api", "response", payload);
  if (api.responseData && (payload.ok || !isEmpty2(payload.data))) {
    debug("api", "before dataMapping", payload.data);
    var responseData = dataMapping(api.responseData, createObject2({ api }, normalizeApiResponseData(payload.data)), void 0, api.convertKeyToPath);
    debug("api", "after dataMapping", responseData);
    payload.data = responseData;
  }
  return payload;
}
function wrapFetcher(fn, tracker) {
  if (fn._wrappedFetcher) {
    return fn;
  }
  var wrappedFetcher = function(api, data, options) {
    var _a3, _b3, _c;
    return __awaiter(this, void 0, void 0, function() {
      var apiCache, timeStamp;
      return __generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            api = buildApi(api, data, options);
            api.context = data;
            if (!api.requestAdaptor)
              return [3, 2];
            debug("api", "before requestAdaptor", api);
            return [4, api.requestAdaptor(api, data)];
          case 1:
            api = _d.sent() || api;
            debug("api", "after requestAdaptor", api);
            _d.label = 2;
          case 2:
            if (api.data && (api.data instanceof FormData || hasFile(api.data) || api.dataType === "form-data")) {
              api.data = api.data instanceof FormData ? api.data : object2formData(api.data, api.qsOptions);
            } else if (api.data && typeof api.data !== "string" && api.dataType === "form") {
              api.data = qsstringify(api.data, api.qsOptions);
              api.headers = api.headers || (api.headers = {});
              api.headers["Content-Type"] = "application/x-www-form-urlencoded";
            } else if (api.data && typeof api.data !== "string" && api.dataType === "json") {
              api.data = JSON.stringify(api.data);
              api.headers = api.headers || (api.headers = {});
              api.headers["Content-Type"] = "application/json";
            }
            if (api.mockResponse) {
              return [2, wrapAdaptor(Promise.resolve(api.mockResponse), api, data)];
            }
            if (!isValidApi(api.url)) {
              throw new Error("invalid api url:".concat(api.url));
            }
            debug("api", "request api", api);
            tracker === null || tracker === void 0 ? void 0 : tracker({ eventType: "api", eventData: (0, import_omit.default)(api, ["config", "data", "body"]) }, api.data);
            if (((_a3 = api.method) === null || _a3 === void 0 ? void 0 : _a3.toLocaleLowerCase()) === "jsonp") {
              return [2, wrapAdaptor(jsonpFetcher(api), api, data)];
            }
            if (((_b3 = api.method) === null || _b3 === void 0 ? void 0 : _b3.toLocaleLowerCase()) === "js") {
              return [2, wrapAdaptor(jsFetcher(fn, api), api, data)];
            }
            if (typeof api.cache === "number" && api.cache > 0) {
              apiCache = getApiCache(api);
              return [2, wrapAdaptor(apiCache ? apiCache.cachedPromise : setApiCache(api, fn(api)), api, data)];
            }
            if (isIE && api && ((_c = api.method) === null || _c === void 0 ? void 0 : _c.toLocaleLowerCase()) === "get") {
              timeStamp = "_t=".concat(Date.now());
              if (api.url.indexOf("?") === -1) {
                api.url = api.url + "?".concat(timeStamp);
              } else {
                api.url = api.url + "&".concat(timeStamp);
              }
            }
            return [2, wrapAdaptor(fn(api), api, data)];
        }
      });
    });
  };
  wrappedFetcher._wrappedFetcher = true;
  return wrappedFetcher;
}
function wrapAdaptor(promise, api, context) {
  var _this = this;
  var adaptor = api.adaptor;
  return adaptor ? promise.then(function(response) {
    return __awaiter(_this, void 0, void 0, function() {
      var result;
      return __generator(this, function(_a3) {
        switch (_a3.label) {
          case 0:
            debug("api", "before adaptor data", response.data);
            result = adaptor(response.data, response, api, context);
            if (!(result === null || result === void 0 ? void 0 : result.then))
              return [3, 2];
            return [4, result];
          case 1:
            result = _a3.sent();
            _a3.label = 2;
          case 2:
            debug("api", "after adaptor data", result);
            return [2, __assign(__assign({}, response), { data: result })];
        }
      });
    });
  }).then(function(ret) {
    return responseAdaptor(ret, api);
  }) : promise.then(function(ret) {
    return responseAdaptor(ret, api);
  });
}
function jsFetcher(fetcher, api) {
  return new Promise(function(resolve, reject) {
    api.method = "get";
    fetcher(api).then(function(response) {
      if (typeof response.data === "string") {
        var result = new Function("api", response.data)(api);
        resolve({
          status: 200,
          headers: {},
          data: {
            status: 0,
            msg: "",
            data: result
          }
        });
      } else {
        reject("must return string: " + response.data);
      }
    });
  });
}
function jsonpFetcher(api) {
  return new Promise(function(resolve, reject) {
    var _a3;
    var script = document.createElement("script");
    var src = api.url;
    script.async = true;
    function remove() {
      if (script) {
        script.onload = script.onreadystatechange = script.onerror = null;
        if (script.parentNode) {
          script.parentNode.removeChild(script);
        }
        script = null;
      }
    }
    var jsonp = ((_a3 = api.query) === null || _a3 === void 0 ? void 0 : _a3.callback) || "axiosJsonpCallback" + uuid();
    var old = window[jsonp];
    window[jsonp] = function(responseData) {
      window[jsonp] = old;
      var response = {
        data: responseData,
        status: 200,
        headers: {}
      };
      resolve(response);
    };
    var additionalParams = {
      _: (/* @__PURE__ */ new Date()).getTime(),
      _callback: jsonp
    };
    src += (src.indexOf("?") >= 0 ? "&" : "?") + qsstringify(additionalParams);
    script.onload = script.onreadystatechange = function() {
      if (!script.readyState || /loaded|complete/.test(script.readyState)) {
        remove();
      }
    };
    script.onerror = function() {
      remove();
      var errResponse = {
        status: 0,
        headers: {}
      };
      reject(errResponse);
    };
    script.src = src;
    document.head.appendChild(script);
  });
}
function isApiOutdatedWithData(prevApi, nextApi, prevData, nextData) {
  if (!nextApi) {
    return false;
  } else if (!prevApi) {
    return true;
  }
  return isObjectShallowModified(buildApi(normalizeApi(prevApi), prevData), buildApi(normalizeApi(nextApi), nextData));
}
function isApiOutdated(prevApi, nextApi, prevData, nextData) {
  var _a3;
  if (!nextApi) {
    return false;
  }
  if (prevApi === void 0 && !nextApi !== void 0) {
    return true;
  }
  nextApi = normalizeApi(nextApi);
  prevApi = prevApi ? normalizeApi(prevApi) : prevApi;
  if (nextApi.autoRefresh === false) {
    return false;
  }
  if (prevApi && prevApi.url !== nextApi.url || !prevApi) {
    return !!(isValidApi(nextApi.url) && (!nextApi.sendOn || evalExpression(nextApi.sendOn, nextData)));
  }
  var trackExpression = (_a3 = nextApi.trackExpression) !== null && _a3 !== void 0 ? _a3 : nextApi.url;
  if (typeof trackExpression !== "string" || !~trackExpression.indexOf("$")) {
    return false;
  }
  var isModified = false;
  if (nextApi.trackExpression || prevApi.trackExpression) {
    isModified = tokenize(prevApi.trackExpression || "", prevData) !== tokenize(nextApi.trackExpression || "", nextData);
  } else {
    prevApi = buildApi(prevApi, prevData, {
      ignoreData: true
    });
    nextApi = buildApi(nextApi, nextData, {
      ignoreData: true
    });
    isModified = prevApi.url !== nextApi.url;
  }
  return !!(isModified && isValidApi(nextApi.url) && (!nextApi.sendOn || evalExpression(nextApi.sendOn, nextData)));
}
function isValidApi(api) {
  if (!api || typeof api !== "string") {
    return false;
  }
  var idx = api.indexOf("://");
  if (~idx && idx + 3 === api.length) {
    return false;
  }
  try {
    api = (~idx ? "" : "schema://domain".concat(api[0] === "/" ? "" : "/")) + api;
    new URL(api);
  } catch (error) {
    return false;
  }
  return true;
}
function isEffectiveApi(api, data, initFetch, initFetchOn) {
  if (!api) {
    return false;
  }
  if (initFetch === false) {
    return false;
  }
  if (initFetchOn && data && !evalExpression(initFetchOn, data)) {
    return false;
  }
  if (typeof api === "string" && api.length) {
    return true;
  } else if (isObject(api) && api.url) {
    if (api.sendOn && data && !evalExpression(api.sendOn, data)) {
      return false;
    }
    return true;
  }
  return false;
}
function isSameApi(apiA, apiB) {
  return apiA.method === apiB.method && apiA.url === apiB.url && !isObjectShallowModified(apiA.data, apiB.data, false);
}
function getApiCache(api) {
  var now = Date.now();
  var result;
  for (var idx = 0, len = apiCaches.length; idx < len; idx++) {
    var apiCache = apiCaches[idx];
    if (now - apiCache.requestTime > apiCache.cache) {
      apiCaches.splice(idx, 1);
      len--;
      idx--;
      continue;
    }
    if (isSameApi(api, apiCache)) {
      result = apiCache;
      break;
    }
  }
  return result;
}
function setApiCache(api, promise) {
  apiCaches.push(__assign(__assign({}, api), { cachedPromise: promise, requestTime: Date.now() }));
  return promise;
}
function clearApiCache() {
  apiCaches.splice(0, apiCaches.length);
}
function normalizeApiResponseData(data) {
  var _a3;
  if (typeof data === "undefined") {
    data = {};
  } else if (!(0, import_isPlainObject8.default)(data)) {
    data = (_a3 = {}, _a3[Array.isArray(data) ? "items" : "result"] = data, _a3);
  }
  return data;
}

// node_modules/amis-core/esm/utils/ColorScale.js
var Color = (
  /** @class */
  function() {
    function Color2(r, g, b, a) {
      if (a === void 0) {
        a = 1;
      }
      this.r = r;
      this.g = g;
      this.b = b;
      this.a = a;
    }
    Color2.prototype.toRGBString = function() {
      return "rgb(".concat(Math.floor(this.r * this.a), ",").concat(Math.floor(this.g * this.a), ",").concat(Math.floor(this.b * this.a), ")");
    };
    Color2.prototype.toRGBAString = function() {
      return "rgba(".concat(this.r, ",").concat(this.g, ",").concat(this.b, ",").concat(this.a, ")");
    };
    Color2.prototype.toHexString = function() {
      return rgbaToHex(this);
    };
    return Color2;
  }()
);
function hexToColor(hex, alpha) {
  if (isValid3DigitHexColor(hex)) {
    hex = convertTo6DigitHexColor(hex);
  }
  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  if (result) {
    return new Color(parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16), alpha);
  } else {
    throw new Error("".concat(hex, " is not a valid hex color."));
  }
}
function isValid3DigitHexColor(colorString) {
  var hexColorRegex = /^#(?:[0-9a-fA-F]{3})$/;
  return colorString.match(hexColorRegex);
}
function convertTo6DigitHexColor(threeDigitHex) {
  return threeDigitHex.substring(1).split("").map(function(char) {
    return char + char;
  }).join("");
}
function componentToHex(c) {
  var hex = c.toString(16);
  return hex.length === 1 ? "0" + hex : hex;
}
function rgbaToHex(color) {
  var r = Math.floor(color.r * color.a);
  var g = Math.floor(color.g * color.a);
  var b = Math.floor(color.b * color.a);
  return "#".concat(componentToHex(r)).concat(componentToHex(g)).concat(componentToHex(b));
}
var ColorScale = (
  /** @class */
  function() {
    function ColorScale2(min, max, colorStops, alpha) {
      var _a3;
      if (alpha === void 0) {
        alpha = 1;
      }
      this.min = isNaN(min) ? 0 : min;
      this.max = isNaN(max) ? 0 : max;
      if (this.min === this.max) {
        this.max = this.min + 1;
      }
      if (this.max < this.min) {
        _a3 = __read([this.min, this.max], 2), this.max = _a3[0], this.min = _a3[1];
      }
      if (colorStops.length < 2) {
        colorStops = ["#FFEF9C", "#FF7127"];
      }
      this.alpha = alpha;
      this.colorStops = colorStops.map(function(colorStop) {
        return hexToColor(colorStop, alpha);
      });
    }
    ColorScale2.prototype.getColor = function(value) {
      var numOfColorStops = this.colorStops.length;
      if (value < this.min)
        return this.colorStops[0];
      if (value > this.max)
        return this.colorStops[numOfColorStops - 1];
      var range2 = this.max - this.min;
      var weight = (value - this.min) / range2;
      var colorStopIndex = Math.max(Math.ceil(weight * (numOfColorStops - 1)), 1);
      var minColor = this.colorStops[colorStopIndex - 1];
      var maxColor = this.colorStops[colorStopIndex];
      weight = weight * (numOfColorStops - 1) - (colorStopIndex - 1);
      var r = Math.floor(weight * maxColor.r + (1 - weight) * minColor.r);
      var g = Math.floor(weight * maxColor.g + (1 - weight) * minColor.g);
      var b = Math.floor(weight * maxColor.b + (1 - weight) * minColor.b);
      return new Color(r, g, b, this.alpha);
    };
    return ColorScale2;
  }()
);

// node_modules/amis-core/esm/utils/DataScope.js
var DATASCHEMA_TYPE_MAP = {
  boolean: "布尔",
  integer: "整数",
  number: "数字",
  string: "文本",
  array: "数组",
  object: "对象"
};
var DataScope = (
  /** @class */
  function() {
    function DataScope2(schemas, id) {
      this.children = [];
      this.schemas = [];
      this.setSchemas(Array.isArray(schemas) ? schemas : [schemas]);
      this.id = id;
    }
    DataScope2.prototype.addChild = function(id, schema) {
      var child = new DataScope2(schema || {
        type: "object",
        properties: {}
      }, id);
      this.children.push(child);
      child.parent = this;
      return child;
    };
    DataScope2.prototype.removeChild = function(idOrScope) {
      var idx = this.children.findIndex(function(item) {
        return typeof idOrScope === "string" ? idOrScope === item.id : item === idOrScope;
      });
      if (~idx) {
        var scope = this.children[idx];
        delete scope.parent;
        this.children.splice(idx, 1);
      }
    };
    DataScope2.prototype.setSchemas = function(schemas) {
      var e_1, _a3;
      this.schemas.splice(0, this.schemas.length);
      try {
        for (var schemas_1 = __values(schemas), schemas_1_1 = schemas_1.next(); !schemas_1_1.done; schemas_1_1 = schemas_1.next()) {
          var schema = schemas_1_1.value;
          if (schema.type !== "object") {
            throw new TypeError("data scope accept only object");
          }
          this.schemas.push(__assign({ $id: guid() }, schema));
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (schemas_1_1 && !schemas_1_1.done && (_a3 = schemas_1.return))
            _a3.call(schemas_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return this;
    };
    DataScope2.prototype.addSchema = function(schema) {
      schema = __assign({ $id: guid() }, schema);
      this.schemas.push(schema);
      return this;
    };
    DataScope2.prototype.removeSchema = function(id) {
      var idx = this.schemas.findIndex(function(schema) {
        return schema.$id === id;
      });
      if (~idx) {
        this.schemas.splice(idx, 1);
      }
      return this;
    };
    DataScope2.prototype.contains = function(scope) {
      var from = scope;
      while (from) {
        if (this === from) {
          return true;
        }
        from = from.parent;
      }
      return false;
    };
    DataScope2.prototype.assignSchema = function(target, schema) {
      var e_2, _a3;
      if (target.type && target.type === schema.type) {
        if (target.type === "array") {
          if (target.items) {
            if (Array.isArray(target.items)) {
              if (schema.items) {
                if (Array.isArray(schema.items)) {
                  return schema.items;
                } else {
                  return __assign(__assign({}, target), { items: __spreadArray(__spreadArray([], __read(target.items), false), [schema.items], false) });
                }
              } else {
                return __assign(__assign({}, target), schema);
              }
            } else {
              return __assign(__assign({}, target), { items: this.assignSchema(target.items, schema.items) });
            }
          } else {
            return schema;
          }
        } else if (target.type === "object" && target.properties) {
          var properties = {};
          try {
            for (var _b3 = __values(Array.from(new Set(__spreadArray(__spreadArray([], __read(Object.keys(target.properties)), false), __read(Object.keys(schema.properties)), false)))), _c = _b3.next(); !_c.done; _c = _b3.next()) {
              var key = _c.value;
              var value = target.properties[key];
              if (value) {
                properties[key] = schema.properties[key] ? this.assignSchema(value, schema.properties[key]) : value;
              } else {
                properties[key] = schema.properties[key];
              }
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a3 = _b3.return))
                _a3.call(_b3);
            } finally {
              if (e_2)
                throw e_2.error;
            }
          }
          return __assign(__assign({}, target), { properties });
        } else {
          return schema;
        }
      } else {
        if (Array.isArray(target.oneOf)) {
          return __assign(__assign({}, target), { oneOf: __spreadArray(__spreadArray([], __read(target.oneOf), false), [schema], false) });
        } else {
          return __assign(__assign({}, target), { oneOf: [target, schema] });
        }
      }
    };
    DataScope2.prototype.getMergedSchema = function() {
      var _this = this;
      var mergedSchema = {
        type: "object",
        properties: {}
      };
      this.schemas.forEach(function(schema) {
        var properties = schema.properties || {};
        Object.keys(properties).forEach(function(key) {
          var value = properties[key];
          if (mergedSchema.properties[key]) {
            mergedSchema.properties[key] = _this.assignSchema(mergedSchema.properties[key], value);
          } else {
            mergedSchema.properties[key] = value;
          }
        });
      });
      return mergedSchema;
    };
    DataScope2.prototype.buildOptions = function(options, schema, path, key, isMember) {
      var _this = this;
      var _a3, _b3, _c;
      if (path === void 0) {
        path = { label: "", value: "" };
      }
      if (key === void 0) {
        key = "";
      }
      var option = {
        label: schema.title || key,
        value: schema.title === "成员" ? "" : path.value,
        path: schema.title === "成员" ? "" : path.label,
        type: schema.type,
        tag: (_b3 = (_a3 = schema.typeLabel) !== null && _a3 !== void 0 ? _a3 : DATASCHEMA_TYPE_MAP[schema.type]) !== null && _b3 !== void 0 ? _b3 : schema.type,
        description: schema.description,
        isMember,
        disabled: schema.title === "成员"
      };
      if (schema.group) {
        var index = options.findIndex(function(item) {
          return item.label === schema.group;
        });
        if (~index) {
          options[index].children.push(option);
        } else {
          options.push({
            label: schema.group,
            value: "",
            children: [option]
          });
        }
      } else {
        options.push(option);
      }
      if (schema.type === "object" && schema.properties) {
        option.children = [];
        var keys = Object.keys(schema.properties);
        keys.forEach(function(key2) {
          var _a4;
          var child = schema.properties[key2];
          _this.buildOptions(option.children, child, {
            label: path.label + (path.label ? "." : "") + ((_a4 = child.title) !== null && _a4 !== void 0 ? _a4 : key2),
            value: path.value + (path.value ? "." : "") + key2
          }, key2, schema.title === "成员");
        });
      } else if (schema.type === "array" && ((_c = schema.items) === null || _c === void 0 ? void 0 : _c.properties)) {
        option.children = [];
        this.buildOptions(option.children, __assign(__assign({ title: "成员" }, schema.items), { disabled: true }), {
          label: path.label,
          value: path.value
        }, "items", schema.title === "成员");
        option.children = mapTree(option.children, function(item) {
          return __assign(
            {},
            item
            // disabled: true
          );
        });
      }
    };
    DataScope2.prototype.getDataPropsAsOptions = function() {
      var variables = [];
      this.buildOptions(variables, this.getMergedSchema());
      return variables[0].children;
    };
    DataScope2.prototype.getSchemaByPath = function(path) {
      var e_3, _a3;
      var parts = keyToPath(path);
      try {
        for (var _b3 = __values(this.schemas), _c = _b3.next(); !_c.done; _c = _b3.next()) {
          var schema = _c.value;
          var result = parts.reduce(function(schema2, key) {
            if (schema2 && schema2.type === "object" && schema2.properties) {
              return schema2.properties[key];
            }
            return null;
          }, schema);
          if (result) {
            return result;
          }
        }
      } catch (e_3_1) {
        e_3 = { error: e_3_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a3 = _b3.return))
            _a3.call(_b3);
        } finally {
          if (e_3)
            throw e_3.error;
        }
      }
      return null;
    };
    DataScope2.prototype.getSchemaById = function(id) {
      var _a3;
      return (_a3 = this.schemas) === null || _a3 === void 0 ? void 0 : _a3.find(function(item) {
        return item.$id === id;
      });
    };
    return DataScope2;
  }()
);

// node_modules/amis-core/esm/utils/DataSchema.js
var DataSchema = (
  /** @class */
  function() {
    function DataSchema2(schema) {
      this.idMap = {};
      this.root = new DataScope(schema, "root");
      this.idMap["root"] = this.root;
      this.current = this.root;
    }
    DataSchema2.prototype.setSchema = function(schemas) {
      this.current.setSchemas(schemas);
      return this;
    };
    DataSchema2.prototype.addSchema = function(schema) {
      this.current.addSchema(schema);
      return this;
    };
    DataSchema2.prototype.removeSchema = function(id) {
      this.current.removeSchema(id);
      delete this.idMap[id];
      return this;
    };
    DataSchema2.prototype.getSchemas = function() {
      var schemas = [];
      var current = this.current;
      while (current) {
        schemas.push.apply(schemas, __spreadArray([], __read(current.schemas), false));
        current = current.parent;
      }
      return schemas;
    };
    DataSchema2.prototype.addScope = function(schema, id) {
      if (id === void 0) {
        id = guid();
      }
      if (this.idMap[id]) {
        throw new Error("scope id `" + id + "` already exists");
      }
      this.current = this.current.addChild(id, schema);
      this.idMap[id] = this.current;
      return this;
    };
    DataSchema2.prototype.removeScope = function(idOrScope) {
      var _a3;
      var scope = this.getScope(idOrScope);
      if (!scope.parent) {
        throw new Error("cannot remove root scope");
      }
      if (scope.contains(this.current)) {
        this.current = scope.parent;
      }
      (_a3 = scope.parent) === null || _a3 === void 0 ? void 0 : _a3.removeChild(scope);
      delete this.idMap[scope.id];
      return this;
    };
    DataSchema2.prototype.hasScope = function(idOrScope) {
      var id = typeof idOrScope === "string" ? idOrScope : idOrScope.id;
      var scope = this.idMap[id];
      return !!scope;
    };
    DataSchema2.prototype.getScope = function(idOrScope) {
      var id = typeof idOrScope === "string" ? idOrScope : idOrScope.id;
      return this.idMap[id];
    };
    DataSchema2.prototype.switchToRoot = function() {
      this.current = this.root;
      return this;
    };
    DataSchema2.prototype.switchTo = function(idOrScope) {
      var scope = this.getScope(idOrScope);
      this.current = scope;
      return this;
    };
    DataSchema2.prototype.pushVariable = function(current, variables) {
      if (current.tag) {
        variables.push({
          label: current.tag,
          children: current.getDataPropsAsOptions()
        });
      } else {
        variables.push.apply(variables, __spreadArray([], __read(current.getDataPropsAsOptions()), false));
      }
    };
    DataSchema2.prototype.getDataPropsAsOptions = function() {
      var _a3;
      var variables = [];
      var current = this.current;
      while (current) {
        if (current.group) {
          var subVars = [];
          this.pushVariable(current, subVars);
          var index = variables.findIndex(function(item) {
            return item.label === (current === null || current === void 0 ? void 0 : current.group);
          });
          if (~index) {
            (_a3 = variables[index].children).push.apply(_a3, __spreadArray([], __read(subVars), false));
          } else {
            variables.push({
              label: current.group,
              children: subVars
            });
          }
        } else {
          this.pushVariable(current, variables);
        }
        current = current.parent;
      }
      return variables;
    };
    DataSchema2.prototype.getSchemaByPath = function(path) {
      var current = this.current;
      while (current) {
        var schema = current.getSchemaByPath(path);
        if (schema) {
          return schema;
        }
        current = current.parent;
      }
      return null;
    };
    return DataSchema2;
  }()
);

// node_modules/amis-core/esm/utils/errors.js
var ServerError = (
  /** @class */
  function(_super) {
    __extends(ServerError4, _super);
    function ServerError4(msg, response) {
      var _this = _super.call(this, msg) || this;
      _this.type = "ServerError";
      _this.response = response;
      return _this;
    }
    return ServerError4;
  }(Error)
);

// node_modules/amis-core/esm/utils/image.js
var import_memoize = __toESM(require_memoize());
var toDataURL = (0, import_memoize.default)(function(url) {
  return new Promise(function(resolve, reject) {
    var xhr = new XMLHttpRequest();
    xhr.onload = function() {
      var reader = new FileReader();
      reader.onloadend = function() {
        resolve(reader.result);
      };
      reader.readAsDataURL(xhr.response);
    };
    xhr.onerror = reject;
    xhr.open("GET", url);
    xhr.responseType = "blob";
    xhr.send();
  });
});
var getImageDimensions = (0, import_memoize.default)(function(url) {
  return new Promise(function(resolved, rejected) {
    var i = new Image();
    i.onerror = rejected;
    i.onload = function() {
      resolved({ width: i.width, height: i.height });
    };
    i.src = url;
  });
});

// node_modules/amis-core/esm/actions/Action.js
var import_omit2 = __toESM(require_omit());
init_moment();
var LoopStatus;
(function(LoopStatus2) {
  LoopStatus2[LoopStatus2["NORMAL"] = 0] = "NORMAL";
  LoopStatus2[LoopStatus2["BREAK"] = 1] = "BREAK";
  LoopStatus2[LoopStatus2["CONTINUE"] = 2] = "CONTINUE";
})(LoopStatus || (LoopStatus = {}));
var ActionTypeMap = {};
var registerAction = function(type, action) {
  ActionTypeMap[type] = action;
};
var getActionByType = function(type) {
  return ActionTypeMap[type];
};
var getOmitActionProp = function(type) {
  var omitList = [];
  switch (type) {
    case "toast":
      omitList = [
        "msgType",
        "msg",
        "position",
        "closeButton",
        "showIcon",
        "timeout",
        "title"
      ];
      break;
    case "alert":
      omitList = ["msg"];
      break;
    case "confirm":
      omitList = ["msg", "title"];
      break;
    case "ajax":
    case "download":
      omitList = ["api", "messages", "options"];
      break;
    case "setValue":
      omitList = ["value", "index"];
      break;
    case "copy":
      omitList = ["content", "copyFormat"];
      break;
    case "email":
      omitList = ["to", "cc", "bcc", "subject", "body"];
      break;
    case "link":
      omitList = ["link", "blank", "params"];
      break;
    case "url":
      omitList = ["url", "blank", "params"];
      break;
    case "for":
      omitList = ["loopName"];
      break;
    case "goPage":
      omitList = ["delta"];
      break;
    case "custom":
      omitList = ["script"];
      break;
    case "broadcast":
      omitList = ["eventName"];
      break;
    case "dialog":
      omitList = ["dialog"];
      break;
    case "drawer":
      omitList = ["drawer"];
      break;
    case "confirmDialog":
      omitList = ["dialog"];
      break;
    case "reload":
      omitList = ["resetPage"];
      break;
  }
  return omitList;
};
var runActions = function(actions, renderer, event) {
  return __awaiter(void 0, void 0, void 0, function() {
    var actions_1, actions_1_1, actionConfig, actionInstrance, e_1, ignore, e_2_1;
    var e_2, _a3;
    var _b3;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (!Array.isArray(actions)) {
            actions = [actions];
          }
          _c.label = 1;
        case 1:
          _c.trys.push([1, 9, 10, 11]);
          actions_1 = __values(actions), actions_1_1 = actions_1.next();
          _c.label = 2;
        case 2:
          if (!!actions_1_1.done)
            return [3, 8];
          actionConfig = actions_1_1.value;
          actionInstrance = getActionByType(actionConfig.actionType);
          if (!actionInstrance && (actionConfig.componentId || actionConfig.componentName)) {
            actionInstrance = [
              "static",
              "nonstatic",
              "show",
              "visibility",
              "hidden",
              "enabled",
              "disabled",
              "usability"
            ].includes(actionConfig.actionType) ? getActionByType("status") : getActionByType("component");
          } else if (["url", "link", "jump"].includes(actionConfig.actionType)) {
            actionInstrance = getActionByType("openlink");
          }
          if (!actionInstrance) {
            actionInstrance = getActionByType("component");
          }
          _c.label = 3;
        case 3:
          _c.trys.push([3, 5, , 6]);
          return [4, runAction(actionInstrance, actionConfig, renderer, event)];
        case 4:
          _c.sent();
          return [3, 6];
        case 5:
          e_1 = _c.sent();
          ignore = (_b3 = actionConfig.ignoreError) !== null && _b3 !== void 0 ? _b3 : false;
          if (!ignore) {
            throw Error("".concat(actionConfig.actionType, " 动作执行失败，原因：").concat(e_1.message || "未知"));
          }
          return [3, 6];
        case 6:
          if (event.stoped) {
            return [3, 8];
          }
          _c.label = 7;
        case 7:
          actions_1_1 = actions_1.next();
          return [3, 2];
        case 8:
          return [3, 11];
        case 9:
          e_2_1 = _c.sent();
          e_2 = { error: e_2_1 };
          return [3, 11];
        case 10:
          try {
            if (actions_1_1 && !actions_1_1.done && (_a3 = actions_1.return))
              _a3.call(actions_1);
          } finally {
            if (e_2)
              throw e_2.error;
          }
          return [
            7
            /*endfinally*/
          ];
        case 11:
          return [
            2
            /*return*/
          ];
      }
    });
  });
};
var runAction = function(actionInstrance, actionConfig, renderer, event) {
  return __awaiter(void 0, void 0, void 0, function() {
    var additional, action, mergeData, expression, isStop, preventDefault2, key, api, cmptFlag, targetComponent, args, afterMappingData, actionData, data, stopped, actionResult, stopPropagation;
    var _a3, _b3, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
    return __generator(this, function(_v) {
      switch (_v.label) {
        case 0:
          additional = {
            event
          };
          action = __assign({}, actionConfig);
          action.args = __assign({}, actionConfig.args);
          if (!event.data.__rendererData) {
            additional = {
              event,
              __rendererData: renderer.props.data
              // 部分组件交互后会有更新，如果想要获取那部分数据，可以通过事件数据获取
            };
          }
          mergeData = createObject2(createObject2(renderer.props.data.__super ? createObject2(renderer.props.data.__super, additional) : additional, renderer.props.data), event.data);
          expression = (_a3 = action.expression) !== null && _a3 !== void 0 ? _a3 : action.execOn;
          isStop = false;
          if (!expression)
            return [3, 2];
          return [4, evalExpressionWithConditionBuilder(expression, mergeData, true)];
        case 1:
          isStop = !_v.sent();
          _v.label = 2;
        case 2:
          if (isStop) {
            return [
              2
              /*return*/
            ];
          }
          preventDefault2 = false;
          if (!action.preventDefault)
            return [3, 4];
          return [4, evalExpressionWithConditionBuilder(action.preventDefault, mergeData, false)];
        case 3:
          preventDefault2 = _v.sent();
          _v.label = 4;
        case 4:
          key = {
            componentId: dataMapping(action.componentId, mergeData),
            componentName: dataMapping(action.componentName, mergeData)
          };
          if (action.actionType === "dialog") {
            action.dialog = __assign({}, (_b3 = action.dialog) !== null && _b3 !== void 0 ? _b3 : (_c = action.args) === null || _c === void 0 ? void 0 : _c.dialog);
            (_d = action.args) === null || _d === void 0 ? true : delete _d.dialog;
          } else if (action.actionType === "drawer") {
            action.drawer = __assign({}, (_e = action.drawer) !== null && _e !== void 0 ? _e : (_f = action.args) === null || _f === void 0 ? void 0 : _f.drawer);
            (_g = action.args) === null || _g === void 0 ? true : delete _g.drawer;
          } else if (["ajax", "download"].includes(action.actionType)) {
            api = (_h = action.api) !== null && _h !== void 0 ? _h : (_j = action.args) === null || _j === void 0 ? void 0 : _j.api;
            action.api = typeof api === "string" ? api : __assign({}, api);
            action.options = __assign({}, (_k = action.options) !== null && _k !== void 0 ? _k : (_l = action.args) === null || _l === void 0 ? void 0 : _l.options);
            action.messages = __assign({}, (_m = action.messages) !== null && _m !== void 0 ? _m : (_o = action.args) === null || _o === void 0 ? void 0 : _o.messages);
            (_p = action.args) === null || _p === void 0 ? true : delete _p.api;
            (_q = action.args) === null || _q === void 0 ? true : delete _q.options;
            (_r = action.args) === null || _r === void 0 ? true : delete _r.messages;
          }
          cmptFlag = key.componentId || key.componentName;
          targetComponent = cmptFlag ? (_s = event.context.scoped) === null || _s === void 0 ? void 0 : _s[action.componentId ? "getComponentById" : "getComponentByName"](cmptFlag) : renderer;
          args = dataMapping(action.args, mergeData, function(key2) {
            var _a4;
            var actionIgnoreKey = {
              ajax: ["adaptor", "responseAdaptor", "requestAdaptor", "responseData"]
            };
            var cmptIgnoreMap = {
              "input-table": ["condition"]
            };
            var curCmptType = (_a4 = targetComponent === null || targetComponent === void 0 ? void 0 : targetComponent.props) === null || _a4 === void 0 ? void 0 : _a4.type;
            var curActionType = action.actionType;
            var ignoreKey = __spreadArray(__spreadArray([], __read(actionIgnoreKey[curActionType] || []), false), __read(cmptIgnoreMap[curCmptType] || []), false);
            return ignoreKey.includes(key2);
          });
          afterMappingData = dataMapping(action.data, mergeData);
          actionData = args && Object.keys(args).length ? (0, import_omit2.default)(__assign(__assign({}, args), afterMappingData !== null && afterMappingData !== void 0 ? afterMappingData : {}), getOmitActionProp(action.actionType)) : afterMappingData;
          data = actionData !== void 0 && !["ajax", "download", "dialog", "drawer"].includes(action.actionType) ? actionData : mergeData;
          (_t = console.group) === null || _t === void 0 ? void 0 : _t.call(console, "run action ".concat(action.actionType));
          console.debug("[".concat(action.actionType, "] action args, data"), args, data);
          stopped = false;
          return [4, actionInstrance.run(__assign(__assign(__assign({}, action), { args, data: action.actionType === "reload" ? actionData : data }), key), renderer, event, mergeData)];
        case 5:
          actionResult = _v.sent();
          if ((action === null || action === void 0 ? void 0 : action.actionType) === "confirmDialog" && !actionResult) {
            stopped = true;
            preventDefault2 = true;
          }
          stopPropagation = false;
          if (!action.stopPropagation)
            return [3, 7];
          return [4, evalExpressionWithConditionBuilder(action.stopPropagation, mergeData, false)];
        case 6:
          stopPropagation = _v.sent();
          _v.label = 7;
        case 7:
          console.debug("[".concat(action.actionType, "] action end event"), event);
          (_u = console.groupEnd) === null || _u === void 0 ? void 0 : _u.call(console);
          preventDefault2 && event.preventDefault();
          (stopPropagation || stopped) && event.stopPropagation();
          return [
            2
            /*return*/
          ];
      }
    });
  });
};

// node_modules/amis-core/esm/utils/resize-sensor.js
var EventQueue = (
  /** @class */
  function() {
    function EventQueue2() {
      this.q = [];
    }
    EventQueue2.prototype.add = function(cb, type) {
      if (type === void 0) {
        type = "both";
      }
      this.q.push({
        fn: cb,
        type
      });
    };
    EventQueue2.prototype.call = function(type) {
      var args = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
      }
      this.q.forEach(function(item) {
        if (item.type === type || item.type === "both" || type === "both") {
          item.fn.apply(null, args);
        }
      });
    };
    return EventQueue2;
  }()
);
function getComputedStyle2(element, prop) {
  if (element.currentStyle) {
    return element.currentStyle[prop];
  } else if (window.getComputedStyle) {
    var style = window.getComputedStyle(element, void 0);
    return style ? style.getPropertyValue(prop) : void 0;
  } else {
    return element.style[prop];
  }
}
function attachResizeEvent(element, resized, type) {
  if (type === void 0) {
    type = "both";
  }
  if (!element) {
    return;
  }
  if (!element.resizedAttached) {
    element.resizedAttached = new EventQueue();
    element.resizedAttached.add(resized, type);
  } else if (element.resizedAttached) {
    element.resizedAttached.add(resized, type);
    return;
  }
  var resizeSensor2 = element.resizeSensor = document.createElement("div");
  resizeSensor2.className = "resize-sensor";
  var style = "position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: scroll; z-index: -1; visibility: hidden;";
  var styleChild = "position: absolute; left: 0; top: 0;";
  resizeSensor2.style.cssText = style;
  resizeSensor2.innerHTML = '\n  <div class="resize-sensor-expand" style="'.concat(style, '">\n    <div style="').concat(styleChild, '"></div>\n  </div>\n  <div class="resize-sensor-shrink" style="').concat(style, '">\n    <div style="').concat(styleChild, ' width: 200%; height: 200%"></div>\n  </div>\n  <div class="resize-sensor-appear" style="').concat(style, 'animation-name: apearSensor; animation-duration: 0.2s;"></div>');
  element.appendChild(resizeSensor2);
  element.hasInlineStyle = element.hasAttribute("style");
  var position2 = element.originPosition = getComputedStyle2(element, "position");
  if (!~["fixed", "absolute"].indexOf(position2)) {
    element.style.position = "relative";
  }
  var expand = resizeSensor2.children[0];
  var expandChild = expand.children[0];
  var shrink = resizeSensor2.children[1];
  var appear = resizeSensor2.children[2];
  var lastWidth, lastHeight;
  var reset = function() {
    expandChild.style.width = expand.offsetWidth + 10 + "px";
    expandChild.style.height = expand.offsetHeight + 10 + "px";
    expand.scrollLeft = expand.scrollWidth;
    expand.scrollTop = expand.scrollHeight;
    shrink.scrollLeft = shrink.scrollWidth;
    shrink.scrollTop = shrink.scrollHeight;
    lastWidth = element.offsetWidth;
    lastHeight = element.offsetHeight;
  };
  var appeared = function() {
    reset();
    if (isHidden) {
      changed();
      isHidden = false;
    }
  };
  reset();
  var changed = function(type2) {
    if (type2 === void 0) {
      type2 = "both";
    }
    if (element.resizedAttached) {
      element.resizedAttached.call(type2);
    }
  };
  var addEvent = function(el, name, cb) {
    if (el.attachEvent) {
      el.attachEvent("on" + name, cb);
    } else {
      el.addEventListener(name, cb);
    }
  };
  var removeEvent = function(el, name, cb) {
    if (el.detachEvent) {
      el.detachEvent("on" + name, cb);
    } else {
      el.removeEventListener(name, cb);
    }
  };
  var onScroll2 = function(e) {
    var widthChanged = element.offsetWidth != lastWidth;
    var heightChanged = element.offsetHeight != lastHeight;
    if (widthChanged || heightChanged) {
      changed(widthChanged && heightChanged ? "both" : widthChanged ? "width" : "height");
    }
    reset();
  };
  addEvent(expand, "scroll", onScroll2);
  addEvent(shrink, "scroll", onScroll2);
  addEvent(appear, "animationstart", appeared);
  var isHidden = !expand.offsetWidth;
  return function() {
    removeEvent(expand, "scroll", onScroll2);
    removeEvent(shrink, "scroll", onScroll2);
    removeEvent(appear, "animationstart", appeared);
  };
}
function detach(element) {
  if (element.resizeSensor) {
    if (element.hasInlineStyle) {
      element.style.position = element.originPosition;
    } else {
      element.removeAttribute("style");
    }
    try {
      element.removeChild(element.resizeSensor);
    } catch (e) {
    }
    delete element.resizeSensor;
    delete element.resizedAttached;
    delete element.hasInlineStyle;
    delete element.originPosition;
  }
}
function resizeSensor(element, callback, once, type) {
  if (once === void 0) {
    once = false;
  }
  if (type === void 0) {
    type = "both";
  }
  if (!element) {
    return function() {
    };
  }
  var disposeEvent = void 0;
  if (once) {
    disposeEvent = attachResizeEvent(element, function() {
      callback.apply(this, arguments);
      disposeEvent === null || disposeEvent === void 0 ? void 0 : disposeEvent();
      detach(element);
    }, type);
    return function() {
    };
  }
  disposeEvent = attachResizeEvent(element, callback, type);
  var detached = false;
  return function() {
    if (detached)
      return;
    detached = true;
    disposeEvent === null || disposeEvent === void 0 ? void 0 : disposeEvent();
    detach(element);
  };
}

// node_modules/amis-core/esm/utils/validations.js
init_moment();
var import_isPlainObject9 = __toESM(require_isPlainObject());
var import_memoize2 = __toESM(require_memoize());
var isExisty = function(value) {
  return value !== null && value !== void 0;
};
var isEmpty3 = function(value) {
  return value === "";
};
var makeRegexp = function(reg) {
  if (reg instanceof RegExp) {
    return reg;
  } else if (/^(?:matchRegexp\:)?\/(.+)\/([gimuy]*)$/.test(reg)) {
    return new RegExp(RegExp.$1, RegExp.$2 || "");
  } else if (typeof reg === "string") {
    return new RegExp(reg);
  }
  return /^$/;
};
var makeUrlRegexp = (0, import_memoize2.default)(function(options) {
  options = __assign({ schemes: ["http", "https", "ftp", "sftp"], allowLocal: true, allowDataUrl: false }, (0, import_isPlainObject9.default)(options) ? options : {});
  var schemes = options.schemes, allowLocal = options.allowLocal, allowDataUrl = options.allowDataUrl;
  if (!Array.isArray(schemes)) {
    schemes = ["http", "https", "ftp", "sftp"];
  }
  var regex = "^(?:(?:" + schemes.join("|") + ")://)(?:\\S+(?::\\S*)?@)?(?:";
  var tld = "(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))";
  if (allowLocal) {
    tld += "?";
  } else {
    regex += // IP address exclusion
    // private & local networks
    "(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})";
  }
  regex += // IP address dotted notation octets
  // excludes loopback network 0.0.0.0
  // excludes reserved space >= 224.0.0.0
  // excludes network & broacast addresses
  // (first & last IP address of each class)
  "(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*" + tld + ")(?::\\d{2,5})?(?:[/?#]\\S*)?$";
  if (allowDataUrl) {
    var mediaType = "\\w+\\/[-+.\\w]+(?:;[\\w=]+)*";
    var urlchar = "[A-Za-z0-9-_.!~\\*'();\\/?:@&=+$,%]*";
    var dataurl = "data:(?:" + mediaType + ")?(?:;base64)?," + urlchar;
    regex = "(?:" + regex + ")|(?:^" + dataurl + "$)";
  }
  return new RegExp(regex, "i");
});
var validations = {
  isRequired: function(values2, value) {
    return value !== void 0 && value !== "" && value !== null && (!Array.isArray(value) || !!value.length);
  },
  isExisty: function(values2, value) {
    return isExisty(value);
  },
  matchRegexp: function(values2, value, regexp) {
    return !isExisty(value) || isEmpty3(value) || makeRegexp(regexp).test(value);
  },
  isUndefined: function(values2, value) {
    return value === void 0;
  },
  isEmptyString: function(values2, value) {
    return isEmpty3(value);
  },
  isEmail: function(values2, value) {
    return validations.matchRegexp(values2, value, /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i);
  },
  isUrl: function(values2, value, options) {
    return validations.matchRegexp(values2, value, makeUrlRegexp(options));
  },
  isTrue: function(values2, value) {
    return value === true;
  },
  isFalse: function(values2, value) {
    return value === false;
  },
  isNumeric: function(values2, value) {
    if (typeof value === "number") {
      return true;
    }
    return validations.matchRegexp(values2, value, /^[-+]?(?:\d*[.])?\d+$/);
  },
  isAlpha: function(values2, value) {
    return validations.matchRegexp(values2, value, /^[A-Z]+$/i);
  },
  isAlphanumeric: function(values2, value) {
    return validations.matchRegexp(values2, value, /^[0-9A-Z]+$/i);
  },
  isInt: function(values2, value) {
    return validations.matchRegexp(values2, value, /^(?:[-+]?(?:0|[1-9]\d*))$/);
  },
  isFloat: function(values2, value) {
    return validations.matchRegexp(values2, value, /^(?:[-+]?(?:\d+))?(?:\.\d*)?(?:[eE][\+\-]?(?:\d+))?$/);
  },
  isWords: function(values2, value) {
    return validations.matchRegexp(values2, value, /^[A-Z\s]+$/i);
  },
  isSpecialWords: function(values2, value) {
    return validations.matchRegexp(values2, value, /^[A-Z\s\u00C0-\u017F]+$/i);
  },
  isLength: function(values2, value, length) {
    if (typeof value === "number") {
      value = String(value);
    }
    return !isExisty(value) || isEmpty3(value) || value.length === length;
  },
  equals: function(values2, value, eql) {
    return !isExisty(value) || isEmpty3(value) || value == eql;
  },
  equalsField: function(values2, value, field) {
    return value == values2[field];
  },
  maxLength: function(values2, value, length) {
    if (typeof value === "number") {
      value = String(value);
    }
    return !isExisty(value) || value.length <= length;
  },
  minLength: function(values2, value, length) {
    if (typeof value === "number") {
      value = String(value);
    }
    return !isExisty(value) || isEmpty3(value) || value.length >= length;
  },
  isUrlPath: function(values2, value, regexp) {
    return !isExisty(value) || isEmpty3(value) || /^[a-z0-9_\\-]+$/i.test(value);
  },
  maximum: function(values2, value, maximum) {
    return !isExisty(value) || isEmpty3(value) || (parseFloat(value) || 0) <= (parseFloat(maximum) || 0);
  },
  lt: function(values2, value, maximum) {
    return !isExisty(value) || isEmpty3(value) || (parseFloat(value) || 0) < (parseFloat(maximum) || 0);
  },
  minimum: function(values2, value, minimum) {
    return !isExisty(value) || isEmpty3(value) || (parseFloat(value) || 0) >= (parseFloat(minimum) || 0);
  },
  gt: function(values2, value, minimum) {
    return !isExisty(value) || isEmpty3(value) || (parseFloat(value) || 0) > (parseFloat(minimum) || 0);
  },
  isJson: function(values2, value, minimum) {
    if (isExisty(value) && !isEmpty3(value) && typeof value === "string") {
      try {
        var result = JSON.parse(value);
        if (typeof result === "object" && result) {
          return true;
        }
        return false;
      } catch (e) {
        return false;
      }
    }
    return true;
  },
  isPhoneNumber: function(values2, value) {
    return !isExisty(value) || isEmpty3(value) || /^[1]([3-9])[0-9]{9}$/.test(value);
  },
  isTelNumber: function(values2, value) {
    return !isExisty(value) || isEmpty3(value) || /^(\(\d{3,4}\)|\d{3,4}-|\s)?\d{7,14}$/.test(value);
  },
  isZipcode: function(values2, value) {
    return !isExisty(value) || isEmpty3(value) || /^\d{6}$/.test(value);
  },
  isId: function(values2, value) {
    return !isExisty(value) || isEmpty3(value) || /(^[1-9]\d{5}(18|19|([23]\d))\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d{3}[0-9Xx]$)|(^[1-9]\d{5}\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d{3}$)/.test(value);
  },
  notEmptyString: function(values2, value) {
    return !isExisty(value) || !(String(value) && String(value).trim() === "");
  },
  matchRegexp1: function(values2, value, regexp) {
    return validations.matchRegexp(values2, value, regexp);
  },
  matchRegexp2: function(values2, value, regexp) {
    return validations.matchRegexp(values2, value, regexp);
  },
  matchRegexp3: function(values2, value, regexp) {
    return validations.matchRegexp(values2, value, regexp);
  },
  matchRegexp4: function(values2, value, regexp) {
    return validations.matchRegexp(values2, value, regexp);
  },
  matchRegexp5: function(values2, value, regexp) {
    return validations.matchRegexp(values2, value, regexp);
  },
  matchRegexp6: function(values2, value, regexp) {
    return validations.matchRegexp(values2, value, regexp);
  },
  matchRegexp7: function(values2, value, regexp) {
    return validations.matchRegexp(values2, value, regexp);
  },
  matchRegexp8: function(values2, value, regexp) {
    return validations.matchRegexp(values2, value, regexp);
  },
  matchRegexp9: function(values2, value, regexp) {
    return validations.matchRegexp(values2, value, regexp);
  },
  /** ============================ 日期时间相关 ============================= */
  isDateTimeSame: function(values2, value, targetDate, granularity) {
    return moment_default(value).isSame(moment_default(targetDate), granularity);
  },
  isDateTimeBefore: function(values2, value, targetDate, granularity) {
    return moment_default(value).isBefore(moment_default(targetDate), granularity);
  },
  isDateTimeAfter: function(values2, value, targetDate, granularity) {
    return moment_default(value).isAfter(moment_default(targetDate), granularity);
  },
  isDateTimeSameOrBefore: function(values2, value, targetDate, granularity) {
    return moment_default(value).isSameOrBefore(moment_default(targetDate), granularity);
  },
  isDateTimeSameOrAfter: function(values2, value, targetDate, granularity) {
    return moment_default(value).isSameOrAfter(moment_default(targetDate), granularity);
  },
  isDateTimeBetween: function(values2, value, lhs, rhs, granularity, inclusivity) {
    return moment_default(value).isBetween(moment_default(lhs), moment_default(rhs), granularity, inclusivity);
  },
  /** ============================ 时间相关 ============================= */
  isTimeSame: function(values2, value, targetTime, granularity, format2) {
    format2 = format2 !== null && format2 !== void 0 ? format2 : "hh:mm:ss";
    return moment_default(value, format2).isSame(moment_default(targetTime, format2), granularity);
  },
  isTimeBefore: function(values2, value, targetTime, granularity, format2) {
    format2 = format2 !== null && format2 !== void 0 ? format2 : "hh:mm:ss";
    return moment_default(value, format2).isBefore(moment_default(targetTime, format2), granularity);
  },
  isTimeAfter: function(values2, value, targetTime, granularity, format2) {
    format2 = format2 !== null && format2 !== void 0 ? format2 : "hh:mm:ss";
    return moment_default(value, format2).isAfter(moment_default(targetTime, format2), granularity);
  },
  isTimeSameOrBefore: function(values2, value, targetTime, granularity, format2) {
    format2 = format2 !== null && format2 !== void 0 ? format2 : "hh:mm:ss";
    return moment_default(value, format2).isSameOrBefore(moment_default(targetTime, format2), granularity);
  },
  isTimeSameOrAfter: function(values2, value, targetTime, granularity, format2) {
    format2 = format2 !== null && format2 !== void 0 ? format2 : "hh:mm:ss";
    return moment_default(value, format2).isSameOrAfter(moment_default(targetTime, format2), granularity);
  },
  isTimeBetween: function(values2, value, lhs, rhs, granularity, inclusivity, format2) {
    format2 = format2 !== null && format2 !== void 0 ? format2 : "hh:mm:ss";
    return moment_default(value, format2).isBetween(moment_default(lhs, format2), moment_default(rhs, format2), granularity, inclusivity);
  },
  isVariableName: function(values2, value, regexp) {
    return validations.matchRegexp(values2, value, regexp instanceof RegExp ? regexp : /^[a-zA-Z_]+[a-zA-Z0-9_]*$/);
  }
};
function addRule(ruleName, fn, message) {
  if (message === void 0) {
    message = "";
  }
  validations[ruleName] = fn;
  validateMessages[ruleName] = message;
}
var validateMessages = {
  isEmail: "validate.isEmail",
  isRequired: "validate.isRequired",
  isUrl: "validate.isUrl",
  isInt: "validate.isInt",
  isAlpha: "validate.isAlpha",
  isNumeric: "validate.isNumeric",
  isAlphanumeric: "validate.isAlphanumeric",
  isFloat: "validate.isFloat",
  isWords: "validate.isWords",
  isUrlPath: "validate.isUrlPath",
  matchRegexp: "validate.matchRegexp",
  minLength: "validate.minLength",
  maxLength: "validate.maxLength",
  minLengthArray: "validate.array.minLength",
  maxLengthArray: "validate.array.maxLength",
  maximum: "validate.maximum",
  lt: "validate.lt",
  minimum: "validate.minimum",
  gt: "validate.gt",
  isJson: "validate.isJson",
  isLength: "validate.isLength",
  notEmptyString: "validate.notEmptyString",
  equalsField: "validate.equalsField",
  equals: "validate.equals",
  isPhoneNumber: "validate.isPhoneNumber",
  isTelNumber: "validate.isTelNumber",
  isZipcode: "validate.isZipcode",
  isId: "validate.isId",
  isDateTimeSame: "validate.isDateTimeSame",
  isDateTimeBefore: "validate.isDateTimeBefore",
  isDateTimeAfter: "validate.isDateTimeAfter",
  isDateTimeSameOrBefore: "validate.isDateTimeSameOrBefore",
  isDateTimeSameOrAfter: "validate.isDateTimeSameOrAfter",
  isDateTimeBetween: "validate.isDateTimeBetween",
  isTimeSame: "validate.isTimeSame",
  isTimeBefore: "validate.isTimeBefore",
  isTimeAfter: "validate.isTimeAfter",
  isTimeSameOrBefore: "validate.isTimeSameOrBefore",
  isTimeSameOrAfter: "validate.isTimeSameOrAfter",
  isTimeBetween: "validate.isTimeBetween",
  isVariableName: "validate.isVariableName"
};
function validate(value, values2, rules, messages, __) {
  var _a3;
  if (__ === void 0) {
    __ = function(str) {
      return str;
    };
  }
  var errors = [];
  if (rules) {
    var ruleNames = Object.keys(rules);
    var length_1 = ruleNames.length;
    for (var index = 0; index < length_1; index++) {
      var ruleName = ruleNames[index];
      if (!rules[ruleName] && rules[ruleName] !== 0) {
        continue;
      } else if (typeof validations[ruleName] !== "function") {
        throw new Error("Validation `" + ruleName + "` not exists!");
      }
      var fn = validations[ruleName];
      var args = (Array.isArray(rules[ruleName]) ? rules[ruleName] : [rules[ruleName]]).map(function(item) {
        if (typeof item === "string" && isPureVariable(item)) {
          return resolveVariableAndFilter(item, values2, "|raw");
        }
        return item;
      });
      var validateRes = fn.apply(void 0, __spreadArray([values2, value], __read(args), false));
      var fnResErrorMsg = "";
      if (typeof validateRes === "object" && validateRes.error === true) {
        fnResErrorMsg = (_a3 = validateRes === null || validateRes === void 0 ? void 0 : validateRes.msg) !== null && _a3 !== void 0 ? _a3 : "";
      }
      if (!validateRes || fnResErrorMsg) {
        var msgRuleName = ruleName;
        if (Array.isArray(value)) {
          msgRuleName = "".concat(ruleName, "Array");
        }
        return [{
          rule: ruleName,
          msg: filter(__(messages && messages[ruleName] || fnResErrorMsg || validateMessages[msgRuleName] || validateMessages[ruleName]), __assign({}, [""].concat(args)))
        }];
      }
    }
  }
  return errors;
}
function validateObject(values2, rules, messages, __) {
  if (__ === void 0) {
    __ = function(str) {
      return str;
    };
  }
  var ret = {};
  Object.keys(rules).forEach(function(key) {
    var msgs = validate(values2[key], values2, rules[key] === true ? {
      isRequired: true
    } : rules[key], messages, __);
    if (msgs.length) {
      ret[key] = msgs;
    }
  });
  return ret;
}
var splitValidations = function(str) {
  var i = 0;
  var placeholder = {};
  return str.replace(/matchRegexp\d*\s*\:\s*\/.*?\/[igm]*/g, function(raw) {
    placeholder["__".concat(i)] = raw;
    return "__".concat(i++);
  }).split(/,(?![^{\[]*[}\]])/g).map(function(str2) {
    return /^__\d+$/.test(str2) ? placeholder[str2] : str2.trim();
  });
};
function str2rules(validations2) {
  if (typeof validations2 === "string") {
    return validations2 ? splitValidations(validations2).reduce(function(validations3, validation) {
      var idx = validation.indexOf(":");
      var validateMethod = validation;
      var args = [];
      if (~idx) {
        validateMethod = validation.substring(0, idx);
        args = /^matchRegexp/.test(validateMethod) ? [validation.substring(idx + 1).trim()] : validation.substring(idx + 1).split(",").map(function(arg) {
          try {
            return JSON.parse(arg);
          } catch (e) {
            return arg;
          }
        });
      }
      validations3[validateMethod] = args.length ? args : true;
      return validations3;
    }, {}) : {};
  }
  return validations2 || {};
}

// node_modules/amis-core/esm/utils/Animation.js
function userAgent(pattern) {
  if (typeof window !== "undefined" && window.navigator) {
    return !!navigator.userAgent.match(pattern);
  }
}
var IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i);
var AnimationDurtation = 150;
var AnimationEasing = "cubic-bezier(1, 0, 0, 1)";
var AnimationManager = (
  /** @class */
  function() {
    function AnimationManager2() {
      this.animating = false;
      this.states = [];
    }
    AnimationManager2.prototype.capture = function(el) {
      var _this = this;
      this.states = [];
      var children = [].slice.call(el.children);
      children.forEach(function(child) {
        if (child.classList.contains("is-ghost")) {
          return;
        }
        var rect = getRect(child);
        if (!rect.width) {
          return;
        }
        var fromRect = __assign({}, rect);
        var state = {
          target: child,
          rect
        };
        if (child.thisAnimationDuration) {
          var childMatrix = matrix(child);
          if (childMatrix) {
            fromRect.top -= childMatrix.f;
            fromRect.left -= childMatrix.e;
          }
        }
        child.fromRect = fromRect;
        _this.states.push(state);
      });
    };
    AnimationManager2.prototype.animateAll = function(callback) {
      var _this = this;
      this.animating = false;
      var animationTime = 0;
      this.states.forEach(function(state) {
        var time = 0, target = state.target, fromRect = target.fromRect, toRect = __assign({}, getRect(target)), prevFromRect = target.prevFromRect, prevToRect = target.prevToRect, animatingRect = state.rect, targetMatrix = matrix(target);
        if (targetMatrix) {
          toRect.top -= targetMatrix.f;
          toRect.left -= targetMatrix.e;
        }
        target.toRect = toRect;
        if (target.thisAnimationDuration) {
          if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) && // Make sure animatingRect is on line between toRect & fromRect
          (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {
            time = calculateRealTime(animatingRect, prevFromRect, prevToRect);
          }
        }
        if (!isRectEqual(toRect, fromRect)) {
          target.prevFromRect = fromRect;
          target.prevToRect = toRect;
          if (!time) {
            time = AnimationDurtation;
          }
          _this.animate(target, animatingRect, toRect, time);
        }
        if (time) {
          _this.animating = true;
          animationTime = Math.max(animationTime, time);
          clearTimeout(target.animationResetTimer);
          target.animationResetTimer = setTimeout(function() {
            target.animationTime = 0;
            target.prevFromRect = null;
            target.fromRect = null;
            target.prevToRect = null;
            target.thisAnimationDuration = null;
          }, time);
          target.thisAnimationDuration = time;
        }
      });
      clearTimeout(this.animationCallbackId);
      if (!this.animating) {
        if (typeof callback === "function")
          callback();
      } else {
        this.animationCallbackId = setTimeout(function() {
          _this.animating = false;
          if (typeof callback === "function")
            callback();
        }, animationTime);
      }
      this.states = [];
    };
    AnimationManager2.prototype.animate = function(target, currentRect, toRect, duration) {
      if (duration) {
        var affectDisplay_1 = false;
        css(target, "transition", "");
        css(target, "transform", "");
        var translateX = currentRect.left - toRect.left, translateY = currentRect.top - toRect.top;
        target.animatingX = !!translateX;
        target.animatingY = !!translateY;
        css(target, "transform", "translate3d(" + translateX + "px," + translateY + "px,0)");
        if (css(target, "display") === "inline") {
          affectDisplay_1 = true;
          css(target, "display", "inline-block");
        }
        target.offsetWidth;
        css(target, "transition", "transform " + duration + "ms" + (" " + AnimationEasing));
        css(target, "transform", "translate3d(0,0,0)");
        typeof target.animated === "number" && clearTimeout(target.animated);
        target.animated = setTimeout(function() {
          css(target, "transition", "");
          css(target, "transform", "");
          affectDisplay_1 && css(target, "display", "");
          target.animated = false;
          target.animatingX = false;
          target.animatingY = false;
        }, duration);
      }
    };
    return AnimationManager2;
  }()
);
function matrix(el) {
  var appliedTransforms = "";
  if (typeof el === "string") {
    appliedTransforms = el;
  } else {
    var transform2 = css(el, "transform");
    if (transform2 && transform2 !== "none") {
      appliedTransforms = transform2 + " " + appliedTransforms;
    }
  }
  var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;
  return matrixFn && new matrixFn(appliedTransforms);
}
function css(el, prop, val) {
  var style = el && el.style;
  if (style) {
    if (val === void 0) {
      if (document.defaultView && document.defaultView.getComputedStyle) {
        val = document.defaultView.getComputedStyle(el, "");
      } else if (el.currentStyle) {
        val = el.currentStyle;
      }
      return prop === void 0 ? val : val[prop];
    } else {
      if (!(prop in style) && prop.indexOf("webkit") === -1) {
        prop = "-webkit-" + prop;
      }
      style[prop] = val + (typeof val === "string" ? "" : "px");
    }
  }
}
function isRectEqual(rect1, rect2) {
  return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);
}
function calculateRealTime(animatingRect, fromRect, toRect) {
  return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * AnimationDurtation;
}
function getWindowScrollingElement() {
  var scrollingElement = document.scrollingElement;
  if (scrollingElement) {
    return scrollingElement;
  } else {
    return document.documentElement;
  }
}
function getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {
  if (!el.getBoundingClientRect && el !== window)
    return;
  var elRect, top, left, bottom, right, height, width;
  if (el !== window && el !== getWindowScrollingElement()) {
    elRect = el.getBoundingClientRect();
    top = elRect.top;
    left = elRect.left;
    bottom = elRect.bottom;
    right = elRect.right;
    height = elRect.height;
    width = elRect.width;
  } else {
    top = 0;
    left = 0;
    bottom = window.innerHeight;
    right = window.innerWidth;
    height = window.innerHeight;
    width = window.innerWidth;
  }
  if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {
    container = container || el.parentNode;
    if (!IE11OrLess) {
      do {
        if (container && container.getBoundingClientRect && (css(container, "transform") !== "none" || relativeToNonStaticParent && css(container, "position") !== "static")) {
          var containerRect = container.getBoundingClientRect();
          top -= containerRect.top + parseInt(css(container, "border-top-width"));
          left -= containerRect.left + parseInt(css(container, "border-left-width"));
          bottom = top + elRect.height;
          right = left + elRect.width;
          break;
        }
      } while (container = container.parentNode);
    }
  }
  if (undoScale && el !== window) {
    var elMatrix = matrix(container || el), scaleX = elMatrix && elMatrix.a, scaleY = elMatrix && elMatrix.d;
    if (elMatrix) {
      top /= scaleY;
      left /= scaleX;
      width /= scaleX;
      height /= scaleY;
      bottom = top + height;
      right = left + width;
    }
  }
  return {
    top,
    left,
    bottom,
    right,
    width,
    height
  };
}
var Animation = new AnimationManager();

// node_modules/amis-core/esm/store/iRenderer.js
init_moment();
var import_react7 = __toESM(require_react());
var import_chunk = __toESM(require_chunk());
var import_react_dom3 = __toESM(require_react_dom());
var import_isPlainObject10 = __toESM(require_isPlainObject());
var import_isObject2 = __toESM(require_isObject());
var import_isString3 = __toESM(require_isString());
var import_isBoolean2 = __toESM(require_isBoolean());
var import_isEqual4 = __toESM(require_isEqual());
var import_debounce = __toESM(require_debounce());
var import_cloneDeep = __toESM(require_cloneDeep());

// node_modules/dom-helpers/esm/contains.js
function contains(context, node) {
  if (context.contains)
    return context.contains(node);
  if (context.compareDocumentPosition)
    return context === node || !!(context.compareDocumentPosition(node) & 16);
}

// node_modules/dom-helpers/esm/canUseDOM.js
var canUseDOM_default = !!(typeof window !== "undefined" && window.document && window.document.createElement);

// node_modules/dom-helpers/esm/addEventListener.js
var optionsSupported = false;
var onceSupported = false;
try {
  options = {
    get passive() {
      return optionsSupported = true;
    },
    get once() {
      return onceSupported = optionsSupported = true;
    }
  };
  if (canUseDOM_default) {
    window.addEventListener("test", options, options);
    window.removeEventListener("test", options, true);
  }
} catch (e) {
}
var options;
function addEventListener(node, eventName, handler, options) {
  if (options && typeof options !== "boolean" && !onceSupported) {
    var once = options.once, capture = options.capture;
    var wrappedHandler = handler;
    if (!onceSupported && once) {
      wrappedHandler = handler.__once || function onceHandler(event) {
        this.removeEventListener(eventName, onceHandler, capture);
        handler.call(this, event);
      };
      handler.__once = wrappedHandler;
    }
    node.addEventListener(eventName, wrappedHandler, optionsSupported ? options : capture);
  }
  node.addEventListener(eventName, handler, options);
}
var addEventListener_default = addEventListener;

// node_modules/dom-helpers/esm/removeEventListener.js
function removeEventListener(node, eventName, handler, options) {
  var capture = options && typeof options !== "boolean" ? options.capture : options;
  node.removeEventListener(eventName, handler, capture);
  if (handler.__once) {
    node.removeEventListener(eventName, handler.__once, capture);
  }
}
var removeEventListener_default = removeEventListener;

// node_modules/dom-helpers/esm/listen.js
function listen(node, eventName, handler, options) {
  addEventListener_default(node, eventName, handler, options);
  return function() {
    removeEventListener_default(node, eventName, handler, options);
  };
}
var listen_default = listen;

// node_modules/react-overlays/esm/useRootClose.js
var import_react4 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useEventCallback.js
var import_react3 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useCommittedRef.js
var import_react2 = __toESM(require_react());
function useCommittedRef(value) {
  var ref = (0, import_react2.useRef)(value);
  (0, import_react2.useEffect)(function() {
    ref.current = value;
  }, [value]);
  return ref;
}
var useCommittedRef_default = useCommittedRef;

// node_modules/@restart/hooks/esm/useEventCallback.js
function useEventCallback(fn) {
  var ref = useCommittedRef_default(fn);
  return (0, import_react3.useCallback)(function() {
    return ref.current && ref.current.apply(ref, arguments);
  }, [ref]);
}

// node_modules/react-overlays/esm/useRootClose.js
var import_warning = __toESM(require_warning());

// node_modules/dom-helpers/esm/ownerDocument.js
function ownerDocument(node) {
  return node && node.ownerDocument || document;
}

// node_modules/react-overlays/esm/safeFindDOMNode.js
var import_react_dom2 = __toESM(require_react_dom());
function safeFindDOMNode(componentOrElement) {
  if (componentOrElement && "setState" in componentOrElement) {
    return import_react_dom2.default.findDOMNode(componentOrElement);
  }
  return componentOrElement != null ? componentOrElement : null;
}

// node_modules/react-overlays/esm/ownerDocument.js
var ownerDocument_default = function(componentOrElement) {
  return ownerDocument(safeFindDOMNode(componentOrElement));
};

// node_modules/react-overlays/esm/useRootClose.js
var escapeKeyCode = 27;
var noop2 = function noop3() {
};
function isLeftClickEvent(event) {
  return event.button === 0;
}
function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
var getRefTarget = function getRefTarget2(ref) {
  return ref && ("current" in ref ? ref.current : ref);
};
function useRootClose(ref, onRootClose, _temp) {
  var _ref = _temp === void 0 ? {} : _temp, disabled = _ref.disabled, _ref$clickTrigger = _ref.clickTrigger, clickTrigger = _ref$clickTrigger === void 0 ? "click" : _ref$clickTrigger;
  var preventMouseRootCloseRef = (0, import_react4.useRef)(false);
  var onClose = onRootClose || noop2;
  var handleMouseCapture = (0, import_react4.useCallback)(function(e) {
    var currentTarget = getRefTarget(ref);
    (0, import_warning.default)(!!currentTarget, "RootClose captured a close event but does not have a ref to compare it to. useRootClose(), should be passed a ref that resolves to a DOM node");
    preventMouseRootCloseRef.current = !currentTarget || isModifiedEvent(e) || !isLeftClickEvent(e) || !!contains(currentTarget, e.target);
  }, [ref]);
  var handleMouse = useEventCallback(function(e) {
    if (!preventMouseRootCloseRef.current) {
      onClose(e);
    }
  });
  var handleKeyUp = useEventCallback(function(e) {
    if (e.keyCode === escapeKeyCode) {
      onClose(e);
    }
  });
  (0, import_react4.useEffect)(function() {
    if (disabled || ref == null)
      return void 0;
    var currentEvent = window.event;
    var doc = ownerDocument_default(getRefTarget(ref));
    var removeMouseCaptureListener = listen_default(doc, clickTrigger, handleMouseCapture, true);
    var removeMouseListener = listen_default(doc, clickTrigger, function(e) {
      if (e === currentEvent) {
        currentEvent = void 0;
        return;
      }
      handleMouse(e);
    });
    var removeKeyupListener = listen_default(doc, "keyup", function(e) {
      if (e === currentEvent) {
        currentEvent = void 0;
        return;
      }
      handleKeyUp(e);
    });
    var mobileSafariHackListeners = [];
    if ("ontouchstart" in doc.documentElement) {
      mobileSafariHackListeners = [].slice.call(doc.body.children).map(function(el) {
        return listen_default(el, "mousemove", noop2);
      });
    }
    return function() {
      removeMouseCaptureListener();
      removeMouseListener();
      removeKeyupListener();
      mobileSafariHackListeners.forEach(function(remove) {
        return remove();
      });
    };
  }, [ref, disabled, clickTrigger, handleMouseCapture, handleMouse, handleKeyUp]);
}
var useRootClose_default = useRootClose;

// node_modules/amis-core/esm/store/iRenderer.js
var import_mapValues = __toESM(require_mapValues());
var import_camelCase = __toESM(require_camelCase());
var import_map = __toESM(require_map());
var import_isEmpty2 = __toESM(require_isEmpty());
var import_kebabCase = __toESM(require_kebabCase());

// node_modules/uncontrollable/lib/esm/hook.js
var import_react5 = __toESM(require_react());

// node_modules/uncontrollable/lib/esm/utils.js
var import_invariant = __toESM(require_browser());
var noop4 = function noop5() {
};
function readOnlyPropType(handler, name) {
  return function(props, propName) {
    if (props[propName] !== void 0) {
      if (!props[handler]) {
        return new Error("You have provided a `" + propName + "` prop to `" + name + "` " + ("without an `" + handler + "` handler prop. This will render a read-only field. ") + ("If the field should be mutable use `" + defaultKey(propName) + "`. ") + ("Otherwise, set `" + handler + "`."));
      }
    }
  };
}
function uncontrolledPropTypes(controlledValues, displayName) {
  var propTypes2 = {};
  Object.keys(controlledValues).forEach(function(prop) {
    propTypes2[defaultKey(prop)] = noop4;
    if (true) {
      var handler = controlledValues[prop];
      !(typeof handler === "string" && handler.trim().length) ? true ? (0, import_invariant.default)(false, "Uncontrollable - [%s]: the prop `%s` needs a valid handler key name in order to make it uncontrollable", displayName, prop) : (0, import_invariant.default)(false) : void 0;
      propTypes2[prop] = readOnlyPropType(handler, displayName);
    }
  });
  return propTypes2;
}
function isProp(props, prop) {
  return props[prop] !== void 0;
}
function defaultKey(key) {
  return "default" + key.charAt(0).toUpperCase() + key.substr(1);
}
function canAcceptRef(component) {
  return !!component && (typeof component !== "function" || component.prototype && component.prototype.isReactComponent);
}

// node_modules/uncontrollable/lib/esm/uncontrollable.js
var import_react6 = __toESM(require_react());

// node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js
function componentWillMount() {
  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
  if (state !== null && state !== void 0) {
    this.setState(state);
  }
}
function componentWillReceiveProps(nextProps) {
  function updater(prevState) {
    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
    return state !== null && state !== void 0 ? state : null;
  }
  this.setState(updater.bind(this));
}
function componentWillUpdate(nextProps, nextState) {
  try {
    var prevProps = this.props;
    var prevState = this.state;
    this.props = nextProps;
    this.state = nextState;
    this.__reactInternalSnapshotFlag = true;
    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
      prevProps,
      prevState
    );
  } finally {
    this.props = prevProps;
    this.state = prevState;
  }
}
componentWillMount.__suppressDeprecationWarning = true;
componentWillReceiveProps.__suppressDeprecationWarning = true;
componentWillUpdate.__suppressDeprecationWarning = true;
function polyfill(Component3) {
  var prototype = Component3.prototype;
  if (!prototype || !prototype.isReactComponent) {
    throw new Error("Can only polyfill class components");
  }
  if (typeof Component3.getDerivedStateFromProps !== "function" && typeof prototype.getSnapshotBeforeUpdate !== "function") {
    return Component3;
  }
  var foundWillMountName = null;
  var foundWillReceivePropsName = null;
  var foundWillUpdateName = null;
  if (typeof prototype.componentWillMount === "function") {
    foundWillMountName = "componentWillMount";
  } else if (typeof prototype.UNSAFE_componentWillMount === "function") {
    foundWillMountName = "UNSAFE_componentWillMount";
  }
  if (typeof prototype.componentWillReceiveProps === "function") {
    foundWillReceivePropsName = "componentWillReceiveProps";
  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === "function") {
    foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
  }
  if (typeof prototype.componentWillUpdate === "function") {
    foundWillUpdateName = "componentWillUpdate";
  } else if (typeof prototype.UNSAFE_componentWillUpdate === "function") {
    foundWillUpdateName = "UNSAFE_componentWillUpdate";
  }
  if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
    var componentName = Component3.displayName || Component3.name;
    var newApiName = typeof Component3.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
    throw Error(
      "Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n" + componentName + " uses " + newApiName + " but also contains the following legacy lifecycles:" + (foundWillMountName !== null ? "\n  " + foundWillMountName : "") + (foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "") + (foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "") + "\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks"
    );
  }
  if (typeof Component3.getDerivedStateFromProps === "function") {
    prototype.componentWillMount = componentWillMount;
    prototype.componentWillReceiveProps = componentWillReceiveProps;
  }
  if (typeof prototype.getSnapshotBeforeUpdate === "function") {
    if (typeof prototype.componentDidUpdate !== "function") {
      throw new Error(
        "Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype"
      );
    }
    prototype.componentWillUpdate = componentWillUpdate;
    var componentDidUpdate = prototype.componentDidUpdate;
    prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState, maybeSnapshot) {
      var snapshot = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : maybeSnapshot;
      componentDidUpdate.call(this, prevProps, prevState, snapshot);
    };
  }
  return Component3;
}

// node_modules/uncontrollable/lib/esm/uncontrollable.js
var import_invariant2 = __toESM(require_browser());
var _jsxFileName = "/Users/jquense/src/uncontrollable/src/uncontrollable.js";
function uncontrollable(Component3, controlledValues, methods) {
  if (methods === void 0) {
    methods = [];
  }
  var displayName = Component3.displayName || Component3.name || "Component";
  var canAcceptRef2 = canAcceptRef(Component3);
  var controlledProps = Object.keys(controlledValues);
  var PROPS_TO_OMIT = controlledProps.map(defaultKey);
  !(canAcceptRef2 || !methods.length) ? true ? (0, import_invariant2.default)(false, "[uncontrollable] stateless function components cannot pass through methods because they have no associated instances. Check component: " + displayName + ", attempting to pass through methods: " + methods.join(", ")) : (0, import_invariant2.default)(false) : void 0;
  var UncontrolledComponent = function(_React$Component) {
    _inheritsLoose(UncontrolledComponent2, _React$Component);
    function UncontrolledComponent2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.handlers = /* @__PURE__ */ Object.create(null);
      controlledProps.forEach(function(propName) {
        var handlerName = controlledValues[propName];
        var handleChange = function handleChange2(value) {
          if (_this.props[handlerName]) {
            var _this$props;
            _this._notifying = true;
            for (var _len2 = arguments.length, args2 = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args2[_key2 - 1] = arguments[_key2];
            }
            (_this$props = _this.props)[handlerName].apply(_this$props, [value].concat(args2));
            _this._notifying = false;
          }
          if (!_this.unmounted)
            _this.setState(function(_ref) {
              var _extends2;
              var values3 = _ref.values;
              return {
                values: _extends(/* @__PURE__ */ Object.create(null), values3, (_extends2 = {}, _extends2[propName] = value, _extends2))
              };
            });
        };
        _this.handlers[handlerName] = handleChange;
      });
      if (methods.length)
        _this.attachRef = function(ref) {
          _this.inner = ref;
        };
      var values2 = /* @__PURE__ */ Object.create(null);
      controlledProps.forEach(function(key) {
        values2[key] = _this.props[defaultKey(key)];
      });
      _this.state = {
        values: values2,
        prevProps: {}
      };
      return _this;
    }
    var _proto = UncontrolledComponent2.prototype;
    _proto.shouldComponentUpdate = function shouldComponentUpdate() {
      return !this._notifying;
    };
    UncontrolledComponent2.getDerivedStateFromProps = function getDerivedStateFromProps(props, _ref2) {
      var values2 = _ref2.values, prevProps = _ref2.prevProps;
      var nextState = {
        values: _extends(/* @__PURE__ */ Object.create(null), values2),
        prevProps: {}
      };
      controlledProps.forEach(function(key) {
        nextState.prevProps[key] = props[key];
        if (!isProp(props, key) && isProp(prevProps, key)) {
          nextState.values[key] = props[defaultKey(key)];
        }
      });
      return nextState;
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.unmounted = true;
    };
    _proto.render = function render3() {
      var _this2 = this;
      var _this$props2 = this.props, innerRef = _this$props2.innerRef, props = _objectWithoutPropertiesLoose(_this$props2, ["innerRef"]);
      PROPS_TO_OMIT.forEach(function(prop) {
        delete props[prop];
      });
      var newProps = {};
      controlledProps.forEach(function(propName) {
        var propValue = _this2.props[propName];
        newProps[propName] = propValue !== void 0 ? propValue : _this2.state.values[propName];
      });
      return import_react6.default.createElement(Component3, _extends({}, props, newProps, this.handlers, {
        ref: innerRef || this.attachRef
      }));
    };
    return UncontrolledComponent2;
  }(import_react6.default.Component);
  polyfill(UncontrolledComponent);
  UncontrolledComponent.displayName = "Uncontrolled(" + displayName + ")";
  UncontrolledComponent.propTypes = _extends({
    innerRef: function innerRef() {
    }
  }, uncontrolledPropTypes(controlledValues, displayName));
  methods.forEach(function(method) {
    UncontrolledComponent.prototype[method] = function $proxiedMethod() {
      var _this$inner;
      return (_this$inner = this.inner)[method].apply(_this$inner, arguments);
    };
  });
  var WrappedComponent = UncontrolledComponent;
  if (import_react6.default.forwardRef) {
    WrappedComponent = import_react6.default.forwardRef(function(props, ref) {
      return import_react6.default.createElement(UncontrolledComponent, _extends({}, props, {
        innerRef: ref,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 128
        },
        __self: this
      }));
    });
    WrappedComponent.propTypes = UncontrolledComponent.propTypes;
  }
  WrappedComponent.ControlledComponent = Component3;
  WrappedComponent.deferControlTo = function(newComponent, additions, nextMethods) {
    if (additions === void 0) {
      additions = {};
    }
    return uncontrollable(newComponent, _extends({}, controlledValues, additions), nextMethods);
  };
  return WrappedComponent;
}

// node_modules/amis-core/esm/store/iRenderer.js
var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
var iRendererStore = StoreNode.named("iRendererStore").props({
  hasRemoteData: types.optional(types.boolean, false),
  data: types.optional(types.frozen(), {}),
  initedAt: 0,
  updatedAt: 0,
  pristine: types.optional(types.frozen(), {}),
  action: types.optional(types.frozen(), void 0),
  dialogOpen: false,
  dialogData: types.optional(types.frozen(), void 0),
  drawerOpen: false,
  drawerData: types.optional(types.frozen(), void 0)
}).views(function(self2) {
  return {
    getValueByName: function(name, canAccessSuper) {
      if (canAccessSuper === void 0) {
        canAccessSuper = true;
      }
      return getVariable(self2.data, name, canAccessSuper);
    },
    getPristineValueByName: function(name) {
      return getVariable(self2.pristine, name, false);
    }
  };
}).actions(function(self2) {
  var dialogCallbacks = new SimpleMap();
  var dialogScoped = null;
  var drawerScoped = null;
  var top = null;
  return {
    setTopStore: function(value) {
      top = value;
    },
    initData: function(data, skipSetPristine) {
      if (data === void 0) {
        data = {};
      }
      if (skipSetPristine === void 0) {
        skipSetPristine = false;
      }
      self2.initedAt = Date.now();
      !skipSetPristine && (self2.pristine = data);
      self2.data = data;
    },
    reset: function() {
      self2.data = self2.pristine;
    },
    updateData: function(data, tag, replace) {
      if (data === void 0) {
        data = {};
      }
      var prev = self2.data;
      var newData;
      if (tag) {
        var proto = createObject2(self2.data.__super || null, tag);
        newData = createObject2(proto, __assign(__assign({}, replace ? {} : self2.data), data));
      } else {
        newData = extendObject(self2.data, data, !replace);
      }
      Object.defineProperty(newData, "__prev", {
        value: __assign({}, prev),
        enumerable: false,
        configurable: false,
        writable: false
      });
      self2.data = newData;
    },
    changeValue: function(name, value, changePristine, force, otherModifier) {
      if (!name) {
        return;
      }
      var origin = getVariable(self2.data, name, false);
      if (value === origin && !force) {
        return;
      }
      var prev = self2.data;
      var data = cloneObject(self2.data);
      if (prev.hasOwnProperty("__prev")) {
        var prevData = cloneObject(prev.__prev);
        setVariable(prevData, name, origin);
        Object.defineProperty(data, "__prev", {
          value: prevData,
          enumerable: false,
          configurable: false,
          writable: false
        });
      } else {
        Object.defineProperty(data, "__prev", {
          value: __assign({}, prev),
          enumerable: false,
          configurable: false,
          writable: false
        });
      }
      if (value === void 0) {
        deleteVariable(data, name);
      } else {
        setVariable(data, name, value);
      }
      otherModifier === null || otherModifier === void 0 ? void 0 : otherModifier(data);
      if (changePristine) {
        var pristine = cloneObject(self2.pristine);
        setVariable(pristine, name, value);
        otherModifier === null || otherModifier === void 0 ? void 0 : otherModifier(pristine);
        self2.pristine = pristine;
      }
      if (!data.__pristine) {
        Object.defineProperty(data, "__pristine", {
          value: self2.pristine,
          enumerable: false,
          configurable: false,
          writable: false
        });
      }
      self2.data = data;
    },
    setCurrentAction: function(action) {
      self2.action = action;
    },
    openDialog: function(ctx, additonal, callback, scoped) {
      var chain = extractObjectChain(ctx);
      chain.length === 1 && chain.unshift(self2.data);
      if (additonal) {
        chain.splice(chain.length - 1, 0, additonal);
      }
      var data = createObjectFromChain(chain);
      if (self2.action.dialog && self2.action.dialog.data) {
        self2.dialogData = createObjectFromChain([
          top === null || top === void 0 ? void 0 : top.context,
          dataMapping(self2.action.dialog.data, data)
        ]);
        var clonedAction = __assign(__assign({}, self2.action), { dialog: __assign({}, self2.action.dialog) });
        delete clonedAction.dialog.data;
        self2.action = clonedAction;
      } else {
        self2.dialogData = data;
      }
      self2.dialogOpen = true;
      callback && dialogCallbacks.set(self2.dialogData, callback);
      dialogScoped = scoped || null;
    },
    closeDialog: function(result) {
      var callback = dialogCallbacks.get(self2.dialogData);
      self2.dialogOpen = false;
      dialogScoped = null;
      if (callback) {
        dialogCallbacks.delete(self2.dialogData);
        setTimeout(function() {
          return callback(result);
        }, 200);
      }
    },
    openDrawer: function(ctx, additonal, callback, scoped) {
      var chain = extractObjectChain(ctx);
      chain.length === 1 && chain.unshift(self2.data);
      if (additonal) {
        chain.splice(chain.length - 1, 0, additonal);
      }
      var data = createObjectFromChain(chain);
      if (self2.action.drawer.data) {
        self2.drawerData = createObjectFromChain([
          top === null || top === void 0 ? void 0 : top.context,
          dataMapping(self2.action.drawer.data, data)
        ]);
        var clonedAction = __assign(__assign({}, self2.action), { drawer: __assign({}, self2.action.drawer) });
        delete clonedAction.drawer.data;
        self2.action = clonedAction;
      } else {
        self2.drawerData = data;
      }
      self2.drawerOpen = true;
      if (callback) {
        dialogCallbacks.set(self2.drawerData, callback);
      }
      drawerScoped = scoped || null;
    },
    closeDrawer: function(result) {
      var callback = dialogCallbacks.get(self2.drawerData);
      self2.drawerOpen = false;
      drawerScoped = null;
      if (callback) {
        dialogCallbacks.delete(self2.drawerData);
        setTimeout(function() {
          return callback(result);
        }, 200);
      }
    },
    getDialogScoped: function() {
      return dialogScoped;
    },
    getDrawerScoped: function() {
      return drawerScoped;
    }
  };
});

// node_modules/amis-core/esm/utils/replaceText.js
var import_cloneDeep2 = __toESM(require_cloneDeep());
function replaceText(schema, replaceText2, replaceTextIgnoreKeys) {
  if (replaceText2 && isObject(replaceText2)) {
    var replicaSchema = (0, import_cloneDeep2.default)(schema);
    var replaceKeys_1 = Object.keys(replaceText2);
    replaceKeys_1.sort(function(a, b) {
      return b.length - a.length;
    });
    var IgnoreKeys_1 = new Set(Array.isArray(replaceTextIgnoreKeys) ? replaceTextIgnoreKeys : []);
    var ignore_1 = typeof replaceTextIgnoreKeys === "function" ? replaceTextIgnoreKeys : function(key) {
      return IgnoreKeys_1.has(key);
    };
    JSONTraverse(replicaSchema, function(value, key, object) {
      var e_1, _a3;
      var descriptor = Object.getOwnPropertyDescriptor(object, key);
      if (typeof value === "string" && (descriptor === null || descriptor === void 0 ? void 0 : descriptor.writable) && !ignore_1(key, value, object)) {
        try {
          for (var replaceKeys_2 = __values(replaceKeys_1), replaceKeys_2_1 = replaceKeys_2.next(); !replaceKeys_2_1.done; replaceKeys_2_1 = replaceKeys_2.next()) {
            var replaceKey = replaceKeys_2_1.value;
            if (~value.indexOf(replaceKey)) {
              value = object[key] = value.replaceAll(replaceKey, replaceText2[replaceKey]);
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (replaceKeys_2_1 && !replaceKeys_2_1.done && (_a3 = replaceKeys_2.return))
              _a3.call(replaceKeys_2);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      }
    });
    return replicaSchema;
  }
  return schema;
}

// node_modules/amis-core/esm/store/service.js
var ServiceStore = iRendererStore.named("ServiceStore").props({
  msg: "",
  error: false,
  fetching: false,
  saving: false,
  busying: false,
  checking: false,
  initializing: false,
  schema: types.optional(types.frozen(), null),
  schemaKey: ""
}).views(function(self2) {
  return {
    get loading() {
      return self2.fetching || self2.saving || self2.busying || self2.initializing;
    }
  };
}).actions(function(self2) {
  var fetchCancel;
  var fetchSchemaCancel;
  function markFetching(fetching) {
    if (fetching === void 0) {
      fetching = true;
    }
    self2.fetching = fetching;
  }
  function markSaving(saving) {
    if (saving === void 0) {
      saving = true;
    }
    self2.saving = saving;
  }
  function markBusying(busying) {
    if (busying === void 0) {
      busying = true;
    }
    self2.busying = busying;
  }
  function reInitData(data, replace) {
    if (replace === void 0) {
      replace = false;
    }
    var newData = extendObject(self2.pristine, data, !replace);
    self2.data = self2.pristine = newData;
  }
  function updateMessage(msg, error) {
    if (error === void 0) {
      error = false;
    }
    self2.msg = msg && String(msg) || "";
    self2.error = error;
  }
  function clearMessage() {
    updateMessage("");
  }
  var fetchInitData = flow(function getInitData(api, data, options) {
    var json, replace, data_1, ret, e_1, env, message;
    var _a3, _b3, _c, _d, _e, _f, _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _h.trys.push([0, 6, , 7]);
          if (fetchCancel) {
            fetchCancel();
            fetchCancel = null;
            self2.fetching = false;
          }
          if (self2.fetching) {
            return [
              2
              /*return*/
            ];
          }
          options && options.silent || markFetching(true);
          return [4, getEnv(self2).fetcher(api, data, __assign(__assign({}, options), { cancelExecutor: function(executor) {
            return fetchCancel = executor;
          } }))];
        case 1:
          json = _h.sent();
          fetchCancel = null;
          if (!!json.ok)
            return [3, 2];
          updateMessage((_c = (_b3 = (_a3 = api === null || api === void 0 ? void 0 : api.messages) === null || _a3 === void 0 ? void 0 : _a3.failed) !== null && _b3 !== void 0 ? _b3 : json.msg) !== null && _c !== void 0 ? _c : options && options.errorMessage, true);
          !api.silent && getEnv(self2).notify("error", self2.msg, json.msgTimeout !== void 0 ? {
            closeButton: true,
            timeout: json.msgTimeout
          } : void 0);
          return [3, 5];
        case 2:
          self2.updatedAt = Date.now();
          replace = !!api.replaceData;
          data_1 = __assign(__assign({}, replace ? {} : self2.data), normalizeApiResponseData(json.data));
          reInitData(data_1, replace);
          self2.hasRemoteData = true;
          if (!(options && options.onSuccess))
            return [3, 4];
          ret = options.onSuccess(json, data_1);
          if (!(ret && ret.then))
            return [3, 4];
          return [4, ret];
        case 3:
          _h.sent();
          _h.label = 4;
        case 4:
          updateMessage((_g = (_f = (_e = (_d = api === null || api === void 0 ? void 0 : api.messages) === null || _d === void 0 ? void 0 : _d.success) !== null && _e !== void 0 ? _e : json.msg) !== null && _f !== void 0 ? _f : options && options.successMessage) !== null && _g !== void 0 ? _g : json.defaultMsg);
          options && options.successMessage && getEnv(self2).notify("success", self2.msg);
          _h.label = 5;
        case 5:
          markFetching(false);
          return [2, json];
        case 6:
          e_1 = _h.sent();
          env = getEnv(self2);
          if (!isAlive(self2) || self2.disposed) {
            return [
              2
              /*return*/
            ];
          }
          if (env.isCancel(e_1)) {
            return [
              2
              /*return*/
            ];
          }
          markFetching(false);
          console.error(e_1);
          message = e_1.message || e_1;
          if (e_1 && e_1.message === "Network Error") {
            message = self2.__("networkError");
          }
          !api.silent && env.notify("error", message);
          return [
            2
            /*return*/
          ];
        case 7:
          return [
            2
            /*return*/
          ];
      }
    });
  });
  var setHasRemoteData = function() {
    self2.hasRemoteData = true;
  };
  var fetchData = flow(function getInitData(api, data, options) {
    var json, ret, e_2, env, message;
    var _a3, _b3, _c, _d, _e, _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _g.trys.push([0, 6, , 7]);
          if (fetchCancel) {
            fetchCancel();
            fetchCancel = null;
            self2.fetching = false;
          }
          if (self2.fetching) {
            return [
              2
              /*return*/
            ];
          }
          options && options.silent || markFetching(true);
          return [4, getEnv(self2).fetcher(api, data, __assign(__assign({}, options), { cancelExecutor: function(executor) {
            return fetchCancel = executor;
          } }))];
        case 1:
          json = _g.sent();
          fetchCancel = null;
          if (!isEmpty2(json.data) || json.ok) {
            self2.updatedAt = Date.now();
            json.data && self2.updateData(normalizeApiResponseData(json.data), void 0, !!api.replaceData);
            self2.hasRemoteData = true;
          }
          if (!!json.ok)
            return [3, 2];
          updateMessage((_c = (_b3 = (_a3 = api === null || api === void 0 ? void 0 : api.messages) === null || _a3 === void 0 ? void 0 : _a3.failed) !== null && _b3 !== void 0 ? _b3 : json.msg) !== null && _c !== void 0 ? _c : options && options.errorMessage, true);
          !api.silent && getEnv(self2).notify("error", self2.msg, json.msgTimeout !== void 0 ? {
            closeButton: true,
            timeout: json.msgTimeout
          } : void 0);
          return [3, 5];
        case 2:
          if (!(options && options.onSuccess))
            return [3, 4];
          ret = options.onSuccess(json, json.data);
          if (!(ret && ret.then))
            return [3, 4];
          return [4, ret];
        case 3:
          _g.sent();
          _g.label = 4;
        case 4:
          updateMessage((_f = (_e = (_d = api === null || api === void 0 ? void 0 : api.messages) === null || _d === void 0 ? void 0 : _d.success) !== null && _e !== void 0 ? _e : json.msg) !== null && _f !== void 0 ? _f : options && options.successMessage);
          options && options.successMessage && getEnv(self2).notify("success", self2.msg);
          _g.label = 5;
        case 5:
          markFetching(false);
          return [2, json];
        case 6:
          e_2 = _g.sent();
          env = getEnv(self2);
          if (!isAlive(self2) || self2.disposed) {
            return [
              2
              /*return*/
            ];
          }
          if (env.isCancel(e_2)) {
            return [
              2
              /*return*/
            ];
          }
          markFetching(false);
          console.error(e_2);
          message = e_2.message || e_2;
          if (e_2 && e_2.message === "Network Error") {
            message = self2.__("networkError");
          }
          !api.silent && env.notify("error", message);
          return [
            2
            /*return*/
          ];
        case 7:
          return [
            2
            /*return*/
          ];
      }
    });
  });
  var saveRemote = flow(function saveRemote2(api, data, options) {
    var json, ret, ret, e_3, result;
    var _a3, _b3, _c, _d, _e, _f, _g;
    if (options === void 0) {
      options = {};
    }
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _h.trys.push([0, 8, , 9]);
          options = __assign({ method: "post" }, options);
          if (self2.saving) {
            return [
              2
              /*return*/
            ];
          }
          markSaving(true);
          return [4, getEnv(self2).fetcher(api, data, options)];
        case 1:
          json = _h.sent();
          if (!isEmpty2(json.data) || json.ok) {
            self2.updatedAt = Date.now();
            json.data && self2.updateData(normalizeApiResponseData(json.data), void 0, !!api.replaceData);
          }
          if (!!json.ok)
            return [3, 4];
          if (!(options && options.onFailed))
            return [3, 3];
          ret = options.onFailed(json);
          if (!(ret && ret.then))
            return [3, 3];
          return [4, ret];
        case 2:
          _h.sent();
          _h.label = 3;
        case 3:
          updateMessage((_d = (_c = (_b3 = (_a3 = api === null || api === void 0 ? void 0 : api.messages) === null || _a3 === void 0 ? void 0 : _a3.failed) !== null && _b3 !== void 0 ? _b3 : json.msg) !== null && _c !== void 0 ? _c : options && options.errorMessage) !== null && _d !== void 0 ? _d : self2.__("saveFailed"), true);
          throw new ServerError(self2.msg, json);
        case 4:
          if (!(options && options.onSuccess))
            return [3, 6];
          ret = options.onSuccess(json, json.data);
          if (!(ret && ret.then))
            return [3, 6];
          return [4, ret];
        case 5:
          _h.sent();
          _h.label = 6;
        case 6:
          updateMessage((_g = (_f = (_e = api === null || api === void 0 ? void 0 : api.messages) === null || _e === void 0 ? void 0 : _e.success) !== null && _f !== void 0 ? _f : json.msg) !== null && _g !== void 0 ? _g : options && options.successMessage);
          self2.msg && getEnv(self2).notify("success", self2.msg, json.msgTimeout !== void 0 ? {
            closeButton: true,
            timeout: json.msgTimeout
          } : void 0);
          _h.label = 7;
        case 7:
          markSaving(false);
          return [2, json.data];
        case 8:
          e_3 = _h.sent();
          self2.saving = false;
          if (!isAlive(self2) || self2.disposed) {
            return [
              2
              /*return*/
            ];
          }
          console.error(e_3);
          if (!api.silent) {
            if (e_3.type === "ServerError") {
              result = e_3.response;
              getEnv(self2).notify("error", e_3.message, result.msgTimeout !== void 0 ? {
                closeButton: true,
                timeout: result.msgTimeout
              } : void 0);
            } else {
              getEnv(self2).notify("error", e_3.message);
            }
          }
          throw e_3;
        case 9:
          return [
            2
            /*return*/
          ];
      }
    });
  });
  var fetchSchema = flow(function fetchSchema2(api, data, options) {
    var json, env, e_4, env, message;
    var _a3, _b3, _c, _d, _e, _f, _g, _h;
    if (options === void 0) {
      options = {};
    }
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _j.trys.push([0, 2, , 3]);
          options = __assign(__assign({ method: "post" }, options), { cancelExecutor: function(executor) {
            return fetchSchemaCancel = executor;
          } });
          if (fetchSchemaCancel) {
            fetchSchemaCancel();
            fetchSchemaCancel = null;
            self2.initializing = false;
          }
          if (self2.initializing) {
            return [
              2
              /*return*/
            ];
          }
          self2.initializing = true;
          if (typeof api === "string") {
            api += (~api.indexOf("?") ? "&" : "?") + "_replace=1";
          } else {
            api = __assign(__assign({}, api), { url: api.url + (~api.url.indexOf("?") ? "&" : "?") + "_replace=1" });
          }
          return [4, getEnv(self2).fetcher(api, data, options)];
        case 1:
          json = _j.sent();
          fetchSchemaCancel = null;
          if (!json.ok) {
            updateMessage((_d = (_c = (_b3 = (_a3 = api === null || api === void 0 ? void 0 : api.messages) === null || _a3 === void 0 ? void 0 : _a3.failed) !== null && _b3 !== void 0 ? _b3 : json.msg) !== null && _c !== void 0 ? _c : options && options.errorMessage) !== null && _d !== void 0 ? _d : self2.__("fetchFailed"), true);
            !(api === null || api === void 0 ? void 0 : api.silent) && getEnv(self2).notify("error", self2.msg, json.msgTimeout !== void 0 ? {
              closeButton: true,
              timeout: json.msgTimeout
            } : void 0);
          } else {
            if (json.data) {
              env = getEnv(self2);
              json.data = replaceText(json.data, env.replaceText, env.replaceTextIgnoreKeys);
              self2.schema = Array.isArray(json.data) ? json.data : Object.assign(((_e = json.data) === null || _e === void 0 ? void 0 : _e.type) ? {} : {
                type: "wrapper",
                wrap: false
              }, normalizeApiResponseData(json.data));
              self2.schemaKey = "" + Date.now();
              isObject(json.data.data) && self2.updateData(json.data.data, void 0, !!api.replaceData);
            }
            updateMessage((_h = (_g = (_f = api === null || api === void 0 ? void 0 : api.messages) === null || _f === void 0 ? void 0 : _f.success) !== null && _g !== void 0 ? _g : json.msg) !== null && _h !== void 0 ? _h : options && options.successMessage);
            options && options.successMessage && getEnv(self2).notify("success", self2.msg);
          }
          self2.initializing = false;
          return [2, json.data];
        case 2:
          e_4 = _j.sent();
          env = getEnv(self2);
          self2.initializing = false;
          if (!isAlive(self2) || self2.disposed) {
            return [
              2
              /*return*/
            ];
          }
          if (env.isCancel(e_4)) {
            return [
              2
              /*return*/
            ];
          }
          console.error(e_4);
          message = e_4.message || e_4;
          if (e_4 && e_4.message === "Network Error") {
            message = self2.__("networkError");
          }
          !(api === null || api === void 0 ? void 0 : api.silent) && env.notify("error", message);
          return [3, 3];
        case 3:
          return [
            2
            /*return*/
          ];
      }
    });
  });
  var checkRemote = flow(function checkRemote2(api, data, options) {
    var json;
    return __generator(this, function(_a3) {
      switch (_a3.label) {
        case 0:
          if (self2.checking) {
            return [
              2
              /*return*/
            ];
          }
          _a3.label = 1;
        case 1:
          _a3.trys.push([1, , 3, 4]);
          self2.checking = true;
          return [4, getEnv(self2).fetcher(api, data, options)];
        case 2:
          json = _a3.sent();
          json.ok && self2.updateData(json.data, void 0, !!api.replaceData);
          if (!json.ok) {
            throw new Error(json.msg);
          }
          return [2, json.data];
        case 3:
          self2.checking = false;
          return [
            7
            /*endfinally*/
          ];
        case 4:
          return [
            2
            /*return*/
          ];
      }
    });
  });
  return {
    markFetching,
    markSaving,
    markBusying,
    fetchInitData,
    fetchData,
    reInitData,
    updateMessage,
    clearMessage,
    setHasRemoteData,
    saveRemote,
    fetchSchema,
    checkRemote
  };
});

// node_modules/amis-core/esm/store/combo.js
var UniqueGroup = types.model("UniqueGroup", {
  name: types.identifier,
  itemsRef: types.array(types.string)
}).views(function(self2) {
  return {
    get items() {
      return self2.itemsRef.map(function(id) {
        return getStoreById(id);
      });
    }
  };
}).actions(function(self2) {
  return {
    removeItem: function(item) {
      self2.itemsRef.replace(self2.itemsRef.filter(function(id) {
        return id !== item.id;
      }));
    },
    addItem: function(item) {
      self2.itemsRef.push(item.id);
    }
  };
});
var ComboStore = iRendererStore.named("ComboStore").props({
  uniques: types.map(UniqueGroup),
  multiple: false,
  formsRef: types.optional(types.array(types.string), []),
  minLength: 0,
  maxLength: 0,
  length: 0,
  activeKey: 0,
  memberValidMap: types.optional(types.frozen(), {})
}).views(function(self2) {
  function getForms() {
    return self2.formsRef.map(function(item) {
      return getStoreById(item);
    });
  }
  return {
    get forms() {
      return getForms();
    },
    get addable() {
      if (self2.maxLength && self2.length >= self2.maxLength) {
        return false;
      }
      if (self2.uniques.size) {
        var isFull_1 = false;
        self2.uniques.forEach(function(item) {
          if (isFull_1 || !item.items.length) {
            return;
          }
          var total = countTree(item.items[0].options, function(item2) {
            return typeof item2.value !== "undefined";
          });
          var current = item.items.reduce(function(total2, item2) {
            return total2 + item2.selectedOptions.length;
          }, 0);
          isFull_1 = total && current >= total ? true : false;
        });
        if (isFull_1) {
          return false;
        }
      }
      return true;
    },
    get removable() {
      if (self2.minLength && self2.minLength >= self2.length) {
        return false;
      }
      return true;
    },
    /**
     * name 值有两种类型：
     * 1. 数字索引，出现在多条模式下，这个时候，需要返回当前索引下的form，并且用于下一层的遍历搜索
     * 2. 普通的表单项 name 值，出现在单条模式下，当前这层查找已经结束，所以要返回当前找到的items，而不能返回form
     *
     * @param name 查找的name
     */
    getItemsByName: function(name) {
      var forms = getForms();
      return self2.multiple ? [forms[parseInt(name, 10)]] : forms[0].getItemsByName(name);
    }
  };
}).actions(function(self2) {
  function config(setting) {
    typeof setting.multiple !== "undefined" && (self2.multiple = setting.multiple);
    typeof setting.minLength !== "undefined" && (self2.minLength = parseInt(setting.minLength, 10));
    typeof setting.maxLength !== "undefined" && (self2.maxLength = parseInt(setting.maxLength, 10));
    typeof setting.length !== "undefined" && (self2.length = setting.length);
  }
  function bindUniuqueItem(item) {
    if (!self2.uniques.has(item.name)) {
      self2.uniques.put({
        name: item.name
      });
    }
    var group = self2.uniques.get(item.name);
    group.addItem(item);
  }
  function unBindUniuqueItem(item) {
    var group = self2.uniques.get(item.name);
    group.removeItem(item);
    if (!group.items.length) {
      self2.uniques.delete(item.name);
    }
  }
  function addForm(form) {
    self2.formsRef.push(form.id);
  }
  function onChildStoreDispose(child) {
    if (child.storeType === "FormStore") {
      var idx = self2.formsRef.indexOf(child.id);
      if (~idx) {
        self2.formsRef.splice(idx, 1);
        child.items.forEach(function(item) {
          if (item.unique) {
            unBindUniuqueItem(item);
          }
        });
        self2.forms.forEach(function(form) {
          return form.items.forEach(function(item) {
            if (item.unique) {
              item.syncOptions(void 0, form.data);
              if (item.errors.length) {
                item.validate(item.tmpValue);
              }
            }
          });
        });
      }
    }
    self2.removeChildId(child.id);
  }
  function setActiveKey(key) {
    self2.activeKey = key;
  }
  function setMemberValid(valid, index) {
    var _a3;
    self2.memberValidMap = __assign(__assign({}, self2.memberValidMap), (_a3 = {}, _a3[index] = valid, _a3));
  }
  return {
    config,
    setActiveKey,
    bindUniuqueItem,
    unBindUniuqueItem,
    addForm,
    onChildStoreDispose,
    setMemberValid
  };
});

// node_modules/amis-core/esm/store/form.js
var import_debounce2 = __toESM(require_debounce());
var import_throttle = __toESM(require_throttle());
var import_toPairs = __toESM(require_toPairs());
var import_pick = __toESM(require_pick());
var import_isEqual5 = __toESM(require_isEqual());
var import_flatten = __toESM(require_flatten());
var import_find2 = __toESM(require_find());
init_moment();
var import_isPlainObject11 = __toESM(require_isPlainObject());
var FormStore = ServiceStore.named("FormStore").props({
  inited: false,
  validated: false,
  submited: false,
  submiting: false,
  savedData: types.frozen(),
  // items: types.optional(types.array(types.late(() => FormItemStore)), []),
  canAccessSuperData: true,
  persistData: types.optional(types.union(types.string, types.boolean), ""),
  restError: types.optional(types.array(types.string), [])
  // 没有映射到表达项上的 errors
}).views(function(self2) {
  function getItems() {
    var formItems = [];
    var pool = self2.children.concat();
    while (pool.length) {
      var current = pool.shift();
      if (current.storeType === "FormItemStore" && !current.isControlled) {
        formItems.push(current);
      } else if (!["ComboStore", "TableStore", "FormStore"].includes(current.storeType)) {
        pool.push.apply(pool, __spreadArray([], __read(current.children), false));
      }
    }
    return formItems;
  }
  return {
    get loading() {
      return self2.saving || self2.fetching;
    },
    get items() {
      return getItems();
    },
    /** 获取InputGroup的子元素 */
    get inputGroupItems() {
      var _a3, _b3;
      var formItems = {};
      var children = this.items.concat();
      while (children.length) {
        var current = children.shift();
        if (current.inputGroupControl && ((_a3 = current.inputGroupControl) === null || _a3 === void 0 ? void 0 : _a3.name)) {
          var controlName = (_b3 = current.inputGroupControl) === null || _b3 === void 0 ? void 0 : _b3.name;
          if (formItems.hasOwnProperty(controlName)) {
            formItems[controlName].push(current);
          } else {
            formItems[controlName] = [current];
          }
        }
      }
      return formItems;
    },
    get errors() {
      var errors = {};
      getItems().forEach(function(item) {
        if (!item.valid) {
          errors[item.name] = Array.isArray(errors[item.name]) ? errors[item.name].concat(item.errors) : item.errors.concat();
        }
      });
      return errors;
    },
    getValueByName: function(name, canAccessSuperData) {
      if (canAccessSuperData === void 0) {
        canAccessSuperData = self2.canAccessSuperData;
      }
      return getVariable(self2.data, name, canAccessSuperData);
    },
    getPristineValueByName: function(name) {
      return getVariable(self2.pristine, name);
    },
    getItemById: function(id) {
      return getItems().find(function(item) {
        return item.itemId === id;
      });
    },
    getItemByName: function(name) {
      return getItems().find(function(item) {
        return item.name === name;
      });
    },
    getItemsByName: function(name) {
      return getItems().filter(function(item) {
        return item.name === name;
      });
    },
    get valid() {
      return getItems().every(function(item) {
        return item.valid;
      }) && (!self2.restError || !self2.restError.length);
    },
    get validating() {
      return getItems().some(function(item) {
        return item.validating;
      });
    },
    get isPristine() {
      return (0, import_isEqual5.default)(self2.pristine, self2.data);
    },
    get modified() {
      if (self2.savedData) {
        return self2.savedData !== self2.data;
      }
      return !this.isPristine;
    },
    get persistKey() {
      return "".concat(location.pathname, "/").concat(self2.path, "/").concat(typeof self2.persistData === "string" ? filter(self2.persistData, self2.data) : self2.persistData);
    }
  };
}).actions(function(self2) {
  function setValues(values2, tag, replace) {
    self2.updateData(values2, tag, replace);
    self2.items.forEach(function(item) {
      if (item.extraName) {
        var value = [
          getVariable(values2, item.name, false),
          getVariable(values2, item.extraName, false)
        ];
        if (value.some(function(item2) {
          return item2 !== void 0;
        }) && !(0, import_isEqual5.default)(value, item.tmpValue)) {
          var origin_1 = item.splitExtraValue(item.tmpValue);
          item.changeTmpValue(value.map(function(item2, idx) {
            return item2 !== null && item2 !== void 0 ? item2 : origin_1[idx];
          }), "dataChanged");
          item.changeEmitedValue(void 0);
        }
      } else {
        var value = getVariable(values2, item.name, false);
        if (value !== void 0 && value !== item.tmpValue) {
          item.changeTmpValue(value, "dataChanged");
          item.changeEmitedValue(void 0);
        }
      }
      item.reset();
      self2.inited && item.validateOnChange && item.validate(self2.data);
    });
    syncOptions();
  }
  function setValueByName(name, value, isPristine, force) {
    if (isPristine === void 0) {
      isPristine = false;
    }
    if (force === void 0) {
      force = false;
    }
    var origin = getVariable(self2.data, name, false);
    var prev = self2.data;
    var data = cloneObject(self2.data);
    if (value !== origin) {
      if (prev.hasOwnProperty("__prev")) {
        var prevData = cloneObject(prev.__prev);
        setVariable(prevData, name, origin);
        Object.defineProperty(data, "__prev", {
          value: prevData,
          enumerable: false,
          configurable: false,
          writable: false
        });
      } else {
        Object.defineProperty(data, "__prev", {
          value: __assign({}, prev),
          enumerable: false,
          configurable: false,
          writable: false
        });
      }
    } else if (!force) {
      return;
    }
    setVariable(data, name, value);
    if (isPristine) {
      var pristine = cloneObject(self2.pristine);
      setVariable(pristine, name, value);
      self2.pristine = pristine;
    }
    if (!data.__pristine) {
      Object.defineProperty(data, "__pristine", {
        value: self2.pristine,
        enumerable: false,
        configurable: false,
        writable: false
      });
    }
    self2.data = data;
    syncOptions();
  }
  function deleteValueByName(name) {
    var prev = self2.data;
    var data = cloneObject(self2.data);
    if (prev.hasOwnProperty("__prev")) {
      var prevData = cloneObject(prev.__prev);
      setVariable(prevData, name, getVariable(prev, name));
      Object.defineProperty(data, "__prev", {
        value: prevData,
        enumerable: false,
        configurable: false,
        writable: false
      });
    } else {
      Object.defineProperty(data, "__prev", {
        value: __assign({}, prev),
        enumerable: false,
        configurable: false,
        writable: false
      });
    }
    deleteVariable(data, name);
    self2.data = data;
  }
  function trimValues() {
    var data = mapObject(self2.data, function(item) {
      return typeof item === "string" ? item.trim() : item;
    });
    self2.updateData(data);
  }
  var syncOptions = (0, import_debounce2.default)(function() {
    return self2.items.forEach(function(item) {
      return item.syncOptions(void 0, self2.data);
    });
  }, 250, {
    trailing: true,
    leading: false
  });
  function setRestError(errors) {
    self2.restError.replace(errors);
  }
  function addRestError(msg, name) {
    var names = name ? Array.isArray(name) ? name.concat() : [name] : null;
    if (Array.isArray(names)) {
      var errors_1 = {};
      names.forEach(function(name2) {
        return errors_1[name2] = msg;
      });
      setFormItemErrors(errors_1, "rules");
    } else {
      self2.restError.push(msg);
    }
  }
  function clearRestError() {
    setRestError([]);
  }
  var saveRemote = flow(function saveRemote2(api, data, options) {
    var ret, json, ret, e_1, ret, result;
    var _a3, _b3, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
    if (options === void 0) {
      options = {};
    }
    return __generator(this, function(_r) {
      switch (_r.label) {
        case 0:
          clearRestError();
          _r.label = 1;
        case 1:
          _r.trys.push([1, 12, , 15]);
          options = __assign({ method: "post" }, options);
          if (!(options && options.beforeSend))
            return [3, 4];
          ret = options.beforeSend(data);
          if (!(ret && ret.then))
            return [3, 3];
          return [4, ret];
        case 2:
          ret = _r.sent();
          _r.label = 3;
        case 3:
          if (ret === false) {
            return [
              2
              /*return*/
            ];
          }
          _r.label = 4;
        case 4:
          self2.markSaving(true);
          return [4, getEnv(self2).fetcher(api, data, options)];
        case 5:
          json = _r.sent();
          if (!isEmpty2(json.data) || json.ok) {
            self2.updatedAt = Date.now();
            setValues(normalizeApiResponseData(json.data), json.ok ? {
              __saved: Date.now()
            } : void 0, !!api.replaceData);
          }
          if (!!json.ok)
            return [3, 6];
          if (json.status === 422 && json.errors) {
            setFormItemErrors(json.errors);
            self2.updateMessage((_d = (_c = (_b3 = (_a3 = api === null || api === void 0 ? void 0 : api.messages) === null || _a3 === void 0 ? void 0 : _a3.failed) !== null && _b3 !== void 0 ? _b3 : json.msg) !== null && _c !== void 0 ? _c : self2.__(options && options.errorMessage)) !== null && _d !== void 0 ? _d : self2.__("Form.validateFailed"), true);
          } else {
            self2.updateMessage((_g = (_f = (_e = api === null || api === void 0 ? void 0 : api.messages) === null || _e === void 0 ? void 0 : _e.failed) !== null && _f !== void 0 ? _f : json.msg) !== null && _g !== void 0 ? _g : self2.__(options && options.errorMessage), true);
          }
          throw new ServerError(self2.msg, json);
        case 6:
          updateSavedData();
          ret = (_h = options === null || options === void 0 ? void 0 : options.onSuccess) === null || _h === void 0 ? void 0 : _h.call(options, json, json.data);
          if (!(ret === null || ret === void 0 ? void 0 : ret.then))
            return [3, 8];
          return [4, ret];
        case 7:
          ret = _r.sent();
          _r.label = 8;
        case 8:
          if (!((_j = ret === null || ret === void 0 ? void 0 : ret.cbResult) === null || _j === void 0 ? void 0 : _j.then))
            return [3, 10];
          return [4, ret.cbResult];
        case 9:
          _r.sent();
          _r.label = 10;
        case 10:
          self2.markSaving(false);
          self2.updateMessage((_o = (_m = (_l = (_k = api === null || api === void 0 ? void 0 : api.messages) === null || _k === void 0 ? void 0 : _k.success) !== null && _l !== void 0 ? _l : json.msg) !== null && _m !== void 0 ? _m : options.successMessage === "saveSuccess" ? json.defaultMsg : self2.__(options && options.successMessage)) !== null && _o !== void 0 ? _o : json.defaultMsg);
          if (!((_p = ret === null || ret === void 0 ? void 0 : ret.dispatcher) === null || _p === void 0 ? void 0 : _p.prevented)) {
            self2.msg && getEnv(self2).notify("success", self2.msg, json.msgTimeout !== void 0 ? {
              closeButton: true,
              timeout: json.msgTimeout
            } : void 0);
          }
          return [2, json.data];
        case 11:
          return [3, 15];
        case 12:
          e_1 = _r.sent();
          self2.markSaving(false);
          ret = options && options.onFailed && options.onFailed(e_1.response || {});
          if (!(ret === null || ret === void 0 ? void 0 : ret.then))
            return [3, 14];
          return [4, ret];
        case 13:
          ret = _r.sent();
          _r.label = 14;
        case 14:
          if (!isAlive(self2) || self2.disposed) {
            return [
              2
              /*return*/
            ];
          }
          if ((_q = ret === null || ret === void 0 ? void 0 : ret.dispatcher) === null || _q === void 0 ? void 0 : _q.prevented) {
            return [
              2
              /*return*/
            ];
          }
          if (!(api === null || api === void 0 ? void 0 : api.silent)) {
            if (e_1.type === "ServerError") {
              result = e_1.response;
              getEnv(self2).notify("error", e_1.message, result.msgTimeout !== void 0 ? {
                closeButton: true,
                timeout: result.msgTimeout
              } : void 0);
            } else {
              getEnv(self2).notify("error", e_1.message);
            }
          }
          throw e_1;
        case 15:
          return [
            2
            /*return*/
          ];
      }
    });
  });
  function setFormItemErrors(errors, tag) {
    if (tag === void 0) {
      tag = "remote";
    }
    Object.keys(errors).forEach(function(key) {
      var item = self2.getItemById(key);
      var items = self2.getItemsByName(key);
      if (item) {
        item.setError(errors[key], tag);
        delete errors[key];
      } else if (items.length) {
        items.forEach(function(item2) {
          return item2.setError(errors[key], tag);
        });
        delete errors[key];
      } else {
        var items_1 = getItemsByPath(key);
        if (Array.isArray(items_1) && items_1.length) {
          items_1.forEach(function(item2) {
            return item2.setError("".concat(errors[key]), tag);
          });
          delete errors[key];
        }
      }
    });
    !isEmpty2(errors) && setRestError(Object.keys(errors).map(function(key) {
      return String(errors[key]);
    }));
  }
  var getItemsByPath = function(key) {
    var paths = keyToPath(key);
    var len = paths.length;
    return paths.reduce(function(stores3, path, idx) {
      if (Array.isArray(stores3) && stores3.every(function(s) {
        return s.getItemsByName;
      })) {
        var items = (0, import_flatten.default)(stores3.map(function(s) {
          return s.getItemsByName(path);
        })).filter(function(i) {
          return i;
        });
        var subStores = items.map(function(item) {
          var _a3;
          return (_a3 = item === null || item === void 0 ? void 0 : item.getSubStore) === null || _a3 === void 0 ? void 0 : _a3.call(item);
        }).filter(function(i) {
          return i;
        });
        return subStores.length && idx < len - 1 ? subStores : items;
      }
      return null;
    }, [self2]);
  };
  var toastValidateError = (0, import_throttle.default)(function(msg) {
    var env = getEnv(self2);
    env.notify("error", msg);
  }, 1e4, {
    trailing: false,
    leading: true
  });
  var submit = flow(function submit2(fn, hooks, failedMessage, validateErrCb, throwErrors) {
    var diff, result;
    return __generator(this, function(_a3) {
      switch (_a3.label) {
        case 0:
          self2.submited = true;
          self2.submiting = true;
          _a3.label = 1;
        case 1:
          _a3.trys.push([1, , 5, 6]);
          return [4, validate2(hooks, void 0, true, failedMessage, validateErrCb)];
        case 2:
          _a3.sent();
          if (!fn)
            return [3, 4];
          diff = difference(self2.data, self2.pristine);
          return [4, fn(createObject2(createObject2(self2.data.__super, {
            diff,
            __diff: diff,
            pristine: self2.pristine
          }), self2.data))];
        case 3:
          result = _a3.sent();
          return [2, result !== null && result !== void 0 ? result : self2.data];
        case 4:
          return [2, self2.data];
        case 5:
          self2.submiting = false;
          return [
            7
            /*endfinally*/
          ];
        case 6:
          return [
            2
            /*return*/
          ];
      }
    });
  });
  var validate2 = flow(function validate3(hooks, forceValidate, throwErrors, failedMessage, validateErrCb) {
    var items, i, len, item, i, len, msg, dispatcher;
    return __generator(this, function(_a3) {
      switch (_a3.label) {
        case 0:
          self2.validated = true;
          items = self2.items.concat();
          i = 0, len = items.length;
          _a3.label = 1;
        case 1:
          if (!(i < len))
            return [3, 4];
          item = items[i];
          item.clearError("rules");
          if (item.validated && isObject(item.rules) && (0, import_toPairs.default)(item.rules).filter(function(_a4) {
            var _b3 = __read(_a4, 2), key = _b3[0];
            _b3[1];
            return /^is(Date)?Time/.test(key);
          }).some(function(_a4) {
            var _b3 = __read(_a4, 2);
            _b3[0];
            var value = _b3[1];
            return Array.isArray(value) ? value.some(function(item2) {
              return isPureVariable(item2);
            }) : isPureVariable(value);
          })) {
            item.resetValidationStatus();
          }
          if (!(!item.validated || item.rules.equals || item.rules.equalsField || item.unique || forceValidate || !!item.validateApi || item.isValueSchemaExp))
            return [3, 3];
          return [4, item.validate(self2.data)];
        case 2:
          _a3.sent();
          _a3.label = 3;
        case 3:
          i++;
          return [3, 1];
        case 4:
          if (!(hooks && hooks.length))
            return [3, 8];
          i = 0, len = hooks.length;
          _a3.label = 5;
        case 5:
          if (!(i < len))
            return [3, 8];
          return [4, hooks[i]()];
        case 6:
          _a3.sent();
          _a3.label = 7;
        case 7:
          i++;
          return [3, 5];
        case 8:
          if (!!self2.valid)
            return [3, 12];
          if (!(self2.items.some(function(item2) {
            return item2.errorData.some(function(e) {
              return e.tag !== "remote";
            });
          }) || self2.restError.length))
            return [3, 11];
          msg = failedMessage !== null && failedMessage !== void 0 ? failedMessage : self2.__("Form.validateFailed");
          dispatcher = validateErrCb && validateErrCb();
          if (!(dispatcher === null || dispatcher === void 0 ? void 0 : dispatcher.then))
            return [3, 10];
          return [4, dispatcher];
        case 9:
          dispatcher = _a3.sent();
          _a3.label = 10;
        case 10:
          if (!(dispatcher === null || dispatcher === void 0 ? void 0 : dispatcher.prevented)) {
            msg && toastValidateError(msg);
          }
          _a3.label = 11;
        case 11:
          if (throwErrors) {
            throw new ValidateError(failedMessage || self2.__("Form.validateFailed"), self2.errors);
          }
          _a3.label = 12;
        case 12:
          return [2, self2.valid];
      }
    });
  });
  var validateFields = flow(function validateFields2(fields) {
    var items, normalizedfields, result, _loop_1, i, len;
    return __generator(this, function(_a3) {
      switch (_a3.label) {
        case 0:
          items = self2.items.concat();
          normalizedfields = fields.map(function(field) {
            return typeof field === "string" ? { name: field, rules: {} } : field;
          });
          result = [];
          _loop_1 = function(i2, len2) {
            var item, field, _b3, _c;
            return __generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  item = items[i2];
                  field = (0, import_find2.default)(normalizedfields, function(field2) {
                    return field2.name === item.name;
                  });
                  if (!field)
                    return [3, 2];
                  _c = (_b3 = result).push;
                  return [4, item.validate(self2.data, void 0, field.rules)];
                case 1:
                  _c.apply(_b3, [_d.sent()]);
                  _d.label = 2;
                case 2:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          };
          i = 0, len = items.length;
          _a3.label = 1;
        case 1:
          if (!(i < len))
            return [3, 4];
          return [5, _loop_1(i, len)];
        case 2:
          _a3.sent();
          _a3.label = 3;
        case 3:
          i++;
          return [3, 1];
        case 4:
          return [2, result.every(function(item) {
            return item;
          })];
      }
    });
  });
  function clearErrors() {
    var items = self2.items.concat();
    items.forEach(function(item) {
      return item.reset();
    });
  }
  function reset(cb, resetData) {
    if (resetData === void 0) {
      resetData = true;
    }
    if (resetData) {
      self2.data = self2.pristine;
    }
    self2.validated = false;
    self2.submited = false;
    self2.items.forEach(function(item) {
      return item.reset();
    });
    cb && cb(self2.data);
  }
  function clear(cb) {
    var toClear = {};
    self2.items.forEach(function(item) {
      if (item.name && item.type !== "hidden") {
        setVariable(toClear, item.name, item.resetValue);
      }
      if (item.extraName && typeof item.extraName === "string") {
        setVariable(toClear, item.extraName, item.resetValue);
      }
    });
    setValues(toClear);
    self2.validated = false;
    self2.submited = false;
    self2.items.forEach(function(item) {
      return item.reset();
    });
    cb && cb(self2.data);
  }
  function setCanAccessSuperData(value) {
    if (value === void 0) {
      value = true;
    }
    self2.canAccessSuperData = value;
  }
  function setInited(value) {
    self2.inited = value;
  }
  function setPersistData(value) {
    if (value === void 0) {
      value = "";
    }
    self2.persistData = value;
  }
  var setLocalPersistData = function(keys) {
    var data = self2.data;
    if (keys && keys.length) {
      data = (0, import_pick.default)(data, keys);
    }
    localStorage.setItem(self2.persistKey, JSON.stringify(data));
  };
  function getLocalPersistData() {
    var data = localStorage.getItem(self2.persistKey);
    if (data) {
      self2.updateData(JSON.parse(data));
    }
  }
  function clearLocalPersistData() {
    localStorage.removeItem(self2.persistKey);
  }
  function updateSavedData() {
    self2.savedData = self2.data;
  }
  return {
    setInited,
    setValues,
    setValueByName,
    trimValues,
    submit,
    validate: validate2,
    validateFields,
    clearErrors,
    saveRemote,
    reset,
    syncOptions,
    setCanAccessSuperData,
    deleteValueByName,
    getLocalPersistData,
    setLocalPersistData,
    clearLocalPersistData,
    setPersistData,
    clear,
    updateSavedData,
    setFormItemErrors,
    getItemsByPath,
    setRestError,
    addRestError,
    clearRestError,
    beforeDestroy: function() {
      syncOptions.cancel();
      toastValidateError.cancel();
    }
  };
});

// node_modules/amis-core/esm/store/crud.js
var import_file_saver = __toESM(require_FileSaver_min());
var import_pick2 = __toESM(require_pick());
init_moment();
var import_isPlainObject12 = __toESM(require_isPlainObject());

// node_modules/match-sorter/dist/match-sorter.esm.js
var import_remove_accents = __toESM(require_remove_accents());
var rankings = {
  CASE_SENSITIVE_EQUAL: 7,
  EQUAL: 6,
  STARTS_WITH: 5,
  WORD_STARTS_WITH: 4,
  CONTAINS: 3,
  ACRONYM: 2,
  MATCHES: 1,
  NO_MATCH: 0
};
matchSorter.rankings = rankings;
var defaultBaseSortFn = function defaultBaseSortFn2(a, b) {
  return String(a.rankedValue).localeCompare(String(b.rankedValue));
};
function matchSorter(items, value, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, keys = _options.keys, _options$threshold = _options.threshold, threshold = _options$threshold === void 0 ? rankings.MATCHES : _options$threshold, _options$baseSort = _options.baseSort, baseSort = _options$baseSort === void 0 ? defaultBaseSortFn : _options$baseSort, _options$sorter = _options.sorter, sorter = _options$sorter === void 0 ? function(matchedItems2) {
    return matchedItems2.sort(function(a, b) {
      return sortRankedValues(a, b, baseSort);
    });
  } : _options$sorter;
  var matchedItems = items.reduce(reduceItemsToRanked, []);
  return sorter(matchedItems).map(function(_ref) {
    var item = _ref.item;
    return item;
  });
  function reduceItemsToRanked(matches, item, index) {
    var rankingInfo = getHighestRanking(item, keys, value, options);
    var rank = rankingInfo.rank, _rankingInfo$keyThres = rankingInfo.keyThreshold, keyThreshold = _rankingInfo$keyThres === void 0 ? threshold : _rankingInfo$keyThres;
    if (rank >= keyThreshold) {
      matches.push(_extends({}, rankingInfo, {
        item,
        index
      }));
    }
    return matches;
  }
}
function getHighestRanking(item, keys, value, options) {
  if (!keys) {
    var stringItem = item;
    return {
      // ends up being duplicate of 'item' in matches but consistent
      rankedValue: stringItem,
      rank: getMatchRanking(stringItem, value, options),
      keyIndex: -1,
      keyThreshold: options.threshold
    };
  }
  var valuesToRank = getAllValuesToRank(item, keys);
  return valuesToRank.reduce(function(_ref2, _ref3, i) {
    var rank = _ref2.rank, rankedValue = _ref2.rankedValue, keyIndex = _ref2.keyIndex, keyThreshold = _ref2.keyThreshold;
    var itemValue = _ref3.itemValue, attributes = _ref3.attributes;
    var newRank = getMatchRanking(itemValue, value, options);
    var newRankedValue = rankedValue;
    var minRanking = attributes.minRanking, maxRanking = attributes.maxRanking, threshold = attributes.threshold;
    if (newRank < minRanking && newRank >= rankings.MATCHES) {
      newRank = minRanking;
    } else if (newRank > maxRanking) {
      newRank = maxRanking;
    }
    if (newRank > rank) {
      rank = newRank;
      keyIndex = i;
      keyThreshold = threshold;
      newRankedValue = itemValue;
    }
    return {
      rankedValue: newRankedValue,
      rank,
      keyIndex,
      keyThreshold
    };
  }, {
    rankedValue: item,
    rank: rankings.NO_MATCH,
    keyIndex: -1,
    keyThreshold: options.threshold
  });
}
function getMatchRanking(testString, stringToRank, options) {
  testString = prepareValueForComparison(testString, options);
  stringToRank = prepareValueForComparison(stringToRank, options);
  if (stringToRank.length > testString.length) {
    return rankings.NO_MATCH;
  }
  if (testString === stringToRank) {
    return rankings.CASE_SENSITIVE_EQUAL;
  }
  testString = testString.toLowerCase();
  stringToRank = stringToRank.toLowerCase();
  if (testString === stringToRank) {
    return rankings.EQUAL;
  }
  if (testString.startsWith(stringToRank)) {
    return rankings.STARTS_WITH;
  }
  if (testString.includes(" " + stringToRank)) {
    return rankings.WORD_STARTS_WITH;
  }
  if (testString.includes(stringToRank)) {
    return rankings.CONTAINS;
  } else if (stringToRank.length === 1) {
    return rankings.NO_MATCH;
  }
  if (getAcronym(testString).includes(stringToRank)) {
    return rankings.ACRONYM;
  }
  return getClosenessRanking(testString, stringToRank);
}
function getAcronym(string) {
  var acronym = "";
  var wordsInString = string.split(" ");
  wordsInString.forEach(function(wordInString) {
    var splitByHyphenWords = wordInString.split("-");
    splitByHyphenWords.forEach(function(splitByHyphenWord) {
      acronym += splitByHyphenWord.substr(0, 1);
    });
  });
  return acronym;
}
function getClosenessRanking(testString, stringToRank) {
  var matchingInOrderCharCount = 0;
  var charNumber = 0;
  function findMatchingCharacter(matchChar2, string, index) {
    for (var j = index, J = string.length; j < J; j++) {
      var stringChar = string[j];
      if (stringChar === matchChar2) {
        matchingInOrderCharCount += 1;
        return j + 1;
      }
    }
    return -1;
  }
  function getRanking(spread2) {
    var spreadPercentage = 1 / spread2;
    var inOrderPercentage = matchingInOrderCharCount / stringToRank.length;
    var ranking = rankings.MATCHES + inOrderPercentage * spreadPercentage;
    return ranking;
  }
  var firstIndex = findMatchingCharacter(stringToRank[0], testString, 0);
  if (firstIndex < 0) {
    return rankings.NO_MATCH;
  }
  charNumber = firstIndex;
  for (var i = 1, I = stringToRank.length; i < I; i++) {
    var matchChar = stringToRank[i];
    charNumber = findMatchingCharacter(matchChar, testString, charNumber);
    var found = charNumber > -1;
    if (!found) {
      return rankings.NO_MATCH;
    }
  }
  var spread = charNumber - firstIndex;
  return getRanking(spread);
}
function sortRankedValues(a, b, baseSort) {
  var aFirst = -1;
  var bFirst = 1;
  var aRank = a.rank, aKeyIndex = a.keyIndex;
  var bRank = b.rank, bKeyIndex = b.keyIndex;
  var same = aRank === bRank;
  if (same) {
    if (aKeyIndex === bKeyIndex) {
      return baseSort(a, b);
    } else {
      return aKeyIndex < bKeyIndex ? aFirst : bFirst;
    }
  } else {
    return aRank > bRank ? aFirst : bFirst;
  }
}
function prepareValueForComparison(value, _ref4) {
  var keepDiacritics = _ref4.keepDiacritics;
  value = "" + value;
  if (!keepDiacritics) {
    value = (0, import_remove_accents.default)(value);
  }
  return value;
}
function getItemValues(item, key) {
  if (typeof key === "object") {
    key = key.key;
  }
  var value;
  if (typeof key === "function") {
    value = key(item);
  } else if (item == null) {
    value = null;
  } else if (Object.hasOwnProperty.call(item, key)) {
    value = item[key];
  } else if (key.includes(".")) {
    return getNestedValues(key, item);
  } else {
    value = null;
  }
  if (value == null) {
    return [];
  }
  if (Array.isArray(value)) {
    return value;
  }
  return [String(value)];
}
function getNestedValues(path, item) {
  var keys = path.split(".");
  var values2 = [item];
  for (var i = 0, I = keys.length; i < I; i++) {
    var nestedKey = keys[i];
    var nestedValues = [];
    for (var j = 0, J = values2.length; j < J; j++) {
      var nestedItem = values2[j];
      if (nestedItem == null)
        continue;
      if (Object.hasOwnProperty.call(nestedItem, nestedKey)) {
        var nestedValue = nestedItem[nestedKey];
        if (nestedValue != null) {
          nestedValues.push(nestedValue);
        }
      } else if (nestedKey === "*") {
        nestedValues = nestedValues.concat(nestedItem);
      }
    }
    values2 = nestedValues;
  }
  if (Array.isArray(values2[0])) {
    var result = [];
    return result.concat.apply(result, values2);
  }
  return values2;
}
function getAllValuesToRank(item, keys) {
  var allValues = [];
  for (var j = 0, J = keys.length; j < J; j++) {
    var key = keys[j];
    var attributes = getKeyAttributes(key);
    var itemValues = getItemValues(item, key);
    for (var i = 0, I = itemValues.length; i < I; i++) {
      allValues.push({
        itemValue: itemValues[i],
        attributes
      });
    }
  }
  return allValues;
}
var defaultKeyAttributes = {
  maxRanking: Infinity,
  minRanking: -Infinity
};
function getKeyAttributes(key) {
  if (typeof key === "string") {
    return defaultKeyAttributes;
  }
  return _extends({}, defaultKeyAttributes, key);
}

// node_modules/amis-core/esm/store/crud.js
var ServerError2 = (
  /** @class */
  function(_super) {
    __extends(ServerError4, _super);
    function ServerError4() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.type = "ServerError";
      return _this;
    }
    return ServerError4;
  }(Error)
);
var CRUDStore = ServiceStore.named("CRUDStore").props({
  pristineQuery: types.optional(types.frozen(), {}),
  query: types.optional(types.frozen(), {}),
  prevPage: 1,
  page: 1,
  perPage: 10,
  total: 0,
  mode: "normal",
  hasNext: false,
  selectedAction: types.frozen(),
  columns: types.frozen(),
  items: types.optional(types.array(types.frozen()), []),
  selectedItems: types.optional(types.array(types.frozen()), []),
  unSelectedItems: types.optional(types.array(types.frozen()), []),
  filterTogggable: false,
  filterVisible: true,
  hasInnerModalOpen: false
}).views(function(self2) {
  return {
    get lastPage() {
      return Math.max(Math.ceil(self2.total / (self2.perPage < 1 ? 10 : self2.perPage)), 1);
    },
    get filterData() {
      return createObject2(self2.data, __assign({}, self2.query));
    },
    get toolbarData() {
      return createObject2(createObject2(self2.data, {
        items: self2.items.concat(),
        selectedItems: self2.selectedItems.concat(),
        unSelectedItems: self2.unSelectedItems.concat()
      }), __assign({}, self2.query));
    },
    get mergedData() {
      return extendObject(self2.data, __assign(__assign(__assign({}, self2.query), self2.data), { selectedItems: self2.selectedItems, unSelectedItems: self2.unSelectedItems }));
    },
    get hasModalOpened() {
      return self2.dialogOpen || self2.drawerOpen || self2.hasInnerModalOpen;
    },
    get selectedItemsAsArray() {
      return self2.selectedItems.concat();
    },
    fetchCtxOf: function(data, options) {
      var _a3;
      return createObject2(data, __assign(__assign(__assign({}, self2.query), (_a3 = {}, _a3[options.pageField || "page"] = self2.page, _a3[options.perPageField || "perPage"] = self2.perPage, _a3)), data));
    }
  };
}).actions(function(self2) {
  var fetchCancel = null;
  function setPristineQuery() {
    self2.pristineQuery = self2.query;
  }
  function updateQuery(values2, updater, pageField, perPageField, replace) {
    if (pageField === void 0) {
      pageField = "page";
    }
    if (perPageField === void 0) {
      perPageField = "perPage";
    }
    if (replace === void 0) {
      replace = false;
    }
    var originQuery = self2.query;
    var query = replace ? __assign({}, values2) : __assign(__assign({}, originQuery), values2);
    var exceptedLooselyRules = [
      [0, ""],
      [false, ""],
      [false, "0"],
      [false, 0],
      [true, 1],
      [true, "1"]
    ];
    if (isObjectShallowModified(originQuery, query, function(lhs, rhs) {
      if (exceptedLooselyRules.some(function(rule) {
        return rule.includes(lhs) && rule.includes(rhs);
      })) {
        return lhs !== rhs;
      }
      return lhs != rhs;
    })) {
      if (query[pageField || "page"]) {
        self2.page = parseInt(query[pageField || "page"], 10);
      }
      if (query[perPageField || "perPage"]) {
        self2.perPage = parseInt(query[perPageField || "perPage"], 10);
      }
      self2.query = query;
      updater && setTimeout(updater.bind(null, "?".concat(qsstringify(query))), 4);
    }
  }
  var fetchInitData = flow(function getInitData(api, data, options) {
    var matchFunc, items_1, dir, data_1, ctx, json, result, total, count, page, hasNext, oItems, oRows, columns, rest, items, _a3, _b3, key, rowsData, data_2, filteredItems_1, dir, e_1, env;
    var _c, e_2, _d;
    var _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
    if (options === void 0) {
      options = {};
    }
    return __generator(this, function(_q) {
      switch (_q.label) {
        case 0:
          _q.trys.push([0, 2, , 3]);
          if (!options.forceReload && options.loadDataOnce && self2.total) {
            matchFunc = options.matchFunc;
            items_1 = options.source ? resolveVariableAndFilter(options.source, createObject2(self2.mergedData, {
              items: self2.data.itemsRaw,
              rows: self2.data.itemsRaw
            }), "| raw") : self2.items.concat();
            if (matchFunc && typeof matchFunc === "function") {
              items_1 = matchFunc(items_1, self2.data.itemsRaw, {
                query: self2.query,
                columns: options.columns,
                matchSorter
              });
            } else {
              if (Array.isArray(options.columns)) {
                options.columns.forEach(function(column) {
                  var value = typeof column.name === "string" ? getVariable(self2.query, column.name) : void 0;
                  var key2 = column.name;
                  if (value != null && key2) {
                    if (Array.isArray(value)) {
                      if (value.length > 0) {
                        var arr_1 = __spreadArray([], __read(items_1), false);
                        var arrItems_1 = [];
                        value.forEach(function(item) {
                          arrItems_1 = __spreadArray(__spreadArray([], __read(arrItems_1), false), __read(matchSorter(arr_1, item, {
                            keys: [key2],
                            threshold: matchSorter.rankings.CONTAINS
                          })), false);
                        });
                        items_1 = items_1.filter(function(item) {
                          return arrItems_1.find(function(a) {
                            return a === item;
                          });
                        });
                      }
                    } else {
                      items_1 = matchSorter(items_1, value, {
                        keys: [key2],
                        threshold: matchSorter.rankings.CONTAINS
                      });
                    }
                  }
                });
              }
            }
            if (self2.query.orderBy) {
              dir = /desc/i.test(self2.query.orderDir) ? -1 : 1;
              items_1 = sortArray(items_1, self2.query.orderBy, dir);
            }
            data_1 = __assign(__assign({}, self2.data), { total: items_1.length, items: items_1.slice((self2.page - 1) * self2.perPage, self2.page * self2.perPage) });
            self2.total = parseInt((_e = data_1.total) !== null && _e !== void 0 ? _e : data_1.count, 10) || 0;
            self2.reInitData(data_1);
            return [
              2
              /*return*/
            ];
          }
          if (fetchCancel) {
            fetchCancel();
            fetchCancel = null;
            self2.fetching = false;
          }
          options.silent || self2.markFetching(true);
          ctx = createObject2(self2.data, __assign(__assign(__assign({}, self2.query), data), (_c = {}, _c[options.pageField || "page"] = self2.page, _c[options.perPageField || "perPage"] = self2.perPage, _c)));
          if (options.loadDataOnce) {
            delete ctx[options.perPageField || "perPage"];
          }
          return [4, getEnv(self2).fetcher(api, ctx, __assign(__assign({}, options), { cancelExecutor: function(executor) {
            return fetchCancel = executor;
          } }))];
        case 1:
          json = _q.sent();
          fetchCancel = null;
          if (!json.ok) {
            self2.updateMessage((_j = (_h = (_g = (_f = api === null || api === void 0 ? void 0 : api.messages) === null || _f === void 0 ? void 0 : _f.failed) !== null && _g !== void 0 ? _g : json.msg) !== null && _h !== void 0 ? _h : options.errorMessage) !== null && _j !== void 0 ? _j : self2.__("CRUD.fetchFailed"), true);
            !(api === null || api === void 0 ? void 0 : api.silent) && getEnv(self2).notify("error", json.msg, json.msgTimeout !== void 0 ? {
              closeButton: true,
              timeout: json.msgTimeout
            } : void 0);
          } else {
            if (!json.data) {
              throw new Error(self2.__("CRUD.invalidData"));
            }
            self2.updatedAt = Date.now();
            result = normalizeApiResponseData(json.data);
            total = result.total, count = result.count, page = result.page, hasNext = result.hasNext, oItems = result.items, oRows = result.rows, columns = result.columns, rest = __rest(result, ["total", "count", "page", "hasNext", "items", "rows", "columns"]);
            items = void 0;
            if (options.source) {
              items = resolveVariableAndFilter(options.source, createObject2(self2.filterData, result), "| raw");
            } else {
              items = result.items || result.rows;
            }
            if (!Array.isArray(items)) {
              try {
                for (_a3 = __values(Object.keys(result)), _b3 = _a3.next(); !_b3.done; _b3 = _a3.next()) {
                  key = _b3.value;
                  if (result.hasOwnProperty(key) && Array.isArray(result[key])) {
                    items = result[key];
                    break;
                  }
                }
              } catch (e_2_1) {
                e_2 = { error: e_2_1 };
              } finally {
                try {
                  if (_b3 && !_b3.done && (_d = _a3.return))
                    _d.call(_a3);
                } finally {
                  if (e_2)
                    throw e_2.error;
                }
              }
            } else if (items == null) {
              items = [];
            }
            if (!Array.isArray(items)) {
              throw new Error(self2.__("CRUD.invalidArray"));
            } else {
              items.map(function(item) {
                return typeof item === "string" ? { text: item } : item;
              });
            }
            rowsData = [];
            if (options.loadDataMode && Array.isArray(self2.data.items)) {
              rowsData = self2.data.items.concat(items);
            } else {
              rowsData = items;
            }
            data_2 = __assign(__assign(__assign({}, api.replaceData ? {} : self2.pristine), { items: rowsData, count, total }), rest);
            if (options.loadDataOnce) {
              data_2.itemsRaw = oItems || oRows || rowsData.concat();
              filteredItems_1 = rowsData.concat();
              if (Array.isArray(options.columns)) {
                options.columns.forEach(function(column) {
                  var value;
                  var key2 = column.name;
                  if (column.searchable && key2 && (value = getVariable(self2.query, key2))) {
                    if (Array.isArray(value)) {
                      if (value.length > 0) {
                        var arr_2 = __spreadArray([], __read(filteredItems_1), false);
                        var arrItems_2 = [];
                        value.forEach(function(item) {
                          arrItems_2 = __spreadArray(__spreadArray([], __read(arrItems_2), false), __read(matchSorter(arr_2, item, {
                            keys: [key2],
                            threshold: matchSorter.rankings.CONTAINS
                          })), false);
                        });
                        filteredItems_1 = filteredItems_1.filter(function(item) {
                          return arrItems_2.find(function(a) {
                            return a === item;
                          });
                        });
                      }
                    } else {
                      filteredItems_1 = matchSorter(filteredItems_1, value, {
                        keys: [key2],
                        threshold: matchSorter.rankings.CONTAINS
                      });
                    }
                  }
                });
              }
              if (self2.query.orderBy) {
                dir = /desc/i.test(self2.query.orderDir) ? -1 : 1;
                filteredItems_1 = sortArray(filteredItems_1, self2.query.orderBy, dir);
              }
              data_2.items = filteredItems_1.slice((self2.page - 1) * self2.perPage, self2.page * self2.perPage);
              data_2.count = data_2.total = filteredItems_1.length;
            }
            if (Array.isArray(columns)) {
              self2.columns = columns.concat();
            } else if (rest.isTable2) {
              self2.columns = options.columns;
            }
            self2.items.replace(rowsData);
            self2.reInitData(data_2, !!api.replaceData);
            options.syncResponse2Query !== false && updateQuery((0, import_pick2.default)(rest, Object.keys(self2.query)), void 0, options.pageField || "page", options.perPageField || "perPage");
            self2.total = parseInt((_k = data_2.total) !== null && _k !== void 0 ? _k : data_2.count, 10) || 0;
            typeof page !== "undefined" && (self2.page = parseInt(page, 10));
            if (typeof hasNext !== "undefined") {
              self2.mode = "simple";
              self2.total = 0;
              self2.hasNext = !!hasNext;
            }
            self2.updateMessage((_p = (_o = (_m = (_l = api.messages) === null || _l === void 0 ? void 0 : _l.success) !== null && _m !== void 0 ? _m : json.msg) !== null && _o !== void 0 ? _o : options.successMessage) !== null && _p !== void 0 ? _p : json.defaultMsg);
            options && options.successMessage && getEnv(self2).notify("success", self2.msg);
          }
          self2.markFetching(false);
          return [2, json];
        case 2:
          e_1 = _q.sent();
          env = getEnv(self2);
          if (!isAlive(self2) || self2.disposed) {
            return [
              2
              /*return*/
            ];
          }
          self2.markFetching(false);
          if (env.isCancel(e_1)) {
            return [
              2
              /*return*/
            ];
          }
          console.error(e_1);
          !(api === null || api === void 0 ? void 0 : api.silent) && env.notify("error", e_1.message);
          return [
            2
            /*return*/
          ];
        case 3:
          return [
            2
            /*return*/
          ];
      }
    });
  });
  function changePage(page, perPage) {
    var pageNum = typeof page !== "number" ? parseInt(page, 10) : page;
    self2.page = isNaN(pageNum) ? 1 : pageNum;
    perPage && changePerPage(perPage);
  }
  function changePerPage(perPage) {
    var perPageNum = typeof perPage !== "number" ? parseInt(perPage, 10) : perPage;
    self2.perPage = isNaN(perPageNum) ? 10 : perPageNum;
  }
  function selectAction(action) {
    self2.selectedAction = action;
  }
  var saveRemote = flow(function saveRemote2(api, data, options) {
    var json, e_3;
    var _a3, _b3, _c, _d, _e, _f, _g, _h;
    if (options === void 0) {
      options = {};
    }
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _j.trys.push([0, 2, , 3]);
          options = __assign({ method: "post" }, options);
          self2.markSaving(true);
          return [4, getEnv(self2).fetcher(api, data, options)];
        case 1:
          json = _j.sent();
          self2.markSaving(false);
          if (!isEmpty2(json.data) || json.ok) {
            self2.updateData(normalizeApiResponseData(json.data), {
              __saved: Date.now()
            }, !!api && api.replaceData);
            self2.updatedAt = Date.now();
          }
          if (!json.ok) {
            self2.updateMessage((_d = (_c = (_b3 = (_a3 = api === null || api === void 0 ? void 0 : api.messages) === null || _a3 === void 0 ? void 0 : _a3.failed) !== null && _b3 !== void 0 ? _b3 : json.msg) !== null && _c !== void 0 ? _c : options.errorMessage) !== null && _d !== void 0 ? _d : self2.__("saveFailed"), true);
            !(api === null || api === void 0 ? void 0 : api.silent) && getEnv(self2).notify("error", self2.msg, json.msgTimeout !== void 0 ? {
              closeButton: true,
              timeout: json.msgTimeout
            } : void 0);
            throw new ServerError2(self2.msg);
          } else {
            self2.updateMessage((_h = (_g = (_f = (_e = api === null || api === void 0 ? void 0 : api.messages) === null || _e === void 0 ? void 0 : _e.success) !== null && _f !== void 0 ? _f : json.msg) !== null && _g !== void 0 ? _g : options.successMessage) !== null && _h !== void 0 ? _h : json.defaultMsg);
            self2.msg && getEnv(self2).notify("success", self2.msg, json.msgTimeout !== void 0 ? {
              closeButton: true,
              timeout: json.msgTimeout
            } : void 0);
          }
          return [2, json.data];
        case 2:
          e_3 = _j.sent();
          self2.markSaving(false);
          if (!isAlive(self2) || self2.disposed) {
            return [
              2
              /*return*/
            ];
          }
          !(api === null || api === void 0 ? void 0 : api.silent) && e_3.type !== "ServerError" && getEnv(self2).notify("error", e_3.message);
          throw e_3;
        case 3:
          return [
            2
            /*return*/
          ];
      }
    });
  });
  var setFilterTogglable = function(toggable, filterVisible) {
    self2.filterTogggable = toggable;
    filterVisible !== void 0 && (self2.filterVisible = filterVisible);
  };
  var setFilterVisible = function(visible) {
    self2.filterVisible = visible;
  };
  var setSelectedItems = function(items) {
    self2.selectedItems.replace(items);
  };
  var setUnSelectedItems = function(items) {
    self2.unSelectedItems.replace(items);
  };
  var updateSelectData = function(selected, unSelected) {
    self2.selectedItems.replace(selected);
    self2.unSelectedItems.replace(unSelected);
    self2.reInitData({
      selectedItems: selected,
      unSelectedItems: unSelected
    });
  };
  var setInnerModalOpened = function(value) {
    self2.hasInnerModalOpen = value;
  };
  var initFromScope = function(scope, source, options) {
    var _a3;
    var matchFunc = options.matchFunc;
    var items = resolveVariableAndFilter(source, scope, "| raw");
    if (!Array.isArray(items) && !self2.items.length) {
      return;
    }
    items = Array.isArray(items) ? items : [];
    if (matchFunc && typeof matchFunc === "function") {
      items = matchFunc(items, items.concat(), {
        query: self2.query,
        columns: options.columns,
        matchSorter
      });
    } else {
      if (Array.isArray(options.columns)) {
        options.columns.forEach(function(column) {
          var value = typeof column.name === "string" ? getVariable(self2.query, column.name) : void 0;
          var key = column.name;
          if (value != null && key) {
            if (Array.isArray(value)) {
              if (value.length > 0) {
                var arr_3 = __spreadArray([], __read(items), false);
                var arrItems_3 = [];
                value.forEach(function(item) {
                  arrItems_3 = __spreadArray(__spreadArray([], __read(arrItems_3), false), __read(matchSorter(arr_3, item, {
                    keys: [key],
                    threshold: matchSorter.rankings.CONTAINS
                  })), false);
                });
                items = items.filter(function(item) {
                  return arrItems_3.find(function(a) {
                    return a === item;
                  });
                });
              }
            } else {
              items = matchSorter(items, value, {
                keys: [key],
                threshold: matchSorter.rankings.CONTAINS
              });
            }
          }
        });
      }
    }
    if (self2.query.orderBy) {
      var dir = /desc/i.test(self2.query.orderDir) ? -1 : 1;
      items = sortArray(items, self2.query.orderBy, dir);
    }
    var data = __assign(__assign({}, self2.pristine), { items: items.length > self2.perPage ? items.slice((self2.page - 1) * self2.perPage, self2.page * self2.perPage) : items, count: items.length, total: items.length });
    self2.total = parseInt((_a3 = data.total) !== null && _a3 !== void 0 ? _a3 : data.count, 10) || 0;
    self2.items.replace(items);
    self2.reInitData(data);
  };
  var exportAsCSV = function(options) {
    if (options === void 0) {
      options = {};
    }
    return __awaiter(void 0, void 0, void 0, function() {
      var items, filename, pageField, perPageField, env, ctx, res;
      var _a3;
      return __generator(this, function(_b3) {
        switch (_b3.label) {
          case 0:
            items = options.loadDataOnce ? self2.data.itemsRaw : self2.data.items;
            filename = options.filename ? filter(options.filename, options.data, "| raw") : "data";
            if (!options.api)
              return [3, 2];
            pageField = options.pageField || "page";
            perPageField = options.perPageField || "perPage";
            env = getEnv(self2);
            ctx = createObject2(self2.data, __assign(__assign(__assign({}, self2.query), options.data), (_a3 = {}, _a3[pageField] = self2.page || 1, _a3[perPageField] = self2.perPage || 10, _a3)));
            return [4, env.fetcher(options.api, ctx, {
              autoAppend: true,
              pageField,
              perPageField
            })];
          case 1:
            res = _b3.sent();
            if (!res.data) {
              return [
                2
                /*return*/
              ];
            }
            if (Array.isArray(res.data)) {
              items = res.data;
            } else {
              items = res.data.rows || res.data.items;
            }
            _b3.label = 2;
          case 2:
            import("./papaparse.min-HEFUEZQN.js").then(function(papaparse) {
              var e_4, _a4;
              var csvData = [];
              try {
                for (var items_2 = __values(items), items_2_1 = items_2.next(); !items_2_1.done; items_2_1 = items_2.next()) {
                  var row = items_2_1.value;
                  var rowData = {};
                  for (var key in row) {
                    var value = row[key];
                    if (typeof value === "object") {
                      rowData[key] = JSON.stringify(value);
                    } else {
                      rowData[key] = value;
                    }
                  }
                  csvData.push(rowData);
                }
              } catch (e_4_1) {
                e_4 = { error: e_4_1 };
              } finally {
                try {
                  if (items_2_1 && !items_2_1.done && (_a4 = items_2.return))
                    _a4.call(items_2);
                } finally {
                  if (e_4)
                    throw e_4.error;
                }
              }
              var csvText = papaparse.unparse(csvData);
              if (csvText) {
                var blob = new Blob(
                  // 加上 BOM 这样 Excel 打开的时候就不会乱码
                  [new Uint8Array([239, 187, 191]), csvText],
                  {
                    type: "text/plain;charset=utf-8"
                  }
                );
                (0, import_file_saver.saveAs)(blob, "".concat(filename, ".csv"));
              }
            });
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
  var getData = function(superData) {
    return createObject2(superData, {
      total: self2.total,
      page: self2.page,
      perPage: self2.perPage,
      items: self2.items.concat(),
      selectedItems: self2.selectedItems.concat(),
      unSelectedItems: self2.unSelectedItems.concat()
    });
  };
  var updateColumns = function(columns) {
    self2.columns = columns;
  };
  var updateTotal = function(total) {
    self2.total = total || 0;
  };
  return {
    getData,
    updateSelectData,
    setPristineQuery,
    updateQuery,
    fetchInitData,
    changePage,
    changePerPage,
    selectAction,
    saveRemote,
    setFilterTogglable,
    setFilterVisible,
    setSelectedItems,
    setUnSelectedItems,
    setInnerModalOpened,
    initFromScope,
    exportAsCSV,
    updateColumns,
    updateTotal
  };
});

// node_modules/amis-core/esm/store/table.js
init_moment();
var import_isPlainObject13 = __toESM(require_isPlainObject());
var import_isEqual6 = __toESM(require_isEqual());
var import_find3 = __toESM(require_find());
var import_sortBy = __toESM(require_sortBy());
var PARTITION_INDEX = 3;
function initChildren(children, depth, pindex, parentId, path) {
  if (path === void 0) {
    path = "";
  }
  depth += 1;
  return children.map(function(item, index) {
    var _a3;
    item = isObject(item) ? item : {
      item
    };
    var id = (_a3 = item.__id) !== null && _a3 !== void 0 ? _a3 : guid();
    return {
      // id: String(item && (item as any)[self.primaryField] || `${pindex}-${depth}-${key}`),
      id: String(id),
      parentId: String(parentId),
      key: String("".concat(pindex, "-").concat(depth, "-").concat(index)),
      path: "".concat(path).concat(index),
      depth,
      index,
      newIndex: index,
      pristine: item,
      data: item,
      defer: !!item.defer,
      loaded: false,
      loading: false,
      rowSpans: {},
      children: item && Array.isArray(item.children) ? initChildren(item.children, depth, index, id, "".concat(path).concat(index, ".")) : []
    };
  });
}
var SELECTED_STATUS;
(function(SELECTED_STATUS2) {
  SELECTED_STATUS2[SELECTED_STATUS2["ALL"] = 0] = "ALL";
  SELECTED_STATUS2[SELECTED_STATUS2["PARTIAL"] = 1] = "PARTIAL";
  SELECTED_STATUS2[SELECTED_STATUS2["NONE"] = 2] = "NONE";
})(SELECTED_STATUS || (SELECTED_STATUS = {}));
var Column = types.model("Column", {
  label: types.optional(types.frozen(), void 0),
  type: types.optional(types.string, "plain"),
  name: types.maybe(types.string),
  value: types.frozen(),
  id: "",
  groupName: "",
  toggled: false,
  toggable: true,
  expandable: false,
  checkdisable: false,
  searchable: types.maybe(types.frozen()),
  enableSearch: true,
  sortable: false,
  filterable: types.optional(types.frozen(), void 0),
  fixed: "",
  index: 0,
  rawIndex: 0,
  width: 0,
  minWidth: 0,
  realWidth: 0,
  breakpoint: types.optional(types.frozen(), void 0),
  pristine: types.optional(types.frozen(), void 0),
  remark: types.optional(types.frozen(), void 0),
  className: types.union(types.string, types.frozen())
}).views(function(self2) {
  return {
    get isPrimary() {
      var _a3;
      var table = getParent(self2, 2);
      return ((_a3 = table.filteredColumns.find(function(column) {
        return !column.type.startsWith("__");
      })) === null || _a3 === void 0 ? void 0 : _a3.id) === self2.id;
    }
  };
}).actions(function(self2) {
  return {
    toggleToggle: function(min) {
      if (min === void 0) {
        min = 1;
      }
      self2.toggled = !self2.toggled;
      var table = getParent(self2, 2);
      if (table.activeToggaleColumns.length < min) {
        self2.toggled = true;
      }
      table.persistSaveToggledColumns();
    },
    setToggled: function(value) {
      self2.toggled = value;
    },
    setEnableSearch: function(value) {
      self2.enableSearch = value;
      var table = getParent(self2, 2);
      table.persistSaveToggledColumns();
    },
    setMinWidth: function(value) {
      self2.minWidth = value;
    },
    setWidth: function(value) {
      self2.width = value;
    },
    setRealWidth: function(value) {
      self2.realWidth = value;
    }
  };
});
var Row = types.model("Row", {
  storeType: "Row",
  id: types.identifier,
  parentId: "",
  key: types.string,
  pristine: types.frozen({}),
  data: types.frozen({}),
  rowSpans: types.frozen({}),
  index: types.number,
  newIndex: types.number,
  path: "",
  checkdisable: false,
  isHover: false,
  children: types.optional(types.array(types.late(function() {
    return Row;
  })), []),
  defer: false,
  loaded: false,
  loading: false,
  error: "",
  depth: types.number,
  appeared: true,
  lazyRender: false
}).views(function(self2) {
  return {
    get parent() {
      return getParent(self2, 2);
    },
    get table() {
      return getParent(self2, self2.depth * 2);
    },
    get expandable() {
      var table;
      return !!(self2 && self2.children.length || self2 && self2.defer && !self2.loaded || (table = getParent(self2, self2.depth * 2)) && table.footable && table.footableColumns.length);
    },
    childrenSelected: function() {
      var _a3 = self2, children = _a3.children, table = _a3.table;
      var selectedLength = children.filter(function(child) {
        return table.isSelected(child);
      }).length;
      if (!selectedLength) {
        return SELECTED_STATUS.NONE;
      }
      if (selectedLength === children.length) {
        return SELECTED_STATUS.ALL;
      }
      return SELECTED_STATUS.PARTIAL;
    },
    get partial() {
      var childrenSelected = this.childrenSelected() === SELECTED_STATUS.PARTIAL;
      var childrenPartial = self2.children.some(function(child) {
        return child.partial;
      });
      return childrenSelected || childrenPartial;
    },
    get checked() {
      return getParent(self2, self2.depth * 2).isSelected(self2);
    },
    get modified() {
      if (!self2.data) {
        return false;
      }
      return Object.keys(self2.data).some(function(key) {
        return !(0, import_isEqual6.default)(self2.data[key], self2.pristine[key]);
      });
    },
    getDataWithModifiedChilden: function() {
      var data = __assign({}, self2.data);
      if (data.children && self2.children) {
        data.children = self2.children.map(function(item) {
          return item.getDataWithModifiedChilden();
        });
      }
      return data;
    },
    get collapsed() {
      var table = getParent(self2, self2.depth * 2);
      if (table.dragging) {
        return true;
      }
      var from = self2;
      while (from && from !== table) {
        if (!table.isExpanded(from)) {
          return true;
        }
        from = getParent(from, 2);
      }
      return false;
    },
    get expanded() {
      return !this.collapsed;
    },
    get moved() {
      return self2.index !== self2.newIndex;
    },
    get locals() {
      var children = null;
      if (self2.children.length) {
        children = self2.children.map(function(item) {
          return item.locals;
        });
      }
      var table = getParent(self2, self2.depth * 2);
      var parent = getParent(self2, 2);
      return createObject2(extendObject(getParent(self2, self2.depth * 2).data, {
        index: self2.index,
        // todo 以后再支持多层，目前先一层
        parent: parent.storeType === Row.name ? parent.data : void 0,
        // 只有table时，也可以获取选中行
        selectedItems: table.selectedRows.map(function(item) {
          return item.data;
        }),
        unSelectedItems: table.unSelectedRows.map(function(item) {
          return item.data;
        })
      }), children ? __assign(__assign({}, self2.data), { children }) : self2.data);
    },
    get checkable() {
      var table = getParent(self2, self2.depth * 2);
      return table && table.itemCheckableOn ? evalExpression(table.itemCheckableOn, self2.locals) : true;
    },
    get draggable() {
      var table = getParent(self2, self2.depth * 2);
      return table && table.itemDraggableOn ? evalExpression(table.itemDraggableOn, self2.locals) : true;
    },
    /**
     * 判断当前行点击后是否应该继续触发check
     * 用于限制checkOnItemClick触发的check事件
     */
    get isCheckAvaiableOnClick() {
      var _a3;
      var table = getParent(self2, self2.depth * 2);
      var keepItemSelectionOnPageChange = table === null || table === void 0 ? void 0 : table.keepItemSelectionOnPageChange;
      var selectionUpperLimit = table === null || table === void 0 ? void 0 : table.maxKeepItemSelectionLength;
      if (!keepItemSelectionOnPageChange || !Number.isInteger(selectionUpperLimit) || selectionUpperLimit === Infinity) {
        return true;
      }
      var selectedIds = ((_a3 = table === null || table === void 0 ? void 0 : table.selectedRows) !== null && _a3 !== void 0 ? _a3 : []).map(function(item) {
        return item.id;
      });
      var selectedCount = selectedIds.includes(self2.id) ? selectedIds.length - 1 : selectedIds.length + 1;
      if (selectedCount > selectionUpperLimit) {
        return false;
      }
      return true;
    },
    get indentStyle() {
      return {
        paddingLeft: "calc(".concat(self2.depth - 1, " * var(--Table-tree-indent))")
      };
    }
  };
}).actions(function(self2) {
  return {
    toggle: function(checked) {
      var table = self2.table;
      var row = self2;
      table.toggle(row, checked);
      table.toggleAncestors(row);
      table.toggleDescendants(row, checked);
    },
    toggleExpanded: function() {
      getParent(self2, self2.depth * 2).toggleExpanded(self2);
    },
    change: function(values2, savePristine) {
      self2.data = immutableExtends(self2.data, values2);
      savePristine && (self2.pristine = self2.data);
    },
    reset: function() {
      self2.newIndex = self2.index;
      self2.data = self2.pristine;
    },
    setCheckdisable: function(bool) {
      self2.checkdisable = bool;
    },
    setIsHover: function(value) {
      self2.isHover = value;
    },
    replaceWith: function(data) {
      Object.keys(data).forEach(function(key) {
        if (key !== "id") {
          self2[key] = data[key];
        }
      });
      if (Array.isArray(data.children)) {
        this.replaceChildren(data.children);
      }
    },
    replaceChildren: function(children) {
      var arr = children;
      var pool = arr.concat();
      if (self2.children.length > arr.length) {
        self2.children.splice(arr.length, self2.children.length - arr.length);
      }
      var index = 0;
      var len = self2.children.length;
      while (pool.length) {
        var item = __assign(__assign({}, pool.shift()), { parentId: self2.id });
        if (index < len) {
          self2.children[index].replaceWith(item);
        } else {
          var row = Row.create(item);
          self2.children.push(row);
        }
        index++;
      }
    },
    markAppeared: function(value) {
      value && (self2.appeared = !!value);
    },
    markLoading: function(value) {
      self2.loading = !!value;
    },
    markLoaded: function(value) {
      self2.loaded = !!value;
    },
    setError: function(value) {
      self2.error = String(value);
    },
    resetDefered: function() {
      self2.error = "";
      self2.loaded = false;
    },
    setDeferData: function(_a3) {
      var children = _a3.children, rest = __rest(_a3, ["children"]);
      self2.data = __assign(__assign({}, self2.data), rest);
      if (Array.isArray(children)) {
        this.replaceChildren(initChildren(children, self2.depth, self2.index, self2.id, self2.path));
      }
    }
  };
});
var TableStore = iRendererStore.named("TableStore").props({
  columns: types.array(Column),
  rows: types.array(Row),
  selectedRows: types.array(types.reference(Row)),
  expandedRows: types.array(types.string),
  primaryField: "id",
  orderBy: "",
  orderDir: types.optional(types.union(types.literal("asc"), types.literal("desc"), types.literal("")), "asc"),
  loading: false,
  canAccessSuperData: false,
  draggable: false,
  dragging: false,
  selectable: false,
  multiple: true,
  footable: types.frozen(),
  expandConfig: types.frozen(),
  isNested: false,
  columnsTogglable: types.optional(types.union(types.boolean, types.literal("auto")), "auto"),
  itemCheckableOn: "",
  itemDraggableOn: "",
  hideCheckToggler: false,
  combineNum: 0,
  combineFromIndex: 0,
  formsRef: types.optional(types.array(types.frozen()), []),
  maxKeepItemSelectionLength: Infinity,
  keepItemSelectionOnPageChange: false,
  // 导出 Excel 按钮的 loading 状态
  exportExcelLoading: false,
  searchFormExpanded: false,
  lazyRenderAfter: 100,
  tableLayout: "auto",
  theadHeight: 0
}).views(function(self2) {
  function getColumnsExceptBuiltinTypes() {
    return self2.columns.filter(function(item) {
      return !/^__/.test(item.type) && isVisible(item.pristine, hasVisibleExpression(item.pristine) ? self2.data : {});
    });
  }
  function getForms() {
    return self2.formsRef.map(function(item) {
      return {
        store: getStoreById(item.id),
        rowIndex: item.rowIndex
      };
    });
  }
  function getExportedColumns() {
    return self2.columns.filter(function(item) {
      return item && isVisible(item.pristine, hasVisibleExpression(item.pristine) ? self2.data : {}) && (item.toggled || !item.toggable) && !/^__/.test(item.type);
    });
  }
  function getFilteredColumns() {
    return self2.columns.filter(function(item) {
      return item && isVisible(item.pristine, hasVisibleExpression(item.pristine) ? self2.data : {}) && (item.type === "__checkme" ? self2.selectable && !self2.dragging && !self2.hideCheckToggler && self2.rows.length : item.type === "__dragme" ? self2.dragging : item.type === "__expandme" ? getFootableColumns().length && !self2.dragging : (item.toggled || !item.toggable) && (!self2.footable || !item.breakpoint || !isBreakpoint(item.breakpoint)));
    });
  }
  function getFootableColumns() {
    return self2.columns.filter(function(item) {
      return item.type === "__checkme" || item.type === "__dragme" || item.type === "__expandme" ? false : (item.toggled || !item.toggable) && self2.footable && item.breakpoint && isBreakpoint(item.breakpoint);
    });
  }
  function isSelected(row) {
    return !!~self2.selectedRows.indexOf(row);
  }
  function isExpanded(row) {
    return self2.expandedRows.includes(row.id);
  }
  function getTogglable() {
    if (self2.columnsTogglable === "auto") {
      return self2.columns.filter(function(item) {
        return !/^__/.test(item.type);
      }).length > 5;
    }
    return self2.columnsTogglable;
  }
  function getToggableColumns() {
    return self2.columns.filter(function(item) {
      return isVisible(item.pristine, self2.data) && item.toggable !== false;
    });
  }
  function getActiveToggableColumns() {
    return getToggableColumns().filter(function(item) {
      return item.toggled;
    });
  }
  function getModifiedRows(rows, modifiedRows) {
    if (rows === void 0) {
      rows = [];
    }
    if (modifiedRows === void 0) {
      modifiedRows = [];
    }
    rows = rows && rows.length ? rows : self2.rows;
    rows.forEach(function(item) {
      if (item.children && item.children.length) {
        getModifiedRows(item.children, modifiedRows);
      }
      var diff = difference(item.data, item.pristine);
      var hasDifference = Object.keys(diff).length;
      if (hasDifference) {
        modifiedRows.push(item);
      }
    });
    return modifiedRows;
  }
  function getModified() {
    return getModifiedRows().length;
  }
  function getMovedRows() {
    return flattenTree(self2.rows).filter(function(item) {
      return item.moved;
    });
  }
  function getMoved() {
    return getMovedRows().length;
  }
  function getHovedRow() {
    return flattenTree(self2.rows).find(function(item) {
      return item.isHover;
    });
  }
  function getUnSelectedRows() {
    return flattenTree(self2.rows).filter(function(item) {
      return !item.checked;
    });
  }
  function getData(superData) {
    return createObject2(superData, {
      items: self2.rows.map(function(item) {
        return item.data;
      }),
      selectedItems: self2.selectedRows.map(function(item) {
        return item.data;
      }),
      unSelectedItems: getUnSelectedRows().map(function(item) {
        return item.data;
      })
    });
  }
  function hasColumnHidden() {
    return self2.columns.findIndex(function(column) {
      return !column.toggled;
    }) !== -1;
  }
  function getColumnGroup() {
    var columns = getFilteredColumns();
    var len = columns.length;
    if (!len) {
      return [];
    }
    var groups = [
      {
        label: columns[0].groupName,
        colSpan: 1,
        rowSpan: 1,
        index: columns[0].index,
        has: [columns[0]]
      }
    ];
    var hasGroupName = columns.some(function(column) {
      return column.groupName;
    });
    for (var i = 1; i < len; i++) {
      var prev = groups[groups.length - 1];
      var current = columns[i];
      var groupNameIsSame = current.groupName === prev.label || resolveVariableAndFilter(current.groupName, self2.data) === resolveVariableAndFilter(prev.label, self2.data);
      if (groupNameIsSame && (hasGroupName && current.groupName || !hasGroupName)) {
        prev.colSpan++;
        prev.has.push(current);
      } else {
        groups.push({
          /**
           * 如果中间没有配置groupName，那么样式会错乱，这里设置列的label配置，lable也没有则设置一个空字符串
           * 注：内部列需要设置为undefined，保证rowSpan在下面计算为2
           */
          label: !!~["__checkme", "__expandme"].indexOf(current.type) ? void 0 : current.groupName || current.label || " ",
          colSpan: 1,
          rowSpan: 1,
          index: current.index,
          has: [current]
        });
      }
    }
    if (groups.length === 1 && !groups[0].label) {
      groups.pop();
    }
    return groups.map(function(item) {
      var rowSpan = !item.label || item.has.length === 1 && item.label === item.has[0].label ? 2 : 1;
      return __assign(__assign({}, item), { rowSpan, label: rowSpan === 2 ? item.label || item.has[0].label : item.label, fixed: item.has.every(function(column) {
        return column.fixed;
      }) ? item.has[0].fixed : void 0, get width() {
        return item.has.reduce(function(a, b) {
          return a + b.width;
        }, 0);
      } });
    });
  }
  function getFirstToggledColumnIndex() {
    var column = self2.columns.find(function(column2) {
      return !/^__/.test(column2.type) && column2.toggled;
    });
    return column == null ? null : column.index;
  }
  function getSearchableColumns() {
    return self2.columns.filter(function(column) {
      return column.searchable;
    });
  }
  return {
    get columnsData() {
      return getColumnsExceptBuiltinTypes();
    },
    get forms() {
      return getForms();
    },
    get searchableColumns() {
      return getSearchableColumns();
    },
    get activedSearchableColumns() {
      return getSearchableColumns().filter(function(column) {
        return column.enableSearch;
      });
    },
    /** 导出excel列（包含breakpoint列） */
    get exportColumns() {
      return getExportedColumns();
    },
    get filteredColumns() {
      return getFilteredColumns();
    },
    get footableColumns() {
      return getFootableColumns();
    },
    get toggableColumns() {
      return getToggableColumns();
    },
    get activeToggaleColumns() {
      return getActiveToggableColumns();
    },
    get someChecked() {
      return !!self2.selectedRows.length;
    },
    get allChecked() {
      return self2.checkableRows.every(function(item) {
        return self2.selectedRows.includes(item);
      });
    },
    isSelected,
    get allExpanded() {
      return !!(self2.expandedRows.length === this.expandableRows.length && this.expandableRows.length);
    },
    isExpanded,
    get toggable() {
      return getTogglable();
    },
    get modified() {
      return getModified();
    },
    get modifiedRows() {
      return getModifiedRows();
    },
    get unSelectedRows() {
      return getUnSelectedRows();
    },
    get falttenedRows() {
      return flattenTree(self2.rows);
    },
    get checkableRows() {
      return this.falttenedRows.filter(function(item) {
        return item.checkable;
      });
    },
    get expandableRows() {
      return self2.rows.filter(function(item) {
        return item.expandable;
      });
    },
    get moved() {
      return getMoved();
    },
    get movedRows() {
      return getMovedRows();
    },
    get hoverRow() {
      return getHovedRow();
    },
    /** 已选择item是否达到数量上限 */
    get isSelectionThresholdReached() {
      var _a3, _b3;
      var selectedLength = (_b3 = (_a3 = self2.data) === null || _a3 === void 0 ? void 0 : _a3.selectedItems) === null || _b3 === void 0 ? void 0 : _b3.length;
      var maxLength = self2.maxKeepItemSelectionLength;
      if (!self2.data || !self2.keepItemSelectionOnPageChange || !maxLength) {
        return false;
      }
      return maxLength <= selectedLength;
    },
    get firstToggledColumnIndex() {
      return getFirstToggledColumnIndex();
    },
    getData,
    get columnGroup() {
      return getColumnGroup();
    },
    getRowById: function(id) {
      return findTree(self2.rows, function(item) {
        return item.id === id;
      });
    },
    getItemsByName: function(name) {
      return this.forms.filter(function(form) {
        return form.rowIndex === parseInt(name, 10);
      }).map(function(item) {
        return item.store;
      });
    },
    // 是否隐藏了某列
    hasColumnHidden: function() {
      return hasColumnHidden();
    },
    getExpandedRows: function() {
      var list = [];
      eachTree(self2.rows, function(i) {
        if (self2.expandedRows.includes(i.id)) {
          list.push(i);
        }
      });
      return list;
    },
    get columnWidthReady() {
      return getFilteredColumns().every(function(column) {
        return column.realWidth;
      });
    },
    getStickyStyles: function(column, columns) {
      var stickyClassName = "";
      var style = {};
      var autoFixLeftColumns = ["__checkme", "__dragme", "__expandme"];
      if (column.fixed === "left" || autoFixLeftColumns.includes(column.type)) {
        stickyClassName = "is-sticky is-sticky-left";
        var index = columns.indexOf(column) - 1;
        if (columns.slice(index + 2).every(function(col2) {
          return !(col2 && col2.fixed === "left" || autoFixLeftColumns.includes(col2.type));
        })) {
          stickyClassName += " is-sticky-last-left";
        }
        var left = [];
        while (index >= 0) {
          var col = columns[index];
          if (col && col.fixed === "left" || autoFixLeftColumns.includes(col.type)) {
            left.push("var(--Table-column-".concat(col.index, "-width)"));
          }
          index--;
        }
        style.left = left.length ? left.length === 1 ? left[0] : "calc(".concat(left.join(" + "), ")") : 0;
      } else if (column.fixed === "right") {
        stickyClassName = "is-sticky is-sticky-right";
        var right = [];
        var index = columns.indexOf(column) + 1;
        if (columns.slice(0, index - 1).every(function(col2) {
          return col2.fixed !== "right";
        })) {
          stickyClassName += " is-sticky-first-right";
        }
        var len = columns.length;
        while (index < len) {
          var col = columns[index];
          if (col && col.fixed === "right") {
            right.push("var(--Table-column-".concat(col.index, "-width)"));
          }
          index++;
        }
        style.right = right.length ? right.length === 1 ? right[0] : "calc(".concat(right.join(" + "), ")") : 0;
      }
      return [style, stickyClassName];
    },
    get items() {
      return self2.rows.concat();
    },
    buildStyles: function(style) {
      style = __assign(__assign({}, style), { "--Table-thead-height": self2.theadHeight + "px" });
      getFilteredColumns().forEach(function(column) {
        style["--Table-column-".concat(column.index, "-width")] = column.realWidth + "px";
      });
      return style;
    }
  };
}).actions(function(self2) {
  var tableRef = null;
  function setTable(ref) {
    tableRef = ref;
  }
  function getTable() {
    return tableRef;
  }
  function update(config, options) {
    var _a3;
    config.primaryField !== void 0 && (self2.primaryField = config.primaryField);
    config.selectable !== void 0 && (self2.selectable = config.selectable);
    config.columnsTogglable !== void 0 && (self2.columnsTogglable = config.columnsTogglable);
    config.draggable !== void 0 && (self2.draggable = config.draggable);
    if (typeof config.orderBy === "string" || typeof config.orderDir === "string") {
      setOrderByInfo((_a3 = config.orderBy) !== null && _a3 !== void 0 ? _a3 : self2.orderBy, config.orderDir !== void 0 ? config.orderDir === "desc" ? "desc" : "asc" : self2.orderDir);
    }
    config.multiple !== void 0 && (self2.multiple = config.multiple);
    config.footable !== void 0 && (self2.footable = config.footable);
    config.expandConfig !== void 0 && (self2.expandConfig = config.expandConfig);
    config.itemCheckableOn !== void 0 && (self2.itemCheckableOn = config.itemCheckableOn);
    config.itemDraggableOn !== void 0 && (self2.itemDraggableOn = config.itemDraggableOn);
    config.hideCheckToggler !== void 0 && (self2.hideCheckToggler = !!config.hideCheckToggler);
    config.combineNum !== void 0 && (self2.combineNum = parseInt(config.combineNum, 10) || 0);
    config.combineFromIndex !== void 0 && (self2.combineFromIndex = parseInt(config.combineFromIndex, 10) || 0);
    config.maxKeepItemSelectionLength !== void 0 && (self2.maxKeepItemSelectionLength = config.maxKeepItemSelectionLength);
    config.keepItemSelectionOnPageChange !== void 0 && (self2.keepItemSelectionOnPageChange = config.keepItemSelectionOnPageChange);
    config.exportExcelLoading !== void 0 && (self2.exportExcelLoading = config.exportExcelLoading);
    config.loading !== void 0 && (self2.loading = config.loading);
    config.canAccessSuperData !== void 0 && (self2.canAccessSuperData = !!config.canAccessSuperData);
    typeof config.lazyRenderAfter === "number" && (self2.lazyRenderAfter = config.lazyRenderAfter);
    typeof config.tableLayout === "string" && (self2.tableLayout = config.tableLayout);
    if (config.columns && Array.isArray(config.columns)) {
      var columns = config.columns.map(function(column) {
        if ((options === null || options === void 0 ? void 0 : options.resolveDefinitions) && typeof (column === null || column === void 0 ? void 0 : column.$ref) == "string" && column.$ref) {
          return __assign(__assign({}, options.resolveDefinitions(column.$ref)), column);
        }
        return column;
      }).filter(function(column) {
        return column;
      });
      var key = getPersistDataKey(columns);
      var data = localStorage.getItem(key);
      var tableMetaData = null;
      if (data) {
        try {
          tableMetaData = JSON.parse(data);
        } catch (error) {
        }
        var order_1 = tableMetaData === null || tableMetaData === void 0 ? void 0 : tableMetaData.columnOrder;
        if (Array.isArray(order_1) && order_1.length != 0) {
          columns = (0, import_sortBy.default)(columns, function(item, index) {
            return order_1.indexOf(item.name || item.label || index);
          });
        }
      }
      updateColumns(columns);
    }
  }
  function updateColumns(columns) {
    if (columns && Array.isArray(columns)) {
      columns = columns.filter(function(column) {
        return column;
      }).concat();
      if (!columns.length) {
        columns.push({
          type: "text",
          label: "空"
        });
      }
      columns.unshift({
        type: "__expandme",
        toggable: false,
        className: "Table-expandCell"
      });
      columns.unshift({
        type: "__checkme",
        fixed: "left",
        toggable: false,
        className: "Table-checkCell"
      });
      columns.unshift({
        type: "__dragme",
        toggable: false,
        className: "Table-dragCell"
      });
      var originColumns_1 = self2.columns.concat();
      columns = columns.map(function(item, index) {
        var origin = item.id ? originColumns_1.find(function(column) {
          return column.pristine.id === item.id;
        }) : originColumns_1[index];
        return __assign(__assign({}, item), { id: (origin === null || origin === void 0 ? void 0 : origin.id) || guid(), index, width: (origin === null || origin === void 0 ? void 0 : origin.width) || 0, minWidth: (origin === null || origin === void 0 ? void 0 : origin.minWidth) || 0, realWidth: (origin === null || origin === void 0 ? void 0 : origin.realWidth) || 0, rawIndex: index - PARTITION_INDEX, type: item.type || "plain", pristine: item.pristine || item, toggled: item.toggled !== false, breakpoint: item.breakpoint, isPrimary: index === PARTITION_INDEX });
      });
      self2.columns.replace(columns);
    }
  }
  function initTableWidth() {
    var table = tableRef;
    if (!table) {
      return;
    }
    var tableWidth = table.parentElement.offsetWidth;
    var thead = table.querySelector(":scope>thead");
    var tbody = null;
    var htmls = [];
    var isFixed = self2.tableLayout === "fixed";
    var someSettedWidth = self2.columns.some(function(column) {
      return column.pristine.width;
    });
    var minWidths = {};
    if (isFixed) {
      tbody = table.querySelector(":scope>tbody");
      htmls.push('<table style="table-layout:auto!important;width:0!important;min-width:0!important;" class="'.concat(table.className, '">').concat(thead.outerHTML, "</table>"));
    }
    if (someSettedWidth || isFixed) {
      htmls.push('<table style="table-layout:auto!important;min-width:'.concat(tableWidth, "px!important;width:").concat(tableWidth, 'px!important;" class="').concat(table.className.replace("is-layout-fixed", ""), '">').concat(thead.outerHTML).concat(tbody ? "<tbody>".concat(tbody.innerHTML, "</tbody>") : "", "</table>"));
    }
    if (!htmls.length) {
      return;
    }
    var div = document.createElement("div");
    div.className = "amis-scope";
    div.style.cssText += "visibility: hidden!important;";
    div.innerHTML = htmls.join("");
    var ths1 = [];
    var ths2 = [];
    if (isFixed) {
      ths1 = [].slice.call(div.querySelectorAll(":scope>table:first-child>thead>tr>th[data-index]"));
    }
    if (someSettedWidth || isFixed) {
      ths2 = [].slice.call(div.querySelectorAll(":scope>table:last-child>thead>tr>th[data-index]"));
    }
    ths1.forEach(function(th) {
      th.style.cssText += "width: 0";
    });
    ths2.forEach(function(th) {
      var index = parseInt(th.getAttribute("data-index"), 10);
      var column = self2.columns[index];
      th.style.cssText += "".concat(
        typeof column.pristine.width === "number" ? "width: ".concat(column.pristine.width, "px;") : column.pristine.width ? "width: ".concat(column.pristine.width, ";") : ""
        // todo 可能需要让修改过列宽的保持相应宽度，目前这样相当于重置了
      );
    });
    document.body.appendChild(div);
    ths1.forEach(function(th) {
      var index = parseInt(th.getAttribute("data-index"), 10);
      minWidths[index] = th.clientWidth;
      var column = self2.columns[index];
      column.setMinWidth(minWidths[index]);
    });
    ths2.forEach(function(col) {
      var index = parseInt(col.getAttribute("data-index"), 10);
      var column = self2.columns[index];
      if (column.pristine.width || isFixed) {
        column.setWidth(Math.max(typeof column.pristine.width === "number" ? column.pristine.width : col.clientWidth, minWidths[index] || 0));
      }
    });
    document.body.removeChild(div);
  }
  function syncTableWidth() {
    var table = tableRef;
    if (!table) {
      return;
    }
    var thead = table.querySelector(":scope>thead");
    var cols = [].slice.call(thead.querySelectorAll("tr>th[data-index]"));
    self2.theadHeight = thead.offsetHeight;
    cols.forEach(function(col) {
      var index = parseInt(col.getAttribute("data-index"), 10);
      var column = self2.columns[index];
      column.setRealWidth(col.offsetWidth);
    });
  }
  function combineCell(arr, keys) {
    if (!keys.length || !arr.length) {
      return arr;
    }
    var key = keys.shift();
    var rowIndex = 0;
    var row = arr[rowIndex];
    row.rowSpans[key] = 1;
    var value = resolveVariable(key, row.data);
    for (var i = 1, len = arr.length; i < len; i++) {
      var current = arr[i];
      if ((0, import_isEqual6.default)(resolveVariable(key, current.data), value)) {
        row.rowSpans[key] += 1;
        current.rowSpans[key] = 0;
      } else {
        if (row.rowSpans[key] > 1) {
          combineCell(arr.slice(rowIndex, i), keys.concat());
        }
        rowIndex = i;
        row = current;
        row.rowSpans[key] = 1;
        value = resolveVariable(key, row.data);
      }
    }
    if (row.rowSpans[key] > 1 && keys.length) {
      combineCell(arr.slice(rowIndex, arr.length), keys.concat());
    }
    return arr;
  }
  function autoCombineCell(arr, columns, maxCount, fromIndex) {
    if (fromIndex === void 0) {
      fromIndex = 0;
    }
    if (!columns.length || !maxCount || !arr.length) {
      return arr;
    }
    fromIndex = fromIndex || (arr.some(function(item) {
      return Array.isArray(item.children) && item.children.length;
    }) ? 1 : 0);
    var keys = [];
    for (var i = 0; i < columns.length; i++) {
      if (keys.length === maxCount) {
        break;
      }
      var column = columns[i];
      if ("__" === column.type.substring(0, 2)) {
        continue;
      }
      var key = column.name;
      if (!key) {
        break;
      }
      if (fromIndex > 0) {
        fromIndex--;
      } else {
        keys.push(key);
      }
    }
    return combineCell(arr, keys);
  }
  function initRows(rows, getEntryId, reUseRow) {
    self2.selectedRows.clear();
    rows = !Array.isArray(rows) ? [] : rows;
    var arr = rows.map(function(item, index) {
      var _a3;
      if (!isObject(item)) {
        item = {
          item
        };
      }
      var id = String(getEntryId ? getEntryId(item, index) : (_a3 = item.__id) !== null && _a3 !== void 0 ? _a3 : guid());
      return {
        // id: getEntryId ? getEntryId(item, key) : String(item && (item as any)[self.primaryField] || `${key}-1-${key}`),
        id,
        key: String("".concat(index, "-1-").concat(index)),
        depth: 1,
        index,
        newIndex: index,
        pristine: item,
        path: "".concat(index),
        data: item,
        rowSpans: {},
        defer: !!item.defer,
        loaded: false,
        loading: false,
        children: item && Array.isArray(item.children) ? initChildren(item.children, 1, index, id, "".concat(index, ".")) : []
      };
    });
    if (self2.combineNum) {
      arr = autoCombineCell(arr, self2.columns, self2.combineNum, self2.combineFromIndex);
    }
    replaceRow(arr, reUseRow);
    self2.isNested = self2.rows.some(function(item) {
      return item.children.length || item.defer && !item.loaded;
    });
    if (self2.lazyRenderAfter && self2.falttenedRows.length > self2.lazyRenderAfter) {
      for (var i = self2.lazyRenderAfter, len = self2.falttenedRows.length; i < len; i++) {
        self2.falttenedRows[i].appeared = false;
        self2.falttenedRows[i].lazyRender = true;
      }
    }
    var expand = self2.footable && self2.footable.expand;
    if (expand === "first" || self2.expandConfig && self2.expandConfig.expand === "first") {
      self2.rows.length && self2.expandedRows.push(self2.rows[0].id);
    } else if (expand === "all" && !self2.footable.accordion || self2.expandConfig && self2.expandConfig.expand === "all" && !self2.expandConfig.accordion) {
      self2.expandedRows.replace(getExpandAllRows(self2.rows));
    }
    self2.dragging = false;
  }
  function getExpandAllRows(arr) {
    return arr.reduce(function(result, current) {
      result.push(current.id);
      if (current.children && current.children.length) {
        result = result.concat(getExpandAllRows(current.children));
      }
      return result;
    }, []);
  }
  function replaceRow(arr, reUseRow) {
    if (reUseRow === false) {
      self2.rows.replace(arr.map(function(item2) {
        return Row.create(item2);
      }));
      return;
    }
    var pool = arr.concat();
    if (self2.rows.length > arr.length) {
      self2.rows.splice(arr.length, self2.rows.length - arr.length);
    }
    var index = 0;
    var len = self2.rows.length;
    while (pool.length) {
      var item = pool.shift();
      if (index < len) {
        self2.rows[index].replaceWith(item);
      } else {
        var row = Row.create(item);
        self2.rows.push(row);
      }
      index++;
    }
  }
  function updateSelected(selected, valueField) {
    self2.selectedRows.clear();
    eachTree(self2.rows, function(item) {
      if (~selected.indexOf(item.pristine)) {
        self2.selectedRows.push(item.id);
      } else if ((0, import_find3.default)(selected, function(a) {
        return a[valueField || "value"] && a[valueField || "value"] == item.pristine[valueField || "value"];
      })) {
        self2.selectedRows.push(item.id);
      }
    });
    updateCheckDisable();
  }
  function getSelectedRows() {
    var _a3;
    var maxLength = self2.maxKeepItemSelectionLength;
    var keep = self2.keepItemSelectionOnPageChange;
    var selectedItems = (_a3 = self2.data) === null || _a3 === void 0 ? void 0 : _a3.selectedItems;
    if (keep && maxLength && selectedItems && maxLength >= selectedItems.length) {
      var restCheckableRows = self2.checkableRows.filter(function(item) {
        return !item.checked;
      });
      var checkableRows = restCheckableRows.filter(function(item, i) {
        return i < maxLength - selectedItems.length;
      });
      return __spreadArray(__spreadArray([], __read(self2.selectedRows), false), __read(checkableRows), false);
    } else {
      return __spreadArray(__spreadArray([], __read(self2.selectedRows.filter(function(item) {
        return !item.checkable;
      })), false), __read(self2.checkableRows), false);
    }
  }
  function toggleAll() {
    if (self2.allChecked) {
      self2.selectedRows.replace(self2.selectedRows.filter(function(row) {
        return !row.checkable;
      }));
    } else {
      self2.selectedRows.replace(getSelectedRows());
    }
  }
  var lastCheckedRow = null;
  function toggle(row, checked) {
    if (!row.checkable) {
      return;
    }
    lastCheckedRow = row;
    var idx = self2.selectedRows.indexOf(row);
    if (self2.multiple) {
      ~idx ? !checked && self2.selectedRows.splice(idx, 1) : checked && self2.selectedRows.push(row);
    } else {
      ~idx ? !checked && self2.selectedRows.splice(idx, 1) : checked && self2.selectedRows.replace([row]);
    }
  }
  function toggleAncestors(row) {
    var parent = row.parent;
    if (!parent.depth) {
      return;
    }
    var selectedStatus = parent.childrenSelected();
    toggle(parent, selectedStatus === SELECTED_STATUS.ALL);
    toggleAncestors(parent);
  }
  function toggleDescendants(row, checked) {
    var children = row.children;
    if (!(children === null || children === void 0 ? void 0 : children.length)) {
      return;
    }
    children.forEach(function(child) {
      toggle(child, checked);
      toggleDescendants(child, checked);
    });
  }
  function getToggleShiftRows(row) {
    var e_1, _a3;
    if (!lastCheckedRow || row === lastCheckedRow || !self2.multiple) {
      return [row];
    }
    var toggleRows = [];
    var maxLength = self2.maxKeepItemSelectionLength;
    var checkableRows = self2.checkableRows;
    var lastCheckedRowIndex = checkableRows.findIndex(function(row2) {
      return row2 === lastCheckedRow;
    });
    var rowIndex = checkableRows.findIndex(function(rowItem2) {
      return row === rowItem2;
    });
    var minIndex = lastCheckedRowIndex > rowIndex ? rowIndex : lastCheckedRowIndex + 1;
    var maxIndex = lastCheckedRowIndex > rowIndex ? lastCheckedRowIndex : rowIndex + 1;
    var rows = checkableRows.slice(minIndex, maxIndex);
    try {
      for (var rows_1 = __values(rows), rows_1_1 = rows_1.next(); !rows_1_1.done; rows_1_1 = rows_1.next()) {
        var rowItem = rows_1_1.value;
        if (!(lastCheckedRow.checked && maxLength && self2.selectedRows.length + toggleRows.length >= maxLength)) {
          toggleRows.push(rowItem);
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (rows_1_1 && !rows_1_1.done && (_a3 = rows_1.return))
          _a3.call(rows_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    return toggleRows;
  }
  function toggleShift(row, checked) {
    var toggleRows = getToggleShiftRows(row);
    if ((toggleRows === null || toggleRows === void 0 ? void 0 : toggleRows.length) === 1) {
      toggle(row, checked);
      return;
    }
    toggleRows.forEach(function(row2) {
      var idx = self2.selectedRows.indexOf(row2);
      if (idx === -1 && checked) {
        self2.selectedRows.push(row2);
      } else if (~idx && !checked) {
        self2.selectedRows.splice(idx, 1);
      }
    });
    lastCheckedRow = row;
  }
  function updateCheckDisable() {
    if (!self2.data) {
      return;
    }
    var maxLength = self2.maxKeepItemSelectionLength;
    var selectedItems = self2.data.selectedItems;
    self2.selectedRows.map(function(item) {
      return item.setCheckdisable(false);
    });
    if (maxLength && maxLength <= selectedItems.length) {
      self2.unSelectedRows.map(function(item) {
        return !item.checked && item.setCheckdisable(true);
      });
    } else {
      self2.unSelectedRows.map(function(item) {
        return item.checkdisable && item.setCheckdisable(false);
      });
    }
  }
  function clear() {
    self2.selectedRows.clear();
  }
  function toggleExpandAll() {
    if (self2.allExpanded) {
      self2.expandedRows.clear();
    } else {
      self2.expandedRows.replace(self2.rows.filter(function(item) {
        return item.expandable;
      }).map(function(item) {
        return item.id;
      }));
    }
  }
  function toggleExpanded(row) {
    var idx = self2.expandedRows.indexOf(row.id);
    if (~idx) {
      self2.expandedRows.splice(idx, 1);
    } else if (self2.footable && self2.footable.accordion) {
      self2.expandedRows.replace([row.id]);
    } else if (self2.expandConfig && self2.expandConfig.accordion) {
      var rows = self2.getExpandedRows().filter(function(item) {
        return item.depth !== row.depth;
      });
      rows.push(row);
      self2.expandedRows.replace(rows.map(function(item) {
        return item.id;
      }));
    } else {
      self2.expandedRows.push(row.id);
    }
  }
  function collapseAllAtDepth(depth) {
    var rows = self2.getExpandedRows().filter(function(item) {
      return item.depth !== depth;
    });
    self2.expandedRows.replace(rows.map(function(item) {
      return item.id;
    }));
  }
  function setOrderByInfo(key, direction) {
    self2.orderBy = key;
    self2.orderDir = key ? direction : "";
  }
  function changeOrder(key, direction) {
    setOrderByInfo(key, direction);
    var dir = /desc/i.test(self2.orderDir) ? -1 : 1;
    self2.rows.replace(sortArray(self2.rows.concat(), self2.orderBy, dir, function(item, field) {
      return item.data[field];
    }));
  }
  function reset() {
    self2.rows.forEach(function(item) {
      return item.reset();
    });
    var rows = self2.rows.concat();
    eachTree(rows, function(item) {
      if (item.children) {
        var rows_2 = item.children.concat().sort(function(a, b) {
          return a.index - b.index;
        });
        rows_2.forEach(function(item2) {
          return item2.reset();
        });
        item.children.replace(rows_2);
      }
    });
    rows.forEach(function(item) {
      return item.reset();
    });
    rows = rows.sort(function(a, b) {
      return a.index - b.index;
    });
    self2.rows.replace(rows);
    self2.dragging = false;
  }
  function toggleDragging() {
    self2.dragging = !self2.dragging;
  }
  function stopDragging() {
    self2.dragging = false;
  }
  function exchange(fromIndex, toIndex, item) {
    item = item || self2.rows[fromIndex];
    if (item.parentId) {
      var parent_1 = self2.getRowById(item.parentId);
      var offset2 = parent_1.children.indexOf(item) - fromIndex;
      toIndex += offset2;
      fromIndex += offset2;
      var newRows_1 = parent_1.children.concat();
      newRows_1.splice(fromIndex, 1);
      newRows_1.splice(toIndex, 0, item);
      newRows_1.forEach(function(item2, index) {
        return item2.newIndex = index;
      });
      parent_1.children.replace(newRows_1);
      return;
    }
    var newRows = self2.rows.concat();
    newRows.splice(fromIndex, 1);
    newRows.splice(toIndex, 0, item);
    newRows.forEach(function(item2, index) {
      return item2.newIndex = index;
    });
    self2.rows.replace(newRows);
  }
  function persistSaveToggledColumns() {
    var key = getPersistDataKey(self2.columnsData);
    localStorage.setItem(key, JSON.stringify({
      // 可显示列index
      toggledColumnIndex: self2.activeToggaleColumns.map(function(item) {
        return item.index;
      }),
      // 列排序，name，label可能不存在
      columnOrder: self2.columnsData.map(function(item) {
        return item.name || item.label || item.rawIndex;
      }),
      // 已激活的可查询列
      enabledSearchableColumn: self2.activedSearchableColumns.map(function(item) {
        return item.name;
      })
    }));
  }
  function addForm(form, rowIndex) {
    self2.formsRef.push({
      id: form.id,
      rowIndex
    });
  }
  function toggleAllColumns(min) {
    if (min === void 0) {
      min = 1;
    }
    if (self2.activeToggaleColumns.length) {
      if (self2.activeToggaleColumns.length === self2.toggableColumns.length) {
        self2.toggableColumns.map(function(column) {
          return column.setToggled(false);
        });
        toggleColumnsAtLeast(min);
      } else {
        self2.toggableColumns.map(function(column) {
          return column.setToggled(true);
        });
      }
    } else {
      self2.toggableColumns.map(function(column) {
        return column.setToggled(true);
      });
    }
    persistSaveToggledColumns();
  }
  function toggleColumnsAtLeast(min) {
    var _a3;
    if (min === void 0) {
      min = 1;
    }
    if (self2.activeToggaleColumns.length < min) {
      for (var i = 0; i < min; i++) {
        (_a3 = self2.toggableColumns[i]) === null || _a3 === void 0 ? void 0 : _a3.setToggled(true);
      }
    }
  }
  function getPersistDataKey(columns) {
    return location.pathname + self2.path + (0, import_sortBy.default)(columns.map(function(item, index) {
      return item.name || item.label || index;
    })).join("-");
  }
  function setSearchFormExpanded(value) {
    self2.searchFormExpanded = !!value;
  }
  function toggleSearchFormExpanded() {
    self2.searchFormExpanded = !self2.searchFormExpanded;
  }
  return {
    setTable,
    getTable,
    update,
    updateColumns,
    initTableWidth,
    syncTableWidth,
    initRows,
    updateSelected,
    toggleAll,
    getSelectedRows,
    toggle,
    toggleAncestors,
    toggleDescendants,
    toggleShift,
    getToggleShiftRows,
    toggleExpandAll,
    toggleExpanded,
    collapseAllAtDepth,
    clear,
    setOrderByInfo,
    changeOrder,
    reset,
    toggleDragging,
    stopDragging,
    exchange,
    addForm,
    toggleAllColumns,
    toggleColumnsAtLeast,
    persistSaveToggledColumns,
    setSearchFormExpanded,
    toggleSearchFormExpanded,
    // events
    afterCreate: function() {
      setTimeout(function() {
        if (!isAlive(self2)) {
          return;
        }
        var key = getPersistDataKey(self2.columnsData);
        var data = localStorage.getItem(key);
        if (data) {
          var tableMetaData_1 = JSON.parse(data);
          var toggledColumns_1 = isObject(tableMetaData_1) ? tableMetaData_1 === null || tableMetaData_1 === void 0 ? void 0 : tableMetaData_1.toggledColumnIndex : tableMetaData_1;
          self2.toggableColumns.forEach(function(item) {
            return item.setToggled(!!~toggledColumns_1.indexOf(item.index));
          });
          self2.searchableColumns.forEach(function(item) {
            var _a3;
            item.setEnableSearch(!!~((_a3 = tableMetaData_1 === null || tableMetaData_1 === void 0 ? void 0 : tableMetaData_1.enabledSearchableColumn) !== null && _a3 !== void 0 ? _a3 : []).indexOf(item.name));
          });
        }
      }, 200);
    }
  };
});

// node_modules/amis-core/esm/store/table2.js
var import_find4 = __toESM(require_find());
var import_isEqual7 = __toESM(require_isEqual());
var ServerError3 = (
  /** @class */
  function(_super) {
    __extends(ServerError4, _super);
    function ServerError4() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.type = "ServerError";
      return _this;
    }
    return ServerError4;
  }(Error)
);
var Column2 = types.model("Column", {
  title: types.optional(types.frozen(), void 0),
  name: "",
  toggled: false,
  breakpoint: types.optional(types.frozen(), void 0),
  pristine: types.optional(types.frozen(), void 0),
  toggable: true,
  index: 0,
  type: "",
  children: types.optional(types.array(types.late(function() {
    return Column2;
  })), [])
}).actions(function(self2) {
  return {
    toggleToggle: function() {
      self2.toggled = !self2.toggled;
      var table = getParent(self2, 2);
      if (!table.activeToggaleColumns.length) {
        self2.toggled = true;
      }
      table.persistSaveToggledColumns();
    },
    setToggled: function(value) {
      self2.toggled = value;
    }
  };
});
var Row2 = types.model("Row", {
  storeType: "Row",
  id: types.identifier,
  parentId: "",
  name: types.string,
  pristine: types.frozen({}),
  data: types.frozen({}),
  index: types.number,
  newIndex: types.number,
  depth: types.number,
  children: types.optional(types.array(types.late(function() {
    return Row2;
  })), []),
  path: ""
  // 行数据的位置
}).views(function(self2) {
  return {
    get checked() {
      return getParent(self2, self2.depth * 2).isSelected(self2);
    },
    get modified() {
      if (!self2.data) {
        return false;
      }
      return Object.keys(self2.data).some(function(key) {
        return !(0, import_isEqual7.default)(self2.data[key], self2.pristine[key]);
      });
    },
    get moved() {
      return self2.index !== self2.newIndex;
    },
    get locals() {
      var children = null;
      if (self2.children.length) {
        children = self2.children.map(function(item) {
          return item.locals;
        });
      }
      var parent = getParent(self2, 2);
      return createObject2(extendObject(getParent(self2, self2.depth * 2).data, {
        index: self2.index,
        // todo 以后再支持多层，目前先一层
        parent: parent.storeType === Row2.name ? parent.data : void 0
      }), children ? __assign(__assign({}, self2.data), { children }) : self2.data);
    },
    getDataWithModifiedChilden: function() {
      var data = __assign({}, self2.data);
      if (data.children && self2.children) {
        data.children = self2.children.map(function(item) {
          return item.getDataWithModifiedChilden();
        });
      }
      return data;
    }
  };
}).actions(function(self2) {
  return {
    replaceWith: function(data) {
      Object.keys(data).forEach(function(key) {
        if (key !== "id") {
          self2[key] = data[key];
        }
      });
      if (Array.isArray(data.children)) {
        var arr = data.children;
        var pool = arr.concat();
        if (self2.children.length > arr.length) {
          self2.children.splice(arr.length, self2.children.length - arr.length);
        }
        var index = 0;
        var len = self2.children.length;
        while (pool.length) {
          var item = __assign(__assign({}, pool.shift()), { parentId: self2.id });
          if (index < len) {
            self2.children[index].replaceWith(item);
          } else {
            var row = Row2.create(item);
            self2.children.push(row);
          }
          index++;
        }
      }
    },
    change: function(values2, savePristine) {
      self2.data = immutableExtends(self2.data, values2);
      savePristine && (self2.pristine = self2.data);
    },
    reset: function() {
      self2.newIndex = self2.index;
      self2.data = self2.pristine;
    }
  };
});
var TableStore2 = ServiceStore.named("TableStore2").props({
  columns: types.array(Column2),
  rows: types.array(Row2),
  selectedRowKeys: types.array(types.frozen()),
  selectedRows: types.array(types.reference(Row2)),
  expandedRowKeys: types.array(types.frozen()),
  columnsTogglable: types.optional(types.union(types.boolean, types.literal("auto"), types.frozen()), "auto"),
  orderBy: "",
  order: types.optional(types.union(types.literal("asc"), types.literal("desc")), "asc"),
  query: types.optional(types.frozen(), {}),
  pageNo: 1,
  pageSize: 10,
  dragging: false,
  rowSelectionKeyField: "id",
  formsRef: types.optional(types.array(types.frozen()), [])
}).views(function(self2) {
  function getToggable() {
    if (self2.columnsTogglable === "auto") {
      return self2.columns.filter.length > 10;
    }
    return !!self2.columnsTogglable;
  }
  function hasColumnHidden() {
    return self2.columns.findIndex(function(column) {
      return !column.toggled;
    }) !== -1;
  }
  function getToggableColumns() {
    return self2.columns.filter(function(item) {
      return isVisible(item.pristine, self2.data) && item.toggable !== false;
    });
  }
  function getActiveToggableColumns() {
    return getToggableColumns().filter(function(item) {
      return item.toggled;
    });
  }
  function getAllFilteredColumns(columns) {
    if (columns) {
      return columns.filter(function(item) {
        return item && isVisible(item.pristine, hasVisibleExpression(item.pristine) ? self2.data : {}) && (item.toggled || !item.toggable);
      }).map(function(item) {
        return __assign(__assign({}, item.pristine), { type: item.type, children: item.children ? getAllFilteredColumns(item.children) : void 0 });
      });
    }
    return [];
  }
  function getFilteredColumns() {
    return getAllFilteredColumns(self2.columns);
  }
  function getUnSelectedRows() {
    return flattenTree(self2.rows).filter(function(item) {
      return !item.checked;
    });
  }
  function getData(superData) {
    return createObject2(superData, {
      items: self2.rows.map(function(item) {
        return item.data;
      }),
      selectedItems: self2.selectedRows.map(function(item) {
        return item.data;
      }),
      unSelectedItems: getUnSelectedRows().map(function(item) {
        return item.data;
      })
    });
  }
  function getRowByIndex(rowIndex, levels, rows) {
    rows = rows || self2.rows;
    if (levels && levels.length > 0) {
      var index = +(levels.shift() || 0);
      return getRowByIndex(rowIndex, levels, rows[index].children);
    }
    return rows[rowIndex];
  }
  function isSelected(row) {
    return !!~self2.selectedRows.indexOf(row);
  }
  function getMovedRows() {
    return flattenTree(self2.rows).filter(function(item) {
      return item.moved;
    });
  }
  function getMoved() {
    return getMovedRows().length;
  }
  function getModifiedRows(rows, modifiedRows) {
    if (rows === void 0) {
      rows = [];
    }
    if (modifiedRows === void 0) {
      modifiedRows = [];
    }
    rows = rows && rows.length ? rows : self2.rows;
    rows.forEach(function(item) {
      if (item.children && item.children.length) {
        getModifiedRows(item.children, modifiedRows);
      }
      var diff = difference(item.data, item.pristine);
      var hasDifference = Object.keys(diff).length;
      if (hasDifference) {
        modifiedRows.push(item);
      }
    });
    return modifiedRows;
  }
  function getModified() {
    return getModifiedRows().length;
  }
  return {
    get toggable() {
      return getToggable();
    },
    get columnsData() {
      return self2.columns;
    },
    get toggableColumns() {
      return getToggableColumns();
    },
    get filteredColumns() {
      return getFilteredColumns();
    },
    get activeToggaleColumns() {
      return getActiveToggableColumns();
    },
    get dataSource() {
      return self2.rows.map(function(item) {
        return item.data;
      });
    },
    get currentSelectedRowKeys() {
      if (self2.data && self2.data.selectedItems) {
        return self2.data.selectedItems.map(function(item) {
          return item[self2.rowSelectionKeyField];
        }) || [];
      }
      return self2.selectedRowKeys.map(function(item) {
        return item;
      });
    },
    get currentExpandedKeys() {
      return self2.expandedRowKeys.map(function(item) {
        return item;
      });
    },
    get unSelectedRows() {
      return getUnSelectedRows();
    },
    // 是否隐藏了某列
    hasColumnHidden: function() {
      return hasColumnHidden();
    },
    getData,
    getRowById: function(id) {
      return findTree(self2.rows, function(item) {
        return item.id === id;
      });
    },
    isSelected,
    getRowByIndex,
    get moved() {
      return getMoved();
    },
    get movedRows() {
      return getMovedRows();
    },
    get keyField() {
      return self2.rowSelectionKeyField;
    },
    get modified() {
      return getModified();
    },
    get modifiedRows() {
      return getModifiedRows();
    }
  };
}).actions(function(self2) {
  function updateColumns(columns) {
    if (columns && Array.isArray(columns)) {
      var cols = columns.filter(function(column) {
        return column;
      }).concat();
      cols = cols.map(function(item, index) {
        return __assign(__assign({}, item), { index, type: item.type || "plain", pristine: item, toggled: item.toggled !== false, breakpoint: item.breakpoint, children: item.children ? updateColumns(item.children) : [] });
      });
      return cols;
    }
    return;
  }
  function update(config) {
    config.columnsTogglable !== void 0 && (self2.columnsTogglable = config.columnsTogglable);
    if (typeof config.orderBy === "string") {
      setOrderByInfo(config.orderBy, config.order === "desc" ? "desc" : "asc");
    }
    if (config.rowSelectionKeyField) {
      self2.rowSelectionKeyField = config.rowSelectionKeyField;
    }
    if (config.columns && Array.isArray(config.columns)) {
      self2.columns.replace(updateColumns(config.columns));
    }
  }
  function exchange(fromIndex, toIndex, item) {
    item = item || self2.rows[fromIndex];
    if (item === null || item === void 0 ? void 0 : item.parentId) {
      var parent_1 = self2.getRowById(item.parentId);
      var newRows_1 = parent_1.children.concat();
      newRows_1.splice(fromIndex, 1);
      newRows_1.splice(toIndex, 0, item);
      newRows_1.forEach(function(item2, index) {
        return item2.newIndex = index;
      });
      parent_1.children.replace(newRows_1);
      return;
    }
    var newRows = self2.rows.concat();
    newRows.splice(fromIndex, 1);
    newRows.splice(toIndex, 0, item);
    newRows.forEach(function(item2, index) {
      return item2.newIndex = index;
    });
    self2.rows.replace(newRows);
  }
  function toggleAllColumns() {
    if (self2.activeToggaleColumns.length) {
      if (self2.activeToggaleColumns.length === self2.toggableColumns.length) {
        self2.toggableColumns.map(function(column) {
          return column.setToggled(false);
        });
      } else {
        self2.toggableColumns.map(function(column) {
          return column.setToggled(true);
        });
      }
    } else {
      self2.toggableColumns.map(function(column) {
        return column.setToggled(true);
      });
    }
    persistSaveToggledColumns();
  }
  function persistSaveToggledColumns() {
    var key = location.pathname + self2.path + self2.toggableColumns.map(function(item) {
      return item.name || item.index;
    }).join("-");
    localStorage.setItem(key, JSON.stringify(self2.activeToggaleColumns.map(function(item) {
      return item.index;
    })));
  }
  function setOrderByInfo(key, direction) {
    self2.orderBy = key;
    self2.order = direction;
  }
  function updateQuery(values2, updater, pageNoField, pageSizeField, replace) {
    if (pageNoField === void 0) {
      pageNoField = "pageNo";
    }
    if (pageSizeField === void 0) {
      pageSizeField = "pageSize";
    }
    if (replace === void 0) {
      replace = false;
    }
    var originQuery = self2.query;
    self2.query = replace ? __assign({}, values2) : __assign(__assign({}, self2.query), values2);
    if (self2.query[pageNoField || "pageNo"]) {
      self2.pageNo = parseInt(self2.query[pageNoField || "pageNo"], 10);
    }
    if (self2.query[pageSizeField || "pageSize"]) {
      self2.pageSize = parseInt(self2.query[pageSizeField || "pageSize"], 10);
    }
    updater && isObjectShallowModified(originQuery, self2.query, false) && setTimeout(updater.bind(null, "?".concat(qsstringify(self2.query))), 4);
  }
  function updateSelectedRows(rows, selectedKeys) {
    var rowSelectionKeyField = self2.rowSelectionKeyField;
    eachTree(rows, function(item) {
      if (~selectedKeys.indexOf(item.pristine[rowSelectionKeyField])) {
        self2.selectedRows.push(item.id);
        self2.selectedRowKeys.push(item.pristine[rowSelectionKeyField]);
      } else if ((0, import_find4.default)(selectedKeys, function(a) {
        return a && a == item.pristine[rowSelectionKeyField];
      })) {
        self2.selectedRows.push(item.id);
        self2.selectedRowKeys.push(item.pristine[rowSelectionKeyField]);
      } else if (item.children) {
        updateSelectedRows(item.children, selectedKeys);
      }
    });
  }
  function updateSelected(selectedKeys) {
    self2.selectedRows.clear();
    self2.selectedRowKeys.clear();
    updateSelectedRows(self2.rows, selectedKeys);
  }
  function updateSelectedAll() {
    var selectedKeys = [];
    eachTree(self2.rows, function(item) {
      return selectedKeys.push(item.pristine[self2.rowSelectionKeyField]);
    });
    updateSelectedRows(self2.rows, selectedKeys);
  }
  function updateExpanded(expandedRowKeys, keyField) {
    self2.expandedRowKeys.clear();
    eachTree(self2.rows, function(item) {
      if (~expandedRowKeys.indexOf(item.pristine[keyField])) {
        self2.expandedRowKeys.push(item.pristine[keyField]);
      } else if ((0, import_find4.default)(expandedRowKeys, function(a) {
        return a && a == item.pristine[keyField];
      })) {
        self2.expandedRowKeys.push(item.pristine[keyField]);
      }
    });
  }
  function replaceRow(arr, reUseRow) {
    if (reUseRow === false) {
      self2.rows.replace(arr.map(function(item2) {
        return Row2.create(item2);
      }));
      return;
    }
    var pool = arr.concat();
    if (self2.rows.length > arr.length) {
      self2.rows.splice(arr.length, self2.rows.length - arr.length);
    }
    var index = 0;
    var len = self2.rows.length;
    while (pool.length) {
      var item = pool.shift();
      if (index < len) {
        self2.rows[index].replaceWith(item);
      } else {
        var row = Row2.create(item);
        self2.rows.push(row);
      }
      index++;
    }
  }
  function initChildren2(children, depth, pindex, parentId, path, keyField) {
    if (path === void 0) {
      path = "";
    }
    var key = keyField || "children";
    depth += 1;
    return children.map(function(item, index) {
      item = isObject(item) ? item : {
        item
      };
      var id = guid();
      return {
        id,
        parentId,
        name: String("".concat(pindex, "-").concat(depth, "-").concat(index)),
        path: "".concat(path).concat(index),
        depth,
        index,
        newIndex: index,
        pristine: item,
        data: item,
        rowSpans: {},
        children: item && Array.isArray(item[key]) ? initChildren2(item[key], depth, index, id, "".concat(path).concat(index, ".")) : []
      };
    });
  }
  function initRows(rows, getEntryId, reUseRow, keyField) {
    self2.selectedRows.clear();
    var key = keyField || "children";
    var arr = rows.map(function(item, index) {
      var id = getEntryId ? getEntryId(item, index) : guid();
      return {
        id,
        name: String("".concat(index, "-1-").concat(index)),
        index,
        newIndex: index,
        pristine: item,
        path: "".concat(index),
        data: item,
        depth: 1,
        children: item && Array.isArray(item[key]) ? initChildren2(item[key], 1, index, id, "".concat(index, "."), key) : []
      };
    });
    replaceRow(arr, reUseRow);
  }
  var saveRemote = flow(function saveRemote2(api, data, options) {
    var json, e_1;
    var _a3, _b3, _c, _d, _e, _f, _g, _h;
    if (options === void 0) {
      options = {};
    }
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _j.trys.push([0, 2, , 3]);
          options = __assign({ method: "post" }, options);
          self2.markSaving(true);
          return [4, getEnv(self2).fetcher(api, data, options)];
        case 1:
          json = _j.sent();
          self2.markSaving(false);
          if (!isEmpty2(json.data) || json.ok) {
            self2.updateData(normalizeApiResponseData(json.data), {
              __saved: Date.now()
            }, !!api && api.replaceData);
            self2.updatedAt = Date.now();
          }
          if (!json.ok) {
            self2.updateMessage((_d = (_c = (_b3 = (_a3 = api === null || api === void 0 ? void 0 : api.messages) === null || _a3 === void 0 ? void 0 : _a3.failed) !== null && _b3 !== void 0 ? _b3 : json.msg) !== null && _c !== void 0 ? _c : options.errorMessage) !== null && _d !== void 0 ? _d : self2.__("saveFailed"), true);
            !(api === null || api === void 0 ? void 0 : api.silent) && getEnv(self2).notify("error", self2.msg, json.msgTimeout !== void 0 ? {
              closeButton: true,
              timeout: json.msgTimeout
            } : void 0);
            throw new ServerError3(self2.msg);
          } else {
            self2.updateMessage((_h = (_g = (_f = (_e = api === null || api === void 0 ? void 0 : api.messages) === null || _e === void 0 ? void 0 : _e.success) !== null && _f !== void 0 ? _f : json.msg) !== null && _g !== void 0 ? _g : options.successMessage) !== null && _h !== void 0 ? _h : json.defaultMsg);
            self2.msg && getEnv(self2).notify("success", self2.msg, json.msgTimeout !== void 0 ? {
              closeButton: true,
              timeout: json.msgTimeout
            } : void 0);
          }
          return [2, json.data];
        case 2:
          e_1 = _j.sent();
          self2.markSaving(false);
          if (!isAlive(self2) || self2.disposed) {
            return [
              2
              /*return*/
            ];
          }
          !(api === null || api === void 0 ? void 0 : api.silent) && e_1.type !== "ServerError" && getEnv(self2).notify("error", e_1.message);
          throw e_1;
        case 3:
          return [
            2
            /*return*/
          ];
      }
    });
  });
  function reset() {
    self2.rows.forEach(function(item) {
      return item.reset();
    });
    var rows = self2.rows.concat();
    eachTree(rows, function(item) {
      if (item.children) {
        var rows_1 = item.children.concat().sort(function(a, b) {
          return a.index - b.index;
        });
        rows_1.forEach(function(item2) {
          return item2.reset();
        });
        item.children.replace(rows_1);
      }
    });
    rows.forEach(function(item) {
      return item.reset();
    });
    rows = rows.sort(function(a, b) {
      return a.index - b.index;
    });
    self2.rows.replace(rows);
    self2.dragging = false;
  }
  function addForm(form, rowIndex) {
    self2.formsRef.push({
      id: form.id,
      rowIndex
    });
  }
  return {
    update,
    persistSaveToggledColumns,
    setOrderByInfo,
    updateQuery,
    initRows,
    updateSelected,
    updateSelectedAll,
    updateExpanded,
    exchange,
    reset,
    toggleAllColumns,
    // events
    afterCreate: function() {
      setTimeout(function() {
        if (!isAlive(self2)) {
          return;
        }
        var key = location.pathname + self2.path + self2.toggableColumns.map(function(item) {
          return item.name || item.index;
        }).join("-");
        var data = localStorage.getItem(key);
        if (data) {
          var selectedColumns_1 = JSON.parse(data);
          self2.toggableColumns.forEach(function(item) {
            return item.setToggled(!!~selectedColumns_1.indexOf(item.index));
          });
        }
      }, 200);
    },
    saveRemote,
    addForm
  };
});

// node_modules/amis-core/esm/store/list.js
var import_isEqual8 = __toESM(require_isEqual());
var import_find5 = __toESM(require_find());
var Item = types.model("Item", {
  id: types.identifier,
  pristine: types.frozen(),
  data: types.frozen(),
  index: types.number,
  newIndex: types.number
}).views(function(self2) {
  return {
    get checked() {
      return getParent(self2, 2).isSelected(self2);
    },
    get modified() {
      if (!self2.data) {
        return false;
      }
      return Object.keys(self2.data).some(function(key) {
        return !(0, import_isEqual8.default)(self2.data[key], self2.pristine[key]);
      });
    },
    get moved() {
      return self2.index !== self2.newIndex;
    },
    get locals() {
      var listStore = getParent(self2, 2);
      return createObject2(extendObject(listStore.data, {
        index: self2.index,
        // 只有table时，也可以获取选中行
        selectedItems: listStore.selectedItems.map(function(item) {
          return item.data;
        }),
        unSelectedItems: listStore.unSelectedItems.map(function(item) {
          return item.data;
        })
      }), self2.data);
    },
    get checkable() {
      var table = getParent(self2, 2);
      return table && table.itemCheckableOn ? evalExpression(table.itemCheckableOn, self2.locals) : true;
    },
    get draggable() {
      var list = getParent(self2, 2);
      return list && list.itemDraggableOn ? evalExpression(list.itemDraggableOn, self2.locals) : list.draggable;
    }
  };
}).actions(function(self2) {
  return {
    toggle: function() {
      getParent(self2, 2).toggle(self2);
    },
    change: function(values2, savePristine) {
      self2.data = immutableExtends(self2.data, values2);
      savePristine && (self2.pristine = self2.data);
    },
    reset: function() {
      self2.newIndex = self2.index;
      self2.data = self2.pristine;
    }
  };
});
var ListStore = iRendererStore.named("ListStore").props({
  items: types.array(Item),
  selectedItems: types.array(types.reference(Item)),
  primaryField: "id",
  orderBy: "",
  orderDir: types.optional(types.union(types.literal("asc"), types.literal("desc")), "asc"),
  draggable: false,
  dragging: false,
  multiple: true,
  strictMode: false,
  selectable: false,
  itemCheckableOn: "",
  itemDraggableOn: "",
  hideCheckToggler: false
}).views(function(self2) {
  function isSelected(item) {
    return !!~self2.selectedItems.indexOf(item);
  }
  function getModifiedItems() {
    return self2.items.filter(function(item) {
      return item.modified;
    });
  }
  function getModified() {
    return getModifiedItems().length;
  }
  function getMovedItems() {
    return self2.items.filter(function(item) {
      return item.moved;
    });
  }
  function getMovied() {
    return getMovedItems().length;
  }
  return {
    get allChecked() {
      return !!(self2.selectedItems.length === self2.checkableItems.length && self2.checkableItems.length);
    },
    get checkableItems() {
      return self2.items.filter(function(item) {
        return item.checkable;
      });
    },
    get unSelectedItems() {
      return self2.items.filter(function(item) {
        return !item.checked;
      });
    },
    isSelected,
    get modified() {
      return getModified();
    },
    get modifiedItems() {
      return getModifiedItems();
    },
    get moved() {
      return getMovied();
    },
    get movedItems() {
      return getMovedItems();
    }
  };
}).actions(function(self2) {
  function update(config) {
    config.selectable === void 0 || (self2.selectable = config.selectable);
    config.draggable === void 0 || (self2.draggable = config.draggable);
    config.multiple === void 0 || (self2.multiple = config.multiple);
    config.strictMode === void 0 || (self2.strictMode = config.strictMode);
    config.hideCheckToggler === void 0 || (self2.hideCheckToggler = config.hideCheckToggler);
    if (typeof config.orderBy !== "undefined") {
      setOrderByInfo(config.orderBy, config.orderDir === "desc" ? "desc" : "asc");
    }
    config.itemCheckableOn === void 0 || (self2.itemCheckableOn = config.itemCheckableOn);
    config.itemDraggableOn === void 0 || (self2.itemDraggableOn = config.itemDraggableOn);
  }
  function initItems(items) {
    var arr = items.map(function(item, key) {
      item = isObject(item) ? item : {
        item
      };
      return {
        // id: String((item as any)[self.primaryField] || key),
        id: guid(),
        index: key,
        newIndex: key,
        pristine: item,
        data: item,
        modified: false
      };
    });
    self2.selectedItems.clear();
    self2.items.replace(arr);
    self2.dragging = false;
  }
  function updateSelected(selected, valueField) {
    self2.selectedItems.clear();
    self2.items.forEach(function(item) {
      if (~selected.indexOf(item.pristine)) {
        self2.selectedItems.push(item);
      } else if ((0, import_find5.default)(selected, function(a) {
        var selectValue = a[valueField || "value"];
        var itemValue = item.pristine[valueField || "value"];
        return self2.strictMode ? selectValue === itemValue : selectValue == itemValue;
      })) {
        self2.selectedItems.push(item);
      }
    });
  }
  function toggleAll() {
    if (self2.allChecked) {
      self2.selectedItems.clear();
    } else {
      self2.selectedItems.replace(self2.checkableItems);
    }
  }
  function clearAll() {
    self2.selectedItems.clear();
  }
  function selectAll() {
    self2.selectedItems.replace(self2.checkableItems);
  }
  function toggle(item) {
    if (!item.checkable) {
      return;
    }
    var idx = self2.selectedItems.indexOf(item);
    if (self2.multiple) {
      ~idx ? self2.selectedItems.splice(idx, 1) : self2.selectedItems.push(item);
    } else {
      ~idx ? self2.selectedItems.splice(idx, 1) : self2.selectedItems.replace([item]);
    }
  }
  function clear() {
    self2.selectedItems.clear();
  }
  function setOrderByInfo(key, direction) {
    self2.orderBy = key;
    self2.orderDir = direction;
  }
  function reset() {
    self2.items.forEach(function(item) {
      return item.reset();
    });
    self2.dragging = false;
  }
  function toggleDragging() {
    self2.dragging = !self2.dragging;
  }
  function stopDragging() {
    self2.dragging = false;
  }
  function exchange(fromIndex, toIndex) {
    var item = self2.items[fromIndex];
    item.newIndex = toIndex;
    var newItems = self2.items.slice();
    newItems.splice(fromIndex, 1);
    newItems.splice(toIndex, 0, item);
    self2.items.replace(newItems);
  }
  return {
    update,
    initItems,
    updateSelected,
    toggleAll,
    clearAll,
    selectAll,
    toggle,
    clear,
    setOrderByInfo,
    reset,
    toggleDragging,
    stopDragging,
    exchange
  };
});

// node_modules/amis-core/esm/store/modal.js
var ModalStore = ServiceStore.named("ModalStore").props({
  form: types.frozen(),
  entered: false,
  resizeCoord: 0,
  schema: types.frozen()
}).views(function(self2) {
  return {
    get formData() {
      return createObject2(self2.data, self2.form);
    }
  };
}).actions(function(self2) {
  return {
    setEntered: function(value) {
      self2.entered = value;
    },
    setFormData: function(obj) {
      self2.form = obj;
    },
    reset: function() {
      self2.form = {};
      self2.reInitData({}, true);
    },
    setResizeCoord: function(value) {
      self2.resizeCoord = value;
    },
    setSchema: function(schema) {
      if (schema && schema.then) {
        schema.then(function(value) {
          return isAlive(self2) && self2.setSchema(value);
        });
        return;
      }
      self2.schema = schema;
    }
  };
});

// node_modules/amis-core/esm/utils/normalizeOptions.js
var import_isPlainObject14 = __toESM(require_isPlainObject());
function normalizeOptions(options, share, valueField) {
  if (share === void 0) {
    share = {
      values: [],
      options: []
    };
  }
  if (valueField === void 0) {
    valueField = "value";
  }
  if (typeof options === "string") {
    return options.split(",").map(function(item) {
      var _a3;
      var idx = share.values.indexOf(item);
      if (~idx) {
        return share.options[idx];
      }
      var option = (_a3 = {
        label: item
      }, // 添加 option 的 value 根据 valueField 来
      // 否则某些情况下多余字段会有影响
      _a3[valueField] = item, _a3);
      share.values.push(option.value);
      share.options.push(option);
      return option;
    });
  } else if (Array.isArray(options) && typeof options[0] === "string") {
    return options.map(function(item) {
      var _a3;
      var idx = share.values.indexOf(item);
      if (~idx) {
        return share.options[idx];
      }
      var option = (_a3 = {
        label: item
      }, _a3[valueField] = item, _a3);
      share.values.push(option[valueField]);
      share.options.push(option);
      return option;
    });
  } else if (Array.isArray(options)) {
    return options.filter(function(item) {
      return item !== null && item !== void 0;
    }).map(function(item) {
      var _a3;
      var value = item && item[valueField];
      var idx = value !== void 0 && !item.children ? share.values.indexOf(value) : -1;
      if (~idx) {
        return share.options[idx];
      }
      var option = __assign(__assign({}, item), (_a3 = {}, _a3[valueField] = value, _a3));
      if (typeof option.children !== "undefined") {
        option.children = normalizeOptions(option.children, share, valueField);
      } else if (value !== void 0) {
        share.values.push(value);
        share.options.push(option);
      }
      return option;
    });
  } else if ((0, import_isPlainObject14.default)(options)) {
    return Object.keys(options).map(function(key) {
      var _a3;
      var idx = share.values.indexOf(key);
      if (~idx) {
        return share.options[idx];
      }
      var option = (_a3 = {
        label: options[key]
      }, _a3[valueField] = key, _a3);
      share.values.push(option.value);
      share.options.push(option);
      return option;
    });
  }
  return [];
}

// node_modules/amis-core/esm/utils/optionValueCompare.js
var import_isEqual9 = __toESM(require_isEqual());
function getOptionValue(value, valueField) {
  if (valueField === void 0) {
    valueField = "value";
  }
  return isObject(value) && value && value.hasOwnProperty(valueField) ? value[valueField] : value;
}
function getOptionValueBindField(valueField) {
  if (valueField === void 0) {
    valueField = "value";
  }
  return function(value) {
    return getOptionValue(value, valueField);
  };
}
function matchOptionValue(a, b, valueField) {
  if (valueField === void 0) {
    valueField = "value";
  }
  var aValue = getOptionValue(a, valueField);
  var bValue = b[valueField || "value"];
  return isObject(aValue) ? (0, import_isEqual9.default)(aValue, bValue) : (
    // 当值均为 undefined 时，不应该判定相等
    aValue !== void 0 && bValue !== void 0 && String(bValue) === String(aValue)
  );
}
function optionValueCompare(a, valueField) {
  if (valueField === void 0) {
    valueField = "value";
  }
  return function(b) {
    return matchOptionValue(a, b, valueField);
  };
}

// node_modules/amis-core/esm/store/formItem.js
var import_isEqualWith = __toESM(require_isEqualWith());
var import_uniqWith2 = __toESM(require_uniqWith());
init_moment();
var import_findIndex2 = __toESM(require_findIndex());
var import_find6 = __toESM(require_find());
var import_isEqual10 = __toESM(require_isEqual());
var import_isPlainObject15 = __toESM(require_isPlainObject());
var ErrorDetail = types.model("ErrorDetail", {
  msg: "",
  tag: "",
  rule: ""
});
var getSelectedOptionsCache = {
  value: null,
  nodeValueArray: null,
  res: null
};
var FormItemStore = StoreNode.named("FormItemStore").props({
  isFocused: false,
  isControlled: false,
  type: "",
  label: "",
  unique: false,
  loading: false,
  required: false,
  /** Schema默认值是否为表达式格式 */
  isValueSchemaExp: types.optional(types.boolean, false),
  tmpValue: types.frozen(),
  emitedValue: types.frozen(),
  changeMotivation: "input",
  rules: types.optional(types.frozen(), {}),
  messages: types.optional(types.frozen(), {}),
  errorData: types.optional(types.array(ErrorDetail), []),
  name: types.string,
  extraName: "",
  itemId: "",
  unsetValueOnInvisible: false,
  itemsRef: types.optional(types.array(types.string), []),
  validated: false,
  validating: false,
  multiple: false,
  delimiter: ",",
  valueField: "value",
  labelField: "label",
  joinValues: true,
  extractValue: false,
  options: types.optional(types.frozen(), []),
  optionsRaw: types.optional(types.frozen(), []),
  expressionsInOptions: false,
  selectFirst: false,
  autoFill: types.frozen(),
  clearValueOnHidden: false,
  validateApi: types.optional(types.frozen(), ""),
  selectedOptions: types.optional(types.frozen(), []),
  filteredOptions: types.optional(types.frozen(), []),
  dialogSchema: types.frozen(),
  dialogOpen: false,
  dialogData: types.frozen(),
  resetValue: types.optional(types.frozen(), ""),
  validateOnChange: false,
  /** 当前表单项所属的InputGroup父元素, 用于收集InputGroup的子元素 */
  inputGroupControl: types.optional(types.frozen(), {}),
  colIndex: types.frozen(),
  rowIndex: types.frozen(),
  /** Transfer组件分页模式 */
  pagination: types.optional(types.frozen(), {
    enable: false,
    /** 当前页数 */
    page: 1,
    /** 每页显示条数 */
    perPage: 10,
    /** 总条数 */
    total: 0
  }),
  accumulatedOptions: types.optional(types.frozen(), [])
}).views(function(self2) {
  function getForm() {
    var form = self2.parentStore;
    return (form === null || form === void 0 ? void 0 : form.storeType) === FormStore.name ? form : void 0;
  }
  function getValue() {
    var _a3;
    return (_a3 = getForm()) === null || _a3 === void 0 ? void 0 : _a3.getValueByName(self2.name);
  }
  function getLastOptionValue() {
    if (self2.selectedOptions.length) {
      return self2.selectedOptions[self2.selectedOptions.length - 1].value;
    }
    return "";
  }
  function getErrors() {
    return self2.errorData.map(function(item) {
      return item.msg;
    });
  }
  return {
    get subFormItems() {
      return self2.itemsRef.map(function(item) {
        return getStoreById(item);
      });
    },
    get form() {
      return getForm();
    },
    get value() {
      return getValue();
    },
    get prinstine() {
      var _a3;
      return (_a3 = getForm()) === null || _a3 === void 0 ? void 0 : _a3.getPristineValueByName(self2.name);
    },
    get errors() {
      return getErrors();
    },
    get valid() {
      var errors = getErrors();
      return !!(!errors || !errors.length);
    },
    get errClassNames() {
      return self2.errorData.map(function(item) {
        return item.rule;
      }).filter(function(item, index, arr) {
        return item && arr.indexOf(item) === index;
      }).map(function(item) {
        return "has-error--".concat(item);
      }).join(" ");
    },
    get lastSelectValue() {
      return getLastOptionValue();
    },
    /** 数据源接口数据是否开启分页 */
    get enableSourcePagination() {
      return !!self2.pagination.enable;
    },
    /** 数据源接口开启分页时当前页码 */
    get sourcePageNum() {
      var _a3;
      return (_a3 = self2.pagination.page) !== null && _a3 !== void 0 ? _a3 : 1;
    },
    /** 数据源接口开启分页时每页显示条数 */
    get sourcePerPageNum() {
      var _a3;
      return (_a3 = self2.pagination.perPage) !== null && _a3 !== void 0 ? _a3 : 10;
    },
    /** 数据源接口开启分页时数据总条数 */
    get sourceTotalNum() {
      var _a3;
      return (_a3 = self2.pagination.total) !== null && _a3 !== void 0 ? _a3 : 0;
    },
    getSelectedOptions: function(value, nodeValueArray) {
      if (value === void 0) {
        value = self2.tmpValue;
      }
      if (value != null && nodeValueArray != null && (0, import_isEqual10.default)(value, getSelectedOptionsCache.value) && (0, import_isEqual10.default)(nodeValueArray, getSelectedOptionsCache.nodeValueArray) && getSelectedOptionsCache.res) {
        return getSelectedOptionsCache.res;
      }
      if (typeof value === "undefined") {
        return [];
      }
      var filteredOptions = self2.filteredOptions;
      var labelField = self2.labelField, extractValue = self2.extractValue, multiple = self2.multiple, delimiter = self2.delimiter;
      var valueField = self2.valueField || "value";
      var valueArray = nodeValueArray ? nodeValueArray : Array.isArray(value) ? value : (
        // 单选时不应该分割
        typeof value === "string" && multiple ? (
          // picker的value有可能value: "1, 2"，所以需要去掉一下空格
          value.split(delimiter || ",").map(function(v) {
            return v.trim();
          })
        ) : [value]
      );
      var selected = valueArray.map(function(item) {
        return item && item.hasOwnProperty(valueField) ? item[valueField] : item;
      });
      var selectedOptions = [];
      selected.forEach(function(item, index) {
        var _a3, _b3;
        var matched = findTree(filteredOptions, optionValueCompare(item, valueField), {
          resolve: getOptionValueBindField(valueField),
          value: getOptionValue(item, valueField)
        });
        if (matched) {
          selectedOptions.push(matched);
          return;
        }
        var unMatched = valueArray && valueArray[index] || item;
        if (unMatched && (typeof unMatched === "string" || typeof unMatched === "number")) {
          unMatched = (_a3 = {}, _a3[valueField || "value"] = item, _a3[labelField || "label"] = item, _a3.__unmatched = true, _a3);
        } else if (unMatched && extractValue) {
          unMatched = (_b3 = {}, _b3[valueField || "value"] = item, _b3[labelField || "label"] = "UnKnown", _b3.__unmatched = true, _b3);
        }
        unMatched && selectedOptions.push(unMatched);
      });
      if (selectedOptions.length) {
        getSelectedOptionsCache.value = value;
        getSelectedOptionsCache.nodeValueArray = nodeValueArray;
        getSelectedOptionsCache.res = selectedOptions;
      }
      return selectedOptions;
    },
    splitExtraValue: function(value) {
      var delimiter = self2.delimiter || ",";
      var values2 = Array.isArray(value) ? value : typeof value === "string" ? value.split(delimiter || ",").map(function(v) {
        return v.trim();
      }) : [];
      return values2;
    },
    getMergedData: function(data) {
      var result = cloneObject(data);
      setVariable(result, self2.name, self2.tmpValue);
      setVariable(result, "__value", self2.tmpValue);
      setVariable(result, "__name", self2.name);
      return result;
    }
  };
}).actions(function(self2) {
  self2.form;
  var dialogCallbacks = new SimpleMap();
  var loadAutoUpdateCancel = null;
  function config(_a3) {
    var extraName = _a3.extraName, required = _a3.required, unique = _a3.unique;
    _a3.value;
    var isValueSchemaExp = _a3.isValueSchemaExp, rules = _a3.rules, messages = _a3.messages, delimiter = _a3.delimiter, multiple = _a3.multiple, valueField = _a3.valueField, labelField = _a3.labelField, joinValues = _a3.joinValues, extractValue = _a3.extractValue, type = _a3.type, id = _a3.id, selectFirst = _a3.selectFirst, autoFill = _a3.autoFill, clearValueOnHidden = _a3.clearValueOnHidden, validateApi = _a3.validateApi, maxLength = _a3.maxLength, minLength = _a3.minLength, validateOnChange = _a3.validateOnChange, label = _a3.label, inputGroupControl = _a3.inputGroupControl, pagination = _a3.pagination;
    if (typeof rules === "string") {
      rules = str2rules(rules);
    }
    typeof extraName !== "undefined" && (self2.extraName = extraName);
    typeof type !== "undefined" && (self2.type = type);
    typeof id !== "undefined" && (self2.itemId = id);
    typeof messages !== "undefined" && (self2.messages = messages);
    typeof required !== "undefined" && (self2.required = !!required);
    typeof unique !== "undefined" && (self2.unique = !!unique);
    typeof multiple !== "undefined" && (self2.multiple = !!multiple);
    typeof selectFirst !== "undefined" && (self2.selectFirst = !!selectFirst);
    typeof autoFill !== "undefined" && (self2.autoFill = autoFill);
    typeof joinValues !== "undefined" && (self2.joinValues = !!joinValues);
    typeof extractValue !== "undefined" && (self2.extractValue = !!extractValue);
    typeof delimiter !== "undefined" && (self2.delimiter = delimiter || ",");
    typeof valueField !== "undefined" && (self2.valueField = valueField || "value");
    typeof labelField !== "undefined" && (self2.labelField = labelField || "label");
    typeof clearValueOnHidden !== "undefined" && (self2.clearValueOnHidden = !!clearValueOnHidden);
    typeof validateApi !== "undefined" && (self2.validateApi = validateApi);
    typeof validateOnChange !== "undefined" && (self2.validateOnChange = !!validateOnChange);
    typeof label === "string" && (self2.label = label);
    self2.isValueSchemaExp = !!isValueSchemaExp;
    isObject(inputGroupControl) && (inputGroupControl === null || inputGroupControl === void 0 ? void 0 : inputGroupControl.name) != null && (self2.inputGroupControl = inputGroupControl);
    if (pagination && isObject(pagination) && !!pagination.enable) {
      self2.pagination = {
        enable: true,
        page: pagination.page ? pagination.page || 1 : 1,
        perPage: pagination.perPage ? pagination.perPage || 10 : 10,
        total: 0
      };
    }
    if (typeof rules !== "undefined" || typeof required !== "undefined" || typeof minLength === "number" || typeof maxLength === "number") {
      rules = __assign(__assign({}, rules !== null && rules !== void 0 ? rules : self2.rules), { isRequired: self2.required || (rules === null || rules === void 0 ? void 0 : rules.isRequired) });
      if (~["input-text", "textarea"].indexOf(self2.type)) {
        if (typeof minLength === "number") {
          rules.minLength = minLength;
        }
        if (typeof maxLength === "number") {
          rules.maxLength = maxLength;
        }
      }
      if (isObjectShallowModified(rules, self2.rules)) {
        self2.rules = rules;
        clearError("builtin");
        self2.validated = false;
      }
    }
  }
  function focus() {
    self2.isFocused = true;
  }
  function blur() {
    self2.isFocused = false;
  }
  var validateCancel = null;
  var validate$1 = flow(function validate$12(data, hook, customRules) {
    var json, err_1, combo, group;
    var _a3;
    var _b3, _c, _d, _e, _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          if (self2.validating && !isEffectiveApi(self2.validateApi, data)) {
            return [2, self2.valid];
          }
          self2.validating = true;
          clearError();
          if (!hook)
            return [3, 2];
          return [4, hook()];
        case 1:
          _g.sent();
          _g.label = 2;
        case 2:
          addError(validate(self2.tmpValue, data, customRules ? str2rules(customRules) : self2.rules, self2.messages, self2.__));
          if (!(!self2.errors.length && isEffectiveApi(self2.validateApi, data)))
            return [3, 6];
          if (validateCancel) {
            validateCancel();
            validateCancel = null;
          }
          _g.label = 3;
        case 3:
          _g.trys.push([3, 5, , 6]);
          return [4, getEnv(self2).fetcher(
            self2.validateApi,
            /** 如果配置validateApi，需要将用户最新输入同步到数据域内 */
            createObject2(data, (_a3 = {}, _a3[self2.name] = self2.tmpValue, _a3)),
            {
              cancelExecutor: function(executor) {
                return validateCancel = executor;
              }
            }
          )];
        case 4:
          json = _g.sent();
          validateCancel = null;
          if (!json.ok && json.status === 422 && json.errors) {
            addError(String((_d = (_c = (_b3 = self2.validateApi) === null || _b3 === void 0 ? void 0 : _b3.messages) === null || _c === void 0 ? void 0 : _c.failed) !== null && _d !== void 0 ? _d : json.errors || json.msg || "表单项「".concat(self2.name, "」校验失败")));
          }
          return [3, 6];
        case 5:
          err_1 = _g.sent();
          addError(String(err_1));
          return [3, 6];
        case 6:
          self2.validated = true;
          if (self2.unique && ((_f = (_e = self2.form) === null || _e === void 0 ? void 0 : _e.parentStore) === null || _f === void 0 ? void 0 : _f.storeType) === "ComboStore") {
            combo = self2.form.parentStore;
            group = combo.uniques.get(self2.name);
            if (group.items.some(function(item) {
              return item !== self2 && self2.tmpValue !== void 0 && self2.tmpValue !== "" && item.value === self2.tmpValue;
            })) {
              addError(self2.__("Form.unique"));
            }
          }
          self2.validating = false;
          return [2, self2.valid];
      }
    });
  });
  function setError(msg, tag) {
    if (tag === void 0) {
      tag = "builtin";
    }
    clearError();
    addError(msg, tag);
  }
  function addError(msg, tag) {
    if (tag === void 0) {
      tag = "builtin";
    }
    var msgs = Array.isArray(msg) ? msg : [msg];
    msgs.forEach(function(item) {
      return self2.errorData.push({
        msg: typeof item === "string" ? item : item.msg,
        rule: typeof item !== "string" ? item.rule : void 0,
        tag
      });
    });
  }
  function clearError(tag) {
    if (tag) {
      var filtered = self2.errorData.filter(function(item) {
        return item.tag !== tag;
      });
      self2.errorData.replace(filtered);
    } else {
      self2.errorData.clear();
    }
  }
  function getFirstAvaibleOption(options) {
    var e_1, _a3;
    if (!Array.isArray(options)) {
      return;
    }
    try {
      for (var options_1 = __values(options), options_1_1 = options_1.next(); !options_1_1.done; options_1_1 = options_1.next()) {
        var option = options_1_1.value;
        if (Array.isArray(option.children)) {
          var childFirst = getFirstAvaibleOption(option.children);
          if (childFirst !== void 0) {
            return childFirst;
          }
        } else if (option[self2.valueField || "value"] != null && !option.disabled) {
          return option;
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (options_1_1 && !options_1_1.done && (_a3 = options_1.return))
          _a3.call(options_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  }
  function setPagination(params) {
    var _a3 = params || {}, page = _a3.page, perPage = _a3.perPage, total = _a3.total;
    if (self2.enableSourcePagination) {
      self2.pagination = __assign(__assign(__assign(__assign({}, self2.pagination), page != null && typeof page === "number" ? { page } : {}), perPage != null && typeof perPage === "number" ? { perPage } : {}), total != null && typeof total === "number" ? { total } : {});
    }
  }
  function setOptions(options, onChange, data) {
    if (!Array.isArray(options)) {
      return;
    }
    options = filterTree(options, function(item) {
      return item;
    });
    var originOptions = self2.options.concat();
    self2.options = options;
    self2.accumulatedOptions = self2.enableSourcePagination ? (0, import_uniqWith2.default)(__spreadArray(__spreadArray([], __read(originOptions), false), __read(options), false), function(lhs, rhs) {
      var _a3, _b3;
      return lhs[(_a3 = self2.valueField) !== null && _a3 !== void 0 ? _a3 : "value"] === rhs[(_b3 = self2.valueField) !== null && _b3 !== void 0 ? _b3 : "value"];
    }) : options;
    syncOptions(originOptions, data);
    var selectedOptions;
    if (onChange && self2.selectFirst && self2.filteredOptions.length && (selectedOptions = self2.getSelectedOptions(self2.value)) && !selectedOptions.filter(function(item) {
      return !item.__unmatched;
    }).length) {
      var fistOption = getFirstAvaibleOption(self2.filteredOptions);
      if (!fistOption) {
        return;
      }
      var list = [fistOption].map(function(item) {
        if (self2.extractValue || self2.joinValues) {
          return item[self2.valueField || "value"];
        }
        return item;
      });
      var value = self2.joinValues && self2.multiple ? list.join(self2.delimiter) : self2.multiple ? list : list[0];
      onChange(value);
    }
  }
  var loadCancel = null;
  var fetchOptions = flow(function getInitData(api, data, config2, setErrorFlag) {
    var json, result, apiObject, msg, e_2, env;
    var _a3, _b3, _c, _d, _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _f.trys.push([0, 2, , 3]);
          if (loadCancel) {
            loadCancel();
            loadCancel = null;
            self2.loading = false;
          }
          if (!(config2 === null || config2 === void 0 ? void 0 : config2.silent)) {
            self2.loading = true;
          }
          return [4, getEnv(self2).fetcher(api, data, __assign({ autoAppend: false, cancelExecutor: function(executor) {
            return loadCancel = executor;
          } }, config2))];
        case 1:
          json = _f.sent();
          loadCancel = null;
          result = null;
          if (!json.ok) {
            apiObject = buildApi(api, data);
            setErrorFlag !== false && setError(self2.__("Form.loadOptionsFailed", {
              reason: (_c = (_b3 = (_a3 = apiObject.messages) === null || _a3 === void 0 ? void 0 : _a3.failed) !== null && _b3 !== void 0 ? _b3 : json.msg) !== null && _c !== void 0 ? _c : config2 && config2.errorMessage
            }));
            msg = json.msg;
            if (!msg) {
              msg = "status: ".concat(json.status);
            }
            !(api === null || api === void 0 ? void 0 : api.silent) && getEnv(self2).notify("error", (_e = (_d = apiObject.messages) === null || _d === void 0 ? void 0 : _d.failed) !== null && _e !== void 0 ? _e : self2.errors.join("") || "".concat(apiObject.url, ": ").concat(msg), json.msgTimeout !== void 0 ? {
              closeButton: true,
              timeout: json.msgTimeout
            } : void 0);
          } else {
            result = json;
          }
          self2.loading = false;
          return [2, result];
        case 2:
          e_2 = _f.sent();
          env = getEnv(self2);
          if (!isAlive(self2) || self2.disposed) {
            return [
              2
              /*return*/
            ];
          }
          self2.loading = false;
          if (env.isCancel(e_2)) {
            return [
              2
              /*return*/
            ];
          }
          console.error(e_2);
          !(api === null || api === void 0 ? void 0 : api.silent) && env.notify("error", e_2.message);
          return [
            2
            /*return*/
          ];
        case 3:
          return [
            2
            /*return*/
          ];
      }
    });
  });
  var loadOptions = flow(function getInitData(api, data, config2, clearValue, onChange, setErrorFlag) {
    var json, options;
    var _a3, _b3, _c, _d, _e, _f, _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          return [4, fetchOptions(api, data, config2, setErrorFlag)];
        case 1:
          json = _h.sent();
          if (!json) {
            return [2, null];
          }
          clearError();
          self2.validated = false;
          options = ((_a3 = json.data) === null || _a3 === void 0 ? void 0 : _a3.options) || ((_b3 = json.data) === null || _b3 === void 0 ? void 0 : _b3.items) || ((_c = json.data) === null || _c === void 0 ? void 0 : _c.rows) || json.data || [];
          options = normalizeOptions(options, void 0, self2.valueField);
          if (self2.enableSourcePagination) {
            self2.pagination = __assign(__assign({}, self2.pagination), { page: parseInt((_d = json.data) === null || _d === void 0 ? void 0 : _d.page, 10) || 1, total: parseInt((_f = (_e = json.data) === null || _e === void 0 ? void 0 : _e.total) !== null && _f !== void 0 ? _f : (_g = json.data) === null || _g === void 0 ? void 0 : _g.count, 10) || 0 });
          }
          if ((config2 === null || config2 === void 0 ? void 0 : config2.extendsOptions) && self2.selectedOptions.length > 0) {
            self2.selectedOptions.forEach(function(item) {
              var exited = findTree(options, optionValueCompare(item, self2.valueField || "value"), {
                resolve: getOptionValueBindField(self2.valueField),
                value: getOptionValue(item, self2.valueField)
              });
              if (!exited) {
                options.push(item);
              }
            });
          }
          setOptions(options, onChange, data);
          if (json.data && typeof json.data.value !== "undefined") {
            onChange && onChange(json.data.value, false, true);
          } else if (clearValue && !self2.selectFirst) {
            self2.selectedOptions.some(function(item) {
              return item.__unmatched;
            }) && onChange && onChange("", false, true);
          }
          return [2, json];
      }
    });
  });
  function loadOptionsFromDataScope(source, ctx, onChange) {
    var options = resolveVariableAndFilter(source, ctx, "| raw");
    if (!Array.isArray(options)) {
      return [];
    }
    options = normalizeOptions(options, void 0, self2.valueField);
    if (self2.enableSourcePagination) {
      self2.pagination = __assign(__assign(__assign(__assign({}, self2.pagination), (ctx === null || ctx === void 0 ? void 0 : ctx.page) ? { page: ctx === null || ctx === void 0 ? void 0 : ctx.page } : {}), (ctx === null || ctx === void 0 ? void 0 : ctx.perPage) ? { perPage: ctx === null || ctx === void 0 ? void 0 : ctx.perPage } : {}), { total: options.length });
      options = options.slice((self2.pagination.page - 1) * self2.pagination.perPage, self2.pagination.page * self2.pagination.perPage);
    }
    setOptions(options, onChange, ctx);
    return options;
  }
  var loadAutoUpdateData = flow(function getAutoUpdateData(api, data, silent) {
    var json, result;
    var _a3, _b3;
    if (silent === void 0) {
      silent = true;
    }
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (loadAutoUpdateCancel) {
            loadAutoUpdateCancel();
            loadAutoUpdateCancel = null;
          }
          return [4, getEnv(self2).fetcher(api, data, {
            cancelExecutor: function(executor) {
              return loadAutoUpdateCancel = executor;
            }
          })];
        case 1:
          json = _c.sent();
          loadAutoUpdateCancel = null;
          if (!json) {
            return [
              2
              /*return*/
            ];
          }
          result = ((_a3 = json.data) === null || _a3 === void 0 ? void 0 : _a3.items) || ((_b3 = json.data) === null || _b3 === void 0 ? void 0 : _b3.rows);
          if ((result === null || result === void 0 ? void 0 : result.length) === 1) {
            return [2, result[0]];
          } else if ((0, import_isPlainObject15.default)(json.data)) {
            return [2, json.data];
          }
          !silent && !(api === null || api === void 0 ? void 0 : api.silent) && getEnv(self2).notify("info", self2.__("FormItem.autoFillLoadFailed"));
          return [
            2
            /*return*/
          ];
      }
    });
  });
  var tryDeferLoadLeftOptions = flow(function(option, leftOptions, api, data, config2) {
    var indexes, leftIndexes, topOption, json, options, newLeftOptions, children_1;
    var _a3;
    return __generator(this, function(_b3) {
      switch (_b3.label) {
        case 0:
          if (!Array.isArray(leftOptions)) {
            return [
              2
              /*return*/
            ];
          }
          indexes = findTreeIndex(self2.options, function(item) {
            return item.leftOptions === leftOptions;
          });
          leftIndexes = findTreeIndex(leftOptions, function(item) {
            return item === option;
          });
          topOption = findTree(self2.options, function(item) {
            return item.leftOptions === leftOptions;
          });
          if (!indexes || !leftIndexes || !topOption) {
            return [
              2
              /*return*/
            ];
          }
          setOptions(spliceTree(self2.options, indexes, 1, __assign(__assign({}, topOption), { loading: true, leftOptions: spliceTree(topOption.leftOptions, leftIndexes, 1, __assign(__assign({}, option), { loading: true })) })), void 0, data);
          return [4, fetchOptions(api, data, __assign(__assign({}, config2), { silent: true }), false)];
        case 1:
          json = _b3.sent();
          if (!json) {
            setOptions(spliceTree(self2.options, indexes, 1, __assign(__assign({}, topOption), { loading: false, error: true, leftOptions: spliceTree(topOption.leftOptions, leftIndexes, 1, __assign(__assign({}, option), { loading: false, error: true })) })), void 0, data);
            return [
              2
              /*return*/
            ];
          }
          options = ((_a3 = json.data) === null || _a3 === void 0 ? void 0 : _a3.options) || json.data.items || json.data.rows || json.data || [];
          newLeftOptions = spliceTree(topOption.leftOptions, leftIndexes, 1, __assign(__assign({}, option), { loading: false, loaded: true, children: options }));
          setOptions(spliceTree(self2.options, indexes, 1, __assign(__assign({}, topOption), { loading: false, loaded: true, children: options, leftOptions: newLeftOptions })), void 0, data);
          if (Array.isArray(topOption.children)) {
            children_1 = topOption.children.concat();
            flattenTree(newLeftOptions).forEach(function(item) {
              if (!findTree(topOption.children, function(node) {
                return node.ref === item.value;
              }, {
                resolve: function(node) {
                  return node.ref;
                },
                value: item.value
              })) {
                children_1.push({ ref: item.value, defer: true });
              }
            });
            setOptions(spliceTree(self2.options, indexes, 1, __assign(__assign({}, topOption), { leftOptions: newLeftOptions, children: children_1 })), void 0, data);
          }
          return [2, json];
      }
    });
  });
  var deferLoadLeftOptions = flow(function(option, leftOptions, api, data, config2) {
    return __generator(this, function(_a3) {
      switch (_a3.label) {
        case 0:
          return [4, tryDeferLoadLeftOptions(option, leftOptions, api, data, config2)];
        case 1:
          return [2, _a3.sent()];
      }
    });
  });
  var deferLoadOptions = flow(function(option, api, data, config2) {
    var labelField, valueField, indexes, leftOptions, json, options;
    var _a3, _b3;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          labelField = self2.labelField || "label";
          valueField = self2.valueField || "value";
          indexes = findTreeIndex(self2.options, function(item) {
            return item === option || /** tree-select中会对option添加collapsed, visible属性，导致item === option不通过 */
            (0, import_isEqualWith.default)(item, option, function(source, target) {
              return (source === null || source === void 0 ? void 0 : source[valueField]) != null && (target === null || target === void 0 ? void 0 : target[valueField]) != null && (source === null || source === void 0 ? void 0 : source[labelField]) === (target === null || target === void 0 ? void 0 : target[labelField]) && (source === null || source === void 0 ? void 0 : source[valueField]) === (target === null || target === void 0 ? void 0 : target[valueField]);
            });
          });
          if (!!indexes)
            return [3, 2];
          leftOptions = (_a3 = self2.options[0]) === null || _a3 === void 0 ? void 0 : _a3.leftOptions;
          return [4, tryDeferLoadLeftOptions(option, leftOptions, api, data, config2)];
        case 1:
          return [2, _c.sent()];
        case 2:
          setOptions(spliceTree(self2.options, indexes, 1, __assign(__assign({}, option), { loading: true })), void 0, data);
          return [4, fetchOptions(api, data, __assign(__assign({}, config2), { silent: true }), false)];
        case 3:
          json = _c.sent();
          if (!json) {
            setOptions(spliceTree(self2.options, indexes, 1, __assign(__assign({}, option), { loading: false, error: true })), void 0, data);
            return [
              2
              /*return*/
            ];
          }
          options = ((_b3 = json.data) === null || _b3 === void 0 ? void 0 : _b3.options) || json.data.items || json.data.rows || json.data || [];
          setOptions(spliceTree(self2.options, indexes, 1, __assign(__assign({}, option), { loading: false, loaded: true, children: options })), void 0, data);
          return [2, json];
      }
    });
  });
  var expandTreeOptions = flow(function getInitData(nodePathArr, api, data, config2) {
    var traversedNode, nodePathArr_1, nodePathArr_1_1, nodePath, _loop_1, level, e_3_1;
    var e_3, _a3;
    var _b3;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          traversedNode = /* @__PURE__ */ new Map();
          _c.label = 1;
        case 1:
          _c.trys.push([1, 8, 9, 10]);
          nodePathArr_1 = __values(nodePathArr), nodePathArr_1_1 = nodePathArr_1.next();
          _c.label = 2;
        case 2:
          if (!!nodePathArr_1_1.done)
            return [3, 7];
          nodePath = nodePathArr_1_1.value;
          if (nodePath.length <= 1) {
            return [3, 6];
          }
          _loop_1 = function(level2) {
            var tree, nodeValue, node, indexes, json, childrenOptions;
            return __generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  tree = self2.options.concat();
                  nodeValue = nodePath[level2];
                  if (traversedNode.has(nodeValue)) {
                    return [2, "continue"];
                  }
                  node = findTree(tree, function(item, key, treeLevel) {
                    return treeLevel === level2 + 1 && optionValueCompare(nodeValue, self2.valueField || "value")(item);
                  });
                  if (!node || !node.defer) {
                    return [2, "continue"];
                  }
                  indexes = findTreeIndex(tree, function(item) {
                    return item === node;
                  });
                  setOptions(spliceTree(tree, indexes, 1, __assign(__assign({}, node), { loading: true })), void 0, node);
                  return [4, fetchOptions(api, node, __assign(__assign({}, config2), { silent: true }), false)];
                case 1:
                  json = _d.sent();
                  if (!json) {
                    setOptions(spliceTree(tree, indexes, 1, __assign(__assign({}, node), { loading: false, error: true })), void 0, node);
                  }
                  traversedNode.set(nodeValue, true);
                  childrenOptions = ((_b3 = json.data) === null || _b3 === void 0 ? void 0 : _b3.options) || json.data.items || json.data.rows || json.data || [];
                  setOptions(spliceTree(tree, indexes, 1, __assign(__assign({}, node), { loading: false, loaded: true, children: childrenOptions })), void 0, node);
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          };
          level = 0;
          _c.label = 3;
        case 3:
          if (!(level < nodePath.length - 1))
            return [3, 6];
          return [5, _loop_1(level)];
        case 4:
          _c.sent();
          _c.label = 5;
        case 5:
          level++;
          return [3, 3];
        case 6:
          nodePathArr_1_1 = nodePathArr_1.next();
          return [3, 2];
        case 7:
          return [3, 10];
        case 8:
          e_3_1 = _c.sent();
          e_3 = { error: e_3_1 };
          return [3, 10];
        case 9:
          try {
            if (nodePathArr_1_1 && !nodePathArr_1_1.done && (_a3 = nodePathArr_1.return))
              _a3.call(nodePathArr_1);
          } finally {
            if (e_3)
              throw e_3.error;
          }
          return [
            7
            /*endfinally*/
          ];
        case 10:
          return [
            2
            /*return*/
          ];
      }
    });
  });
  function syncOptions(originOptions, data) {
    var _a3;
    if (!self2.options.length && typeof self2.value === "undefined") {
      isArrayChildrenModified(self2.filteredOptions, []) && (self2.filteredOptions = []);
      isArrayChildrenModified(self2.selectedOptions, []) && (self2.selectedOptions = []);
      return;
    }
    var value = self2.tmpValue;
    var valueField = self2.valueField || "value";
    var labelField = self2.labelField || "label";
    var selected = Array.isArray(value) ? value.map(function(item) {
      return item && item.hasOwnProperty(valueField) ? item[valueField] : item;
    }) : typeof value === "string" ? value.split(self2.delimiter || ",").map(function(v) {
      return v.trim();
    }) : value === void 0 ? [] : [
      value && value.hasOwnProperty(valueField) ? value[valueField] : value
    ];
    if (value && value.hasOwnProperty(labelField)) {
      selected[0] = (_a3 = {}, _a3[labelField] = value[labelField], _a3[valueField] = value[valueField], _a3);
    }
    var expressionsInOptions = false;
    var oldFilteredOptions = self2.filteredOptions;
    var filteredOptions = self2.options.filter(function(item) {
      if (!expressionsInOptions && (item.visibleOn || item.hiddenOn || item.disabledOn)) {
        expressionsInOptions = true;
      }
      return item.visibleOn ? evalExpression(item.visibleOn, data) !== false : item.hiddenOn ? evalExpression(item.hiddenOn, data) !== true : item.visible !== false && item.hidden !== true;
    }).map(function(item, index) {
      var disabled = evalExpression(item.disabledOn, data);
      var newItem = item.disabledOn ? oldFilteredOptions.length > index && oldFilteredOptions[index].disabled === disabled ? oldFilteredOptions[index] : __assign(__assign({}, item), { disabled }) : item;
      return newItem;
    });
    self2.expressionsInOptions = expressionsInOptions;
    var flattenedMap = /* @__PURE__ */ new Map();
    var flattened = [];
    eachTree(filteredOptions, function(item) {
      var value2 = getOptionValue(item, valueField);
      value2 != null && flattenedMap.set(value2, item);
      value2 != null && flattened.push(item);
    });
    var selectedOptions = [];
    selected.forEach(function(item, index) {
      var _a4, _b3;
      var value2 = getOptionValue(item, valueField);
      if (flattenedMap.get(value2)) {
        selectedOptions.push(flattenedMap.get(value2));
        return;
      }
      var idx = (0, import_findIndex2.default)(flattened, optionValueCompare(item, valueField));
      if (~idx) {
        selectedOptions.push(flattened[idx]);
      } else {
        var unMatched = value2 && value2[index] || item;
        if (unMatched && (typeof unMatched === "string" || typeof unMatched === "number")) {
          unMatched = (_a4 = {}, _a4[valueField] = item, _a4[labelField] = item, _a4.__unmatched = true, _a4);
          var orgin = originOptions && (0, import_find6.default)(originOptions, optionValueCompare(item, valueField));
          if (orgin) {
            unMatched[labelField] = orgin[labelField];
          }
        } else if (unMatched && self2.extractValue) {
          unMatched = (_b3 = {}, _b3[valueField] = item, _b3[labelField] = "UnKnown", _b3.__unmatched = true, _b3);
        }
        unMatched && selectedOptions.push(unMatched);
      }
    });
    var form = self2.form;
    var parentStore = form === null || form === void 0 ? void 0 : form.parentStore;
    if ((parentStore === null || parentStore === void 0 ? void 0 : parentStore.storeType) === ComboStore.name) {
      var combo = parentStore;
      var group = combo.uniques.get(self2.name);
      var options_2 = [];
      group && group.items.forEach(function(item) {
        if (self2 !== item) {
          options_2.push.apply(options_2, __spreadArray([], __read(item.selectedOptions.map(function(item2) {
            return item2 && item2.value;
          })), false));
        }
      });
      if (filteredOptions.length && options_2.length) {
        filteredOptions = mapTree(filteredOptions, function(item) {
          if (~options_2.indexOf(item.value)) {
            return __assign(__assign({}, item), { disabled: true });
          }
          return item;
        });
      }
    }
    isArrayChildrenModified(self2.selectedOptions, selectedOptions) && (self2.selectedOptions = selectedOptions);
    isArrayChildrenModified(self2.filteredOptions, filteredOptions) && (self2.filteredOptions = filteredOptions);
  }
  function setLoading(value) {
    self2.loading = value;
  }
  var subStore;
  function getSubStore() {
    return subStore;
  }
  function setSubStore(store2) {
    subStore = store2;
  }
  function reset(keepErrors) {
    if (keepErrors === void 0) {
      keepErrors = false;
    }
    self2.validated = false;
    if (subStore && subStore.storeType === "ComboStore") {
      var combo = subStore;
      combo.forms.forEach(function(form) {
        return form.reset(void 0, false);
      });
    }
    !keepErrors && clearError();
  }
  function resetValidationStatus(tag) {
    self2.validated = false;
    clearError();
  }
  function openDialog(schema, ctx, callback) {
    if (schema.data) {
      self2.dialogData = dataMapping(schema.data, ctx);
    } else {
      self2.dialogData = ctx;
    }
    self2.dialogSchema = schema;
    self2.dialogOpen = true;
    callback && dialogCallbacks.set(self2.dialogData, callback);
  }
  function closeDialog2(result) {
    var callback = dialogCallbacks.get(self2.dialogData);
    self2.dialogOpen = false;
    if (callback) {
      dialogCallbacks.delete(self2.dialogData);
      setTimeout(function() {
        return callback(result);
      }, 200);
    }
  }
  function changeTmpValue(value, changeReason) {
    self2.tmpValue = value;
    if (changeReason) {
      self2.changeMotivation = changeReason;
    }
  }
  function changeEmitedValue(value) {
    self2.emitedValue = value;
  }
  function addSubFormItem(item) {
    self2.itemsRef.push(item.id);
  }
  function removeSubFormItem(item) {
    var idx = self2.itemsRef.findIndex(function(a) {
      return a === item.id;
    });
    if (~idx) {
      self2.itemsRef.splice(idx, 1);
    }
  }
  function setIsControlled(value) {
    self2.isControlled = !!value;
  }
  return {
    focus,
    blur,
    config,
    validate: validate$1,
    setError,
    addError,
    clearError,
    setPagination,
    setOptions,
    loadOptions,
    loadOptionsFromDataScope,
    deferLoadOptions,
    deferLoadLeftOptions,
    expandTreeOptions,
    syncOptions,
    setLoading,
    setSubStore,
    getSubStore,
    reset,
    resetValidationStatus,
    openDialog,
    closeDialog: closeDialog2,
    changeTmpValue,
    changeEmitedValue,
    addSubFormItem,
    removeSubFormItem,
    loadAutoUpdateData,
    setIsControlled
  };
});

// node_modules/amis-core/esm/store/pagination.js
init_moment();
var import_isPlainObject16 = __toESM(require_isPlainObject());
var PaginationStore = iRendererStore.named("PaginationStore").props({
  page: 1,
  perPage: 10,
  inputName: "",
  outputName: "",
  mode: "normal"
}).views(function(self2) {
  return {
    get inputItems() {
      var items = resolveVariable(self2.inputName || "items", self2.data);
      if (!Array.isArray(items)) {
        return [];
      }
      return items;
    },
    get locals() {
      var _a3;
      var skip = (self2.page - 1) * self2.perPage;
      return createObject2(self2.data, (_a3 = {
        currentPage: self2.page,
        lastPage: this.lastPage
      }, _a3[self2.outputName || "items"] = this.inputItems.slice(skip, skip + self2.perPage), _a3));
    },
    get lastPage() {
      return Math.ceil(this.inputItems.length / self2.perPage);
    }
  };
}).actions(function(self2) {
  return {
    switchTo: function(page, perPage) {
      self2.page = page;
      if (typeof perPage === "number") {
        self2.perPage = perPage;
      }
    }
  };
});

// node_modules/amis-core/esm/store/app.js
var import_react8 = __toESM(require_react());
var import_chunk2 = __toESM(require_chunk());
var import_isPlainObject17 = __toESM(require_isPlainObject());
init_moment();
var import_react_dom4 = __toESM(require_react_dom());
var import_isObject3 = __toESM(require_isObject());
var import_isString4 = __toESM(require_isString());
var import_isBoolean3 = __toESM(require_isBoolean());
var import_isEqual11 = __toESM(require_isEqual());
var import_debounce3 = __toESM(require_debounce());
var import_cloneDeep3 = __toESM(require_cloneDeep());
var import_mapValues2 = __toESM(require_mapValues());
var import_camelCase2 = __toESM(require_camelCase());
var import_map2 = __toESM(require_map());
var import_isEmpty3 = __toESM(require_isEmpty());
var import_kebabCase2 = __toESM(require_kebabCase());
var import_hoist_non_react_statics2 = __toESM(require_hoist_non_react_statics_cjs());
var AppStore = ServiceStore.named("AppStore").props({
  pages: types.frozen(),
  activePage: types.frozen(),
  folded: false,
  offScreen: false
}).views(function(self2) {
  return {
    get navigations() {
      if (Array.isArray(self2.pages)) {
        return mapTree(self2.pages, function(item) {
          var visible = isVisible(item, self2.data);
          if (visible !== false && item.path && !~item.path.indexOf("http") && ~item.path.indexOf(":")) {
            visible = false;
          }
          return {
            label: item.label,
            icon: item.icon,
            path: item.path,
            children: item.children,
            className: item.className,
            visible,
            badge: typeof item.badge === "string" ? filter(item.badge, self2.data) : item.badge,
            badgeClassName: filter(item.badgeClassName, self2.data)
          };
        });
      }
      return [
        {
          label: self2.__("App.navigation"),
          children: []
        }
      ];
    },
    get bcn() {
      var _a3;
      return ((_a3 = self2.activePage) === null || _a3 === void 0 ? void 0 : _a3.bcn) || [];
    },
    get pageData() {
      var _a3;
      return createObject2(self2.data, {
        params: ((_a3 = self2.activePage) === null || _a3 === void 0 ? void 0 : _a3.params) || {}
      });
    }
  };
}).actions(function(self2) {
  return {
    toggleFolded: function() {
      self2.folded = !self2.folded;
    },
    toggleOffScreen: function() {
      self2.offScreen = !self2.offScreen;
    },
    setPages: function(pages) {
      if (pages && !Array.isArray(pages)) {
        pages = [pages];
      } else if (!Array.isArray(pages)) {
        return;
      }
      pages = mapTree(pages, function(item, index, level, paths) {
        var path = item.link || item.url;
        if (item.schema || item.schemaApi) {
          path = item.url || "/".concat(paths.map(function(item2) {
            return item2.index;
          }).concat(index).map(function(index2) {
            return "page-".concat(index2 + 1);
          }).join("/"));
          if (path && path[0] !== "/") {
            var parentPath = "/";
            var index_1 = paths.length;
            while (index_1 > 0) {
              var item_1 = paths[index_1 - 1];
              if (item_1 === null || item_1 === void 0 ? void 0 : item_1.path) {
                parentPath = item_1.path + "/";
                break;
              }
              index_1--;
            }
            path = parentPath + path;
          }
        }
        return __assign(__assign({}, item), { index, id: item.id || guid(), label: item.label, icon: item.icon, path });
      });
      self2.pages = pages;
    },
    rewrite: function(to, env) {
      var page = findTree(self2.pages, function(item) {
        if (item.path === to) {
          return true;
        }
        return false;
      });
      if (page) {
        this.setActivePage(page, env);
      }
    },
    setActivePage: function(page, env, params) {
      var _a3;
      if (((_a3 = self2.activePage) === null || _a3 === void 0 ? void 0 : _a3.id) === page.id) {
        return;
      }
      var bcn = [];
      findTree(self2.pages, function(item, index, level, paths) {
        if (item.id === page.id) {
          bcn = paths.filter(function(item2) {
            return item2.path && item2.label;
          }).map(function(item2) {
            return __assign(__assign({}, item2), { path: replaceUrlParams(item2.path, params) });
          });
          if (env.showFullBreadcrumbPath) {
            bcn = paths.filter(function(item2) {
              return item2.label;
            });
          }
          bcn.push(__assign(__assign({}, item), { path: "" }));
          self2.__;
          if (env.showBreadcrumbHomePath && bcn[0].path !== "/") {
            bcn.unshift({
              label: self2.__("App.home"),
              path: "/"
            });
          }
          return true;
        }
        return false;
      });
      self2.activePage = __assign(__assign({}, page), { params: params || {}, bcn });
      if (page.label) {
        document.title = page.label;
      }
      if (page.schema) {
        self2.schema = page.schema;
        self2.schemaKey = "" + Date.now();
      } else if (page.schemaApi) {
        self2.schema = null;
        self2.fetchSchema(page.schemaApi, self2.activePage, { method: "get" });
      } else if (page.redirect) {
        env.jumpTo(page.redirect, void 0, self2.data);
        return;
      } else if (page.rewrite) {
        this.rewrite(page.rewrite, env);
      } else {
        self2.schema = null;
        self2.schemaKey = "";
      }
    },
    updateActivePage: function(env) {
      if (!Array.isArray(self2.pages)) {
        return;
      }
      var matched;
      var page = findTree(self2.pages, function(item) {
        if (item.path) {
          matched = env.isCurrentUrl(item.path, item);
          if (matched) {
            return true;
          }
        }
        return false;
      });
      if (page) {
        this.setActivePage(page, env, typeof matched === "object" ? matched.params : void 0);
      } else {
        var page_1 = findTree(self2.pages, function(item) {
          return item.isDefaultPage;
        });
        if (page_1) {
          this.setActivePage(page_1, env);
        } else {
          self2.activePage = null;
        }
      }
    }
  };
});

// node_modules/amis-core/esm/store/index.js
var import_find7 = __toESM(require_find());

// node_modules/amis-core/esm/store/root.js
var import_react9 = __toESM(require_react());
var import_chunk3 = __toESM(require_chunk());
var import_isPlainObject18 = __toESM(require_isPlainObject());
init_moment();
var import_react_dom5 = __toESM(require_react_dom());
var import_isObject4 = __toESM(require_isObject());
var import_isString5 = __toESM(require_isString());
var import_isBoolean4 = __toESM(require_isBoolean());
var import_isEqual12 = __toESM(require_isEqual());
var import_debounce4 = __toESM(require_debounce());
var import_cloneDeep4 = __toESM(require_cloneDeep());
var import_mapValues3 = __toESM(require_mapValues());
var import_camelCase3 = __toESM(require_camelCase());
var import_map3 = __toESM(require_map());
var import_isEmpty4 = __toESM(require_isEmpty());
var import_kebabCase3 = __toESM(require_kebabCase());
var import_hoist_non_react_statics3 = __toESM(require_hoist_non_react_statics_cjs());
var RootStore = ServiceStore.named("RootStore").props({
  runtimeError: types.frozen(),
  runtimeErrorStack: types.frozen(),
  query: types.frozen()
}).volatile(function(self2) {
  return {
    context: {}
  };
}).views(function(self2) {
  return {
    get downStream() {
      var result = self2.data;
      if (self2.context || self2.query) {
        var chain = extractObjectChain(result);
        self2.context && chain.unshift(self2.context);
        self2.query && chain.splice(chain.length - 1, 0, __assign(__assign({}, self2.query), { __query: self2.query }));
        result = createObjectFromChain(chain);
      }
      return result;
    }
  };
}).actions(function(self2) {
  return {
    updateContext: function(context) {
      Object.assign(self2.context, context);
    },
    setRuntimeError: function(error, errorStack) {
      self2.runtimeError = error;
      self2.runtimeErrorStack = errorStack;
    },
    updateLocation: function(location2, parseFn) {
      var query = parseFn ? parseFn(location2) : parseQuery(location2);
      if (isObjectShallowModified(query, self2.query, false)) {
        self2.query = query;
      }
    }
  };
});

// node_modules/amis-core/esm/store/index.js
setLivelinessChecking(false ? "ignore" : "error");
var allowedStoreList = [
  ServiceStore,
  FormStore,
  ComboStore,
  CRUDStore,
  TableStore,
  TableStore2,
  ListStore,
  ModalStore,
  FormItemStore,
  PaginationStore,
  AppStore
];
var RendererStore = types.model("RendererStore", {
  storeType: "RendererStore"
}).views(function(self2) {
  return {
    get fetcher() {
      return getEnv(self2).fetcher;
    },
    get notify() {
      return getEnv(self2).notify;
    },
    get isCancel() {
      return getEnv(self2).isCancel;
    },
    get __() {
      return getEnv(self2).translate;
    },
    getStoreById: function(id) {
      return getStoreById(id);
    },
    get stores() {
      return getStores();
    }
  };
}).actions(function(self2) {
  return {
    addStore: function(store2) {
      if (store2.storeType === RootStore.name) {
        return addStore(RootStore.create(store2, getEnv(self2)));
      }
      var factory = (0, import_find7.default)(allowedStoreList, function(item) {
        return item.name === store2.storeType;
      });
      return addStore(factory.create(store2, getEnv(self2)));
    },
    removeStore: function(store2) {
      removeStore(store2);
    }
  };
});
var RegisterStore = function(store2) {
  allowedStoreList.push(store2);
};

// node_modules/amis-core/esm/utils/normalizeLink.js
var normalizeLink = function(to, location2) {
  if (location2 === void 0) {
    location2 = window.location;
  }
  to = to || "";
  if (to && to[0] === "#") {
    to = location2.pathname + location2.search + to;
  } else if (to && to[0] === "?") {
    to = location2.pathname + to;
  }
  var idx = to.indexOf("?");
  var idx2 = to.indexOf("#");
  var pathname = to;
  var search = "";
  var hash = location2.hash;
  if (idx < idx2) {
    pathname = ~idx ? to.substring(0, idx) : ~idx2 ? to.substring(0, idx2) : to;
    hash = ~idx2 ? to.substring(idx2) : location2.hash;
    search = ~idx ? to.substring(idx, ~idx2 ? idx2 : void 0) : "";
  } else if (idx > idx2) {
    pathname = ~idx2 ? to.substring(0, idx2) : ~idx ? to.substring(0, idx) : to;
    hash = ~idx2 ? to.substring(idx2, ~idx ? idx : void 0) : location2.hash;
    search = ~idx ? to.substring(idx) : "";
  }
  if (!pathname) {
    pathname = location2.pathname;
  } else if (pathname[0] != "/" && !/^https?\:\/\//.test(pathname)) {
    var relativeBase = location2.pathname;
    var paths = relativeBase.split("/");
    paths.pop();
    var m = void 0;
    while (m = /^\.\.?\//.exec(pathname)) {
      if (m[0] === "../") {
        paths.pop();
      }
      pathname = pathname.substring(m[0].length);
    }
    pathname = paths.concat(pathname).join("/");
  }
  var rest = idx < idx2 ? search + hash : hash + search;
  return pathname + rest;
};

// node_modules/amis-core/esm/utils/renderer-event.js
var import_debounce5 = __toESM(require_debounce());
var rendererEventListeners = [];
function createRendererEvent(type, context) {
  var rendererEvent = {
    context: extendObject({ pristineData: context.data }, context),
    type,
    prevented: false,
    stoped: false,
    preventDefault: function() {
      rendererEvent.prevented = true;
    },
    stopPropagation: function() {
      rendererEvent.stoped = true;
    },
    get data() {
      return rendererEvent.context.data;
    },
    get pristineData() {
      return rendererEvent.context.pristineData;
    },
    setData: function(data) {
      rendererEvent.context.data = data;
    }
  };
  return rendererEvent;
}
var bindEvent = function(renderer) {
  var e_1, _a3;
  var _b3, _c, _d;
  if (!renderer) {
    return void 0;
  }
  var listeners = renderer.props.$schema.onEvent;
  if (listeners) {
    var _loop_1 = function(key2) {
      var listener = rendererEventListeners.find(function(item) {
        return item.renderer === renderer && item.type === key2;
      });
      if (listener === null || listener === void 0 ? void 0 : listener.executing) {
        (_c = (_b3 = listener === null || listener === void 0 ? void 0 : listener.debounceInstance) === null || _b3 === void 0 ? void 0 : _b3.cancel) === null || _c === void 0 ? void 0 : _c.call(_b3);
        rendererEventListeners = rendererEventListeners.filter(function(item) {
          return !(item.renderer === listener.renderer && item.type === listener.type);
        });
        listener.actions.length && rendererEventListeners.push({
          renderer,
          type: key2,
          debounce: listener.debounce || null,
          track: listeners[key2].track || null,
          weight: listener.weight || 0,
          actions: listener.actions
        });
      }
      if (!listener && ((_d = listeners[key2].actions) === null || _d === void 0 ? void 0 : _d.length)) {
        rendererEventListeners.push({
          renderer,
          type: key2,
          debounce: listeners[key2].debounce || null,
          track: listeners[key2].track || null,
          weight: listeners[key2].weight || 0,
          actions: listeners[key2].actions
        });
      }
    };
    try {
      for (var _e = __values(Object.keys(listeners)), _f = _e.next(); !_f.done; _f = _e.next()) {
        var key = _f.value;
        _loop_1(key);
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_f && !_f.done && (_a3 = _e.return))
          _a3.call(_e);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    return function(eventName) {
      rendererEventListeners = rendererEventListeners.filter(function(item) {
        return item.renderer === renderer && eventName !== void 0 ? item.type !== eventName : true;
      });
    };
  }
  return void 0;
};
function dispatchEvent(e, renderer, scoped, data, broadcast) {
  var _a3, _b3, _c, _d, _e, _f, _g, _h, _j, _k;
  return __awaiter(this, void 0, void 0, function() {
    var unbindEvent, eventName, eventConfig, rendererEvent, listeners, executedCount, checkExecuted, _loop_2, listeners_1, listeners_1_1, listener, state_1, e_2_1;
    var e_2, _l;
    var _this = this;
    return __generator(this, function(_m) {
      switch (_m.label) {
        case 0:
          unbindEvent = null;
          eventName = typeof e === "string" ? e : e.type;
          (_c = (_b3 = (_a3 = renderer === null || renderer === void 0 ? void 0 : renderer.props) === null || _a3 === void 0 ? void 0 : _a3.env) === null || _b3 === void 0 ? void 0 : _b3.beforeDispatchEvent) === null || _c === void 0 ? void 0 : _c.call(_b3, e, renderer, scoped, data, broadcast);
          broadcast && ((_e = (_d = renderer.props).onBroadcast) === null || _e === void 0 ? void 0 : _e.call(_d, e, broadcast, data));
          if (!broadcast) {
            eventConfig = (_g = (_f = renderer === null || renderer === void 0 ? void 0 : renderer.props) === null || _f === void 0 ? void 0 : _f.onEvent) === null || _g === void 0 ? void 0 : _g[eventName];
            if (!eventConfig) {
              return [2, Promise.resolve()];
            }
            unbindEvent = bindEvent(renderer);
          }
          if (!rendererEventListeners.length) {
            return [2, Promise.resolve()];
          }
          rendererEvent = broadcast || createRendererEvent(eventName, {
            env: (_h = renderer === null || renderer === void 0 ? void 0 : renderer.props) === null || _h === void 0 ? void 0 : _h.env,
            nativeEvent: e,
            data,
            scoped
          });
          listeners = rendererEventListeners.filter(function(item) {
            return item.type === eventName && (broadcast ? true : item.renderer === renderer);
          }).sort(function(prev, next) {
            return next.weight - prev.weight;
          });
          executedCount = 0;
          checkExecuted = function() {
            executedCount++;
            if (executedCount === listeners.length) {
              unbindEvent === null || unbindEvent === void 0 ? void 0 : unbindEvent(eventName);
            }
          };
          _loop_2 = function(listener2) {
            var _o, _p, wait, _q, trailing, _r, leading, _s, maxWait, debounced_1, _t, trackId, trackName;
            return __generator(this, function(_u) {
              switch (_u.label) {
                case 0:
                  _o = (listener2 === null || listener2 === void 0 ? void 0 : listener2.debounce) || {}, _p = _o.wait, wait = _p === void 0 ? 100 : _p, _q = _o.trailing, trailing = _q === void 0 ? true : _q, _r = _o.leading, leading = _r === void 0 ? false : _r, _s = _o.maxWait, maxWait = _s === void 0 ? 1e4 : _s;
                  if (!(listener2 === null || listener2 === void 0 ? void 0 : listener2.debounce))
                    return [3, 1];
                  debounced_1 = (0, import_debounce5.default)(function() {
                    return __awaiter(_this, void 0, void 0, function() {
                      return __generator(this, function(_a4) {
                        switch (_a4.label) {
                          case 0:
                            return [4, runActions(listener2.actions, listener2.renderer, rendererEvent)];
                          case 1:
                            _a4.sent();
                            checkExecuted();
                            return [
                              2
                              /*return*/
                            ];
                        }
                      });
                    });
                  }, wait, {
                    trailing,
                    leading,
                    maxWait
                  });
                  rendererEventListeners.forEach(function(item) {
                    if (item.renderer === listener2.renderer && listener2.type === item.type) {
                      item.executing = true;
                      item.debounceInstance = debounced_1;
                    }
                  });
                  debounced_1();
                  return [3, 3];
                case 1:
                  return [4, runActions(listener2.actions, listener2.renderer, rendererEvent)];
                case 2:
                  _u.sent();
                  checkExecuted();
                  _u.label = 3;
                case 3:
                  if (listener2 === null || listener2 === void 0 ? void 0 : listener2.track) {
                    _t = listener2.track, trackId = _t.id, trackName = _t.name;
                    (_k = (_j = renderer === null || renderer === void 0 ? void 0 : renderer.props) === null || _j === void 0 ? void 0 : _j.env) === null || _k === void 0 ? void 0 : _k.tracker({
                      eventType: listener2.type,
                      eventData: {
                        trackId,
                        trackName
                      }
                    });
                  }
                  if (rendererEvent.stoped) {
                    return [2, "break"];
                  }
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          };
          _m.label = 1;
        case 1:
          _m.trys.push([1, 6, 7, 8]);
          listeners_1 = __values(listeners), listeners_1_1 = listeners_1.next();
          _m.label = 2;
        case 2:
          if (!!listeners_1_1.done)
            return [3, 5];
          listener = listeners_1_1.value;
          return [5, _loop_2(listener)];
        case 3:
          state_1 = _m.sent();
          if (state_1 === "break")
            return [3, 5];
          _m.label = 4;
        case 4:
          listeners_1_1 = listeners_1.next();
          return [3, 2];
        case 5:
          return [3, 8];
        case 6:
          e_2_1 = _m.sent();
          e_2 = { error: e_2_1 };
          return [3, 8];
        case 7:
          try {
            if (listeners_1_1 && !listeners_1_1.done && (_l = listeners_1.return))
              _l.call(listeners_1);
          } finally {
            if (e_2)
              throw e_2.error;
          }
          return [
            7
            /*endfinally*/
          ];
        case 8:
          return [2, Promise.resolve(rendererEvent)];
      }
    });
  });
}
var getRendererEventListeners = function() {
  return rendererEventListeners;
};
var resolveEventData = function(props, data, valueKey) {
  var _a3, _b3;
  if (valueKey === void 0) {
    valueKey = "value";
  }
  return createObject2(props.data, props.name && valueKey ? __assign(__assign({}, data), (_a3 = {}, _a3[props.name] = data[valueKey], _a3.__rendererData = __assign(__assign({}, props.data), (_b3 = {}, _b3[props.name] = data[valueKey], _b3)), _a3)) : data);
};

// node_modules/amis-core/esm/Scoped.js
var import_react11 = __toESM(require_react());
var import_find8 = __toESM(require_find());
var import_values = __toESM(require_values());
var import_hoist_non_react_statics5 = __toESM(require_hoist_non_react_statics_cjs());
init_moment();
var import_chunk5 = __toESM(require_chunk());
var import_react_dom7 = __toESM(require_react_dom());
var import_isPlainObject21 = __toESM(require_isPlainObject());
var import_isObject6 = __toESM(require_isObject());
var import_isString7 = __toESM(require_isString());
var import_isBoolean6 = __toESM(require_isBoolean());
var import_isEqual14 = __toESM(require_isEqual());
var import_cloneDeep6 = __toESM(require_cloneDeep());
var import_mapValues5 = __toESM(require_mapValues());
var import_camelCase5 = __toESM(require_camelCase());
var import_map5 = __toESM(require_map());
var import_isEmpty6 = __toESM(require_isEmpty());
var import_kebabCase5 = __toESM(require_kebabCase());

// node_modules/amis-core/esm/actions/LoopAction.js
init_moment();
var import_isPlainObject19 = __toESM(require_isPlainObject());
var LoopAction = (
  /** @class */
  function() {
    function LoopAction2() {
    }
    LoopAction2.prototype.run = function(action, renderer, event, mergeData) {
      var _a3, _b3;
      return __awaiter(this, void 0, void 0, function() {
        var loopName, loopData, protoData, loopData_1, loopData_1_1, data, _c, _d, subAction, e_1_1, e_2_1;
        var e_2, _e, e_1, _f;
        return __generator(this, function(_g) {
          switch (_g.label) {
            case 0:
              loopName = (_a3 = action.args) === null || _a3 === void 0 ? void 0 : _a3.loopName;
              if (typeof loopName !== "string") {
                console.error("loopName 必须是字符串类型");
                return [
                  2
                  /*return*/
                ];
              }
              loopData = resolveVariable(loopName, mergeData) || [];
              if (!!loopData)
                return [3, 1];
              console.error("没有找到数据 ".concat(loopName));
              return [3, 18];
            case 1:
              if (!!Array.isArray(loopData))
                return [3, 2];
              console.error("".concat(loopName, " 数据不是数组"));
              return [3, 18];
            case 2:
              if (!((_b3 = action.children) === null || _b3 === void 0 ? void 0 : _b3.length))
                return [3, 18];
              protoData = event.data;
              _g.label = 3;
            case 3:
              _g.trys.push([3, 15, 16, 17]);
              loopData_1 = __values(loopData), loopData_1_1 = loopData_1.next();
              _g.label = 4;
            case 4:
              if (!!loopData_1_1.done)
                return [3, 14];
              data = loopData_1_1.value;
              renderer.loopStatus = LoopStatus.NORMAL;
              event.setData(createObject2(event.data, data));
              _g.label = 5;
            case 5:
              _g.trys.push([5, 10, 11, 12]);
              _c = (e_1 = void 0, __values(action.children)), _d = _c.next();
              _g.label = 6;
            case 6:
              if (!!_d.done)
                return [3, 9];
              subAction = _d.value;
              if (renderer.loopStatus === LoopStatus.CONTINUE) {
                return [3, 8];
              }
              return [4, runActions(subAction, renderer, event)];
            case 7:
              _g.sent();
              if (renderer.loopStatus === LoopStatus.BREAK || event.stoped) {
                event.setData(protoData);
                event.stopPropagation();
                return [3, 9];
              }
              _g.label = 8;
            case 8:
              _d = _c.next();
              return [3, 6];
            case 9:
              return [3, 12];
            case 10:
              e_1_1 = _g.sent();
              e_1 = { error: e_1_1 };
              return [3, 12];
            case 11:
              try {
                if (_d && !_d.done && (_f = _c.return))
                  _f.call(_c);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
              return [
                7
                /*endfinally*/
              ];
            case 12:
              if (event.stoped) {
                event.setData(protoData);
                return [3, 14];
              }
              _g.label = 13;
            case 13:
              loopData_1_1 = loopData_1.next();
              return [3, 4];
            case 14:
              return [3, 17];
            case 15:
              e_2_1 = _g.sent();
              e_2 = { error: e_2_1 };
              return [3, 17];
            case 16:
              try {
                if (loopData_1_1 && !loopData_1_1.done && (_e = loopData_1.return))
                  _e.call(loopData_1);
              } finally {
                if (e_2)
                  throw e_2.error;
              }
              return [
                7
                /*endfinally*/
              ];
            case 17:
              renderer.loopStatus = LoopStatus.NORMAL;
              event.setData(protoData);
              _g.label = 18;
            case 18:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    return LoopAction2;
  }()
);
registerAction("loop", new LoopAction());

// node_modules/amis-core/esm/actions/BreakAction.js
var BreakAction = (
  /** @class */
  function() {
    function BreakAction2() {
    }
    BreakAction2.prototype.run = function(action, renderer, event) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a3) {
          renderer.loopStatus = LoopStatus.BREAK;
          return [
            2
            /*return*/
          ];
        });
      });
    };
    return BreakAction2;
  }()
);
registerAction("break", new BreakAction());

// node_modules/amis-core/esm/actions/ContinueAction.js
var ContinueAction = (
  /** @class */
  function() {
    function ContinueAction2() {
    }
    ContinueAction2.prototype.run = function(action, renderer, event) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a3) {
          renderer.loopStatus = LoopStatus.CONTINUE;
          return [
            2
            /*return*/
          ];
        });
      });
    };
    return ContinueAction2;
  }()
);
registerAction("continue", new ContinueAction());

// node_modules/amis-core/esm/actions/SwitchAction.js
var SwitchAction = (
  /** @class */
  function() {
    function SwitchAction2() {
    }
    SwitchAction2.prototype.run = function(action, renderer, event, mergeData) {
      return __awaiter(this, void 0, void 0, function() {
        var _a3, _b3, branch, isPass, e_1_1;
        var e_1, _c;
        return __generator(this, function(_d) {
          switch (_d.label) {
            case 0:
              _d.trys.push([0, 6, 7, 8]);
              _a3 = __values(action.children || []), _b3 = _a3.next();
              _d.label = 1;
            case 1:
              if (!!_b3.done)
                return [3, 5];
              branch = _b3.value;
              if (!branch.expression) {
                return [3, 4];
              }
              return [4, evalExpressionWithConditionBuilder(branch.expression, mergeData)];
            case 2:
              isPass = _d.sent();
              if (!isPass)
                return [3, 4];
              return [4, runActions(branch, renderer, event)];
            case 3:
              _d.sent();
              return [3, 5];
            case 4:
              _b3 = _a3.next();
              return [3, 1];
            case 5:
              return [3, 8];
            case 6:
              e_1_1 = _d.sent();
              e_1 = { error: e_1_1 };
              return [3, 8];
            case 7:
              try {
                if (_b3 && !_b3.done && (_c = _a3.return))
                  _c.call(_a3);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
              return [
                7
                /*endfinally*/
              ];
            case 8:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    return SwitchAction2;
  }()
);
registerAction("switch", new SwitchAction());

// node_modules/amis-core/esm/actions/ParallelAction.js
var ParallelAction = (
  /** @class */
  function() {
    function ParallelAction2() {
    }
    ParallelAction2.prototype.run = function(action, renderer, event) {
      return __awaiter(this, void 0, void 0, function() {
        var childActions;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              if (!(action.children && action.children.length))
                return [3, 2];
              childActions = action.children.map(function(child) {
                return runActions(child, renderer, event);
              });
              return [4, Promise.all(childActions)];
            case 1:
              _a3.sent();
              _a3.label = 2;
            case 2:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    return ParallelAction2;
  }()
);
registerAction("parallel", new ParallelAction());

// node_modules/amis-core/esm/actions/CustomAction.js
var import_react10 = __toESM(require_react());
var import_chunk4 = __toESM(require_chunk());
var import_isPlainObject20 = __toESM(require_isPlainObject());
init_moment();
var import_react_dom6 = __toESM(require_react_dom());
var import_isObject5 = __toESM(require_isObject());
var import_isString6 = __toESM(require_isString());
var import_isBoolean5 = __toESM(require_isBoolean());
var import_isEqual13 = __toESM(require_isEqual());
var import_debounce6 = __toESM(require_debounce());
var import_cloneDeep5 = __toESM(require_cloneDeep());
var import_mapValues4 = __toESM(require_mapValues());
var import_camelCase4 = __toESM(require_camelCase());
var import_map4 = __toESM(require_map());
var import_isEmpty5 = __toESM(require_isEmpty());
var import_kebabCase4 = __toESM(require_kebabCase());
var import_hoist_non_react_statics4 = __toESM(require_hoist_non_react_statics_cjs());
var CustomAction = (
  /** @class */
  function() {
    function CustomAction2() {
    }
    CustomAction2.prototype.run = function(action, renderer, event) {
      var _a3, _b3;
      return __awaiter(this, void 0, void 0, function() {
        var scriptFunc;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              scriptFunc = (_b3 = (_a3 = action.args) === null || _a3 === void 0 ? void 0 : _a3.script) !== null && _b3 !== void 0 ? _b3 : action.script;
              if (typeof scriptFunc === "string") {
                scriptFunc = str2AsyncFunction(scriptFunc, "context", "doAction", "event");
              }
              return [4, scriptFunc === null || scriptFunc === void 0 ? void 0 : scriptFunc.call(null, renderer, function(action2) {
                return runActions(action2, renderer, event);
              }, event, action)];
            case 1:
              _c.sent();
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    return CustomAction2;
  }()
);
registerAction("custom", new CustomAction());

// node_modules/amis-core/esm/actions/BroadcastAction.js
var BroadcastAction = (
  /** @class */
  function() {
    function BroadcastAction2() {
    }
    BroadcastAction2.prototype.run = function(action, renderer, event) {
      var _a3, _b3, _c;
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_d) {
          switch (_d.label) {
            case 0:
              if (!((_a3 = action.args) === null || _a3 === void 0 ? void 0 : _a3.eventName) && !action.eventName) {
                console.error("eventName 未定义，请定义事件名称");
                return [
                  2
                  /*return*/
                ];
              }
              event.setData(createObject2(event.data, (_b3 = action.data) !== null && _b3 !== void 0 ? _b3 : {}));
              return [4, dispatchEvent(((_c = action.args) === null || _c === void 0 ? void 0 : _c.eventName) || action.eventName, renderer, event.context.scoped, action.data, event)];
            case 1:
              return [2, _d.sent()];
          }
        });
      });
    };
    return BroadcastAction2;
  }()
);
registerAction("broadcast", new BroadcastAction());

// node_modules/amis-core/esm/actions/CmptAction.js
var CmptAction = (
  /** @class */
  function() {
    function CmptAction2() {
    }
    CmptAction2.prototype.run = function(action, renderer, event) {
      var _a3, _b3, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
      return __awaiter(this, void 0, void 0, function() {
        var key, dataMergeMode, path, beforeSetData, res, component, msg, result, e_1;
        var _t, _u;
        return __generator(this, function(_v) {
          switch (_v.label) {
            case 0:
              key = action.componentId || action.componentName;
              dataMergeMode = action.dataMergeMode || "merge";
              path = (_a3 = action.args) === null || _a3 === void 0 ? void 0 : _a3.path;
              if (!(action.actionType === "setValue" && path && typeof path === "string"))
                return [3, 2];
              beforeSetData = (_c = (_b3 = event === null || event === void 0 ? void 0 : event.context) === null || _b3 === void 0 ? void 0 : _b3.env) === null || _c === void 0 ? void 0 : _c.beforeSetData;
              if (!(beforeSetData && typeof beforeSetData === "function"))
                return [3, 2];
              return [4, beforeSetData(renderer, action, event)];
            case 1:
              res = _v.sent();
              if (res === false) {
                return [
                  2
                  /*return*/
                ];
              }
              _v.label = 2;
            case 2:
              component = key ? (_d = event.context.scoped) === null || _d === void 0 ? void 0 : _d[action.componentId ? "getComponentById" : "getComponentByName"](key) : renderer;
              if (key && !component) {
                msg = "尝试执行一个不存在的目标组件动作，请检查目标组件非隐藏状态，且正确指定了componentId或componentName";
                if (action.ignoreError === false) {
                  throw Error(msg);
                } else {
                  console.warn(msg);
                }
              }
              if (action.actionType === "setValue") {
                if (component === null || component === void 0 ? void 0 : component.setData) {
                  return [2, component === null || component === void 0 ? void 0 : component.setData((_e = action.args) === null || _e === void 0 ? void 0 : _e.value, dataMergeMode === "override", (_f = action.args) === null || _f === void 0 ? void 0 : _f.index, (_g = action.args) === null || _g === void 0 ? void 0 : _g.condition)];
                } else {
                  return [2, (_j = component === null || component === void 0 ? void 0 : (_h = component.props).onChange) === null || _j === void 0 ? void 0 : _j.call(_h, (_k = action.args) === null || _k === void 0 ? void 0 : _k.value)];
                }
              }
              if (action.actionType === "reload") {
                return [2, (_l = component === null || component === void 0 ? void 0 : component.reload) === null || _l === void 0 ? void 0 : _l.call(component, void 0, action.data, void 0, void 0, dataMergeMode === "override", action.args)];
              }
              _v.label = 3;
            case 3:
              _v.trys.push([3, 5, , 6]);
              return [4, (_m = component === null || component === void 0 ? void 0 : component.doAction) === null || _m === void 0 ? void 0 : _m.call(component, action, action.args, true)];
            case 4:
              result = _v.sent();
              if (["validate", "submit"].includes(action.actionType)) {
                event.setData(createObject2(event.data, (_t = {}, _t[action.outputVar || "".concat(action.actionType, "Result")] = {
                  error: "",
                  payload: (_o = result === null || result === void 0 ? void 0 : result.__payload) !== null && _o !== void 0 ? _o : (_q = (_p = component === null || component === void 0 ? void 0 : component.props) === null || _p === void 0 ? void 0 : _p.store) === null || _q === void 0 ? void 0 : _q.data,
                  responseData: result === null || result === void 0 ? void 0 : result.__response
                }, _t)));
              }
              return [2, result];
            case 5:
              e_1 = _v.sent();
              event.setData(createObject2(event.data, (_u = {}, _u[action.outputVar || "".concat(action.actionType, "Result")] = {
                error: e_1.message,
                errors: e_1.name === "ValidateError" ? e_1.detail : e_1,
                payload: (_s = (_r = component === null || component === void 0 ? void 0 : component.props) === null || _r === void 0 ? void 0 : _r.store) === null || _s === void 0 ? void 0 : _s.data
              }, _u)));
              return [3, 6];
            case 6:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    return CmptAction2;
  }()
);
registerAction("component", new CmptAction());

// node_modules/amis-core/esm/actions/StatusAction.js
var StatusAction = (
  /** @class */
  function() {
    function StatusAction2() {
    }
    StatusAction2.prototype.run = function(action, renderer, event) {
      var _a3, _b3;
      return __awaiter(this, void 0, void 0, function() {
        var key, visibility, usability;
        return __generator(this, function(_c) {
          key = action.componentId || action.componentName;
          if (["show", "hidden", "visibility"].includes(action.actionType)) {
            visibility = action.actionType === "visibility" ? (_a3 = action.args) === null || _a3 === void 0 ? void 0 : _a3.value : action.actionType === "show";
            return [2, renderer.props.statusStore.setVisible(key, visibility)];
          } else if (["static", "nonstatic"].includes(action.actionType)) {
            return [2, renderer.props.statusStore.setStatic(key, action.actionType === "static")];
          } else if (["enabled", "disabled", "usability"].includes(action.actionType)) {
            usability = action.actionType === "usability" ? !((_b3 = action.args) === null || _b3 === void 0 ? void 0 : _b3.value) : action.actionType === "disabled";
            return [2, renderer.props.statusStore.setDisable(key, usability)];
          }
          return [
            2
            /*return*/
          ];
        });
      });
    };
    return StatusAction2;
  }()
);
registerAction("status", new StatusAction());

// node_modules/amis-core/esm/actions/AjaxAction.js
var AjaxAction = (
  /** @class */
  function() {
    function AjaxAction2(fetcherType) {
      if (fetcherType === void 0) {
        fetcherType = "ajax";
      }
      this.fetcherType = fetcherType;
    }
    AjaxAction2.prototype.run = function(action, renderer, event) {
      var _a3, _b3, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
      return __awaiter(this, void 0, void 0, function() {
        var env, silent, messages, api, result, responseData, msg, e_1, result;
        var _o;
        return __generator(this, function(_p) {
          switch (_p.label) {
            case 0:
              if (!((_a3 = event.context.env) === null || _a3 === void 0 ? void 0 : _a3.fetcher)) {
                throw new Error("env.fetcher is required!");
              }
              if (!action.api) {
                throw new Error("api is required!");
              }
              if (this.fetcherType === "download" && action.actionType === "download") {
                if (action.api) {
                  action.api.responseType = "blob";
                }
              }
              env = event.context.env;
              silent = ((_b3 = action === null || action === void 0 ? void 0 : action.options) === null || _b3 === void 0 ? void 0 : _b3.silent) || (action === null || action === void 0 ? void 0 : action.api).silent;
              messages = (_c = action === null || action === void 0 ? void 0 : action.api) === null || _c === void 0 ? void 0 : _c.messages;
              api = normalizeApi(action.api);
              if ((api === null || api === void 0 ? void 0 : api.data) == void 0) {
                api = __assign(__assign({}, api), { data: {} });
              }
              _p.label = 1;
            case 1:
              _p.trys.push([1, 3, , 4]);
              return [4, env.fetcher(api, (_d = action.data) !== null && _d !== void 0 ? _d : {}, (_e = action === null || action === void 0 ? void 0 : action.options) !== null && _e !== void 0 ? _e : {})];
            case 2:
              result = _p.sent();
              responseData = !isEmpty2(result.data) || result.ok ? normalizeApiResponseData(result.data) : null;
              event.setData(createObject2(event.data, __assign(__assign({}, responseData), (_o = { responseData }, _o[action.outputVar || "responseResult"] = __assign(__assign({}, responseData), { responseData, responseStatus: result.status, responseMsg: result.msg }), _o))));
              if (!silent) {
                if (!result.ok) {
                  throw new ServerError((_h = (_f = messages === null || messages === void 0 ? void 0 : messages.failed) !== null && _f !== void 0 ? _f : (_g = action.messages) === null || _g === void 0 ? void 0 : _g.failed) !== null && _h !== void 0 ? _h : result.msg, result);
                } else {
                  msg = (_m = (_l = (_j = messages === null || messages === void 0 ? void 0 : messages.success) !== null && _j !== void 0 ? _j : (_k = action.messages) === null || _k === void 0 ? void 0 : _k.success) !== null && _l !== void 0 ? _l : result.msg) !== null && _m !== void 0 ? _m : result.defaultMsg;
                  msg && env.notify("success", msg, result.msgTimeout !== void 0 ? {
                    closeButton: true,
                    timeout: result.msgTimeout
                  } : void 0);
                }
              }
              return [2, result.data];
            case 3:
              e_1 = _p.sent();
              if (!silent) {
                if (e_1.type === "ServerError") {
                  result = e_1.response;
                  env.notify("error", e_1.message, result.msgTimeout !== void 0 ? {
                    closeButton: true,
                    timeout: result.msgTimeout
                  } : void 0);
                } else {
                  env.notify("error", e_1.message);
                }
              }
              return [3, 4];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    return AjaxAction2;
  }()
);
registerAction("ajax", new AjaxAction());
registerAction("download", new AjaxAction("download"));

// node_modules/amis-core/esm/actions/CopyAction.js
var CopyAction = (
  /** @class */
  function() {
    function CopyAction2() {
    }
    CopyAction2.prototype.run = function(action, renderer, event) {
      var _a3, _b3, _c, _d, _e, _f;
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_g) {
          if (!((_a3 = event.context.env) === null || _a3 === void 0 ? void 0 : _a3.copy)) {
            throw new Error("env.copy is required!");
          }
          if ((_b3 = action.args) === null || _b3 === void 0 ? void 0 : _b3.content) {
            (_d = (_c = event.context.env) === null || _c === void 0 ? void 0 : _c.copy) === null || _d === void 0 ? void 0 : _d.call(_c, action.args.content, {
              format: (_f = (_e = action.args) === null || _e === void 0 ? void 0 : _e.copyFormat) !== null && _f !== void 0 ? _f : "text/html"
            });
          }
          return [
            2
            /*return*/
          ];
        });
      });
    };
    return CopyAction2;
  }()
);
registerAction("copy", new CopyAction());

// node_modules/amis-core/esm/actions/DialogAction.js
var DialogAction = (
  /** @class */
  function() {
    function DialogAction2() {
    }
    DialogAction2.prototype.run = function(action, renderer, event) {
      var _a3, _b3;
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_c) {
          if (action.$$id !== void 0) {
            return [
              2
              /*return*/
            ];
          }
          (_b3 = (_a3 = renderer.props).onAction) === null || _b3 === void 0 ? void 0 : _b3.call(_a3, event, {
            actionType: "dialog",
            dialog: action.dialog,
            reload: "none"
          }, action.data);
          return [
            2
            /*return*/
          ];
        });
      });
    };
    return DialogAction2;
  }()
);
var CloseDialogAction = (
  /** @class */
  function() {
    function CloseDialogAction2() {
    }
    CloseDialogAction2.prototype.run = function(action, renderer, event) {
      var _a3, _b3;
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_c) {
          if (action.componentId) {
            event.context.scoped.closeById(action.componentId);
          } else {
            (_b3 = (_a3 = renderer.props).onAction) === null || _b3 === void 0 ? void 0 : _b3.call(_a3, event, __assign(__assign({}, action), { actionType: "close" }), action.data);
          }
          return [
            2
            /*return*/
          ];
        });
      });
    };
    return CloseDialogAction2;
  }()
);
var AlertAction = (
  /** @class */
  function() {
    function AlertAction2() {
    }
    AlertAction2.prototype.run = function(action, renderer, event) {
      var _a3, _b3, _c, _d, _e, _f, _g, _h;
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_j) {
          (_b3 = (_a3 = event.context.env).alert) === null || _b3 === void 0 ? void 0 : _b3.call(_a3, (_d = filter((_c = action.dialog) === null || _c === void 0 ? void 0 : _c.msg, event.data)) !== null && _d !== void 0 ? _d : (_e = action.args) === null || _e === void 0 ? void 0 : _e.msg, (_g = filter((_f = action.dialog) === null || _f === void 0 ? void 0 : _f.title, event.data)) !== null && _g !== void 0 ? _g : (_h = action.args) === null || _h === void 0 ? void 0 : _h.title);
          return [
            2
            /*return*/
          ];
        });
      });
    };
    return AlertAction2;
  }()
);
var ConfirmAction = (
  /** @class */
  function() {
    function ConfirmAction2() {
    }
    ConfirmAction2.prototype.run = function(action, renderer, event) {
      var _a3, _b3, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;
      return __awaiter(this, void 0, void 0, function() {
        var type, confirmed_1, confirmed;
        return __generator(this, function(_x) {
          switch (_x.label) {
            case 0:
              type = (_b3 = (_a3 = action.dialog) === null || _a3 === void 0 ? void 0 : _a3.type) !== null && _b3 !== void 0 ? _b3 : (_c = action.args) === null || _c === void 0 ? void 0 : _c.type;
              if (!!type)
                return [3, 2];
              return [4, (_e = (_d = event.context.env).confirm) === null || _e === void 0 ? void 0 : _e.call(_d, filter((_f = action.dialog) === null || _f === void 0 ? void 0 : _f.msg, event.data) || ((_g = action.args) === null || _g === void 0 ? void 0 : _g.msg), filter((_h = action.dialog) === null || _h === void 0 ? void 0 : _h.title, event.data) || ((_j = action.args) === null || _j === void 0 ? void 0 : _j.title), {
                closeOnEsc: filter((_k = action.dialog) === null || _k === void 0 ? void 0 : _k.closeOnEsc, event.data) || ((_l = action.args) === null || _l === void 0 ? void 0 : _l.closeOnEsc),
                size: filter((_m = action.dialog) === null || _m === void 0 ? void 0 : _m.size, event.data) || ((_o = action.args) === null || _o === void 0 ? void 0 : _o.size),
                confirmText: filter((_p = action.dialog) === null || _p === void 0 ? void 0 : _p.confirmText, event.data) || ((_q = action.args) === null || _q === void 0 ? void 0 : _q.confirmText),
                cancelText: filter((_r = action.dialog) === null || _r === void 0 ? void 0 : _r.cancelText, event.data) || ((_s = action.args) === null || _s === void 0 ? void 0 : _s.cancelText),
                confirmBtnLevel: filter((_t = action.dialog) === null || _t === void 0 ? void 0 : _t.confirmBtnLevel, event.data) || ((_u = action.args) === null || _u === void 0 ? void 0 : _u.confirmBtnLevel),
                cancelBtnLevel: filter((_v = action.dialog) === null || _v === void 0 ? void 0 : _v.cancelBtnLevel, event.data) || ((_w = action.args) === null || _w === void 0 ? void 0 : _w.cancelBtnLevel)
              })];
            case 1:
              confirmed_1 = _x.sent();
              return [2, confirmed_1];
            case 2:
              return [4, new Promise(function(resolve, reject) {
                var _a4, _b4, _c2;
                (_b4 = (_a4 = renderer.props).onAction) === null || _b4 === void 0 ? void 0 : _b4.call(_a4, event, {
                  actionType: "dialog",
                  dialog: (_c2 = action.dialog) !== null && _c2 !== void 0 ? _c2 : action.args,
                  reload: "none",
                  callback: function(result) {
                    return resolve(result);
                  }
                }, action.data);
              })];
            case 3:
              confirmed = _x.sent();
              return [2, confirmed];
          }
        });
      });
    };
    return ConfirmAction2;
  }()
);
registerAction("dialog", new DialogAction());
registerAction("closeDialog", new CloseDialogAction());
registerAction("alert", new AlertAction());
registerAction("confirmDialog", new ConfirmAction());

// node_modules/amis-core/esm/actions/DrawerAction.js
var DrawerAction = (
  /** @class */
  function() {
    function DrawerAction2() {
    }
    DrawerAction2.prototype.run = function(action, renderer, event) {
      var _a3, _b3;
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_c) {
          if (action.$$id !== void 0) {
            return [
              2
              /*return*/
            ];
          }
          (_b3 = (_a3 = renderer.props).onAction) === null || _b3 === void 0 ? void 0 : _b3.call(_a3, event, {
            actionType: "drawer",
            drawer: action.drawer,
            reload: "none"
          }, action.data);
          return [
            2
            /*return*/
          ];
        });
      });
    };
    return DrawerAction2;
  }()
);
var CloseDrawerAction = (
  /** @class */
  function() {
    function CloseDrawerAction2() {
    }
    CloseDrawerAction2.prototype.run = function(action, renderer, event) {
      var _a3, _b3;
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_c) {
          if (action.componentId) {
            event.context.scoped.closeById(action.componentId);
          } else {
            (_b3 = (_a3 = renderer.props).onAction) === null || _b3 === void 0 ? void 0 : _b3.call(_a3, event, __assign(__assign({}, action), { actionType: "close" }), action.data);
          }
          return [
            2
            /*return*/
          ];
        });
      });
    };
    return CloseDrawerAction2;
  }()
);
registerAction("drawer", new DrawerAction());
registerAction("closeDrawer", new CloseDrawerAction());

// node_modules/amis-core/esm/actions/EmailAction.js
var import_pick3 = __toESM(require_pick());
var import_qs2 = __toESM(require_lib());
var EmailAction = (
  /** @class */
  function() {
    function EmailAction2() {
    }
    EmailAction2.prototype.run = function(action, renderer, event) {
      var _a3, _b3;
      return __awaiter(this, void 0, void 0, function() {
        var mailTo, mailInfo, mailStr, mailto;
        return __generator(this, function(_c) {
          mailTo = (_a3 = action.args) === null || _a3 === void 0 ? void 0 : _a3.to;
          mailInfo = (0, import_pick3.default)((_b3 = action.args) !== null && _b3 !== void 0 ? _b3 : {}, "cc", "bcc", "subject", "body");
          mailStr = import_qs2.default.stringify(mailInfo);
          mailto = "mailto:".concat(mailTo, "?").concat(mailStr);
          window.open(mailto);
          return [
            2
            /*return*/
          ];
        });
      });
    };
    return EmailAction2;
  }()
);
registerAction("email", new EmailAction());

// node_modules/amis-core/esm/actions/LinkAction.js
var LinkAction = (
  /** @class */
  function() {
    function LinkAction2() {
    }
    LinkAction2.prototype.run = function(action, renderer, event) {
      var _a3, _b3, _c, _d, _e, _f, _g, _h;
      return __awaiter(this, void 0, void 0, function() {
        var urlObj;
        return __generator(this, function(_j) {
          if (!((_a3 = event.context.env) === null || _a3 === void 0 ? void 0 : _a3.jumpTo)) {
            throw new Error("env.jumpTo is required!");
          }
          urlObj = buildApi({
            url: ((_b3 = action.args) === null || _b3 === void 0 ? void 0 : _b3.url) || ((_c = action.args) === null || _c === void 0 ? void 0 : _c.link),
            method: "get"
          }, __assign(__assign({}, (_e = (_d = action.args) === null || _d === void 0 ? void 0 : _d.params) !== null && _e !== void 0 ? _e : {}), (_f = action.data) !== null && _f !== void 0 ? _f : {}), {
            autoAppend: true
          });
          (_g = event.context.env) === null || _g === void 0 ? void 0 : _g.jumpTo(urlObj.url, __assign({ actionType: action.actionType, type: "button" }, action.args), (_h = action.data) !== null && _h !== void 0 ? _h : {});
          return [
            2
            /*return*/
          ];
        });
      });
    };
    return LinkAction2;
  }()
);
registerAction("openlink", new LinkAction());

// node_modules/amis-core/esm/actions/ToastAction.js
var ToastAction = (
  /** @class */
  function() {
    function ToastAction2() {
    }
    ToastAction2.prototype.run = function(action, renderer, event) {
      var _a3, _b3, _c, _d, _e;
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_f) {
          if (!((_a3 = event.context.env) === null || _a3 === void 0 ? void 0 : _a3.notify)) {
            throw new Error("env.notify is required!");
          }
          (_c = (_b3 = event.context.env) === null || _b3 === void 0 ? void 0 : _b3.notify) === null || _c === void 0 ? void 0 : _c.call(_b3, ((_d = action.args) === null || _d === void 0 ? void 0 : _d.msgType) || "info", String((_e = action.args) === null || _e === void 0 ? void 0 : _e.msg), action.args);
          return [
            2
            /*return*/
          ];
        });
      });
    };
    return ToastAction2;
  }()
);
registerAction("toast", new ToastAction());

// node_modules/amis-core/esm/actions/PageAction.js
var PageGoBackAction = (
  /** @class */
  function() {
    function PageGoBackAction2() {
    }
    PageGoBackAction2.prototype.run = function(action, renderer, event) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a3) {
          window.history.back();
          return [
            2
            /*return*/
          ];
        });
      });
    };
    return PageGoBackAction2;
  }()
);
var PageGoAction = (
  /** @class */
  function() {
    function PageGoAction2() {
    }
    PageGoAction2.prototype.run = function(action, renderer, event) {
      var _a3;
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_b3) {
          window.history.go(((_a3 = action.args) === null || _a3 === void 0 ? void 0 : _a3.delta) || 0);
          return [
            2
            /*return*/
          ];
        });
      });
    };
    return PageGoAction2;
  }()
);
var PageRefreshAction = (
  /** @class */
  function() {
    function PageRefreshAction2() {
    }
    PageRefreshAction2.prototype.run = function(action, renderer, event) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a3) {
          window.location.reload();
          return [
            2
            /*return*/
          ];
        });
      });
    };
    return PageRefreshAction2;
  }()
);
registerAction("goBack", new PageGoBackAction());
registerAction("refresh", new PageRefreshAction());
registerAction("goPage", new PageGoAction());

// node_modules/amis-core/esm/Scoped.js
function filterTarget(target, data) {
  var idx = target.indexOf("?");
  if (~idx) {
    return filter(target.slice(0, idx), data) + target.slice(idx);
  }
  return filter(target, data, "| raw");
}
var rootScopedContext = createScopedTools("");
var ScopedContext = import_react11.default.createContext(rootScopedContext);
function createScopedTools(path, parent, env, rendererType) {
  var components = [];
  var self2 = {
    rendererType,
    component: void 0,
    parent,
    registerComponent: function(component) {
      if (component.props.$path === path && parent) {
        self2.component = component;
        return parent.registerComponent(component);
      }
      if (!~components.indexOf(component)) {
        components.push(component);
      }
    },
    unRegisterComponent: function(component) {
      if (component.props.$path === path && parent) {
        return parent.unRegisterComponent(component);
      }
      var idx = components.indexOf(component);
      if (~idx) {
        components.splice(idx, 1);
      }
    },
    getComponentByName: function(name) {
      if (~name.indexOf(".")) {
        var paths = name.split(".");
        var len_1 = paths.length;
        return paths.reduce(function(scope, name2, idx) {
          if (scope && scope.getComponentByName) {
            var result = scope.getComponentByName(name2);
            return result && idx < len_1 - 1 ? result.context : result;
          }
          return null;
        }, this);
      }
      var resolved = (0, import_find8.default)(components, function(component) {
        return filter(component.props.name, component.props.data) === name || component.props.id === name;
      });
      return resolved || parent && parent.getComponentByName(name);
    },
    getComponentById: function(id) {
      var root = this;
      while (root.parent && root.parent !== rootScopedContext) {
        root = root.parent;
      }
      var component = void 0;
      findTree([root], function(item) {
        return item.getComponents().find(function(cmpt) {
          if (filter(cmpt.props.id, cmpt.props.data) === id) {
            component = cmpt;
            return true;
          }
          return false;
        });
      });
      return component;
    },
    /**
     * 基于绑定的变量名称查找组件
     * 支持形如${xxx}的格式
     *
     * @param session store的session, 默认为全局的
     * @param path 变量路径, 包含命名空间
     */
    getComponentsByRefPath: function(session, path2) {
      if (!path2 || typeof path2 !== "string") {
        return [];
      }
      var cmptMaps = {};
      var root = this;
      while (root.parent) {
        root = root.parent;
      }
      eachTree([root], function(item) {
        var e_1, _a3, e_2, _b3;
        var _c, _d, _e, _f, _g, _h;
        var scopedCmptList = item.getComponents() || [];
        if (Array.isArray(scopedCmptList)) {
          try {
            for (var scopedCmptList_1 = __values(scopedCmptList), scopedCmptList_1_1 = scopedCmptList_1.next(); !scopedCmptList_1_1.done; scopedCmptList_1_1 = scopedCmptList_1.next()) {
              var cmpt = scopedCmptList_1_1.value;
              var pathKey = (_d = (_c = cmpt === null || cmpt === void 0 ? void 0 : cmpt.props) === null || _c === void 0 ? void 0 : _c.$path) !== null && _d !== void 0 ? _d : "unknown";
              var schema = (_f = (_e = cmpt === null || cmpt === void 0 ? void 0 : cmpt.props) === null || _e === void 0 ? void 0 : _e.$schema) !== null && _f !== void 0 ? _f : {};
              var cmptSession = (_h = (_g = cmpt === null || cmpt === void 0 ? void 0 : cmpt.props.env) === null || _g === void 0 ? void 0 : _g.session) !== null && _h !== void 0 ? _h : "global";
              if (cmptMaps[pathKey] || session !== cmptSession) {
                continue;
              }
              if ((cmpt === null || cmpt === void 0 ? void 0 : cmpt.setData) && typeof cmpt.setData === "function") {
                cmptMaps[pathKey] = cmpt;
                continue;
              }
              try {
                for (var _j = (e_2 = void 0, __values(Object.keys(schema))), _k = _j.next(); !_k.done; _k = _j.next()) {
                  var key = _k.value;
                  var expression = schema[key];
                  if (typeof expression === "string" && isPureVariable(expression)) {
                    var host = expression.substring(2, expression.length - 1).split("|")[0];
                    if (host && host === path2) {
                      cmptMaps[pathKey] = cmpt;
                      break;
                    }
                  }
                }
              } catch (e_2_1) {
                e_2 = { error: e_2_1 };
              } finally {
                try {
                  if (_k && !_k.done && (_b3 = _j.return))
                    _b3.call(_j);
                } finally {
                  if (e_2)
                    throw e_2.error;
                }
              }
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (scopedCmptList_1_1 && !scopedCmptList_1_1.done && (_a3 = scopedCmptList_1.return))
                _a3.call(scopedCmptList_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        }
      });
      return (0, import_values.default)(cmptMaps);
    },
    getComponents: function() {
      return components.concat();
    },
    reload: function(target, ctx) {
      var scoped = this;
      var targets = typeof target === "string" ? target.split(/\s*,\s*/) : target;
      targets.forEach(function(name) {
        var idx2 = name.indexOf("?");
        var query = null;
        if (~idx2) {
          var queryObj = qsparse(name.substring(idx2 + 1).replace(/\$\{(.*?)\}/, function(_, match) {
            return "${" + encodeURIComponent(match) + "}";
          }));
          query = dataMapping(queryObj, ctx);
          name = name.substring(0, idx2);
        }
        var idx = name.indexOf(".");
        var subPath = "";
        if (~idx) {
          subPath = name.substring(1 + idx);
          name = name.substring(0, idx);
        }
        if (name === "window") {
          if (query) {
            var link = location.pathname + "?" + qsstringify(query);
            env ? env.updateLocation(link, true) : location.replace(link);
          } else {
            location.reload();
          }
        } else {
          var component = scoped.getComponentByName(name) || scoped.getComponentById(name);
          component && component.reload && component.reload(subPath, query, ctx);
        }
      });
    },
    send: function(receive, values2) {
      var scoped = this;
      var receives = typeof receive === "string" ? receive.split(/\s*,\s*/) : receive;
      receives.forEach(function(name) {
        var askIdx = name.indexOf("?");
        if (~askIdx) {
          var query = name.substring(askIdx + 1);
          var queryObj = qsparse(query.replace(/\$\{(.*?)\}/, function(_, match) {
            return "${" + encodeURIComponent(match) + "}";
          }));
          name = name.substring(0, askIdx);
          values2 = dataMapping(queryObj, values2);
        }
        var idx = name.indexOf(".");
        var subPath = "";
        if (~idx) {
          subPath = name.substring(1 + idx);
          name = name.substring(0, idx);
        }
        var component = scoped.getComponentByName(name);
        if (component && component.receive) {
          component.receive(values2, subPath);
        } else if (name === "window" && env && env.updateLocation) {
          var query = __assign(__assign({}, parseQuery(location)), values2);
          var link = location.pathname + "?" + qsstringify(query);
          env.updateLocation(link, true);
        }
      });
    },
    /**
     * 主要是用来关闭指定弹框的
     *
     * @param target 目标 name
     */
    close: function(target) {
      var scoped = this;
      if (typeof target === "string") {
        target.split(/\s*,\s*/).map(function(name) {
          return scoped.getComponentByName(name);
        }).filter(function(component) {
          return component && component.props.show;
        }).forEach(closeDialog);
      }
    },
    /**
     * 关闭指定id的弹窗
     * @param id
     */
    closeById: function(id) {
      var scoped = this;
      var component = scoped.getComponentById(id);
      if (component && component.props.show) {
        closeDialog(component);
      }
    },
    doAction: function(actions, ctx) {
      return __awaiter(this, void 0, void 0, function() {
        var renderer, rendererEvent;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              renderer = this.getComponents()[0];
              rendererEvent = createRendererEvent("embed", {
                env,
                nativeEvent: void 0,
                data: createObject2(renderer.props.data, ctx),
                scoped: this
              });
              return [4, runActions(actions, renderer, rendererEvent)];
            case 1:
              _a3.sent();
              if (rendererEvent.prevented) {
                return [
                  2
                  /*return*/
                ];
              }
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }
  };
  registerFunction("GETRENDERERDATA", function(componentId, path2, scoped) {
    var _a3;
    if (scoped === void 0) {
      scoped = self2;
    }
    var component = scoped.getComponentById(componentId);
    var data = (_a3 = component === null || component === void 0 ? void 0 : component.getData) === null || _a3 === void 0 ? void 0 : _a3.call(component);
    if (path2) {
      var variable = getVariable(data, path2);
      return variable;
    }
    return data;
  });
  registerFunction("GETRENDERERPROP", function(componentId, path2, scoped) {
    if (scoped === void 0) {
      scoped = self2;
    }
    var component = scoped.getComponentById(componentId);
    var props = component === null || component === void 0 ? void 0 : component.props;
    if (path2) {
      var variable = getVariable(props, path2);
      return variable;
    }
    return props;
  });
  if (!parent) {
    return self2;
  }
  !parent.children && (parent.children = []);
  parent.children.push(self2);
  return self2;
}
function closeDialog(component) {
  component.context.getComponents().filter(function(item) {
    return item && (item.props.type === "dialog" || item.props.type === "drawer") && item.props.show;
  }).forEach(closeDialog);
  component.props.onClose && component.props.onClose();
}
function HocScoped(ComposedComponent, rendererType) {
  var ScopedComponent = (
    /** @class */
    function(_super) {
      __extends(ScopedComponent2, _super);
      function ScopedComponent2(props, context) {
        var _this = _super.call(this, props) || this;
        _this.scoped = createScopedTools(_this.props.$path, context, _this.props.env, rendererType);
        var scopeRef = props.scopeRef;
        scopeRef && scopeRef(_this.scoped);
        return _this;
      }
      ScopedComponent2.prototype.getWrappedInstance = function() {
        return this.ref;
      };
      ScopedComponent2.prototype.childRef = function(ref) {
        while (ref && ref.getWrappedInstance) {
          ref = ref.getWrappedInstance();
        }
        this.ref = ref;
      };
      ScopedComponent2.prototype.componentWillUnmount = function() {
        var scopeRef = this.props.scopeRef;
        scopeRef && scopeRef(null);
        delete this.scoped;
      };
      ScopedComponent2.prototype.render = function() {
        var _a3 = this.props;
        _a3.scopeRef;
        var rest = __rest(_a3, ["scopeRef"]);
        return import_react11.default.createElement(
          ScopedContext.Provider,
          { value: this.scoped },
          import_react11.default.createElement(ComposedComponent, __assign({}, rest, { ref: this.childRef }))
        );
      };
      ScopedComponent2.displayName = "Scoped(".concat(ComposedComponent.displayName || ComposedComponent.name, ")");
      ScopedComponent2.contextType = ScopedContext;
      ScopedComponent2.ComposedComponent = ComposedComponent;
      __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
      ], ScopedComponent2.prototype, "childRef", null);
      return ScopedComponent2;
    }(import_react11.default.Component)
  );
  (0, import_hoist_non_react_statics5.default)(ScopedComponent, ComposedComponent);
  return ScopedComponent;
}

// node_modules/amis-core/esm/utils/filter-schema.js
var import_isPlainObject22 = __toESM(require_isPlainObject());
function filterClassNameObject(classValue, ctx) {
  if (ctx === void 0) {
    ctx = {};
  }
  var result = classValue;
  if (classValue && typeof classValue === "string") {
    result = tokenize(classValue, ctx);
  } else if (classValue && (0, import_isPlainObject22.default)(classValue)) {
    result = mapObject(classValue, function(value) {
      return typeof value === "string" ? evalExpression(value, ctx) : value;
    }, void 0, function(key) {
      return tokenize(key, ctx);
    });
  }
  return result;
}
function getExprProperties(schema, data, ignoreList, props) {
  if (data === void 0) {
    data = {};
  }
  if (ignoreList === void 0) {
    ignoreList = ["addOn", "ref"];
  }
  var exprProps = {};
  var ctx = null;
  Object.getOwnPropertyNames(schema).forEach(function(key) {
    if (ignoreList && ~ignoreList.indexOf(key)) {
      return;
    }
    var parts = /^(.*)(On|Expr|(?:c|C)lassName)(Raw)?$/.exec(key);
    var type = parts === null || parts === void 0 ? void 0 : parts[2];
    var value = schema[key];
    if (value && typeof value === "string" && (parts === null || parts === void 0 ? void 0 : parts[1]) && (type === "On" || type === "Expr")) {
      key = parts[1];
      if (type === "On" || type === "Expr") {
        if (!ctx && props && typeof value === "string" && ~value.indexOf("__props")) {
          ctx = injectPropsToObject(data, {
            __props: props
          });
        }
        if (type === "On") {
          value = (props === null || props === void 0 ? void 0 : props[key]) || evalExpression(value, ctx || data);
        } else {
          value = filter(value, ctx || data);
        }
      }
      exprProps[key] = value;
    } else if ((type === "className" || type === "ClassName") && !(props === null || props === void 0 ? void 0 : props[key]) && // 如果 props 里面有则是 props 优先
    value && (typeof value === "string" || (0, import_isPlainObject22.default)(value))) {
      exprProps["".concat(key, "Raw")] = value;
      exprProps[key] = filterClassNameObject(value, data);
    }
  });
  return exprProps;
}
function hasExprPropertiesChanged(schema, prevSchema) {
  return Object.getOwnPropertyNames(schema).some(function(key) {
    var parts = /^(.*)(On|Expr|(?:c|C)lassName)(Raw)?$/.exec(key);
    if (parts) {
      return schema[key] !== prevSchema[key];
    }
    return false;
  });
}

// node_modules/amis-core/esm/factory.js
var import_react15 = __toESM(require_react());
var import_find9 = __toESM(require_find());

// node_modules/amis-core/esm/WithStore.js
var import_hoist_non_react_statics7 = __toESM(require_hoist_non_react_statics_cjs());
var import_react13 = __toESM(require_react());
init_moment();

// node_modules/amis-core/esm/WithRootStore.js
var import_react12 = __toESM(require_react());
var import_hoist_non_react_statics6 = __toESM(require_hoist_non_react_statics_cjs());
var RootStoreContext = import_react12.default.createContext(void 0);
function withRootStore(ComposedComponent) {
  var _a3;
  var result = (0, import_hoist_non_react_statics6.default)((_a3 = /** @class */
  function(_super) {
    __extends(class_1, _super);
    function class_1(props) {
      var _this = _super.call(this, props) || this;
      _this.refFn = _this.refFn.bind(_this);
      return _this;
    }
    class_1.prototype.getWrappedInstance = function() {
      return this.ref.control;
    };
    class_1.prototype.refFn = function(ref) {
      this.ref = ref;
    };
    class_1.prototype.render = function() {
      var rootStore = this.context;
      var injectedProps = {
        rootStore
      };
      return import_react12.default.createElement(ComposedComponent, __assign({}, this.props, injectedProps, { ref: this.refFn }));
    };
    return class_1;
  }(import_react12.default.Component), _a3.displayName = "WithRootStore(".concat(ComposedComponent.displayName || ComposedComponent.name, ")"), _a3.contextType = RootStoreContext, _a3.ComposedComponent = ComposedComponent, _a3), ComposedComponent);
  return result;
}

// node_modules/amis-core/esm/WithStore.js
function HocStoreFactory(renderer) {
  return function(Component3) {
    var StoreFactory = (
      /** @class */
      function(_super) {
        __extends(StoreFactory2, _super);
        function StoreFactory2(props, context) {
          var _this = _super.call(this, props) || this;
          var rootStore = context;
          _this.renderChild = _this.renderChild.bind(_this);
          _this.refFn = _this.refFn.bind(_this);
          var store2 = rootStore.addStore({
            id: guid(),
            path: _this.props.$path,
            storeType: renderer.storeType,
            parentId: _this.props.store ? _this.props.store.id : ""
          });
          store2.setTopStore(props.topStore);
          _this.store = store2;
          var extendsData = typeof renderer.extendsData === "function" ? renderer.extendsData(props) : renderer.extendsData;
          if (extendsData === false) {
            store2.initData(createObject2(_this.props.data ? _this.props.data.__super : null, __assign(__assign({}, _this.formatData(dataMapping(_this.props.defaultData, _this.props.data))), _this.formatData(_this.props.data))));
          } else if (_this.props.scope || _this.props.data && _this.props.data.__super) {
            if (_this.props.store && _this.props.data === _this.props.store.data) {
              store2.initData(createObject2(_this.props.store.data, __assign({}, _this.formatData(dataMapping(_this.props.defaultData, _this.props.data)))));
            } else {
              store2.initData(createObject2(_this.props.data.__super || _this.props.scope, __assign(__assign({}, _this.formatData(dataMapping(_this.props.defaultData, _this.props.data))), _this.formatData(_this.props.data))));
            }
          } else {
            store2.initData(__assign(__assign({}, _this.formatData(dataMapping(_this.props.defaultData, _this.props.data))), _this.formatData(_this.props.data)));
          }
          _this.state = {};
          var detectField = props.detectField, rest = __rest(props, ["detectField"]);
          var exprProps = {};
          if (!detectField || detectField === "data") {
            exprProps = getExprProperties(rest, store2.data);
            _this.state = __assign({}, exprProps);
            _this.unReaction = reaction(function() {
              return JSON.stringify(getExprProperties(_this.props, store2.data));
            }, function() {
              return _this.setState(__assign({}, getExprProperties(_this.props, store2.data)));
            });
          }
          return _this;
        }
        StoreFactory2.prototype.getWrappedInstance = function() {
          return this.ref;
        };
        StoreFactory2.prototype.refFn = function(ref) {
          this.ref = ref;
        };
        StoreFactory2.prototype.formatData = function(data) {
          if (Array.isArray(data)) {
            return {
              items: data
            };
          }
          return data;
        };
        StoreFactory2.prototype.componentDidUpdate = function(prevProps) {
          var _this = this;
          var _a3, _b3, _c, _d;
          var props = this.props;
          var store2 = this.store;
          if ((!props.detectField || props.detectField === "data") && hasExprPropertiesChanged(this.props, prevProps)) {
            var state = getExprProperties(this.props, store2.data);
            isObjectShallowModified(state, this.state) && this.setState(state);
            (_a3 = this.unReaction) === null || _a3 === void 0 ? void 0 : _a3.call(this);
            this.unReaction = reaction(function() {
              return JSON.stringify(getExprProperties(props, store2.data));
            }, function() {
              return _this.setState(__assign({}, getExprProperties(_this.props, store2.data)));
            });
          }
          var shouldSync = (_b3 = renderer.shouldSyncSuperStore) === null || _b3 === void 0 ? void 0 : _b3.call(renderer, store2, props, prevProps);
          if (shouldSync === false) {
            return;
          }
          var extendsData = typeof renderer.extendsData === "function" ? renderer.extendsData(props) : renderer.extendsData;
          if (extendsData === false) {
            if (shouldSync === true || prevProps.defaultData !== props.defaultData || (props.trackExpression ? tokenize(props.trackExpression, props.data) !== tokenize(props.trackExpression, prevProps.data) : isObjectShallowModified(prevProps.data, props.data) || //
            // 特殊处理 CRUD。
            // CRUD 中 toolbar 里面的 data 是空对象，但是 __super 会不一样
            props.data && prevProps.data && props.data.__super !== prevProps.data.__super)) {
              store2.initData(extendObject(props.data, __assign(__assign(__assign({}, store2.hasRemoteData ? store2.data : null), this.formatData(props.defaultData)), this.formatData(props.data))), props.updatePristineAfterStoreDataReInit === false);
            }
          } else if (shouldSync === true || (props.trackExpression ? tokenize(props.trackExpression, props.data) !== tokenize(props.trackExpression, prevProps.data) : isObjectShallowModified(prevProps.data, props.data) || props.syncSuperStore !== false && isSuperDataModified(props.data, prevProps.data, store2))) {
            if (props.store && props.store.data === props.data) {
              store2.initData(createObject2(props.store.data, props.syncSuperStore === false ? __assign({}, store2.data) : syncDataFromSuper(store2.data, props.store.data, prevProps.scope, store2, props.syncSuperStore === true)), props.updatePristineAfterStoreDataReInit === false);
            } else if (props.data && props.data.__super) {
              store2.initData(extendObject(
                props.data,
                // 有远程数据
                // 或者顶级 store
                store2.hasRemoteData || !store2.path.includes("/") ? __assign(__assign({}, store2.data), props.data) : (
                  // combo 不需要同步，如果要同步，在 Combo.tsx 里面已经实现了相关逻辑
                  // 目前主要的问题是，如果 combo 中表单项名字和 combo 本身的名字一样，会导致里面的值会被覆盖成数组
                  ((_c = props.store) === null || _c === void 0 ? void 0 : _c.storeType) === "ComboStore" ? void 0 : syncDataFromSuper(props.data, props.data.__super, prevProps.data.__super, store2, false)
                )
              ), props.updatePristineAfterStoreDataReInit === false);
            } else {
              store2.initData(createObject2(props.scope, props.data), props.updatePristineAfterStoreDataReInit === false);
            }
          } else if (!props.trackExpression && (!props.store || props.data !== props.store.data) && props.data && props.data.__super) {
            if (!prevProps.data || isObjectShallowModified(props.data.__super, prevProps.data.__super, false)) {
              store2.initData(createObject2(props.data.__super, __assign(__assign({}, props.data), store2.data)), props.updatePristineAfterStoreDataReInit === false || store2.storeType === "FormStore" && ((_d = prevProps.store) === null || _d === void 0 ? void 0 : _d.storeType) === "CRUDStore");
            }
          } else if (!props.trackExpression && props.scope && props.data === props.store.data && prevProps.data !== props.data) {
            store2.initData(createObject2(props.scope, __assign({}, store2.data)), props.updatePristineAfterStoreDataReInit === false);
          }
        };
        StoreFactory2.prototype.componentWillUnmount = function() {
          var _a3;
          var rootStore = this.context;
          var store2 = this.store;
          (_a3 = this.unReaction) === null || _a3 === void 0 ? void 0 : _a3.call(this);
          if (isAlive(store2)) {
            store2.setTopStore(null);
            rootStore.removeStore(store2);
          }
          delete this.store;
        };
        StoreFactory2.prototype.renderChild = function(region, node, subProps) {
          if (subProps === void 0) {
            subProps = {};
          }
          var render3 = this.props.render;
          return render3(region, node, __assign(__assign({ data: this.store.data, dataUpdatedAt: this.store.updatedAt }, subProps), { scope: this.store.data, store: this.store }));
        };
        StoreFactory2.prototype.render = function() {
          var _a3 = this.props;
          _a3.detectField;
          var rest = __rest(_a3, ["detectField"]);
          if (this.state.hidden || this.state.visible === false) {
            return null;
          }
          return import_react13.default.createElement(Component3, __assign({}, rest, this.state, { ref: this.refFn, data: this.store.data, dataUpdatedAt: this.store.updatedAt, store: this.store, scope: this.store.data, render: this.renderChild }));
        };
        StoreFactory2.displayName = "WithStore(".concat(Component3.displayName || Component3.name, ")");
        StoreFactory2.ComposedComponent = Component3;
        StoreFactory2.contextType = RootStoreContext;
        StoreFactory2 = __decorate([
          observer,
          __metadata("design:paramtypes", [Object, void 0])
        ], StoreFactory2);
        return StoreFactory2;
      }(import_react13.default.Component)
    );
    (0, import_hoist_non_react_statics7.default)(StoreFactory, Component3);
    return StoreFactory;
  };
}

// node_modules/amis-core/esm/renderers/Placeholder.js
var import_react14 = __toESM(require_react());
var Placeholder = (
  /** @class */
  function(_super) {
    __extends(Placeholder2, _super);
    function Placeholder2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    Placeholder2.prototype.componentDidMount = function() {
      console.warn("Please implement this renderer(".concat(this.props.type, ")"));
    };
    Placeholder2.prototype.render = function() {
      return null;
    };
    return Placeholder2;
  }(import_react14.default.Component)
);

// node_modules/amis-core/esm/factory.js
var _a;
var _b;
var renderers = [];
var renderersMap = {};
var schemaFilters = [];
var anonymousIndex = 1;
function addSchemaFilter(fn) {
  schemaFilters.push(fn);
}
function filterSchema(schema, render3, props) {
  return schemaFilters.reduce(function(schema2, filter2) {
    return filter2(schema2, render3, props);
  }, schema);
}
function Renderer(config) {
  return function(component) {
    var renderer = registerRenderer(__assign(__assign({}, config), { component }));
    return renderer.component;
  };
}
function registerRenderer(config) {
  if (!config.test && !config.type) {
    throw new TypeError("please set config.test or config.type");
  } else if (!config.component) {
    throw new TypeError("config.component is required");
  }
  if (typeof config.type === "string" && config.type) {
    config.type = config.type.toLowerCase();
    config.test = config.test || new RegExp("(^|/)".concat(string2regExp(config.type), "$"), "i");
  }
  config.weight = config.weight || 0;
  config.Renderer = config.component;
  config.name = config.name || config.type || "anonymous-".concat(anonymousIndex++);
  if (renderersMap[config.name]) {
    throw new Error('The renderer with name "'.concat(config.name, '" has already exists, please try another name!'));
  } else if (renderersMap.hasOwnProperty(config.name)) {
    var idx_1 = findIndex(renderers, function(item) {
      return item.name === config.name;
    });
    ~idx_1 && renderers.splice(idx_1, 0, config);
  }
  if (config.storeType && config.component) {
    config.component = HocStoreFactory({
      storeType: config.storeType,
      extendsData: config.storeExtendsData,
      shouldSyncSuperStore: config.shouldSyncSuperStore
    })(observer(config.component));
  }
  if (config.isolateScope) {
    config.component = HocScoped(config.component, config.type);
  }
  var idx = findIndex(renderers, function(item) {
    return config.weight < item.weight;
  });
  ~idx ? renderers.splice(idx, 0, config) : renderers.push(config);
  renderersMap[config.name] = config.component !== Placeholder;
  return config;
}
function unRegisterRenderer(config) {
  var name = typeof config === "string" ? config : config.name;
  var idx = renderers.findIndex(function(item) {
    return item.name === name;
  });
  ~idx && renderers.splice(idx, 1);
  delete renderersMap[name];
  cache2 = {};
}
function loadRenderer(schema, path) {
  return import_react15.default.createElement(
    "div",
    { className: "RuntimeError" },
    import_react15.default.createElement("p", null, "Error: 找不到对应的渲染器"),
    import_react15.default.createElement(
      "p",
      null,
      "Path: ",
      path
    ),
    import_react15.default.createElement(
      "pre",
      null,
      import_react15.default.createElement("code", null, JSON.stringify(schema, null, 2))
    )
  );
}
var defaultOptions = {
  session: "global",
  richTextToken: "",
  useMobileUI: true,
  enableAMISDebug: (_b = (_a = window.enableAMISDebug) !== null && _a !== void 0 ? _a : location.search.indexOf("amisDebug=1") !== -1) !== null && _b !== void 0 ? _b : false,
  loadRenderer,
  fetcher: function() {
    return Promise.reject("fetcher is required");
  },
  // 使用 WebSocket 来实时获取数据
  wsFetcher: function(ws, onMessage, onError) {
    if (ws) {
      var socket_1 = new WebSocket(ws.url);
      socket_1.onopen = function(event) {
        if (ws.body) {
          socket_1.send(JSON.stringify(ws.body));
        }
      };
      socket_1.onmessage = function(event) {
        var _a3;
        if (event.data) {
          var data = void 0;
          try {
            data = JSON.parse(event.data);
          } catch (error) {
          }
          if (typeof data !== "object") {
            var key = ws.responseKey || "data";
            data = (_a3 = {}, _a3[key] = event.data, _a3);
          }
          onMessage(data);
        }
      };
      socket_1.onerror = onError;
      return {
        close: socket_1.close
      };
    } else {
      return {
        close: function() {
        }
      };
    }
  },
  isCancel: function() {
    console.error("Please implement isCancel. see https://aisuda.bce.baidu.com/amis/zh-CN/start/getting-started#%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97");
    return false;
  },
  updateLocation: function() {
    console.error("Please implement updateLocation. see https://aisuda.bce.baidu.com/amis/zh-CN/start/getting-started#%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97");
  },
  jumpTo: function(to, action) {
    if (to === "goBack") {
      return window.history.back();
    }
    to = normalizeLink(to);
    if (action && action.actionType === "url") {
      action.blank === false ? window.location.href = to : window.open(to);
      return;
    }
    if (/^https?:\/\//.test(to)) {
      window.location.replace(to);
    } else {
      location.href = to;
    }
  },
  isCurrentUrl: function(to) {
    if (!to) {
      return false;
    }
    var link = normalizeLink(to);
    var location2 = window.location;
    var pathname = link;
    var search = "";
    var idx = link.indexOf("?");
    if (~idx) {
      pathname = link.substring(0, idx);
      search = link.substring(idx);
    }
    if (search) {
      if (pathname !== location2.pathname || !location2.search) {
        return false;
      }
      var query_1 = qsparse(search.substring(1));
      var currentQuery_1 = parseQuery(location2);
      return Object.keys(query_1).every(function(key) {
        return query_1[key] === currentQuery_1[key];
      });
    } else if (pathname === location2.pathname) {
      return true;
    }
    return false;
  },
  copy: function(contents) {
    console.error("copy contents", contents);
  },
  // 用于跟踪用户在界面中的各种操作
  tracker: function(eventTrack, props) {
  },
  rendererResolver: resolveRenderer,
  replaceTextIgnoreKeys: [
    "type",
    "name",
    "mode",
    "target",
    "reload",
    "persistData"
  ],
  /**
   * 过滤 html 标签，可用来添加 xss 保护逻辑
   */
  filterHtml: function(input) {
    return input;
  },
  isMobile
};
var stores2 = {};
function clearStoresCache(sessions) {
  if (sessions === void 0) {
    sessions = Object.keys(stores2);
  }
  if (!Array.isArray(sessions)) {
    sessions = [sessions];
  }
  sessions.forEach(function(key) {
    var store2 = stores2[key];
    delete stores2[key];
    store2 && destroy(store2);
  });
}
function updateEnv(options, session) {
  if (session === void 0) {
    session = "global";
  }
  options = __assign({}, options);
  if (options.fetcher) {
    options.fetcher = wrapFetcher(options.fetcher, options.tracker);
  }
  if (options.confirm) {
    options.confirm = promisify(options.confirm);
  }
  var store2 = stores2[options.session || session];
  if (!store2) {
    store2 = RendererStore.create({}, __assign(__assign({}, defaultOptions), options));
    stores2[options.session || session] = store2;
  } else {
    var env = getEnv(store2);
    Object.assign(env, options);
  }
}
function extendDefaultEnv(env) {
  Object.assign(defaultOptions, env);
}
var cache2 = {};
function resolveRenderer(path, schema) {
  var type = typeof (schema === null || schema === void 0 ? void 0 : schema.type) == "string" ? schema.type.toLowerCase() : "";
  if (type && cache2[type]) {
    return cache2[type];
  } else if (cache2[path]) {
    return cache2[path];
  } else if (path && path.length > 3072) {
    throw new Error("Path太长是不是死循环了？");
  }
  var renderer = null;
  renderers.some(function(item) {
    var matched = false;
    if (item.type && type) {
      matched = item.type === type;
      if (matched) {
        cache2[type] = item;
      }
    } else if (typeof item.test === "function") {
      matched = item.test(path, schema, resolveRenderer);
    } else if (item.test instanceof RegExp) {
      matched = item.test.test(path);
    }
    if (matched) {
      renderer = item;
    }
    return matched;
  });
  if (renderer !== null && renderer.component !== Placeholder && (renderer.type || renderer.test instanceof RegExp || typeof renderer.test === "function" && renderer.test.length < 2)) {
    cache2[path] = renderer;
  }
  return renderer;
}
function getRenderers() {
  return renderers.concat();
}
function getRendererByName(name) {
  return (0, import_find9.default)(renderers, function(item) {
    return item.name === name;
  });
}

// node_modules/amis-core/esm/components/LazyComponent.js
var import_react16 = __toESM(require_react());

// node_modules/react-intersection-observer/index.mjs
var React8 = __toESM(require_react(), 1);
var React22 = __toESM(require_react(), 1);
"use client";
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var observerMap = /* @__PURE__ */ new Map();
var RootIds = /* @__PURE__ */ new WeakMap();
var rootId = 0;
var unsupportedValue = void 0;
function getRootId(root) {
  if (!root)
    return "0";
  if (RootIds.has(root))
    return RootIds.get(root);
  rootId += 1;
  RootIds.set(root, rootId.toString());
  return RootIds.get(root);
}
function optionsToId(options) {
  return Object.keys(options).sort().filter(
    (key) => options[key] !== void 0
  ).map((key) => {
    return `${key}_${key === "root" ? getRootId(options.root) : options[key]}`;
  }).toString();
}
function createObserver(options) {
  let id = optionsToId(options);
  let instance = observerMap.get(id);
  if (!instance) {
    const elements = /* @__PURE__ */ new Map();
    let thresholds;
    const observer2 = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        var _a3;
        const inView = entry.isIntersecting && thresholds.some((threshold) => entry.intersectionRatio >= threshold);
        if (options.trackVisibility && typeof entry.isVisible === "undefined") {
          entry.isVisible = inView;
        }
        (_a3 = elements.get(entry.target)) == null ? void 0 : _a3.forEach((callback) => {
          callback(inView, entry);
        });
      });
    }, options);
    thresholds = observer2.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);
    instance = {
      id,
      observer: observer2,
      elements
    };
    observerMap.set(id, instance);
  }
  return instance;
}
function observe(element, callback, options = {}, fallbackInView = unsupportedValue) {
  if (typeof window.IntersectionObserver === "undefined" && fallbackInView !== void 0) {
    const bounds = element.getBoundingClientRect();
    callback(fallbackInView, {
      isIntersecting: fallbackInView,
      target: element,
      intersectionRatio: typeof options.threshold === "number" ? options.threshold : 0,
      time: 0,
      boundingClientRect: bounds,
      intersectionRect: bounds,
      rootBounds: bounds
    });
    return () => {
    };
  }
  const { id, observer: observer2, elements } = createObserver(options);
  let callbacks = elements.get(element) || [];
  if (!elements.has(element)) {
    elements.set(element, callbacks);
  }
  callbacks.push(callback);
  observer2.observe(element);
  return function unobserve() {
    callbacks.splice(callbacks.indexOf(callback), 1);
    if (callbacks.length === 0) {
      elements.delete(element);
      observer2.unobserve(element);
    }
    if (elements.size === 0) {
      observer2.disconnect();
      observerMap.delete(id);
    }
  };
}
function isPlainChildren(props) {
  return typeof props.children !== "function";
}
var InView = class extends React8.Component {
  constructor(props) {
    super(props);
    __publicField(this, "node", null);
    __publicField(this, "_unobserveCb", null);
    __publicField(this, "handleNode", (node) => {
      if (this.node) {
        this.unobserve();
        if (!node && !this.props.triggerOnce && !this.props.skip) {
          this.setState({ inView: !!this.props.initialInView, entry: void 0 });
        }
      }
      this.node = node ? node : null;
      this.observeNode();
    });
    __publicField(this, "handleChange", (inView, entry) => {
      if (inView && this.props.triggerOnce) {
        this.unobserve();
      }
      if (!isPlainChildren(this.props)) {
        this.setState({ inView, entry });
      }
      if (this.props.onChange) {
        this.props.onChange(inView, entry);
      }
    });
    this.state = {
      inView: !!props.initialInView,
      entry: void 0
    };
  }
  componentDidUpdate(prevProps) {
    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {
      this.unobserve();
      this.observeNode();
    }
  }
  componentWillUnmount() {
    this.unobserve();
    this.node = null;
  }
  observeNode() {
    if (!this.node || this.props.skip)
      return;
    const {
      threshold,
      root,
      rootMargin,
      trackVisibility,
      delay,
      fallbackInView
    } = this.props;
    this._unobserveCb = observe(
      this.node,
      this.handleChange,
      {
        threshold,
        root,
        rootMargin,
        // @ts-ignore
        trackVisibility,
        // @ts-ignore
        delay
      },
      fallbackInView
    );
  }
  unobserve() {
    if (this._unobserveCb) {
      this._unobserveCb();
      this._unobserveCb = null;
    }
  }
  render() {
    const { children } = this.props;
    if (typeof children === "function") {
      const { inView, entry } = this.state;
      return children({ inView, entry, ref: this.handleNode });
    }
    const {
      as,
      triggerOnce,
      threshold,
      root,
      rootMargin,
      onChange,
      skip,
      trackVisibility,
      delay,
      initialInView,
      fallbackInView,
      ...props
    } = this.props;
    return React8.createElement(
      as || "div",
      { ref: this.handleNode, ...props },
      children
    );
  }
};
function useInView({
  threshold,
  delay,
  trackVisibility,
  rootMargin,
  root,
  triggerOnce,
  skip,
  initialInView,
  fallbackInView,
  onChange
} = {}) {
  var _a3;
  const [ref, setRef] = React22.useState(null);
  const callback = React22.useRef();
  const [state, setState] = React22.useState({
    inView: !!initialInView,
    entry: void 0
  });
  callback.current = onChange;
  React22.useEffect(
    () => {
      if (skip || !ref)
        return;
      let unobserve;
      unobserve = observe(
        ref,
        (inView, entry) => {
          setState({
            inView,
            entry
          });
          if (callback.current)
            callback.current(inView, entry);
          if (entry.isIntersecting && triggerOnce && unobserve) {
            unobserve();
            unobserve = void 0;
          }
        },
        {
          root,
          rootMargin,
          threshold,
          // @ts-ignore
          trackVisibility,
          // @ts-ignore
          delay
        },
        fallbackInView
      );
      return () => {
        if (unobserve) {
          unobserve();
        }
      };
    },
    // We break the rule here, because we aren't including the actual `threshold` variable
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      // If the threshold is an array, convert it to a string, so it won't change between renders.
      // eslint-disable-next-line react-hooks/exhaustive-deps
      Array.isArray(threshold) ? threshold.toString() : threshold,
      ref,
      root,
      rootMargin,
      triggerOnce,
      skip,
      trackVisibility,
      fallbackInView,
      delay
    ]
  );
  const entryTarget = (_a3 = state.entry) == null ? void 0 : _a3.target;
  const previousEntryTarget = React22.useRef();
  if (!ref && entryTarget && !triggerOnce && !skip && previousEntryTarget.current !== entryTarget) {
    previousEntryTarget.current = entryTarget;
    setState({
      inView: !!initialInView,
      entry: void 0
    });
  }
  const result = [setRef, state.inView, state.entry];
  result.ref = result[0];
  result.inView = result[1];
  result.entry = result[2];
  return result;
}

// node_modules/amis-core/esm/components/LazyComponent.js
var LazyComponent = (
  /** @class */
  function(_super) {
    __extends(LazyComponent2, _super);
    function LazyComponent2(props) {
      var _this = _super.call(this, props) || this;
      _this.mounted = false;
      _this.handleVisibleChange = _this.handleVisibleChange.bind(_this);
      _this.mounted = true;
      _this.state = {
        visible: false,
        component: props.component
      };
      return _this;
    }
    LazyComponent2.prototype.componentDidMount = function() {
      if (typeof jest !== "undefined") {
        this.handleVisibleChange(true);
      }
    };
    LazyComponent2.prototype.componentWillUnmount = function() {
      this.mounted = false;
    };
    LazyComponent2.prototype.handleVisibleChange = function(visible, entry) {
      var _this = this;
      this.setState({
        visible
      });
      if (!visible || this.state.component || !this.props.getComponent) {
        return;
      }
      this.props.getComponent().then(function(component) {
        return _this.mounted && typeof component === "function" && _this.setState({
          component
        });
      }).catch(function(reason) {
        return _this.mounted && _this.setState({
          component: function() {
            return import_react16.default.createElement("div", { className: "alert alert-danger" }, String(reason));
          }
        });
      });
    };
    LazyComponent2.prototype.render = function() {
      var _a3 = this.props, placeholder = _a3.placeholder, unMountOnHidden = _a3.unMountOnHidden, childProps = _a3.childProps, partialVisibility = _a3.partialVisibility, children = _a3.children, rest = __rest(_a3, ["placeholder", "unMountOnHidden", "childProps", "partialVisibility", "children"]);
      var _b3 = this.state, visible = _b3.visible, Component3 = _b3.component;
      if (unMountOnHidden) {
        return import_react16.default.createElement(InView, { onChange: this.handleVisibleChange, threshold: partialVisibility ? 0 : 1 }, function(_a4) {
          var ref = _a4.ref;
          return import_react16.default.createElement("div", { ref, className: "visibility-sensor ".concat(visible ? "in" : "") }, Component3 && visible ? import_react16.default.createElement(Component3, __assign({}, rest, childProps)) : children && visible ? children : placeholder);
        });
      }
      if (!visible) {
        return import_react16.default.createElement(InView, { onChange: this.handleVisibleChange, threshold: partialVisibility ? 0 : 1 }, function(_a4) {
          var ref = _a4.ref;
          return import_react16.default.createElement("div", { ref, className: "visibility-sensor" }, placeholder);
        });
      } else if (Component3) {
        return import_react16.default.createElement(Component3, __assign({}, rest, childProps));
      } else if (children) {
        return children;
      }
      return import_react16.default.createElement("div", null, placeholder);
    };
    LazyComponent2.defaultProps = {
      placeholder: import_react16.default.createElement("span", null, "Loading..."),
      unMountOnHidden: false,
      partialVisibility: true
    };
    return LazyComponent2;
  }(import_react16.default.Component)
);

// node_modules/amis-core/esm/renderers/Form.js
var import_react17 = __toESM(require_react());
var import_debounce7 = __toESM(require_debounce());
var import_flatten2 = __toESM(require_flatten());
var import_find10 = __toESM(require_find());
init_moment();
var import_chunk6 = __toESM(require_chunk());
var import_react_dom8 = __toESM(require_react_dom());
var import_isObject7 = __toESM(require_isObject());
var import_isString8 = __toESM(require_isString());
var import_isBoolean7 = __toESM(require_isBoolean());
var import_isPlainObject23 = __toESM(require_isPlainObject());
var import_isEqual15 = __toESM(require_isEqual());
var import_cloneDeep7 = __toESM(require_cloneDeep());
var import_mapValues6 = __toESM(require_mapValues());
var import_camelCase6 = __toESM(require_camelCase());
var import_map6 = __toESM(require_map());
var import_isEmpty7 = __toESM(require_isEmpty());
var import_kebabCase6 = __toESM(require_kebabCase());
var import_hoist_non_react_statics8 = __toESM(require_hoist_non_react_statics_cjs());
var Form = (
  /** @class */
  function(_super) {
    __extends(Form2, _super);
    function Form2(props) {
      var _this = _super.call(this, props) || this;
      _this.hooks = {};
      _this.toDispose = [];
      _this.shouldLoadInitApi = false;
      _this.lazyEmitChange = (0, import_debounce7.default)(_this.emitChange.bind(_this), 250, {
        trailing: true,
        leading: false
      });
      _this.onInit = _this.onInit.bind(_this);
      _this.handleAction = _this.handleAction.bind(_this);
      _this.handleQuery = _this.handleQuery.bind(_this);
      _this.handleChange = _this.handleChange.bind(_this);
      _this.handleDialogConfirm = _this.handleDialogConfirm.bind(_this);
      _this.handleDialogClose = _this.handleDialogClose.bind(_this);
      _this.handleDrawerConfirm = _this.handleDrawerConfirm.bind(_this);
      _this.handleDrawerClose = _this.handleDrawerClose.bind(_this);
      _this.handleFormSubmit = _this.handleFormSubmit.bind(_this);
      _this.validate = _this.validate.bind(_this);
      _this.submit = _this.submit.bind(_this);
      _this.addHook = _this.addHook.bind(_this);
      _this.removeHook = _this.removeHook.bind(_this);
      _this.emitChange = _this.emitChange.bind(_this);
      _this.handleBulkChange = _this.handleBulkChange.bind(_this);
      _this.renderFormItems = _this.renderFormItems.bind(_this);
      _this.reload = _this.reload.bind(_this);
      _this.silentReload = _this.silentReload.bind(_this);
      _this.initInterval = _this.initInterval.bind(_this);
      _this.dispatchInited = _this.dispatchInited.bind(_this);
      _this.blockRouting = _this.blockRouting.bind(_this);
      _this.beforePageUnload = _this.beforePageUnload.bind(_this);
      _this.formItemDispatchEvent = _this.formItemDispatchEvent.bind(_this);
      var store2 = props.store, canAccessSuperData = props.canAccessSuperData, persistData = props.persistData, simpleMode = props.simpleMode;
      store2.setCanAccessSuperData(canAccessSuperData !== false);
      store2.setPersistData(persistData);
      if (simpleMode) {
        store2.setInited(true);
      }
      if (store2 && store2.parentStore && store2.parentStore.storeType === "ComboStore") {
        var combo = store2.parentStore;
        combo.addForm(store2);
        combo.forms.forEach(function(form) {
          return form.items.forEach(function(item) {
            return item.unique && item.syncOptions(void 0, form.data);
          });
        });
      }
      _this.toDispose.push(reaction(function() {
        return store2.initedAt;
      }, function() {
        store2.inited && _this.lazyEmitChange(!!_this.props.submitOnChange, true);
      }));
      return _this;
    }
    Form2.prototype.componentDidMount = function() {
      var _this = this;
      var _a3, _b3;
      var _c = this.props, initApi = _c.initApi, initFetch = _c.initFetch, initFetchOn = _c.initFetchOn, initAsyncApi = _c.initAsyncApi, initFinishedField = _c.initFinishedField, initCheckInterval = _c.initCheckInterval, store2 = _c.store, _d = _c.messages, fetchSuccess = _d.fetchSuccess, fetchFailed = _d.fetchFailed, onValidate = _c.onValidate, onValidChange = _c.onValidChange, promptPageLeave = _c.promptPageLeave, env = _c.env;
      var rules = this.getNormalizedRules();
      this.mounted = true;
      if (onValidate) {
        var finalValidate_1 = promisify(onValidate);
        this.toDispose.push(this.addHook(function() {
          return __awaiter(_this, void 0, void 0, function() {
            var result;
            return __generator(this, function(_a4) {
              switch (_a4.label) {
                case 0:
                  return [4, finalValidate_1(store2.data, store2)];
                case 1:
                  result = _a4.sent();
                  if (result && isObject(result)) {
                    Object.keys(result).forEach(function(key) {
                      var msg = result[key];
                      var items = store2.getItemsByPath(key);
                      if (!Array.isArray(items) || !items.length) {
                        return;
                      }
                      items.forEach(function(item) {
                        return item.clearError();
                      });
                      if (msg) {
                        msg = Array.isArray(msg) ? msg : [msg];
                        items.forEach(function(item) {
                          return item.addError(msg);
                        });
                      }
                      delete result[key];
                    });
                    isEmpty2(result) ? store2.clearRestError() : store2.setRestError(Object.keys(result).map(function(key) {
                      return result[key];
                    }));
                  }
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        }));
      }
      if (onValidChange) {
        this.toDispose.push(reaction(function() {
          return store2.valid;
        }, function(valid) {
          return onValidChange(valid, _this.props);
        }));
      }
      if (rules.length) {
        this.toDispose.push(this.addHook(function() {
          if (!store2.valid) {
            return;
          }
          rules.forEach(function(item) {
            return !evalExpression(item.rule, store2.data) && store2.addRestError(item.message, item.name);
          });
        }));
      }
      if (isEffectiveApi(initApi, store2.data, initFetch, initFetchOn)) {
        store2.fetchInitData(initApi, store2.data, {
          successMessage: fetchSuccess,
          errorMessage: fetchFailed,
          onSuccess: function(json, data) {
            store2.setValues(data);
            if (!isEffectiveApi(initAsyncApi, store2.data) || store2.data[initFinishedField || "finished"]) {
              return;
            }
            return until(function() {
              return store2.checkRemote(initAsyncApi, store2.data);
            }, function(ret) {
              return ret && ret[initFinishedField || "finished"];
            }, function(cancel) {
              return _this.asyncCancel = cancel;
            }, initCheckInterval);
          }
        }).then(this.dispatchInited).then(this.initInterval).then(this.onInit);
      } else {
        setTimeout(this.onInit.bind(this), 4);
      }
      if (promptPageLeave) {
        window.addEventListener("beforeunload", this.beforePageUnload);
        this.unBlockRouting = (_b3 = (_a3 = env.blockRouting) === null || _a3 === void 0 ? void 0 : _a3.call(env, this.blockRouting)) !== null && _b3 !== void 0 ? _b3 : void 0;
      }
    };
    Form2.prototype.componentDidUpdate = function(prevProps) {
      var props = this.props;
      var store2 = props.store;
      if (isApiOutdated(prevProps.initApi, props.initApi, prevProps.data, props.data)) {
        var fetchSuccess = props.fetchSuccess, fetchFailed = props.fetchFailed;
        store2[store2.hasRemoteData ? "fetchData" : "fetchInitData"](props.initApi, store2.data, {
          successMessage: fetchSuccess,
          errorMessage: fetchFailed
        }).then(this.dispatchInited).then(this.initInterval);
      }
    };
    Form2.prototype.componentWillUnmount = function() {
      var _a3;
      this.mounted = false;
      clearTimeout(this.timer);
      this.lazyEmitChange.cancel();
      this.asyncCancel && this.asyncCancel();
      this.toDispose.forEach(function(fn) {
        return fn();
      });
      this.toDispose = [];
      window.removeEventListener("beforeunload", this.beforePageUnload);
      (_a3 = this.unBlockRouting) === null || _a3 === void 0 ? void 0 : _a3.call(this);
    };
    Form2.prototype.getNormalizedRules = function() {
      var _a3 = this.props, rules = _a3.rules, __ = _a3.translate;
      if (!Array.isArray(rules) || rules.length < 1) {
        return [];
      }
      return rules.map(function(item) {
        return __assign(__assign({}, item), !item.message || typeof item.message !== "string" ? { message: __("Form.rules.message") } : {});
      }).filter(function(item) {
        return item.rule && typeof item.rule === "string";
      });
    };
    Form2.prototype.dispatchInited = function(value) {
      var _a3;
      return __awaiter(this, void 0, void 0, function() {
        var _b3, data, store2, dispatchEvent2;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              _b3 = this.props, data = _b3.data, store2 = _b3.store, dispatchEvent2 = _b3.dispatchEvent;
              if (store2.fetching) {
                return [2, value];
              }
              return [4, dispatchEvent2("inited", createObject2(data, __assign(__assign({}, value === null || value === void 0 ? void 0 : value.data), { responseData: (_a3 = value === null || value === void 0 ? void 0 : value.data) !== null && _a3 !== void 0 ? _a3 : {}, responseStatus: store2.error ? 1 : 0, responseMsg: store2.msg })))];
            case 1:
              _c.sent();
              return [2, value];
          }
        });
      });
    };
    Form2.prototype.blockRouting = function() {
      var store2 = this.props.store;
      var _a3 = this.props, promptPageLeaveMessage = _a3.promptPageLeaveMessage, promptPageLeave = _a3.promptPageLeave;
      if (promptPageLeave && store2.modified) {
        return promptPageLeaveMessage || "新的修改没有保存，确认要离开？";
      }
    };
    Form2.prototype.beforePageUnload = function(e) {
      var blocked = this.blockRouting();
      if (blocked) {
        e.preventDefault();
        e.returnValue = "";
      }
    };
    Form2.prototype.onInit = function() {
      return __awaiter(this, void 0, void 0, function() {
        var _a3, onInit, store2, persistData, submitOnInit, data, initedAt, hooks;
        return __generator(this, function(_b3) {
          switch (_b3.label) {
            case 0:
              _a3 = this.props, onInit = _a3.onInit, store2 = _a3.store, persistData = _a3.persistData, submitOnInit = _a3.submitOnInit, _a3.dispatchEvent;
              if (!isAlive(store2)) {
                return [
                  2
                  /*return*/
                ];
              }
              data = cloneObject(store2.data);
              initedAt = store2.initedAt;
              store2.setInited(true);
              hooks = this.hooks["init"] || [];
              return [4, Promise.all(hooks.map(function(hook) {
                return hook(data);
              }))];
            case 1:
              _b3.sent();
              if (!isAlive(store2)) {
                return [
                  2
                  /*return*/
                ];
              }
              if (store2.initedAt !== initedAt) {
                data = __assign(__assign({}, data), store2.data);
              }
              if (persistData) {
                store2.getLocalPersistData();
                data = cloneObject(store2.data);
              }
              onInit && onInit(data, this.props);
              submitOnInit && this.handleAction(void 0, {
                type: "submit"
              }, store2.data);
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    Form2.prototype.reload = function(subPath, query, ctx, silent) {
      return __awaiter(this, void 0, void 0, function() {
        var _a3, store2, initApi, initAsyncApi, initFinishedField, _b3, fetchSuccess, fetchFailed, result;
        var _c;
        var _this = this;
        return __generator(this, function(_d) {
          switch (_d.label) {
            case 0:
              if (query) {
                return [2, this.receive(query)];
              }
              _a3 = this.props, store2 = _a3.store, initApi = _a3.initApi, initAsyncApi = _a3.initAsyncApi, initFinishedField = _a3.initFinishedField, _b3 = _a3.messages, fetchSuccess = _b3.fetchSuccess, fetchFailed = _b3.fetchFailed;
              isEffectiveApi(initAsyncApi, store2.data) && store2.updateData((_c = {}, _c[initFinishedField || "finished"] = false, _c));
              if (!isEffectiveApi(initApi, store2.data))
                return [3, 3];
              return [4, store2.fetchInitData(initApi, store2.data, {
                successMessage: fetchSuccess,
                errorMessage: fetchFailed,
                silent,
                onSuccess: function(json, data) {
                  store2.setValues(data);
                  if (!isEffectiveApi(initAsyncApi, store2.data) || store2.data[initFinishedField || "finished"]) {
                    return;
                  }
                  return until(function() {
                    return store2.checkRemote(initAsyncApi, store2.data);
                  }, function(ret) {
                    return ret && ret[initFinishedField || "finished"];
                  }, function(cancel) {
                    return _this.asyncCancel = cancel;
                  });
                }
              })];
            case 1:
              result = _d.sent();
              return [4, this.dispatchInited(result)];
            case 2:
              _d.sent();
              if (result === null || result === void 0 ? void 0 : result.ok) {
                this.initInterval(result);
                store2.reset(void 0, false);
              }
              return [3, 4];
            case 3:
              store2.reset(void 0, false);
              _d.label = 4;
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    Form2.prototype.receive = function(values2, name, replace) {
      var store2 = this.props.store;
      store2.updateData(values2, void 0, replace);
      return this.reload();
    };
    Form2.prototype.silentReload = function(target, query) {
      this.reload(target, query, void 0, true);
    };
    Form2.prototype.initInterval = function(value) {
      var _a3 = this.props, interval = _a3.interval, silentPolling = _a3.silentPolling, stopAutoRefreshWhen = _a3.stopAutoRefreshWhen, data = _a3.data;
      clearTimeout(this.timer);
      (value === null || value === void 0 ? void 0 : value.ok) && interval && this.mounted && (!stopAutoRefreshWhen || !evalExpression(stopAutoRefreshWhen, data)) && (this.timer = setTimeout(silentPolling ? this.silentReload : this.reload, Math.max(interval, 1e3)));
      return value;
    };
    Form2.prototype.isValidated = function() {
      return this.props.store.validated;
    };
    Form2.prototype.validate = function(forceValidate, throwErrors, toastErrors) {
      if (throwErrors === void 0) {
        throwErrors = false;
      }
      if (toastErrors === void 0) {
        toastErrors = true;
      }
      return __awaiter(this, void 0, void 0, function() {
        var _a3, store2, dispatchEvent2, data, messages, __, result;
        return __generator(this, function(_b3) {
          switch (_b3.label) {
            case 0:
              _a3 = this.props, store2 = _a3.store, dispatchEvent2 = _a3.dispatchEvent, data = _a3.data, messages = _a3.messages, __ = _a3.translate;
              this.flush();
              return [4, store2.validate(this.hooks["validate"] || [], forceValidate, throwErrors, toastErrors === false ? "" : typeof (messages === null || messages === void 0 ? void 0 : messages.validateFailed) === "string" ? __(filter(messages.validateFailed, store2.data)) : void 0)];
            case 1:
              result = _b3.sent();
              dispatchEvent2(result ? "validateSucc" : "validateError", data);
              return [2, result];
          }
        });
      });
    };
    Form2.prototype.setErrors = function(errors, tag) {
      if (tag === void 0) {
        tag = "remote";
      }
      var store2 = this.props.store;
      store2.setFormItemErrors(errors, tag);
    };
    Form2.prototype.clearErrors = function() {
      var store2 = this.props.store;
      return store2.clearErrors();
    };
    Form2.prototype.getValues = function() {
      var store2 = this.props.store;
      this.flush();
      return store2.data;
    };
    Form2.prototype.setValues = function(value, replace) {
      var store2 = this.props.store;
      this.flush();
      store2.setValues(value, void 0, replace);
    };
    Form2.prototype.submit = function(fn, throwErrors) {
      if (throwErrors === void 0) {
        throwErrors = false;
      }
      var _a3 = this.props, store2 = _a3.store, messages = _a3.messages, __ = _a3.translate, dispatchEvent2 = _a3.dispatchEvent, data = _a3.data;
      this.flush();
      var validateErrCb = function() {
        return dispatchEvent2("validateError", data);
      };
      return store2.submit(fn, this.hooks["validate"] || [], typeof (messages === null || messages === void 0 ? void 0 : messages.validateFailed) === "string" ? __(filter(messages.validateFailed, store2.data)) : void 0, validateErrCb, throwErrors);
    };
    Form2.prototype.flush = function() {
      var hooks = this.hooks["flush"] || [];
      hooks.forEach(function(fn) {
        return fn();
      });
      this.lazyEmitChange.flush();
    };
    Form2.prototype.reset = function() {
      var _a3 = this.props, store2 = _a3.store, onReset = _a3.onReset;
      store2.reset(onReset);
    };
    Form2.prototype.addHook = function(fn, type) {
      var _this = this;
      if (type === void 0) {
        type = "validate";
      }
      this.hooks[type] = this.hooks[type] || [];
      this.hooks[type].push(type === "flush" ? fn : promisify(fn));
      return function() {
        _this.removeHook(fn, type);
        fn = noop;
      };
    };
    Form2.prototype.removeHook = function(fn, type) {
      if (type === void 0) {
        type = "validate";
      }
      var hooks = this.hooks[type];
      if (!hooks) {
        return;
      }
      for (var i = 0, len = hooks.length; i < len; i++) {
        var hook = hooks[i];
        if (hook === fn || hook.raw === fn) {
          hooks.splice(i, 1);
          len--;
          i--;
        }
      }
    };
    Form2.prototype.handleChange = function(value, name, submit, changePristine) {
      if (changePristine === void 0) {
        changePristine = false;
      }
      var _a3 = this.props, store2 = _a3.store, formLazyChange = _a3.formLazyChange, persistDataKeys = _a3.persistDataKeys;
      if (typeof name !== "string") {
        return;
      }
      store2.changeValue(name, value, changePristine);
      if (!changePristine) {
        (formLazyChange === false ? this.emitChange : this.lazyEmitChange)(submit);
      }
      if (store2.persistData && store2.inited) {
        store2.setLocalPersistData(persistDataKeys);
      }
    };
    Form2.prototype.formItemDispatchEvent = function(type, data) {
      var dispatchEvent2 = this.props.dispatchEvent;
      return dispatchEvent2(type, data);
    };
    Form2.prototype.emitChange = function(submit, skipIfNothingChanges) {
      if (skipIfNothingChanges === void 0) {
        skipIfNothingChanges = false;
      }
      return __awaiter(this, void 0, void 0, function() {
        var _a3, onChange, store2, submitOnChange, dispatchEvent2, data, diff, changeProps, dispatcher;
        return __generator(this, function(_b3) {
          switch (_b3.label) {
            case 0:
              _a3 = this.props, onChange = _a3.onChange, store2 = _a3.store, submitOnChange = _a3.submitOnChange, dispatchEvent2 = _a3.dispatchEvent, data = _a3.data;
              if (!isAlive(store2)) {
                return [
                  2
                  /*return*/
                ];
              }
              diff = difference(store2.data, store2.pristine);
              if (skipIfNothingChanges && !Object.keys(diff).length) {
                return [
                  2
                  /*return*/
                ];
              }
              changeProps = [store2.data, diff, this.props];
              return [4, dispatchEvent2("change", createObject2(data, store2.data))];
            case 1:
              dispatcher = _b3.sent();
              if (!(dispatcher === null || dispatcher === void 0 ? void 0 : dispatcher.prevented)) {
                onChange && onChange.apply(null, changeProps);
              }
              store2.clearRestError();
              (submit || submitOnChange && store2.inited) && this.handleAction(void 0, {
                type: "submit"
              }, store2.data);
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    Form2.prototype.handleBulkChange = function(values2, submit) {
      var _a3 = this.props;
      _a3.onChange;
      var store2 = _a3.store, formLazyChange = _a3.formLazyChange;
      store2.setValues(values2);
      (formLazyChange === false ? this.emitChange : this.lazyEmitChange)(submit);
    };
    Form2.prototype.handleFormSubmit = function(e) {
      var _a3 = this.props, preventEnterSubmit = _a3.preventEnterSubmit, onActionSensor = _a3.onActionSensor, close = _a3.close;
      e.preventDefault();
      if (preventEnterSubmit) {
        return false;
      }
      var sensor = this.handleAction(e, {
        type: "submit",
        close
      }, this.props.store.data);
      onActionSensor === null || onActionSensor === void 0 ? void 0 : onActionSensor(sensor);
      return sensor;
    };
    Form2.prototype.handleReset = function(action) {
      var onReset = this.props.onReset;
      return function(data) {
        onReset && onReset(data, action);
      };
    };
    Form2.prototype.handleAction = function(e, action, data, throwErrors, delegate) {
      var _a3, _b3;
      if (throwErrors === void 0) {
        throwErrors = false;
      }
      return __awaiter(this, void 0, void 0, function() {
        var _c, store2, onSubmit, api, asyncApi, finishedField, checkInterval, _d, saveSuccess, saveFailed, resetAfterSubmit, clearAfterSubmit, onAction, onSaved, onReset, onFinished, onFailed, redirect, reload, target, env, onChange, clearPersistDataAfterSubmit, trimValues, dispatchEvent2, __, fields, validationRes, dispatcher, _e, dispatchEvent_1, onEvent, submitEvent, dispatcher, successMsg, failMsg;
        var _this = this;
        return __generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              _c = this.props, store2 = _c.store, onSubmit = _c.onSubmit, api = _c.api, asyncApi = _c.asyncApi, finishedField = _c.finishedField, checkInterval = _c.checkInterval, _d = _c.messages, saveSuccess = _d.saveSuccess, saveFailed = _d.saveFailed, resetAfterSubmit = _c.resetAfterSubmit, clearAfterSubmit = _c.clearAfterSubmit, onAction = _c.onAction, onSaved = _c.onSaved, onReset = _c.onReset, onFinished = _c.onFinished, onFailed = _c.onFailed, redirect = _c.redirect, reload = _c.reload, target = _c.target, env = _c.env, onChange = _c.onChange, clearPersistDataAfterSubmit = _c.clearPersistDataAfterSubmit, trimValues = _c.trimValues, dispatchEvent2 = _c.dispatchEvent, __ = _c.translate;
              this.flush();
              if (trimValues) {
                store2.trimValues();
              }
              if (data === this.props.data) {
                data = store2.data;
              }
              if (!(Array.isArray(action.required) && action.required.length))
                return [3, 4];
              store2.clearErrors();
              fields = action.required.map(function(item) {
                return {
                  name: item,
                  rules: { isRequired: true }
                };
              });
              return [4, store2.validateFields(fields)];
            case 1:
              validationRes = _f.sent();
              if (!!validationRes)
                return [3, 3];
              return [4, dispatchEvent2("validateError", this.props.data)];
            case 2:
              dispatcher = _f.sent();
              if (!(dispatcher === null || dispatcher === void 0 ? void 0 : dispatcher.prevented)) {
                env.notify("error", __("Form.validateFailed"));
              }
              return [2, Promise.reject(__("Form.validateFailed"))];
            case 3:
              store2.clearErrors();
              _f.label = 4;
            case 4:
              if (!(action.type === "submit" || action.actionType === "submit" || action.actionType === "confirm" || action.actionType === "reset-and-submit" || action.actionType === "clear-and-submit"))
                return [3, 6];
              _e = this.props, dispatchEvent_1 = _e.dispatchEvent, onEvent = _e.onEvent;
              submitEvent = (_b3 = (_a3 = onEvent === null || onEvent === void 0 ? void 0 : onEvent.submit) === null || _a3 === void 0 ? void 0 : _a3.actions) === null || _b3 === void 0 ? void 0 : _b3.length;
              return [4, dispatchEvent_1("submit", this.props.data)];
            case 5:
              dispatcher = _f.sent();
              if ((dispatcher === null || dispatcher === void 0 ? void 0 : dispatcher.prevented) || submitEvent) {
                return [
                  2
                  /*return*/
                ];
              }
              store2.setCurrentAction(action);
              if (action.actionType === "reset-and-submit") {
                store2.reset(this.handleReset(action));
              } else if (action.actionType === "clear-and-submit") {
                store2.clear(this.handleReset(action));
              }
              return [2, this.submit(function(values2) {
                var _a4;
                if (onSubmit && onSubmit(values2, action) === false) {
                  return Promise.resolve(false);
                }
                dispatchEvent_1("validateSucc", _this.props.data);
                if (target) {
                  _this.submitToTarget(filterTarget(target, values2), values2);
                  clearPersistDataAfterSubmit && store2.clearLocalPersistData();
                  dispatchEvent_1("submitSucc", createObject2(_this.props.data, values2));
                } else if (action.actionType === "reload") {
                  action.target && _this.reloadTarget(filterTarget(action.target, values2), values2);
                } else if (action.actionType === "dialog") {
                  store2.openDialog(data, void 0, action.callback, delegate || _this.context);
                } else if (action.actionType === "drawer") {
                  store2.openDrawer(data);
                } else if (isEffectiveApi(action.api || api, values2)) {
                  var finnalAsyncApi_1 = action.asyncApi || asyncApi;
                  isEffectiveApi(finnalAsyncApi_1, store2.data) && store2.updateData((_a4 = {}, _a4[finishedField || "finished"] = false, _a4));
                  return store2.saveRemote(action.api || api, values2, {
                    successMessage: typeof saveSuccess === "string" ? filter(saveSuccess, store2.data) : void 0,
                    errorMessage: typeof saveFailed === "string" ? filter(saveFailed, store2.data) : void 0,
                    onSuccess: function(result) {
                      return __awaiter(_this, void 0, void 0, function() {
                        var dispatcher2, cbResult;
                        var _this2 = this;
                        return __generator(this, function(_a5) {
                          switch (_a5.label) {
                            case 0:
                              clearPersistDataAfterSubmit && store2.clearLocalPersistData();
                              return [4, dispatchEvent_1("submitSucc", createObject2(this.props.data, { result }))];
                            case 1:
                              dispatcher2 = _a5.sent();
                              if (!isEffectiveApi(finnalAsyncApi_1, store2.data) || store2.data[finishedField || "finished"]) {
                                return [2, {
                                  cbResult: null,
                                  dispatcher: dispatcher2
                                }];
                              }
                              cbResult = until(function() {
                                return store2.checkRemote(finnalAsyncApi_1, store2.data);
                              }, function(ret) {
                                return ret && ret[finishedField || "finished"];
                              }, function(cancel) {
                                return _this2.asyncCancel = cancel;
                              }, checkInterval).then(function(value) {
                                dispatchEvent_1("asyncApiFinished", store2.data);
                              });
                              return [2, {
                                cbResult,
                                dispatcher: dispatcher2
                              }];
                          }
                        });
                      });
                    },
                    onFailed: function(result) {
                      return __awaiter(_this, void 0, void 0, function() {
                        var dispatcher2;
                        return __generator(this, function(_a5) {
                          switch (_a5.label) {
                            case 0:
                              return [4, dispatchEvent_1("submitFail", createObject2(this.props.data, { error: result }))];
                            case 1:
                              dispatcher2 = _a5.sent();
                              return [2, {
                                dispatcher: dispatcher2
                              }];
                          }
                        });
                      });
                    }
                  }).then(function(response) {
                    return __awaiter(_this, void 0, void 0, function() {
                      var feedback, confirmed;
                      return __generator(this, function(_a5) {
                        switch (_a5.label) {
                          case 0:
                            onSaved && onSaved(values2, response);
                            feedback = action.feedback || this.props.feedback;
                            if (!(feedback && isVisible(feedback, store2.data)))
                              return [3, 2];
                            return [4, this.openFeedback(feedback, store2.data)];
                          case 1:
                            confirmed = _a5.sent();
                            if (feedback.skipRestOnCancel && !confirmed) {
                              throw new SkipOperation();
                            } else if (feedback.skipRestOnConfirm && confirmed) {
                              throw new SkipOperation();
                            }
                            _a5.label = 2;
                          case 2:
                            return [2, injectObjectChain(store2.data, {
                              __payload: values2,
                              __response: response
                            })];
                        }
                      });
                    });
                  });
                } else {
                  clearPersistDataAfterSubmit && store2.clearLocalPersistData();
                  dispatchEvent_1("submitSucc", createObject2(_this.props.data, values2));
                }
                return Promise.resolve(null);
              }, throwErrors).then(function(values2) {
                if (values2 === false) {
                  return store2.data;
                }
                if (onFinished && onFinished(values2, action) === false) {
                  return values2;
                }
                resetAfterSubmit && store2.reset(_this.handleReset(action));
                clearAfterSubmit && store2.clear(_this.handleReset(action));
                clearPersistDataAfterSubmit && store2.clearLocalPersistData();
                if (action.redirect || redirect) {
                  var finalRedirect = filter(action.redirect || redirect, store2.data);
                  finalRedirect && env.jumpTo(finalRedirect, action, store2.data);
                } else if (action.reload || reload) {
                  _this.reloadTarget(filterTarget(action.reload || reload, store2.data), store2.data);
                }
                action.close && _this.closeTarget(action.close);
                return values2;
              }).catch(function(reason) {
                onFailed && onFailed(reason, store2.errors);
                if (throwErrors) {
                  throw reason;
                }
              })];
            case 6:
              if (action.type === "reset" || action.actionType === "reset") {
                store2.setCurrentAction(action);
                store2.reset(onReset);
              } else if (action.actionType === "clear") {
                store2.setCurrentAction(action);
                store2.clear(onReset);
              } else if (action.actionType === "validate") {
                store2.setCurrentAction(action);
                return [2, this.validate(true, throwErrors)];
              } else if (action.actionType === "dialog") {
                store2.setCurrentAction(action);
                store2.openDialog(data, void 0, action.callback, delegate || this.context);
              } else if (action.actionType === "drawer") {
                store2.setCurrentAction(action);
                store2.openDrawer(data);
              } else if (action.actionType === "ajax") {
                store2.setCurrentAction(action);
                if (!isEffectiveApi(action.api)) {
                  return [2, env.alert(__("当 actionType 为 ajax 时，请设置 api 属性"))];
                }
                successMsg = action.messages && action.messages.success || saveSuccess;
                failMsg = action.messages && action.messages.failed || saveFailed;
                return [2, store2.saveRemote(action.api, data, {
                  successMessage: __(typeof successMsg === "string" ? filter(successMsg, store2.data) : void 0),
                  errorMessage: __(typeof failMsg === "string" ? filter(failMsg, store2.data) : void 0)
                }).then(function(response) {
                  return __awaiter(_this, void 0, void 0, function() {
                    var redirect2;
                    return __generator(this, function(_a4) {
                      switch (_a4.label) {
                        case 0:
                          response && onChange && onChange(store2.data, difference(store2.data, store2.pristine), this.props);
                          if (!store2.validated)
                            return [3, 2];
                          return [4, this.validate(true)];
                        case 1:
                          _a4.sent();
                          _a4.label = 2;
                        case 2:
                          if (!(action.feedback && isVisible(action.feedback, store2.data)))
                            return [3, 4];
                          return [4, this.openFeedback(action.feedback, store2.data)];
                        case 3:
                          _a4.sent();
                          _a4.label = 4;
                        case 4:
                          redirect2 = action.redirect && filter(action.redirect, store2.data);
                          redirect2 && env.jumpTo(redirect2, action, store2.data);
                          action.reload && this.reloadTarget(filterTarget(action.reload, store2.data), store2.data);
                          action.close && this.closeTarget(action.close);
                          return [
                            2
                            /*return*/
                          ];
                      }
                    });
                  });
                }).catch(function(e2) {
                  onFailed && onFailed(e2, store2.errors);
                  if (throwErrors || action.countDown) {
                    throw e2;
                  }
                })];
              } else if (action.actionType === "reload") {
                store2.setCurrentAction(action);
                if (action.target) {
                  this.reloadTarget(filterTarget(action.target, data), data);
                } else {
                  this.receive(data);
                }
              } else if (onAction) {
                return [2, onAction(e, action, data, throwErrors, delegate || this.context)];
              }
              _f.label = 7;
            case 7:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    Form2.prototype.handleQuery = function(query) {
      if (this.props.initApi) {
        if ((query === null || query === void 0 ? void 0 : query.hasOwnProperty("orderBy")) && !isApiOutdated(this.props.initApi, this.props.initApi, this.props.store.data, createObject2(this.props.store.data, query))) {
          return false;
        }
        this.receive(query);
        return;
      }
      if (this.props.onQuery) {
        return this.props.onQuery(query);
      } else {
        return false;
      }
    };
    Form2.prototype.handleDialogConfirm = function(values2, action, ctx, targets) {
      var _a3 = this.props, store2 = _a3.store;
      _a3.onChange;
      if ((action.mergeData || store2.action.mergeData) && values2.length === 1 && values2[0] && targets[0].props.type === "form") {
        this.handleBulkChange(values2[0], false);
      }
      store2.closeDialog(true);
    };
    Form2.prototype.handleDialogClose = function(confirmed) {
      if (confirmed === void 0) {
        confirmed = false;
      }
      var store2 = this.props.store;
      store2.closeDialog(confirmed);
    };
    Form2.prototype.handleDrawerConfirm = function(values2, action, ctx, targets) {
      var _a3 = this.props, store2 = _a3.store, onChange = _a3.onChange;
      if ((action.mergeData || store2.action.mergeData) && values2.length === 1 && values2[0] && targets[0].props.type === "form") {
        store2.updateData(values2[0]);
        onChange && onChange(store2.data, difference(store2.data, store2.pristine), this.props);
      }
      store2.closeDrawer(true);
    };
    Form2.prototype.handleDrawerClose = function() {
      var store2 = this.props.store;
      store2.closeDrawer(false);
    };
    Form2.prototype.submitToTarget = function(target, values2) {
    };
    Form2.prototype.reloadTarget = function(target, data) {
    };
    Form2.prototype.closeTarget = function(target) {
    };
    Form2.prototype.openFeedback = function(dialog, ctx) {
      var _this = this;
      return new Promise(function(resolve) {
        var store2 = _this.props.store;
        store2.setCurrentAction({
          type: "button",
          actionType: "dialog",
          dialog
        });
        store2.openDialog(ctx, void 0, function(confirmed) {
          resolve(confirmed);
        }, _this.context);
      });
    };
    Form2.prototype.buildActions = function() {
      var _a3 = this.props, actions = _a3.actions, submitText = _a3.submitText, body = _a3.body, __ = _a3.translate, loadingConfig = _a3.loadingConfig;
      if (typeof actions !== "undefined" || !submitText || Array.isArray(body) && body.some(function(item) {
        var _a4, _b3, _c;
        return item && !!~["submit", "button", "button-group", "reset"].indexOf(((_b3 = (_a4 = item === null || item === void 0 ? void 0 : item.body) === null || _a4 === void 0 ? void 0 : _a4[0]) === null || _b3 === void 0 ? void 0 : _b3.type) || ((_c = item === null || item === void 0 ? void 0 : item.body) === null || _c === void 0 ? void 0 : _c.type) || item.type);
      })) {
        return actions;
      }
      return [
        {
          type: "submit",
          label: __(submitText),
          primary: true,
          loadingConfig
        }
      ];
    };
    Form2.prototype.renderFormItems = function(schema, region, otherProps) {
      if (region === void 0) {
        region = "";
      }
      if (otherProps === void 0) {
        otherProps = {};
      }
      var body = Array.isArray(schema.body) ? schema.body : schema.body ? [schema.body] : [];
      if (!body.length && schema.controls) {
        console.warn("请用 body 代替 controls");
        body = [
          {
            size: "none",
            type: "wrapper",
            wrap: false,
            controls: schema.controls
          }
        ];
      }
      return this.renderChildren(body, region, otherProps);
    };
    Form2.prototype.renderChildren = function(children, region, otherProps) {
      var _this = this;
      if (otherProps === void 0) {
        otherProps = {};
      }
      children = children || [];
      if (!Array.isArray(children)) {
        children = [children];
      }
      if (this.props.mode === "row") {
        this.props.classPrefix;
        children = (0, import_flatten2.default)(children).filter(function(item) {
          if (item.hidden || item.visible === false) {
            return false;
          }
          var exprProps = getExprProperties(item, _this.props.store.data, void 0, _this.props);
          if (exprProps.hidden || exprProps.visible === false) {
            return false;
          }
          return true;
        });
        if (!children.length) {
          return null;
        }
        var cx_1 = this.props.classnames;
        return import_react17.default.createElement("div", { className: cx_1("Form-row") }, children.map(function(control, key) {
          return ~["hidden", "formula"].indexOf(control.type) || control.mode === "inline" ? _this.renderChild(control, key, otherProps) : import_react17.default.createElement("div", { key, className: cx_1("Form-col", control.columnClassName) }, _this.renderChild(control, "", __assign(__assign({}, otherProps), { mode: "row" })));
        }));
      }
      return children.map(function(control, key) {
        return _this.renderChild(control, key, otherProps, region);
      });
    };
    Form2.prototype.renderChild = function(control, key, otherProps, region) {
      if (key === void 0) {
        key = "";
      }
      if (otherProps === void 0) {
        otherProps = {};
      }
      if (region === void 0) {
        region = "";
      }
      if (!control) {
        return null;
      } else if (typeof control === "string") {
        control = {
          type: "tpl",
          tpl: control
        };
      }
      var props = __assign(__assign({}, this.props), otherProps);
      var form = this.props.store;
      var render3 = props.render, mode = props.mode, horizontal = props.horizontal, store2 = props.store, disabled = props.disabled, controlWidth = props.controlWidth, resolveDefinitions = props.resolveDefinitions, lazyChange = props.lazyChange;
      props.formLazyChange;
      props.dispatchEvent;
      var labelAlign = props.labelAlign, labelWidth = props.labelWidth;
      props.static;
      props.canAccessSuperData;
      var subProps = {
        formStore: form,
        data: store2.data,
        key: "".concat(control.name || "", "-").concat(control.type, "-").concat(key),
        formInited: form.inited,
        formSubmited: form.submited,
        formMode: mode,
        formHorizontal: horizontal,
        formLabelAlign: labelAlign !== "left" ? "right" : labelAlign,
        formLabelWidth: labelWidth,
        controlWidth,
        /**
         * form.loading有为true时才下发disabled属性，否则不显性设置disbaled为false
         * Form中包含容器类组件时，这些组件会将此处的disbaled继续下发至子组件，导致SchemaRenderer中props.disabled覆盖schema.disabled
         */
        disabled: disabled || control.disabled || (form.loading ? true : void 0),
        btnDisabled: disabled || form.loading || form.validating,
        onAction: this.handleAction,
        onQuery: this.handleQuery,
        onChange: this.handleChange,
        onBulkChange: this.handleBulkChange,
        addHook: this.addHook,
        removeHook: this.removeHook,
        renderFormItems: this.renderFormItems,
        formItemDispatchEvent: this.formItemDispatchEvent,
        formPristine: form.pristine
        // value: (control as any)?.name
        //   ? getVariable(form.data, (control as any)?.name, canAccessSuperData)
        //   : (control as any)?.value,
        // defaultValue: (control as any)?.value
      };
      var subSchema = __assign({}, control);
      if (subSchema.$ref) {
        subSchema = __assign(__assign({}, resolveDefinitions(subSchema.$ref)), subSchema);
      }
      lazyChange === false && (subSchema.changeImmediately = true);
      return render3("".concat(region ? "".concat(region, "/") : "").concat(key), subSchema, subProps);
    };
    Form2.prototype.renderBody = function() {
      var _a3 = this.props, body = _a3.body, mode = _a3.mode, className = _a3.className, cx5 = _a3.classnames, debug2 = _a3.debug, debugConfig = _a3.debugConfig, $path = _a3.$path, store2 = _a3.store, columnCount = _a3.columnCount, render3 = _a3.render, staticClassName = _a3.staticClassName, _b3 = _a3.static, isStatic = _b3 === void 0 ? false : _b3, loadingConfig = _a3.loadingConfig;
      var restError = store2.restError;
      var WrapperComponent = this.props.wrapperComponent || (/(?:\/|^)form\//.test($path) ? "div" : "form");
      var padDom = repeatCount(columnCount && Array.isArray(body) ? (columnCount - body.length % columnCount) % columnCount : 0, function(index) {
        return import_react17.default.createElement("div", { className: cx5("Form-item Form-item--".concat(mode, " is-placeholder")), key: index });
      });
      return import_react17.default.createElement(
        WrapperComponent,
        { className: cx5("Form", "Form--".concat(mode || "normal"), columnCount ? "Form--column Form--column-".concat(columnCount) : null, staticClassName && isStatic ? staticClassName : className, isStatic ? "Form--isStatic" : null), onSubmit: this.handleFormSubmit, noValidate: true },
        import_react17.default.createElement("input", { type: "submit", style: { display: "none" } }),
        debug2 ? render3("form-debug-json", __assign({ type: "json", value: store2.data, ellipsisThreshold: 120, className: cx5("Form--debug") }, debugConfig)) : null,
        render3("spinner", { type: "spinner" }, {
          overlay: true,
          show: store2.loading,
          loadingConfig
        }),
        this.renderFormItems({
          body
        }),
        padDom,
        restError && restError.length ? import_react17.default.createElement("ul", { className: cx5("Form-restError", "Form-feedback") }, restError.map(function(item, idx) {
          return import_react17.default.createElement("li", { key: idx }, item);
        })) : null,
        render3("modal", __assign(__assign({}, store2.action && store2.action.dialog), { type: "dialog" }), {
          key: "dialog",
          data: store2.dialogData,
          onConfirm: this.handleDialogConfirm,
          onClose: this.handleDialogClose,
          show: store2.dialogOpen
        }),
        render3("modal", __assign(__assign({}, store2.action && store2.action.drawer), { type: "drawer" }), {
          key: "drawer",
          data: store2.drawerData,
          onConfirm: this.handleDrawerConfirm,
          onClose: this.handleDrawerClose,
          show: store2.drawerOpen
        })
      );
    };
    Form2.prototype.render = function() {
      var _a3 = this.props;
      _a3.$path;
      _a3.$schema;
      var wrapWithPanel = _a3.wrapWithPanel, render3 = _a3.render, title = _a3.title, store2 = _a3.store, panelClassName = _a3.panelClassName, headerClassName = _a3.headerClassName, footerClassName = _a3.footerClassName, footerWrapClassName = _a3.footerWrapClassName, actionsClassName = _a3.actionsClassName, bodyClassName = _a3.bodyClassName, cx5 = _a3.classnames, style = _a3.style, affixFooter = _a3.affixFooter, lazyLoad = _a3.lazyLoad, __ = _a3.translate, footer = _a3.footer;
      var body = this.renderBody();
      if (wrapWithPanel) {
        body = render3("body", {
          type: "panel",
          title: __(title)
        }, {
          className: cx5(panelClassName, "Panel--form"),
          style,
          formStore: this.props.store,
          children: body,
          actions: this.buildActions(),
          onAction: this.handleAction,
          onQuery: this.handleQuery,
          disabled: store2.loading,
          btnDisabled: store2.loading || store2.validating,
          headerClassName,
          footer,
          footerClassName,
          footerWrapClassName,
          actionsClassName,
          bodyClassName,
          affixFooter
        });
      }
      if (lazyLoad) {
        body = import_react17.default.createElement(LazyComponent, null, body);
      }
      return body;
    };
    Form2.defaultProps = {
      title: "Form.title",
      submitText: "Form.submit",
      initFetch: true,
      wrapWithPanel: true,
      mode: "normal",
      collapsable: false,
      controlWidth: "full",
      horizontal: {
        left: 2,
        right: 10,
        offset: 2
      },
      columnCount: 0,
      panelClassName: "Panel--default",
      messages: {
        fetchFailed: "fetchFailed",
        saveSuccess: "saveSuccess",
        saveFailed: "saveFailed"
      },
      wrapperComponent: "",
      finishedField: "finished",
      initFinishedField: "finished",
      labelAlign: "right"
    };
    Form2.propsList = [
      "title",
      "header",
      "controls",
      "tabs",
      "fieldSet",
      "submitText",
      "initFetch",
      "wrapWithPanel",
      "mode",
      "columnCount",
      "collapsable",
      "horizontal",
      "panelClassName",
      "messages",
      "wrapperComponent",
      "resetAfterSubmit",
      "clearAfterSubmit",
      "submitOnInit",
      "submitOnChange",
      "onInit",
      "onReset",
      "onSubmit",
      "onChange",
      "onFailed",
      "onFinished",
      "onValidate",
      "onValidChange",
      "onSaved",
      "canAccessSuperData",
      "lazyChange",
      "formLazyChange",
      "lazyLoad",
      "formInited",
      "simpleMode",
      "inputOnly",
      "value",
      "actions",
      "multiple"
    ];
    return Form2;
  }(import_react17.default.Component)
);
var FormRenderer = (
  /** @class */
  function(_super) {
    __extends(FormRenderer2, _super);
    function FormRenderer2(props, context) {
      var _this = _super.call(this, props) || this;
      var scoped = context;
      scoped.registerComponent(_this);
      return _this;
    }
    FormRenderer2.prototype.componentDidMount = function() {
      _super.prototype.componentDidMount.call(this);
      if (this.props.autoFocus) {
        var scoped = this.context;
        var inputs = scoped.getComponents();
        var focuableInput_1 = (0, import_find10.default)(inputs, function(input) {
          return input.focus;
        });
        focuableInput_1 && setTimeout(function() {
          return focuableInput_1.focus();
        }, 200);
      }
    };
    FormRenderer2.prototype.componentWillUnmount = function() {
      var scoped = this.context;
      scoped.unRegisterComponent(this);
      _super.prototype.componentWillUnmount.call(this);
    };
    FormRenderer2.prototype.doAction = function(action, data, throwErrors) {
      if (data === void 0) {
        data = this.props.store.data;
      }
      if (throwErrors === void 0) {
        throwErrors = false;
      }
      return this.handleAction(void 0, action, data, throwErrors);
    };
    FormRenderer2.prototype.handleAction = function(e, action, ctx, throwErrors, delegate) {
      if (throwErrors === void 0) {
        throwErrors = false;
      }
      return __awaiter(this, void 0, void 0, function() {
        var scoped_1;
        return __generator(this, function(_a3) {
          if (action.target && action.actionType !== "reload") {
            scoped_1 = this.context;
            return [2, Promise.all(action.target.split(",").map(function(name) {
              var target = scoped_1.getComponentByName(name);
              return target && target.doAction && target.doAction(__assign(__assign({}, action), { target: void 0 }), ctx, throwErrors);
            }))];
          } else {
            return [2, _super.prototype.handleAction.call(this, e, action, ctx, throwErrors, delegate)];
          }
        });
      });
    };
    FormRenderer2.prototype.handleDialogConfirm = function(values2, action, ctx, targets) {
      _super.prototype.handleDialogConfirm.call(this, values2, action, ctx, targets);
      var store2 = this.props.store;
      var scoped = this.context;
      if (action.reload) {
        scoped.reload(action.reload, ctx);
      } else if (store2.action && store2.action.reload) {
        scoped.reload(store2.action.reload, ctx);
      }
    };
    FormRenderer2.prototype.submitToTarget = function(target, values2) {
      var scoped = this.context;
      scoped.send(target, values2);
    };
    FormRenderer2.prototype.reloadTarget = function(target, data) {
      var scoped = this.context;
      scoped.reload(target, data);
    };
    FormRenderer2.prototype.closeTarget = function(target) {
      var scoped = this.context;
      scoped.close(target);
    };
    FormRenderer2.prototype.reload = function(target, query, ctx, silent, replace) {
      return __awaiter(this, void 0, void 0, function() {
        var scoped, subPath, idx, subQuery, idx2, component, components;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              if (query) {
                return [2, this.receive(query, void 0, replace)];
              }
              scoped = this.context;
              subPath = "";
              subQuery = null;
              if (target && ~(idx = target.indexOf("."))) {
                subPath = target.substring(idx + 1);
                target = target.substring(0, idx);
              }
              idx2 = target ? target.indexOf("?") : -1;
              if (~idx2) {
                subQuery = dataMapping(qsparse(target.substring(idx2 + 1)), ctx);
                target = target.substring(0, idx2);
              }
              if (!(target && (component = scoped.getComponentByName(target)) && component.reload))
                return [3, 1];
              component.reload(subPath, subQuery, ctx);
              return [3, 4];
            case 1:
              if (!(target === "*"))
                return [3, 3];
              return [4, _super.prototype.reload.call(this, target, query, ctx, silent)];
            case 2:
              _a3.sent();
              components = scoped.getComponents();
              components.forEach(function(component2) {
                return component2.reload && component2.reload("", subQuery, ctx);
              });
              return [3, 4];
            case 3:
              return [2, _super.prototype.reload.call(this, target, query, ctx, silent)];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    FormRenderer2.prototype.receive = function(values2, name, replace) {
      return __awaiter(this, void 0, void 0, function() {
        var scoped, idx, subPath, component;
        return __generator(this, function(_a3) {
          if (name) {
            scoped = this.context;
            idx = name.indexOf(".");
            subPath = "";
            if (~idx) {
              subPath = name.substring(1 + idx);
              name = name.substring(0, idx);
            }
            component = scoped.getComponentByName(name);
            component && component.receive && component.receive(values2, subPath);
            return [
              2
              /*return*/
            ];
          }
          return [2, _super.prototype.receive.call(this, values2, void 0, replace)];
        });
      });
    };
    FormRenderer2.prototype.setData = function(values2, replace) {
      var _a3 = this.props, onChange = _a3.onChange, store2 = _a3.store;
      _super.prototype.setValues.call(this, values2, replace);
      onChange && onChange(store2.data, difference(store2.data, store2.pristine), this.props);
    };
    FormRenderer2.prototype.getData = function() {
      var store2 = this.props.store;
      return store2.data;
    };
    FormRenderer2.contextType = ScopedContext;
    FormRenderer2 = __decorate([
      Renderer({
        type: "form",
        storeType: FormStore.name,
        isolateScope: true,
        storeExtendsData: function(props) {
          return props.inheritData;
        },
        shouldSyncSuperStore: function(store2, props, prevProps) {
          var _a3, _b3;
          if (props.quickEditFormRef && props.onQuickChange && (isObjectShallowModified(prevProps.data, props.data) || isObjectShallowModified(prevProps.data.__super, props.data.__super) || isObjectShallowModified((_a3 = prevProps.data.__super) === null || _a3 === void 0 ? void 0 : _a3.__super, (_b3 = props.data.__super) === null || _b3 === void 0 ? void 0 : _b3.__super))) {
            return true;
          }
          return void 0;
        }
      }),
      __metadata("design:paramtypes", [Object, Object])
    ], FormRenderer2);
    return FormRenderer2;
  }(Form)
);

// node_modules/amis-core/esm/utils/style-helper.js
var import_cloneDeep8 = __toESM(require_cloneDeep());
var import_isObject8 = __toESM(require_isObject());
var import_map7 = __toESM(require_map());
var import_isEmpty8 = __toESM(require_isEmpty());
var import_kebabCase7 = __toESM(require_kebabCase());
var valueMap = {
  "marginTop": "margin-top",
  "marginRight": "margin-right",
  "marginBottom": "margin-bottom",
  "marginLeft": "margin-left",
  "paddingTop": "padding-top",
  "paddingRight": "padding-right",
  "paddingBottom": "padding-bottom",
  "paddingLeft": "padding-left",
  "top-border-width": "border-top-width",
  "right-border-width": "border-right-width",
  "bottom-border-width": "border-bottom-width",
  "left-border-width": "border-left-width",
  "top-border-style": "border-top-style",
  "right-border-style": "border-right-style",
  "bottom-border-style": "border-bottom-style",
  "left-border-style": "border-left-style",
  "top-border-color": "border-top-color",
  "right-border-color": "border-right-color",
  "bottom-border-color": "border-bottom-color",
  "left-border-color": "border-left-color",
  "fontSize": "font-size",
  "fontWeight": "font-weight",
  "lineHeight": "line-height"
};
var inheritValueMap = {
  background: "bg-color",
  radius: "border"
};
function findOrCreateStyle(id, doc) {
  doc = doc || document;
  var varStyleTag = doc.getElementById(id);
  if (!varStyleTag) {
    varStyleTag = doc.createElement("style");
    varStyleTag.id = id;
    doc.body.appendChild(varStyleTag);
  }
  return varStyleTag;
}
function insertStyle(style, id, doc) {
  var varStyleTag = findOrCreateStyle("amis-" + id, doc);
  varStyleTag.innerHTML = style;
  if (!style) {
    varStyleTag.remove();
  }
}
function addStyle(style, id) {
  var varStyleTag = findOrCreateStyle(id);
  varStyleTag.innerHTML += style;
}
function handleInheritData(statusMap, data) {
  if (!data) {
    return;
  }
  ["hover", "active"].forEach(function(status) {
    Object.keys(statusMap[status]).forEach(function(key) {
      if (typeof statusMap[status][key] === "object") {
        Object.keys(statusMap[status][key]).forEach(function(style) {
          if (statusMap[status][key][style] === "inherit") {
            if (statusMap["default"][key] && statusMap["default"][key][style]) {
              statusMap[status][key][style] = statusMap.default[key][style];
            } else {
              var value2 = inheritValueMap[key] || key;
              statusMap[status][key][style] = data["default"].body[value2][style];
            }
          }
        });
      } else {
        if (statusMap[status][key] === "inherit") {
          if (statusMap["default"][key] && statusMap["default"][key]) {
            statusMap[status][key] = statusMap.default[key];
          } else {
            var value = inheritValueMap[key] || key;
            statusMap[status][key] = data["default"].body[value];
          }
        }
      }
    });
  });
}
function formatStyle(themeCss, classNames, id, defaultData) {
  var e_1, _a3;
  if (!themeCss || !classNames) {
    return { value: "", origin: [] };
  }
  var res = [];
  var status2string = {
    default: "",
    hover: ":hover",
    active: ":hover:active",
    disabled: ".is-disabled"
  };
  var _loop_1 = function(item2) {
    var body = themeCss[item2.key];
    if (!body) {
      return "continue";
    }
    var className = item2.key + "-" + (id === null || id === void 0 ? void 0 : id.replace("u:", ""));
    var weightsList = item2.weights || {};
    var statusMap = {
      default: {},
      hover: {},
      active: {},
      disabled: {}
    };
    Object.keys(body).forEach(function(key) {
      if (key !== "$$id" && body[key]) {
        if (!!~key.indexOf(":default")) {
          statusMap.default[key.replace(":default", "")] = body[key];
        } else if (!!~key.indexOf(":hover")) {
          statusMap.hover[key.replace(":hover", "")] = body[key];
        } else if (!!~key.indexOf(":active")) {
          statusMap.active[key.replace(":active", "")] = body[key];
        } else if (!!~key.indexOf(":disabled")) {
          statusMap.disabled[key.replace(":disabled", "")] = body[key];
        } else {
          statusMap.default[key] = body[key];
        }
      }
    });
    handleInheritData(statusMap, defaultData);
    Object.keys(statusMap).forEach(function(status) {
      var weights = weightsList[status];
      var styles = [];
      var fn = function(key, value) {
        key = valueMap[key] || key;
        styles.push("".concat((0, import_kebabCase7.default)(key), ": ").concat(value + ((weights === null || weights === void 0 ? void 0 : weights.important) ? " !important" : ""), ";"));
      };
      Object.keys(statusMap[status]).forEach(function(key) {
        if (key !== "$$id") {
          var style_1 = statusMap[status][key];
          if (typeof style_1 === "object") {
            if (key === "radius") {
              fn("border-radius", [
                style_1["top-left-border-radius"] || 0,
                style_1["top-right-border-radius"] || 0,
                style_1["bottom-right-border-radius"] || 0,
                style_1["bottom-left-border-radius"] || 0,
                (weights === null || weights === void 0 ? void 0 : weights.important) ? " !important" : ""
              ].join(" "));
            } else {
              Object.keys(style_1).forEach(function(k) {
                if (k !== "$$id") {
                  var value2 = style_1[k];
                  value2 && fn(k, value2 + ((weights === null || weights === void 0 ? void 0 : weights.important) ? " !important" : ""));
                }
              });
            }
          } else {
            var value = style_1;
            if (key === "iconSize") {
              fn("width", value);
              fn("height", value);
              fn("font-size", value);
            } else {
              value && fn(key, value);
            }
          }
        }
      });
      if (styles.length > 0) {
        var cx5 = ((weights === null || weights === void 0 ? void 0 : weights.pre) || "") + className + ((weights === null || weights === void 0 ? void 0 : weights.suf) || "");
        var inner = (weights === null || weights === void 0 ? void 0 : weights.inner) || "";
        res.push({
          className: cx5 + status2string[status] + inner,
          content: ".".concat(cx5 + status2string[status], " ").concat(inner, "{\n  ").concat(styles.join("\n  "), "\n}")
        });
      }
    });
  };
  try {
    for (var classNames_1 = __values(classNames), classNames_1_1 = classNames_1.next(); !classNames_1_1.done; classNames_1_1 = classNames_1.next()) {
      var item = classNames_1_1.value;
      _loop_1(item);
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (classNames_1_1 && !classNames_1_1.done && (_a3 = classNames_1.return))
        _a3.call(classNames_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return {
    value: res.map(function(n) {
      return n.content;
    }).join("\n"),
    origin: res
  };
}
function insertCustomStyle(themeCss, classNames, id, defaultData, customStyleClassPrefix, doc) {
  if (!themeCss) {
    return;
  }
  var value = formatStyle(themeCss, classNames, id, defaultData).value;
  value = customStyleClassPrefix ? "".concat(customStyleClassPrefix, " ").concat(value) : value;
  insertStyle(value, id.replace("u:", ""), doc);
}
function getValueByPath(path, data) {
  try {
    if (!path || !data) {
      return null;
    }
    var keys = path.split(".");
    var value = (0, import_cloneDeep8.default)(data.component);
    for (var i = 0; i < keys.length; i++) {
      value = value[keys[i]];
    }
    return value;
  } catch (e) {
    return null;
  }
}
function traverseStyle(style, path, result) {
  Object.keys(style).forEach(function(key) {
    if (key !== "$$id") {
      if ((0, import_isObject8.default)(style[key])) {
        var nowPath = path ? "".concat(path, " ").concat(key) : key;
        traverseStyle(style[key], nowPath, result);
      } else if (path === "") {
        !result[key] && (result[key] = {});
        result[key] = style[key];
      } else {
        !result[path] && (result[path] = {});
        result[path][key] = style[key];
      }
    }
  });
}
function insertEditCustomStyle(customStyle, id, doc) {
  var styles = {};
  traverseStyle(customStyle, "", styles);
  var content = "";
  if (!(0, import_isEmpty8.default)(styles)) {
    var className_1 = "wrapperCustomStyle-".concat(id === null || id === void 0 ? void 0 : id.replace("u:", ""));
    Object.keys(styles).forEach(function(key) {
      if (!(0, import_isObject8.default)(styles[key])) {
        content += "\n.".concat(className_1, " {\n  ").concat(key, ": ").concat(styles[key], "\n}");
      } else if (key === "root") {
        var res = (0, import_map7.default)(styles[key], function(value, key2) {
          return "".concat(key2, ": ").concat(value, ";");
        });
        content += "\n.".concat(className_1, " {\n  ").concat(res.join("\n  "), "\n}");
      } else if (/^root:/.test(key)) {
        var res = (0, import_map7.default)(styles[key], function(value, key2) {
          return "".concat(key2, ": ").concat(value, ";");
        });
        var nowKey = key.replace("root", "");
        content += "\n.".concat(className_1, " ").concat(nowKey, " {\n  ").concat(res.join("\n  "), "\n}");
      } else {
        var res = (0, import_map7.default)(styles[key], function(value, key2) {
          return "".concat(key2, ": ").concat(value, ";");
        });
        content += "\n.".concat(className_1, " ").concat(key, " {\n  ").concat(res.join("\n  "), "\n}");
      }
    });
  }
  insertStyle(content, "wrapperCustomStyle-" + ((id === null || id === void 0 ? void 0 : id.replace("u:", "")) || uuid()), doc);
}
function removeCustomStyle(type, id, doc) {
  var style = (doc || document).getElementById("amis-" + (type ? type + "-" : "") + id.replace("u:", ""));
  if (style) {
    style.remove();
  }
}
function formatInputThemeCss(themeCss) {
  if (!themeCss) {
    return;
  }
  var inputFontThemeCss = { inputControlClassName: {} };
  var inputControlClassNameObject = (themeCss === null || themeCss === void 0 ? void 0 : themeCss.inputControlClassName) || {};
  Object.keys(inputControlClassNameObject).forEach(function(key) {
    if (~key.indexOf("font")) {
      inputFontThemeCss.inputControlClassName[key] = inputControlClassNameObject[key];
    }
  });
  return inputFontThemeCss;
}
function setThemeClassName(name, id, themeCss, extra) {
  if (!id || !themeCss) {
    return "";
  }
  if (name !== "wrapperCustomStyle" && !themeCss[name]) {
    return "";
  }
  return "".concat(name, "-").concat(id.replace("u:", "")) + (extra ? "-".concat(extra) : "");
}

// node_modules/amis-core/esm/utils/dom.js
var import_react_dom9 = __toESM(require_react_dom());
var import_react18 = __toESM(require_react());
function getContainer(container, defaultContainer) {
  container = typeof container === "function" ? container() : container;
  return import_react_dom9.default.findDOMNode(container) || defaultContainer;
}
function ownerDocument2(componentOrElement) {
  var _a3;
  return ((_a3 = import_react_dom9.default.findDOMNode(componentOrElement)) === null || _a3 === void 0 ? void 0 : _a3.ownerDocument) || document;
}
function getContainerDimensions(containerNode) {
  var _a3;
  var width, height, scroll;
  if (containerNode.tagName === "BODY") {
    width = window.innerWidth;
    height = window.innerHeight;
    scroll = ownerDocument2(containerNode).documentElement.scrollTop || (containerNode === null || containerNode === void 0 ? void 0 : containerNode.scrollTop);
  } else {
    _a3 = offset(containerNode), width = _a3.width, height = _a3.height;
    scroll = containerNode.scrollTop;
  }
  return { width, height, scroll };
}
function getTopDelta(top, overlayHeight, container, padding) {
  var containerDimensions = getContainerDimensions(container);
  var containerScroll = containerDimensions.scroll;
  var containerHeight = containerDimensions.height;
  var topEdgeOffset = top - padding - containerScroll;
  var bottomEdgeOffset = top + padding - containerScroll + overlayHeight;
  if (topEdgeOffset < 0) {
    return -topEdgeOffset;
  } else if (bottomEdgeOffset > containerHeight) {
    return containerHeight - bottomEdgeOffset;
  } else {
    return 0;
  }
}
function getLeftDelta(left, overlayWidth, container, padding) {
  var containerDimensions = getContainerDimensions(container);
  var containerWidth = containerDimensions.width;
  var leftEdgeOffset = left - padding;
  var rightEdgeOffset = left + padding + overlayWidth;
  if (leftEdgeOffset < 0) {
    return -leftEdgeOffset;
  } else if (rightEdgeOffset > containerWidth) {
    return containerWidth - rightEdgeOffset;
  }
  return 0;
}
function calculatePosition(placement, overlayNode, target, container, padding, customOffset) {
  if (padding === void 0) {
    padding = 0;
  }
  if (customOffset === void 0) {
    customOffset = [0, 0];
  }
  var childOffset = container.tagName === "BODY" ? offset(target) : position(target, container);
  var _a3 = offset(overlayNode), overlayHeight = _a3.height, overlayWidth = _a3.width;
  var clip = container.getBoundingClientRect();
  var clip2 = overlayNode.getBoundingClientRect();
  var scaleX = overlayNode.offsetWidth ? clip2.width / overlayNode.offsetWidth : 1;
  var scaleY = overlayNode.offsetHeight ? clip2.height / overlayNode.offsetHeight : 1;
  var isAuto = placement === "auto";
  var autoDefaultPlacement = "left-bottom-left-top";
  placement = isAuto ? "left-bottom-left-top right-bottom-right-top left-top-left-bottom right-top-right-bottom ".concat(autoDefaultPlacement) : placement;
  var positionLeft = 0, positionTop = 0, arrowOffsetLeft = "", arrowOffsetTop = "", activePlacement = placement;
  if (~placement.indexOf("-")) {
    var tests = placement.split(/\s+/);
    var visiblePlacement = {};
    while (tests.length) {
      var current = activePlacement = tests.shift();
      if (isAuto && tests.length === 0) {
        var _b3 = __read(autoDefaultPlacement.split("-"), 4), _atX = _b3[0], _atY = _b3[1], _myX = _b3[2], _myY = _b3[3];
        var _c = visiblePlacement.atX, atX_1 = _c === void 0 ? _atX : _c, _d = visiblePlacement.atY, atY_1 = _d === void 0 ? _atY : _d, _e = visiblePlacement.myX, myX_1 = _e === void 0 ? _myX : _e, _f = visiblePlacement.myY, myY_1 = _f === void 0 ? _myY : _f;
        current = activePlacement = [atX_1, atY_1, myX_1, myY_1].join("-");
      }
      var _g = __read(current.split("-"), 4), atX = _g[0], atY = _g[1], myX = _g[2], myY = _g[3];
      myX = myX || atX;
      myY = myY || atY;
      positionLeft = atX === "left" ? childOffset.left : atX === "right" ? childOffset.left + childOffset.width : childOffset.left + childOffset.width / 2;
      positionTop = atY === "top" ? childOffset.top : atY === "bottom" ? childOffset.top + childOffset.height : childOffset.top + childOffset.height / 2;
      positionLeft -= myX === "left" ? 0 : myX === "right" ? overlayWidth : overlayWidth / 2;
      positionTop -= myY === "top" ? 0 : myY === "bottom" ? overlayHeight : overlayHeight / 2;
      if (tests.length) {
        var transformed = {
          x: clip.x + positionLeft / scaleX,
          y: clip.y + positionTop / scaleY,
          width: overlayWidth,
          height: overlayHeight
        };
        var visibleX = false;
        var visibleY = false;
        if (transformed.x > 0 && transformed.x + transformed.width < window.innerWidth) {
          visibleX = true;
          !visiblePlacement.atX && (visiblePlacement.atX = atX);
          !visiblePlacement.myX && (visiblePlacement.myX = myX);
        }
        if (transformed.y > 0 && transformed.y + transformed.height < window.innerHeight) {
          visibleY = true;
          !visiblePlacement.atY && (visiblePlacement.atY = atY);
          !visiblePlacement.myY && (visiblePlacement.myY = myY);
        }
        if (visibleX && visibleY) {
          break;
        }
      }
    }
  } else if (placement === "left" || placement === "right") {
    if (placement === "left") {
      positionLeft = childOffset.left - overlayWidth;
    } else {
      positionLeft = childOffset.left + childOffset.width;
    }
    positionTop = childOffset.top + (childOffset.height - overlayHeight) / 2;
    var topDelta = getTopDelta(positionTop, overlayHeight, container, padding);
    positionTop += topDelta;
    arrowOffsetTop = 50 * (1 - 2 * topDelta / overlayHeight) + "%";
  } else if (placement === "top" || placement === "bottom") {
    if (placement === "top") {
      positionTop = childOffset.top - overlayHeight;
    } else {
      positionTop = childOffset.top + childOffset.height;
    }
    positionLeft = childOffset.left + (childOffset.width - overlayWidth) / 2;
    var leftDelta = getLeftDelta(positionLeft, overlayWidth, container, padding);
    positionLeft += leftDelta;
    arrowOffsetLeft = 50 * (1 - 2 * leftDelta / overlayHeight) + "%";
  } else if (placement === "center") {
    positionLeft = childOffset.left + (childOffset.width - overlayWidth) / 2;
    positionTop = childOffset.top + (childOffset.height - overlayHeight) / 2;
    arrowOffsetLeft = arrowOffsetTop = void 0;
  } else {
    throw new Error('calcOverlayPosition(): No such placement of "'.concat(placement, '" found.'));
  }
  var _h = __read(customOffset, 2), _j = _h[0], offSetX = _j === void 0 ? 0 : _j, _k = _h[1], offSetY = _k === void 0 ? 0 : _k;
  return {
    positionLeft: (positionLeft + offSetX) / scaleX,
    positionTop: (positionTop + offSetY) / scaleY,
    arrowOffsetLeft: (arrowOffsetLeft + offSetX) / scaleX,
    arrowOffsetTop: (arrowOffsetTop + offSetY) / scaleY,
    activePlacement
  };
}
function getStyleNumber(element, styleName) {
  if (!element) {
    return 0;
  }
  return parseInt(getComputedStyle(element).getPropertyValue(styleName), 10) || 0;
}
function renderTextByKeyword(rendererText, curKeyword) {
  if (!rendererText || typeof rendererText !== "string") {
    return rendererText;
  }
  if (curKeyword && ~rendererText.indexOf(curKeyword)) {
    var keywordStartIndex = rendererText.indexOf(curKeyword);
    var keywordEndIndex = keywordStartIndex + curKeyword.length;
    return import_react18.default.createElement(
      "span",
      null,
      rendererText.substring(0, keywordStartIndex),
      import_react18.default.createElement("span", { className: "is-keyword" }, curKeyword),
      rendererText.substring(keywordEndIndex)
    );
  } else {
    return rendererText;
  }
}

// node_modules/amis-core/esm/utils/RootClose.js
var import_react19 = __toESM(require_react());
var import_react_dom10 = __toESM(require_react_dom());
var RootClose = function(_a3) {
  var children = _a3.children, onRootClose = _a3.onRootClose, props = __rest(_a3, ["children", "onRootClose"]);
  var _b3 = __read((0, import_react19.useState)(null), 2), rootComponent = _b3[0], attachRef = _b3[1];
  var rootElement = (0, import_react_dom10.findDOMNode)(rootComponent);
  useRootClose_default(rootElement, onRootClose, props);
  return typeof children === "function" ? children(attachRef) : children;
};

// node_modules/react-overlays/esm/Portal.js
var import_prop_types = __toESM(require_prop_types());
var import_react_dom11 = __toESM(require_react_dom());
var import_react21 = __toESM(require_react());

// node_modules/react-overlays/esm/useWaitForDOMRef.js
var import_react20 = __toESM(require_react());
var resolveContainerRef = function resolveContainerRef2(ref) {
  var _ref;
  if (typeof document === "undefined")
    return null;
  if (ref == null)
    return ownerDocument().body;
  if (typeof ref === "function")
    ref = ref();
  if (ref && "current" in ref)
    ref = ref.current;
  if ((_ref = ref) != null && _ref.nodeType)
    return ref || null;
  return null;
};
function useWaitForDOMRef(ref, onResolved) {
  var _useState = (0, import_react20.useState)(function() {
    return resolveContainerRef(ref);
  }), resolvedRef = _useState[0], setRef = _useState[1];
  if (!resolvedRef) {
    var earlyRef = resolveContainerRef(ref);
    if (earlyRef)
      setRef(earlyRef);
  }
  (0, import_react20.useEffect)(function() {
    if (onResolved && resolvedRef) {
      onResolved(resolvedRef);
    }
  }, [onResolved, resolvedRef]);
  (0, import_react20.useEffect)(function() {
    var nextRef = resolveContainerRef(ref);
    if (nextRef !== resolvedRef) {
      setRef(nextRef);
    }
  }, [ref, resolvedRef]);
  return resolvedRef;
}

// node_modules/react-overlays/esm/Portal.js
var propTypes = {
  /**
   * A DOM element, Ref to an element, or function that returns either. The `container` will have the Portal children
   * appended to it.
   */
  container: import_prop_types.default.any,
  onRendered: import_prop_types.default.func
};
var Portal = function Portal2(_ref) {
  var container = _ref.container, children = _ref.children, onRendered = _ref.onRendered;
  var resolvedContainer = useWaitForDOMRef(container, onRendered);
  return resolvedContainer ? import_react21.default.createElement(import_react21.default.Fragment, null, import_react_dom11.default.createPortal(children, resolvedContainer)) : null;
};
Portal.displayName = "Portal";
Portal.propTypes = propTypes;
var Portal_default = Portal;

// node_modules/amis-core/esm/components/Overlay.js
var import_classnames2 = __toESM(require_classnames());
var import_react_dom12 = __toESM(require_react_dom());
var import_react22 = __toESM(require_react());
var import_chunk7 = __toESM(require_chunk());
var import_isPlainObject24 = __toESM(require_isPlainObject());
init_moment();
var import_isObject9 = __toESM(require_isObject());
var import_isString9 = __toESM(require_isString());
var import_isBoolean8 = __toESM(require_isBoolean());
var import_isEqual16 = __toESM(require_isEqual());
var import_debounce8 = __toESM(require_debounce());
var import_cloneDeep9 = __toESM(require_cloneDeep());
var import_mapValues7 = __toESM(require_mapValues());
var import_camelCase7 = __toESM(require_camelCase());
var import_map8 = __toESM(require_map());
var import_isEmpty9 = __toESM(require_isEmpty());
var import_kebabCase8 = __toESM(require_kebabCase());
var import_hoist_non_react_statics9 = __toESM(require_hoist_non_react_statics_cjs());
var SubPopoverDisplayedID = "data-sub-popover-displayed";
function onScroll(elem, callback) {
  var handler = function() {
    requestAnimationFrame(callback);
  };
  elem.addEventListener("scroll", handler);
  return function() {
    elem.removeEventListener("scroll", handler);
  };
}
var Position = (
  /** @class */
  function(_super) {
    __extends(Position2, _super);
    function Position2(props) {
      var _this = _super.call(this, props) || this;
      _this.getTarget = function() {
        var target = _this.props.target;
        var targetElement = typeof target === "function" ? target() : target;
        return targetElement && import_react_dom12.default.findDOMNode(targetElement) || null;
      };
      _this.maybeUpdatePosition = function(placementChanged) {
        var target = _this.getTarget();
        if (!_this.props.shouldUpdatePosition && target === _this._lastTarget && !placementChanged) {
          return;
        }
        _this.updatePosition(target);
      };
      _this.state = {
        positionLeft: 0,
        positionTop: 0,
        arrowOffsetLeft: null,
        arrowOffsetTop: null
      };
      _this._lastTarget = null;
      return _this;
    }
    Position2.prototype.updatePosition = function(target) {
      var _this = this;
      var _a3, _b3;
      this._lastTarget = target;
      if (target) {
        var parentPopover = (_a3 = target === null || target === void 0 ? void 0 : target.closest) === null || _a3 === void 0 ? void 0 : _a3.call(target, "[role=popover]");
        if (!this.parentPopover && parentPopover) {
          this.parentPopover = parentPopover;
          this.parentPopover.setAttribute(SubPopoverDisplayedID, true);
        }
      }
      if (!target) {
        return this.setState({
          positionLeft: 0,
          positionTop: 0,
          arrowOffsetLeft: null,
          arrowOffsetTop: null
        });
      }
      var watchTargetSizeChange = this.props.watchTargetSizeChange;
      var overlay = (0, import_react_dom12.findDOMNode)(this);
      var container = getContainer(this.props.container, ownerDocument2(this).body);
      if ((!this.watchedTarget || this.watchedTarget !== target) && getComputedStyle2(target, "position") !== "static") {
        (_b3 = this.resizeDispose) === null || _b3 === void 0 ? void 0 : _b3.forEach(function(fn) {
          return fn();
        });
        this.watchedTarget = target;
        this.resizeDispose = [
          watchTargetSizeChange !== false ? resizeSensor(target, function() {
            return _this.updatePosition(target);
          }) : noop,
          resizeSensor(overlay, function() {
            return _this.updatePosition(target);
          })
        ];
        var scrollParent = getScrollParent(target);
        if (scrollParent && container.contains(scrollParent)) {
          this.resizeDispose.push(onScroll(scrollParent, function() {
            _this.updatePosition(target);
          }));
        }
      }
      this.setState(calculatePosition(this.props.placement, overlay, target, container, this.props.containerPadding, this.props.offset));
    };
    Position2.prototype.componentDidMount = function() {
      this.updatePosition(this.getTarget());
    };
    Position2.prototype.componentDidUpdate = function(prevProps) {
      this.maybeUpdatePosition(this.props.placement !== prevProps.placement);
    };
    Position2.prototype.componentWillUnmount = function() {
      var _a3;
      if (this.parentPopover && this.parentPopover.getAttribute(SubPopoverDisplayedID)) {
        this.parentPopover.removeAttribute(SubPopoverDisplayedID);
        this.parentPopover = null;
      }
      (_a3 = this.resizeDispose) === null || _a3 === void 0 ? void 0 : _a3.forEach(function(fn) {
        return fn();
      });
    };
    Position2.prototype.render = function() {
      var _a3 = this.props, children = _a3.children, className = _a3.className, props = __rest(_a3, ["children", "className"]);
      var _b3 = this.state, positionLeft = _b3.positionLeft, positionTop = _b3.positionTop, arrowPosition = __rest(_b3, ["positionLeft", "positionTop"]);
      delete props.target;
      delete props.container;
      delete props.containerPadding;
      delete props.shouldUpdatePosition;
      var child = import_react22.default.Children.only(children);
      return (0, import_react22.cloneElement)(child, __assign(__assign(__assign(__assign({}, props), arrowPosition), child.props.offset ? { offset: child.props.offset } : {}), {
        // FIXME: Don't forward `positionLeft` and `positionTop` via both props
        // and `props.style`.
        positionLeft,
        positionTop,
        className: (0, import_classnames2.default)(className, child.props.className),
        style: __assign(__assign({}, child.props.style), { left: positionLeft, top: positionTop })
      }));
    };
    Position2.defaultProps = {
      containerPadding: 0,
      placement: "right",
      shouldUpdatePosition: false
    };
    return Position2;
  }(import_react22.default.Component)
);
var Overlay = (
  /** @class */
  function(_super) {
    __extends(Overlay2, _super);
    function Overlay2(props) {
      var _this = _super.call(this, props) || this;
      _this.position = null;
      _this.positionRef = function(position2) {
        _this.position = position2;
      };
      _this.state = {
        exited: !props.show
      };
      return _this;
    }
    Overlay2.prototype.updatePosition = function() {
      var _a3;
      (_a3 = this.position) === null || _a3 === void 0 ? void 0 : _a3.maybeUpdatePosition(true);
    };
    Overlay2.prototype.componentDidUpdate = function(prevProps, prevState) {
      var props = this.props;
      if (prevProps.show !== props.show && props.show) {
        this.setState({ exited: false });
      } else if (props.transition !== prevProps.transition && !props.transition) {
        this.setState({ exited: true });
      }
    };
    Overlay2.prototype.onHiddenListener = function(node) {
      this.setState({ exited: true });
      if (this.props.onExited) {
        this.props.onExited(node);
      }
    };
    Overlay2.prototype.getContainerSelector = function() {
      var containerSelector = this.props.containerSelector;
      var container = null;
      if (typeof containerSelector === "string") {
        container = document.querySelector(containerSelector);
      }
      return container;
    };
    Overlay2.prototype.render = function() {
      var _a3 = this.props, containerPadding = _a3.containerPadding, target = _a3.target, placement = _a3.placement, shouldUpdatePosition = _a3.shouldUpdatePosition, rootClose = _a3.rootClose, children = _a3.children;
      _a3.watchTargetSizeChange;
      var Transition = _a3.transition, offset2 = _a3.offset, props = __rest(_a3, ["containerPadding", "target", "placement", "shouldUpdatePosition", "rootClose", "children", "watchTargetSizeChange", "transition", "offset"]);
      var container = this.getContainerSelector() ? this.getContainerSelector : this.props.container;
      var mountOverlay = props.show || Transition && !this.state.exited;
      if (!mountOverlay) {
        return null;
      }
      var child = children;
      child = // @ts-ignore
      import_react22.default.createElement(Position, __assign({}, {
        container,
        containerPadding,
        target,
        placement,
        shouldUpdatePosition,
        offset: offset2
      }, { ref: this.positionRef }), child);
      if (Transition) {
        var onExit = props.onExit, onExiting = props.onExiting, onEnter = props.onEnter, onEntering = props.onEntering, onEntered = props.onEntered;
        child = import_react22.default.createElement(Transition, { in: props.show, appear: true, onExit, onExiting, onExited: this.onHiddenListener, onEnter, onEntering, onEntered }, child);
      }
      if (rootClose) {
        return (
          // @ts-ignore
          import_react22.default.createElement(
            Portal_default,
            { container },
            import_react22.default.createElement(RootClose, { onRootClose: props.onHide }, function(ref) {
              if (import_react22.default.isValidElement(child)) {
                return import_react22.default.cloneElement(child, {
                  ref
                });
              }
              return import_react22.default.createElement("div", { ref }, child);
            })
          )
        );
      }
      return import_react22.default.createElement(Portal_default, { container }, child);
    };
    Overlay2.defaultProps = {
      placement: "auto"
    };
    __decorate([
      autobind,
      __metadata("design:type", Function),
      __metadata("design:paramtypes", [HTMLElement]),
      __metadata("design:returntype", void 0)
    ], Overlay2.prototype, "onHiddenListener", null);
    __decorate([
      autobind,
      __metadata("design:type", Function),
      __metadata("design:paramtypes", []),
      __metadata("design:returntype", void 0)
    ], Overlay2.prototype, "getContainerSelector", null);
    return Overlay2;
  }(import_react22.default.Component)
);

// node_modules/amis-core/esm/theme.js
var import_classnames3 = __toESM(require_classnames());
var import_react23 = __toESM(require_react());
var import_hoist_non_react_statics10 = __toESM(require_hoist_non_react_statics_cjs());
var themes = {
  default: {},
  cxd: {
    classPrefix: "cxd-"
  }
};
function theme(name, config) {
  themes[name] = __assign(__assign({}, themes[name]), config);
}
var fns = {};
function makeClassnames(ns) {
  if (ns && fns[ns]) {
    return fns[ns];
  }
  var fn = function() {
    var classes = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      classes[_i] = arguments[_i];
    }
    var str = import_classnames3.default.apply(void 0, __spreadArray([], __read(classes), false));
    return str && ns ? str.replace(/(^|\s)([A-Z])/g, "$1" + ns + "$2").replace(/(^|\s)\:/g, "$1") : str || "";
  };
  ns && (fns[ns] = fn);
  return fn;
}
function hasTheme(theme2) {
  return !!themes[theme2];
}
function setDefaultTheme(theme2) {
  if (hasTheme(theme2)) {
    defaultTheme = theme2;
  }
}
function classnames() {
  var classes = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    classes[_i] = arguments[_i];
  }
  return getTheme(defaultTheme).classnames.apply(null, classes);
}
function getClassPrefix() {
  return getTheme(defaultTheme).classPrefix;
}
function getTheme(theme2) {
  if (typeof theme2 !== "string") {
    theme2 = "cxd";
  }
  var config = themes[theme2 || "cxd"];
  if (!config.getRendererConfig) {
    config.getRendererConfig = function(name) {
      var config2 = themes[theme2 || "cxd"];
      return config2.renderers && name ? config2.renderers[name] : null;
    };
  }
  if (!config.classnames) {
    var ns = config.classPrefix;
    config.classnames = config.classnames || makeClassnames(ns);
  }
  if (!config.getComponentConfig) {
    config.getComponentConfig = function(name) {
      return config.components && name ? config.components[name] : null;
    };
  }
  return config;
}
var defaultTheme = "cxd";
var ThemeContext = import_react23.default.createContext("");
function themeable(ComposedComponent) {
  var _a3;
  var result = (0, import_hoist_non_react_statics10.default)((_a3 = /** @class */
  function(_super) {
    __extends(class_1, _super);
    function class_1(props) {
      var _this = _super.call(this, props) || this;
      _this.childRef = _this.childRef.bind(_this);
      _this.getWrappedInstance = _this.getWrappedInstance.bind(_this);
      return _this;
    }
    class_1.prototype.childRef = function(ref) {
      while (ref && ref.getWrappedInstance) {
        ref = ref.getWrappedInstance();
      }
      this.ref = ref;
    };
    class_1.prototype.getWrappedInstance = function() {
      return this.ref;
    };
    class_1.prototype.render = function() {
      var _a4;
      var theme2 = this.props.theme || this.context || defaultTheme;
      var config = hasTheme(theme2) ? getTheme(theme2) : getTheme(defaultTheme);
      var injectedProps = {
        classPrefix: config.classPrefix,
        classnames: config.classnames,
        theme: theme2
      };
      var refConfig = ((_a4 = ComposedComponent.prototype) === null || _a4 === void 0 ? void 0 : _a4.isReactComponent) ? { ref: this.childRef } : { forwardedRef: this.childRef };
      var body = import_react23.default.createElement(ComposedComponent, __assign({}, config.getComponentConfig(ComposedComponent.themeKey), this.props, injectedProps, refConfig));
      return this.context ? body : import_react23.default.createElement(ThemeContext.Provider, { value: theme2 }, body);
    };
    return class_1;
  }(import_react23.default.Component), _a3.displayName = "Themeable(".concat(ComposedComponent.displayName || ComposedComponent.name, ")"), _a3.contextType = ThemeContext, _a3.ComposedComponent = ComposedComponent, _a3), ComposedComponent);
  return result;
}

// node_modules/amis-core/esm/components/PopOver.js
var import_react24 = __toESM(require_react());
var import_react_dom13 = __toESM(require_react_dom());
var import_chunk8 = __toESM(require_chunk());
var import_isPlainObject25 = __toESM(require_isPlainObject());
init_moment();
var import_isObject10 = __toESM(require_isObject());
var import_isString10 = __toESM(require_isString());
var import_isBoolean9 = __toESM(require_isBoolean());
var import_isEqual17 = __toESM(require_isEqual());
var import_debounce9 = __toESM(require_debounce());
var import_cloneDeep10 = __toESM(require_cloneDeep());
var import_mapValues8 = __toESM(require_mapValues());
var import_camelCase8 = __toESM(require_camelCase());
var import_map9 = __toESM(require_map());
var import_isEmpty10 = __toESM(require_isEmpty());
var import_kebabCase9 = __toESM(require_kebabCase());
var import_hoist_non_react_statics11 = __toESM(require_hoist_non_react_statics_cjs());
var PopOver = (
  /** @class */
  function(_super) {
    __extends(PopOver2, _super);
    function PopOver2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.state = {
        xOffset: 0,
        yOffset: 0
      };
      _this.wrapperRef = import_react24.default.createRef();
      _this.isRootClosed = false;
      return _this;
    }
    PopOver2.prototype.componentDidMount = function() {
      this.mayUpdateOffset();
      var dom = (0, import_react_dom13.findDOMNode)(this);
      this.parent = dom.parentNode;
      this.parent.classList.add("has-popover");
      if (this.wrapperRef && this.wrapperRef.current) {
        this.wrapperRef.current.addEventListener("touchmove", preventDefault, {
          passive: false,
          capture: false
        });
      }
      document.body.addEventListener("mousedown", this.handleRootMouseDownCapture, true);
      document.body.addEventListener("mouseup", this.handleRootMouseUpCapture, true);
      document.body.addEventListener("mouseup", this.handleRootMouseUp);
    };
    PopOver2.prototype.componentDidUpdate = function() {
      this.mayUpdateOffset();
    };
    PopOver2.prototype.componentWillUnmount = function() {
      this.parent && this.parent.classList.remove("has-popover");
      if (this.wrapperRef && this.wrapperRef.current) {
        this.wrapperRef.current.removeEventListener("touchmove", preventDefault);
      }
      document.body.removeEventListener("mouseup", this.handleRootMouseUp);
      document.body.removeEventListener("mousedown", this.handleRootMouseDownCapture, true);
      document.body.removeEventListener("mouseup", this.handleRootMouseUpCapture, true);
    };
    PopOver2.prototype.handleRootMouseDownCapture = function(e) {
      var target = e.target;
      var _a3 = this.props, closeOnOutside = _a3.overlay, ns = _a3.classPrefix;
      var isLeftButton = e.button === 1 && window.event !== null || e.button === 0;
      this.isRootClosed = !!(isLeftButton && closeOnOutside && target && this.wrapperRef.current && !this.wrapperRef.current.getAttribute(SubPopoverDisplayedID) && (!this.wrapperRef.current.contains(target) && !target.closest("[role=dialog]") || target.matches(".".concat(ns, "Modal")) && target === this.wrapperRef.current));
    };
    PopOver2.prototype.handleRootMouseUpCapture = function(e) {
      if (!this.isRootClosed) {
        return;
      }
      this.handleRootMouseDownCapture(e);
    };
    PopOver2.prototype.handleRootMouseUp = function(e) {
      var onHide = this.props.onHide;
      if (this.isRootClosed && !e.defaultPrevented) {
        var captureClick_1 = function(e2) {
          e2.stopPropagation();
          window.removeEventListener("click", captureClick_1, true);
        };
        window.addEventListener("click", captureClick_1, true);
        onHide === null || onHide === void 0 ? void 0 : onHide();
      }
    };
    PopOver2.prototype.mayUpdateOffset = function() {
      var offset2;
      var getOffset = this.props.offset;
      if (getOffset && typeof getOffset === "function") {
        var _a3 = this.props, placement = _a3.placement, y = _a3.positionTop, x = _a3.positionLeft;
        offset2 = getOffset((0, import_react_dom13.findDOMNode)(this).getBoundingClientRect(), {
          x,
          y,
          placement
        });
      } else {
        offset2 = getOffset;
      }
      this.setState({
        xOffset: offset2 && offset2.x ? offset2.x : 0,
        yOffset: offset2 && offset2.y ? offset2.y : 0
      });
    };
    PopOver2.prototype.render = function() {
      var _a3 = this.props;
      _a3.placement;
      var activePlacement = _a3.activePlacement, positionTop = _a3.positionTop, positionLeft = _a3.positionLeft;
      _a3.arrowOffsetLeft;
      _a3.arrowOffsetTop;
      var style = _a3.style, children = _a3.children;
      _a3.offset;
      var overlay = _a3.overlay, onHide = _a3.onHide, ns = _a3.classPrefix, cx5 = _a3.classnames, className = _a3.className, rest = __rest(_a3, ["placement", "activePlacement", "positionTop", "positionLeft", "arrowOffsetLeft", "arrowOffsetTop", "style", "children", "offset", "overlay", "onHide", "classPrefix", "classnames", "className"]);
      var _b3 = this.state, xOffset = _b3.xOffset, yOffset = _b3.yOffset;
      var outerStyle = __assign(__assign({ display: "block" }, style), { top: positionTop + yOffset, left: positionLeft + xOffset });
      var placements = typeof activePlacement === "string" ? activePlacement.split("-") : [];
      return import_react24.default.createElement(
        "div",
        __assign({ ref: this.wrapperRef, role: "popover", className: cx5("PopOver", className, "PopOver--".concat(camel(activePlacement)), placements[3] ? "PopOver--v-".concat(placements[3]) : ""), style: outerStyle }, rest),
        overlay ? import_react24.default.createElement("div", { className: "".concat(ns, "PopOver-overlay"), onClick: onHide }) : null,
        children
      );
    };
    PopOver2.defaultProps = {
      className: "",
      offset: {
        x: 0,
        y: 0
      },
      overlay: false,
      placement: "auto"
    };
    __decorate([
      autobind,
      __metadata("design:type", Function),
      __metadata("design:paramtypes", [MouseEvent]),
      __metadata("design:returntype", void 0)
    ], PopOver2.prototype, "handleRootMouseDownCapture", null);
    __decorate([
      autobind,
      __metadata("design:type", Function),
      __metadata("design:paramtypes", [MouseEvent]),
      __metadata("design:returntype", void 0)
    ], PopOver2.prototype, "handleRootMouseUpCapture", null);
    __decorate([
      autobind,
      __metadata("design:type", Function),
      __metadata("design:paramtypes", [MouseEvent]),
      __metadata("design:returntype", void 0)
    ], PopOver2.prototype, "handleRootMouseUp", null);
    return PopOver2;
  }(import_react24.default.PureComponent)
);
var PopOver$1 = themeable(PopOver);

// node_modules/amis-core/esm/components/CustomStyle.js
var import_react25 = __toESM(require_react());
var styleIdCount = /* @__PURE__ */ new Map();
function CustomStyle(props) {
  var config = props.config, env = props.env;
  var themeCss = config.themeCss, classNames = config.classNames, id = config.id, defaultData = config.defaultData, wrapperCustomStyle = config.wrapperCustomStyle;
  if (!themeCss && !wrapperCustomStyle) {
    return null;
  }
  (0, import_react25.useEffect)(function() {
    if (styleIdCount.has(id)) {
      styleIdCount.set(id, styleIdCount.get(id) + 1);
    } else if (id) {
      styleIdCount.set(id, 1);
    }
    return function() {
      if (styleIdCount.has(id)) {
        styleIdCount.set(id, styleIdCount.get(id) - 1);
        if (styleIdCount.get(id) === 0) {
          styleIdCount.delete(id);
        }
      }
    };
  }, [id]);
  (0, import_react25.useEffect)(function() {
    var _a3, _b3;
    if (themeCss && id) {
      insertCustomStyle(themeCss, classNames, id, defaultData, env === null || env === void 0 ? void 0 : env.customStyleClassPrefix, (_b3 = (_a3 = env.getModalContainer) === null || _a3 === void 0 ? void 0 : _a3.call(env)) === null || _b3 === void 0 ? void 0 : _b3.ownerDocument);
    }
    return function() {
      var _a4, _b4;
      if (id && !styleIdCount.get(id)) {
        removeCustomStyle("", id, (_b4 = (_a4 = env.getModalContainer) === null || _a4 === void 0 ? void 0 : _a4.call(env)) === null || _b4 === void 0 ? void 0 : _b4.ownerDocument);
      }
    };
  }, [themeCss, id]);
  (0, import_react25.useEffect)(function() {
    var _a3, _b3;
    if (wrapperCustomStyle && id) {
      insertEditCustomStyle(wrapperCustomStyle, id, (_b3 = (_a3 = env.getModalContainer) === null || _a3 === void 0 ? void 0 : _a3.call(env)) === null || _b3 === void 0 ? void 0 : _b3.ownerDocument);
    }
    return function() {
      var _a4, _b4;
      if (id && !styleIdCount.get(id)) {
        removeCustomStyle("wrapperCustomStyle", id, (_b4 = (_a4 = env.getModalContainer) === null || _a4 === void 0 ? void 0 : _a4.call(env)) === null || _b4 === void 0 ? void 0 : _b4.ownerDocument);
      }
    };
  }, [wrapperCustomStyle, id]);
  return null;
}

// node_modules/amis-core/esm/renderers/Item.js
var import_react27 = __toESM(require_react());
var import_hoist_non_react_statics13 = __toESM(require_hoist_non_react_statics_cjs());

// node_modules/amis-core/esm/renderers/wrapControl.js
var import_react26 = __toESM(require_react());
var import_debounce10 = __toESM(require_debounce());
var import_isEqual18 = __toESM(require_isEqual());
var import_hoist_non_react_statics12 = __toESM(require_hoist_non_react_statics_cjs());
var import_pick4 = __toESM(require_pick());
var import_chunk9 = __toESM(require_chunk());
var import_isPlainObject26 = __toESM(require_isPlainObject());
init_moment();
var import_react_dom14 = __toESM(require_react_dom());
var import_isObject11 = __toESM(require_isObject());
var import_cloneDeep11 = __toESM(require_cloneDeep());
var import_mapValues9 = __toESM(require_mapValues());
var import_camelCase9 = __toESM(require_camelCase());
var import_map10 = __toESM(require_map());
var import_isEmpty11 = __toESM(require_isEmpty());
var import_kebabCase10 = __toESM(require_kebabCase());
function wrapControl(ComposedComponent) {
  var _a3;
  var result = (0, import_hoist_non_react_statics12.default)(withRootStore(observer((_a3 = /** @class */
  function(_super) {
    __extends(class_1, _super);
    function class_1(props) {
      var _this = this;
      var _a4;
      _this = _super.call(this, props) || this;
      _this.value = void 0;
      _this.lazyEmitChange = (0, import_debounce10.default)(_this.emitChange.bind(_this), 250, {
        trailing: true,
        leading: false
      });
      var _b3 = _this.props, form = _b3.formStore, formItem = _b3.formItem, rootStore = _b3.rootStore, store2 = _b3.store, onChange = _b3.onChange, data = _b3.data, inputGroupControl = _b3.inputGroupControl, colIndex = _b3.colIndex, rowIndex = _b3.rowIndex, _c = _b3.$schema, id = _c.id, type = _c.type, required = _c.required, validations2 = _c.validations, validationErrors = _c.validationErrors, unique = _c.unique, value = _c.value, extraName = _c.extraName;
      _c.multiple;
      var delimiter = _c.delimiter, valueField = _c.valueField, labelField = _c.labelField, joinValues = _c.joinValues, extractValue = _c.extractValue, selectFirst = _c.selectFirst, autoFill = _c.autoFill, clearValueOnHidden = _c.clearValueOnHidden, validateApi = _c.validateApi, minLength = _c.minLength, maxLength = _c.maxLength, validateOnChange = _c.validateOnChange, label = _c.label, pagination = _c.pagination;
      _this.getValue = _this.getValue.bind(_this);
      _this.setValue = _this.setValue.bind(_this);
      _this.handleChange = _this.handleChange.bind(_this);
      _this.setPrinstineValue = _this.setPrinstineValue.bind(_this);
      _this.controlRef = _this.controlRef.bind(_this);
      _this.handleBlur = _this.handleBlur.bind(_this);
      _this.validate = _this.validate.bind(_this);
      _this.flushChange = _this.flushChange.bind(_this);
      _this.renderChild = _this.renderChild.bind(_this);
      var name = _this.props.$schema.name;
      if (isExpression(name)) {
        name = tokenize(name, data);
      }
      if (!name) {
        return _this;
      }
      var propValue = _this.props.value;
      var model = rootStore.addStore({
        id: guid(),
        path: _this.props.$path,
        storeType: FormItemStore.name,
        parentId: store2 === null || store2 === void 0 ? void 0 : store2.id,
        name,
        colIndex: colIndex !== void 0 ? colIndex : void 0,
        rowIndex: rowIndex !== void 0 ? rowIndex : void 0
      });
      _this.model = model;
      formItem === null || formItem === void 0 ? void 0 : formItem.addSubFormItem(model);
      model.config(__assign(__assign({}, (0, import_pick4.default)(__assign(__assign({}, ComposedComponent.defaultProps), _this.props.$schema), ["multiple"])), { id, type, required: props.required || required, unique, value, isValueSchemaExp: isExpression(value), rules: validations2, messages: validationErrors, delimiter, valueField, labelField, joinValues, extractValue, selectFirst, autoFill, clearValueOnHidden, validateApi, minLength, maxLength, validateOnChange, label, inputGroupControl, extraName, pagination }));
      if (_this.model.unique && ((_a4 = form === null || form === void 0 ? void 0 : form.parentStore) === null || _a4 === void 0 ? void 0 : _a4.storeType) === ComboStore.name) {
        var combo = form.parentStore;
        combo.bindUniuqueItem(model);
      }
      if (propValue !== void 0 && propValue !== null) {
        model.changeTmpValue(propValue, "controlled");
        model.setIsControlled(true);
      } else {
        var isExp2 = isExpression(value);
        if (isExp2) {
          model.changeTmpValue(
            FormulaExec["formula"](value, data),
            // 对组件默认值进行运算
            "formulaChanged"
          );
        } else {
          var initialValue = model.extraName ? [
            store2 === null || store2 === void 0 ? void 0 : store2.getValueByName(model.name, form === null || form === void 0 ? void 0 : form.canAccessSuperData),
            store2 === null || store2 === void 0 ? void 0 : store2.getValueByName(model.extraName, form === null || form === void 0 ? void 0 : form.canAccessSuperData)
          ] : store2 === null || store2 === void 0 ? void 0 : store2.getValueByName(model.name, form === null || form === void 0 ? void 0 : form.canAccessSuperData);
          if (model.extraName && initialValue.every(function(item) {
            return item === void 0;
          })) {
            initialValue = void 0;
          }
          model.changeTmpValue(initialValue !== null && initialValue !== void 0 ? initialValue : replaceExpression(value), typeof initialValue !== "undefined" ? "initialValue" : "defaultValue");
        }
      }
      if (onChange && value !== void 0 && model.tmpValue !== void 0) {
        if (model.extraName) {
          var values2 = model.splitExtraValue(model.tmpValue);
          onChange(values2[0], model.name, false, true);
          onChange(values2[1], model.extraName, false, true);
        } else {
          onChange(model.tmpValue, model.name, false, true);
        }
      } else if (onChange && typeof propValue === "undefined" && typeof (store2 === null || store2 === void 0 ? void 0 : store2.getValueByName(model.name, false)) === "undefined" && // todo 后续再优化这个判断，
      // 目前 input-table 中默认值会给冲掉，所以加上这个判断
      // 对应 issue 为 https://github.com/baidu/amis/issues/2674
      (store2 === null || store2 === void 0 ? void 0 : store2.storeType) !== TableStore.name) {
        if (model.extraName) {
          var values2 = model.splitExtraValue(model.tmpValue);
          onChange(values2[0], model.name, false, true);
          onChange(values2[1], model.extraName, false, true);
        } else {
          onChange(model.tmpValue, model.name, false, true);
        }
      }
      return _this;
    }
    class_1.prototype.componentDidMount = function() {
      var _this = this;
      var _a4 = this.props;
      _a4.store;
      _a4.formStore;
      var validate2 = _a4.$schema.validate, addHook = _a4.addHook;
      this.hook3 = function() {
        _this.lazyEmitChange.flush();
      };
      addHook === null || addHook === void 0 ? void 0 : addHook(this.hook3, "flush");
      var formItem = this.model;
      if (formItem && validate2) {
        var finalValidate_1 = promisify(validate2.bind(this.control));
        this.hook2 = function() {
          formItem.clearError("control:valdiate");
          return finalValidate_1(_this.props.data, _this.getValue(), formItem.name).then(function(ret) {
            if ((typeof ret === "string" || Array.isArray(ret)) && ret) {
              formItem.addError(ret, "control:valdiate");
            }
          });
        };
        addHook === null || addHook === void 0 ? void 0 : addHook(this.hook2);
      }
    };
    class_1.prototype.componentDidUpdate = function(prevProps) {
      var _a4, _b3, _c;
      var props = this.props;
      var model = this.model;
      if (!model) {
        return;
      }
      changedEffect([
        "id",
        "validations",
        "validationErrors",
        "value",
        "defaultValue",
        "required",
        "unique",
        "multiple",
        "delimiter",
        "valueField",
        "labelField",
        "joinValues",
        "extractValue",
        "selectFirst",
        "autoFill",
        "clearValueOnHidden",
        "validateApi",
        "minLength",
        "maxLength",
        "label",
        "extraName",
        "pagination"
      ], prevProps.$schema, props.$schema, function(changes) {
        model.config(__assign(__assign({}, changes), {
          // todo 优化后面两个
          isValueSchemaExp: isExpression(props.$schema.value),
          inputGroupControl: props === null || props === void 0 ? void 0 : props.inputGroupControl
        }));
      });
      if (props.required !== prevProps.required) {
        model.config({
          required: props.required
        });
      }
      if (typeof props.value !== "undefined") {
        if (!(0, import_isEqual18.default)(props.value, prevProps.value) && !(0, import_isEqual18.default)(props.value, model.tmpValue)) {
          model.changeTmpValue(props.value, "controlled");
        }
      } else if (typeof props.defaultValue !== "undefined" && isExpression(props.defaultValue) && (!(0, import_isEqual18.default)(props.defaultValue, prevProps.defaultValue) || props.data !== prevProps.data && isNeedFormula(props.defaultValue, props.data, prevProps.data))) {
        var curResult = FormulaExec["formula"](props.defaultValue, props.data);
        var prevResult = FormulaExec["formula"](prevProps.defaultValue, prevProps.data);
        if (!(0, import_isEqual18.default)(curResult, prevResult) && !(0, import_isEqual18.default)(curResult, model.tmpValue)) {
          model.changeTmpValue(curResult, "formulaChanged");
          if (model.extraName) {
            var values2 = model.splitExtraValue(curResult);
            (_a4 = props.onChange) === null || _a4 === void 0 ? void 0 : _a4.call(props, values2[0], model.name, false);
            (_b3 = props.onChange) === null || _b3 === void 0 ? void 0 : _b3.call(props, values2[1], model.extraName, false);
          } else {
            (_c = props.onChange) === null || _c === void 0 ? void 0 : _c.call(props, curResult, model.name, false);
          }
        }
      } else {
        if (
          // 然后才是查看关联的 name 属性值是否变化
          props.data !== prevProps.data && (!model.emitedValue || (0, import_isEqual18.default)(model.emitedValue, model.tmpValue))
        ) {
          model.changeEmitedValue(void 0);
          var valueByName = model.extraName ? [
            getVariable(props.data, model.name, false),
            getVariable(props.data, model.extraName, false)
          ] : getVariable(props.data, model.name, false);
          if (!(0, import_isEqual18.default)(valueByName, model.extraName ? model.splitExtraValue(model.tmpValue) : model.tmpValue) && (!(0, import_isEqual18.default)(model.extraName ? valueByName[0] : valueByName, getVariable(prevProps.data, model.name, false)) || // extraName
          model.extraName && !(0, import_isEqual18.default)(valueByName[1], getVariable(prevProps.data, model.extraName, false)))) {
            model.changeTmpValue(valueByName, props.formInited && !prevProps.formInited ? "formInited" : "dataChanged");
            this.checkValidate();
          }
        }
      }
    };
    class_1.prototype.componentWillUnmount = function() {
      var _a4, _b3, _c, _d, _e, _f, _g;
      this.hook && ((_b3 = (_a4 = this.props).removeHook) === null || _b3 === void 0 ? void 0 : _b3.call(_a4, this.hook));
      this.hook2 && ((_d = (_c = this.props).removeHook) === null || _d === void 0 ? void 0 : _d.call(_c, this.hook2));
      this.hook3 && ((_f = (_e = this.props).removeHook) === null || _f === void 0 ? void 0 : _f.call(_e, this.hook3, "flush"));
      this.lazyEmitChange.cancel();
      (_g = this.reaction) === null || _g === void 0 ? void 0 : _g.call(this);
      this.disposeModel();
    };
    class_1.prototype.disposeModel = function() {
      var _a4;
      var _b3 = this.props, form = _b3.formStore, formItem = _b3.formItem, rootStore = _b3.rootStore;
      if (this.model && this.model.unique && (form === null || form === void 0 ? void 0 : form.parentStore) && (form === null || form === void 0 ? void 0 : form.parentStore.storeType) === ComboStore.name) {
        var combo = form.parentStore;
        combo.unBindUniuqueItem(this.model);
      }
      if (this.model) {
        formItem && isAlive(formItem) && formItem.removeSubFormItem(this.model);
        this.model.clearValueOnHidden && ((_a4 = this.model.form) === null || _a4 === void 0 ? void 0 : _a4.deleteValueByName(this.model.name));
        isAlive(rootStore) && rootStore.removeStore(this.model);
      }
      delete this.model;
    };
    class_1.prototype.controlRef = function(control) {
      var _this = this;
      var _a4 = this.props, addHook = _a4.addHook, removeHook = _a4.removeHook;
      _a4.formStore;
      while (control && control.getWrappedInstance) {
        control = control.getWrappedInstance();
      }
      if (control && control.validate && this.model) {
        var formItem_1 = this.model;
        var validate_1 = promisify(control.validate.bind(control));
        this.hook = function() {
          formItem_1.clearError("component:valdiate");
          return validate_1(_this.props.data, _this.getValue(), formItem_1.name).then(function(ret) {
            if ((typeof ret === "string" || Array.isArray(ret)) && ret) {
              formItem_1.setError(ret, "component:valdiate");
            }
          });
        };
        addHook === null || addHook === void 0 ? void 0 : addHook(this.hook);
      } else if (!control && this.hook) {
        removeHook === null || removeHook === void 0 ? void 0 : removeHook(this.hook);
        this.hook = void 0;
      }
      var originRef = this.control;
      this.control = control;
      var scoped = this.context;
      if (control) {
        scoped.registerComponent(this.control);
      } else if (originRef) {
        scoped.unRegisterComponent(originRef);
      }
    };
    class_1.prototype.checkValidate = function() {
      var _a4;
      if (!this.model)
        return;
      var validated = this.model.validated;
      var _b3 = this.props, formSubmited = _b3.formSubmited, validateOnChange = _b3.validateOnChange;
      if (
        // 如果配置了 minLength 或者 maxLength 就切成及时验证
        // this.model.rules.minLength ||
        // this.model.rules.maxLength ||
        validateOnChange === true || validateOnChange !== false && (formSubmited || validated)
      ) {
        this.validate();
      } else if (validateOnChange === false) {
        (_a4 = this.model) === null || _a4 === void 0 ? void 0 : _a4.reset();
      }
    };
    class_1.prototype.validate = function() {
      return __awaiter(this, void 0, void 0, function() {
        var _a4, form, data, formItemDispatchEvent, result2, combo, group, validPromises, valid;
        return __generator(this, function(_b3) {
          switch (_b3.label) {
            case 0:
              if (!this.model)
                return [
                  2
                  /*return*/
                ];
              _a4 = this.props, form = _a4.formStore, data = _a4.data, formItemDispatchEvent = _a4.formItemDispatchEvent;
              if (!(this.model.unique && (form === null || form === void 0 ? void 0 : form.parentStore) && form.parentStore.storeType === ComboStore.name))
                return [3, 2];
              combo = form.parentStore;
              group = combo.uniques.get(this.model.name);
              validPromises = group.items.map(function(item) {
                return item.validate(data);
              });
              return [4, Promise.all(validPromises)];
            case 1:
              result2 = _b3.sent();
              return [3, 4];
            case 2:
              return [4, this.model.validate(data)];
            case 3:
              result2 = [_b3.sent()];
              _b3.label = 4;
            case 4:
              valid = !result2.some(function(item) {
                return item === false;
              });
              formItemDispatchEvent === null || formItemDispatchEvent === void 0 ? void 0 : formItemDispatchEvent(valid ? "formItemValidateSucc" : "formItemValidateError", data);
              return [2, valid];
          }
        });
      });
    };
    class_1.prototype.flushChange = function() {
      this.lazyEmitChange.flush();
    };
    class_1.prototype.handleChange = function(value, submitOnChange, changeImmediately) {
      if (submitOnChange === void 0) {
        submitOnChange = this.props.$schema.submitOnChange;
      }
      if (changeImmediately === void 0) {
        changeImmediately = false;
      }
      var _a4 = this.props;
      _a4.formStore;
      var onChange = _a4.onChange, _b3 = _a4.$schema, type = _b3.type, pipeOut = _b3.pipeOut, conrolChangeImmediately = _b3.changeImmediately, formInited = _a4.formInited, data = _a4.data;
      if (!this.model || // todo 以后想办法不要強耦合类型。
      ~[
        "service",
        "group",
        "hbox",
        "panel",
        "grid",
        "input-group"
      ].indexOf(type)) {
        onChange && onChange.apply(null, arguments);
        return;
      }
      if (pipeOut) {
        var oldValue = this.model.value;
        value = callStrFunction.call(this, pipeOut, ["value", "oldValue", "data"], value, oldValue, data);
      }
      this.model.changeTmpValue(value, "input");
      if (changeImmediately || conrolChangeImmediately || !formInited) {
        this.emitChange(submitOnChange);
      } else {
        this.lazyEmitChange(submitOnChange);
      }
    };
    class_1.prototype.emitChange = function(submitOnChange) {
      if (submitOnChange === void 0) {
        submitOnChange = this.props.$schema.submitOnChange;
      }
      var _a4 = this.props, form = _a4.formStore, onChange = _a4.onChange, _b3 = _a4.$schema, id = _b3.id, label = _b3.label, type = _b3.type, onFormItemChange = _b3.onChange;
      _b3.maxLength;
      _b3.minLength;
      var data = _a4.data, env = _a4.env;
      _a4.validateOnChange;
      _a4.formSubmited;
      if (!this.model) {
        return;
      }
      var model = this.model;
      var value = this.model.tmpValue;
      var oldValue = model.extraName ? [
        getVariable(data, model.name, false),
        getVariable(data, model.extraName, false)
      ] : getVariable(data, model.name, false);
      if (model.extraName ? (0, import_isEqual18.default)(oldValue, value) : oldValue === value) {
        return;
      }
      if (type !== "input-password") {
        env === null || env === void 0 ? void 0 : env.tracker({
          eventType: "formItemChange",
          eventData: {
            id,
            name: model.name,
            label,
            type,
            value
          }
        }, this.props);
      }
      this.model.changeEmitedValue(value);
      if ((onFormItemChange === null || onFormItemChange === void 0 ? void 0 : onFormItemChange(value, oldValue, this.model, form)) === false) {
        return;
      }
      if (!this.model) {
        return;
      }
      if (model.extraName) {
        var values2 = model.splitExtraValue(value);
        onChange === null || onChange === void 0 ? void 0 : onChange(values2[0], model.name);
        onChange === null || onChange === void 0 ? void 0 : onChange(values2[1], model.extraName, submitOnChange === true);
      } else {
        onChange === null || onChange === void 0 ? void 0 : onChange(value, model.name, submitOnChange === true);
      }
      this.checkValidate();
    };
    class_1.prototype.handleBlur = function(e) {
      var _a4 = this.props, onBlur = _a4.onBlur, validateOnBlur = _a4.$schema.validateOnBlur;
      if (validateOnBlur && this.model) {
        this.validate();
      }
      onBlur && onBlur(e);
    };
    class_1.prototype.setPrinstineValue = function(value) {
      if (!this.model) {
        return;
      }
      var model = this.model;
      var _a4 = this.props;
      _a4.formStore;
      var pipeOut = _a4.$schema.pipeOut, onChange = _a4.onChange, oldValue = _a4.value, data = _a4.data;
      if (pipeOut) {
        value = callStrFunction.call(this, pipeOut, ["value", "oldValue", "data"], value, oldValue, data);
      }
      if (model.extraName) {
        var values2 = model.splitExtraValue(value);
        onChange === null || onChange === void 0 ? void 0 : onChange(values2[0], model.name, false, true);
        onChange === null || onChange === void 0 ? void 0 : onChange(values2[1], model.extraName, false, true);
      } else {
        onChange === null || onChange === void 0 ? void 0 : onChange(value, model.name, false, true);
      }
    };
    class_1.prototype.getValue = function() {
      var _a4 = this.props, data = _a4.formStore, control = _a4.$schema;
      var value = this.model ? this.model.tmpValue : control.value;
      if (control.pipeIn) {
        value = callStrFunction.call(this, control.pipeIn, ["value", "data"], value, data);
      }
      return value;
    };
    class_1.prototype.setValue = function(value, key) {
      var _a4;
      var onBulkChange = this.props.onBulkChange;
      if (!key || this.model && key === this.model.name) {
        this.handleChange(value);
      } else {
        onBulkChange && onBulkChange((_a4 = {}, _a4[key] = value, _a4));
      }
    };
    class_1.prototype.renderChild = function(region, node, subProps) {
      if (subProps === void 0) {
        subProps = {};
      }
      var _a4 = this.props, render3 = _a4.render, data = _a4.data, store2 = _a4.store;
      var model = this.model;
      return render3(region, node, __assign({ data: model ? model.getMergedData(data || (store2 === null || store2 === void 0 ? void 0 : store2.data)) : data || (store2 === null || store2 === void 0 ? void 0 : store2.data) }, subProps));
    };
    class_1.prototype.render = function() {
      var _a4, _b3, _c;
      var _d = this.props, controlWidth = _d.controlWidth, disabled = _d.disabled, formMode = _d.formMode, control = _d.$schema, store2 = _d.store, data = _d.data, invisible = _d.invisible, defaultStatic = _d.defaultStatic;
      if (invisible) {
        return null;
      }
      var value = this.getValue();
      var model = this.model;
      var injectedProps = {
        defaultSize: controlWidth,
        disabled: disabled !== null && disabled !== void 0 ? disabled : control.disabled,
        static: (_b3 = (_a4 = this.props.static) !== null && _a4 !== void 0 ? _a4 : control.static) !== null && _b3 !== void 0 ? _b3 : defaultStatic,
        formItem: this.model,
        formMode: control.mode || formMode,
        ref: this.controlRef,
        data: data || (store2 === null || store2 === void 0 ? void 0 : store2.data),
        name: (_c = model === null || model === void 0 ? void 0 : model.name) !== null && _c !== void 0 ? _c : control.name,
        value,
        changeMotivation: model === null || model === void 0 ? void 0 : model.changeMotivation,
        defaultValue: control.value,
        formItemValue: value,
        onChange: this.handleChange,
        onBlur: this.handleBlur,
        setValue: this.setValue,
        getValue: this.getValue,
        prinstine: model ? model.prinstine : void 0,
        setPrinstineValue: this.setPrinstineValue,
        onValidate: this.validate,
        onFlushChange: this.flushChange
        // render: this.renderChild // 如果覆盖，那么用的就是 form 上的 render，这个里面用到的 data 是比较旧的。
        // !没了这个， tree 里的 options 渲染会出问题
        // todo 理论上不应该影响，待确认
        // _filteredOptions: this.model?.filteredOptions
      };
      return import_react26.default.createElement(ComposedComponent, __assign({}, this.props, injectedProps));
    };
    return class_1;
  }(import_react26.default.Component), _a3.displayName = "WrapControl".concat(ComposedComponent.displayName || ComposedComponent.name ? "(".concat(ComposedComponent.displayName || ComposedComponent.name, ")") : ""), _a3.contextType = ScopedContext, _a3.defaultProps = {}, _a3))), ComposedComponent);
  return result;
}

// node_modules/amis-core/esm/renderers/Item.js
var import_debounce11 = __toESM(require_debounce());
var import_react_dom15 = __toESM(require_react_dom());
var import_chunk10 = __toESM(require_chunk());
init_moment();
var import_isPlainObject27 = __toESM(require_isPlainObject());
var import_isObject12 = __toESM(require_isObject());
var import_isString11 = __toESM(require_isString());
var import_isBoolean10 = __toESM(require_isBoolean());
var import_isEqual19 = __toESM(require_isEqual());
var import_cloneDeep12 = __toESM(require_cloneDeep());
var import_mapValues10 = __toESM(require_mapValues());
var import_camelCase10 = __toESM(require_camelCase());
var import_classnames4 = __toESM(require_classnames());
var getItemLabelClassName = function(props) {
  var staticLabelClassName = props.staticLabelClassName, labelClassName = props.labelClassName, id = props.id, themeCss = props.themeCss;
  return props.static && staticLabelClassName ? staticLabelClassName : (0, import_classnames4.default)(labelClassName, setThemeClassName("labelClassName", id, themeCss, "item"));
};
var getItemInputClassName = function(props) {
  var staticInputClassName = props.staticInputClassName, inputClassName = props.inputClassName;
  return props.static && staticInputClassName ? staticInputClassName : inputClassName;
};
var FormItemWrap = (
  /** @class */
  function(_super) {
    __extends(FormItemWrap2, _super);
    function FormItemWrap2(props) {
      var _this = _super.call(this, props) || this;
      _this.reaction = [];
      _this.syncAutoFill = (0, import_debounce11.default)(function(term, reload) {
        (function(term2, reload2) {
          return __awaiter(_this, void 0, void 0, function() {
            var _a3, autoFill, onBulkChange, formItem, data, itemName, ctx, result;
            var _b3;
            var _c, _d;
            return __generator(this, function(_e) {
              switch (_e.label) {
                case 0:
                  _a3 = this.props, autoFill = _a3.autoFill, onBulkChange = _a3.onBulkChange, formItem = _a3.formItem, data = _a3.data;
                  if (!autoFill || autoFill && !(autoFill === null || autoFill === void 0 ? void 0 : autoFill.hasOwnProperty("api"))) {
                    return [
                      2
                      /*return*/
                    ];
                  }
                  if (!(autoFill === null || autoFill === void 0 ? void 0 : autoFill.showSuggestion))
                    return [3, 1];
                  this.handleAutoFill("change");
                  return [3, 3];
                case 1:
                  itemName = formItem === null || formItem === void 0 ? void 0 : formItem.name;
                  ctx = createObject2(data, (_b3 = {}, _b3[itemName || ""] = term2, _b3));
                  if (!(onBulkChange && isEffectiveApi(autoFill.api, ctx) && this.lastSearchTerm !== term2 || reload2))
                    return [3, 3];
                  return [4, formItem === null || formItem === void 0 ? void 0 : formItem.loadAutoUpdateData(autoFill.api, ctx, !!((_c = autoFill.api) === null || _c === void 0 ? void 0 : _c.silent))];
                case 2:
                  result = _e.sent();
                  this.lastSearchTerm = (_d = result && getVariable(result, itemName)) !== null && _d !== void 0 ? _d : term2;
                  if (autoFill === null || autoFill === void 0 ? void 0 : autoFill.fillMapping) {
                    result = dataMapping(autoFill.fillMapping, result);
                  }
                  result && (onBulkChange === null || onBulkChange === void 0 ? void 0 : onBulkChange(result));
                  _e.label = 3;
                case 3:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        })(term, reload).catch(function(e) {
          return console.error(e);
        });
      }, 250, {
        trailing: true,
        leading: false
      });
      _this.state = {
        isOpened: false
      };
      var model = props.formItem;
      if (model) {
        _this.reaction.push(reaction(function() {
          return "".concat(model.errors.join("")).concat(model.isFocused).concat(model.dialogOpen);
        }, function() {
          return _this.forceUpdate();
        }));
        _this.reaction.push(reaction(function() {
          return model === null || model === void 0 ? void 0 : model.filteredOptions;
        }, function() {
          return _this.forceUpdate();
        }));
        _this.reaction.push(reaction(function() {
          return JSON.stringify(model.tmpValue);
        }, function() {
          return _this.syncAutoFill(model.tmpValue);
        }));
      }
      return _this;
    }
    FormItemWrap2.prototype.componentDidUpdate = function(prevProps) {
      var _a3, _b3, _c;
      var props = this.props;
      var model = props.formItem;
      if (isEffectiveApi((_a3 = props.autoFill) === null || _a3 === void 0 ? void 0 : _a3.api, props.data) && isApiOutdated((_b3 = prevProps.autoFill) === null || _b3 === void 0 ? void 0 : _b3.api, (_c = props.autoFill) === null || _c === void 0 ? void 0 : _c.api, prevProps.data, props.data)) {
        this.syncAutoFill(model === null || model === void 0 ? void 0 : model.tmpValue, true);
      }
    };
    FormItemWrap2.prototype.componentDidMount = function() {
      this.target = (0, import_react_dom15.findDOMNode)(this);
    };
    FormItemWrap2.prototype.componentWillUnmount = function() {
      this.reaction.forEach(function(fn) {
        return fn();
      });
      this.reaction = [];
      this.syncAutoFill.cancel();
    };
    FormItemWrap2.prototype.handleFocus = function(e) {
      var _a3 = this.props, model = _a3.formItem, autoFill = _a3.autoFill;
      model && model.focus();
      this.props.onFocus && this.props.onFocus(e);
      if (!autoFill || autoFill && !(autoFill === null || autoFill === void 0 ? void 0 : autoFill.hasOwnProperty("showSuggestion"))) {
        return;
      }
      this.handleAutoFill("focus");
    };
    FormItemWrap2.prototype.handleBlur = function(e) {
      var model = this.props.formItem;
      model && model.blur();
      this.props.onBlur && this.props.onBlur(e);
    };
    FormItemWrap2.prototype.handleAutoFill = function(type) {
      var _this = this;
      var _a3 = this.props, autoFill = _a3.autoFill;
      _a3.onBulkChange;
      var formItem = _a3.formItem, data = _a3.data;
      var trigger = autoFill.trigger, mode = autoFill.mode;
      if (trigger === type && mode === "popOver") {
        this.setState({
          isOpened: true
        });
      } else if (
        // 参照录入 dialog | drawer
        trigger === type && (mode === "dialog" || mode === "drawer")
      ) {
        formItem === null || formItem === void 0 ? void 0 : formItem.openDialog(this.buildSchema(), data, function(result) {
          if (!(result === null || result === void 0 ? void 0 : result.selectedItems)) {
            return;
          }
          _this.updateAutoFillData(result.selectedItems);
        });
      }
    };
    FormItemWrap2.prototype.updateAutoFillData = function(context) {
      var _a3 = this.props, formStore = _a3.formStore, autoFill = _a3.autoFill, onBulkChange = _a3.onBulkChange;
      var fillMapping = autoFill.fillMapping, multiple = autoFill.multiple;
      var data = formStore === null || formStore === void 0 ? void 0 : formStore.data;
      var contextData = createObject2(__assign({ items: !multiple ? [context] : context }, data), __assign({}, context));
      var responseData = {};
      responseData = dataMapping(fillMapping, contextData);
      if (!multiple && !fillMapping) {
        responseData = context;
      }
      onBulkChange === null || onBulkChange === void 0 ? void 0 : onBulkChange(responseData);
    };
    FormItemWrap2.prototype.buildSchema = function() {
      var _this = this;
      var _a3 = this.props, render3 = _a3.render, autoFill = _a3.autoFill, ns = _a3.classPrefix, cx5 = _a3.classnames, __ = _a3.translate;
      if (!autoFill || autoFill && !(autoFill === null || autoFill === void 0 ? void 0 : autoFill.hasOwnProperty("api"))) {
        return;
      }
      var api = autoFill.api, mode = autoFill.mode, size = autoFill.size, offset2 = autoFill.offset, position2 = autoFill.position, multiple = autoFill.multiple, filter2 = autoFill.filter, columns = autoFill.columns, labelField = autoFill.labelField, popOverContainer = autoFill.popOverContainer, popOverClassName = autoFill.popOverClassName, valueField = autoFill.valueField;
      var form = {
        type: "form",
        // debug: true,
        title: "",
        className: "suggestion-form",
        body: {
          type: "picker",
          embed: true,
          joinValues: false,
          label: false,
          labelField,
          valueField: valueField || "value",
          multiple,
          name: "selectedItems",
          options: [],
          required: true,
          source: api,
          pickerSchema: {
            type: "crud",
            affixHeader: false,
            alwaysShowPagination: true,
            keepItemSelectionOnPageChange: true,
            headerToolbar: [],
            footerToolbar: [
              {
                type: "pagination",
                align: "left"
              },
              {
                type: "bulkActions",
                align: "right",
                className: "ml-2"
              }
            ],
            multiple,
            filter: filter2,
            columns: columns || []
          }
        },
        actions: [
          {
            type: "button",
            actionType: "cancel",
            label: __("cancel")
          },
          {
            type: "submit",
            actionType: "submit",
            level: "primary",
            label: __("confirm")
          }
        ]
      };
      var schema = {
        type: mode,
        className: "auto-fill-dialog",
        title: __("FormItem.autoFillSuggest"),
        size,
        body: form,
        actions: [
          {
            type: "button",
            actionType: "cancel",
            label: __("cancel")
          },
          {
            type: "submit",
            actionType: "submit",
            level: "primary",
            label: __("confirm")
          }
        ]
      };
      if (mode === "popOver") {
        return import_react27.default.createElement(
          Overlay,
          { container: popOverContainer || this.target, target: function() {
            return _this.target;
          }, placement: position2 || "left-bottom-left-top", show: true },
          import_react27.default.createElement(PopOver$1, { classPrefix: ns, className: cx5("".concat(ns, "auto-fill-popOver"), popOverClassName), style: {
            minWidth: this.target ? this.target.offsetWidth : void 0
          }, offset: offset2, onHide: this.handleClose, overlay: true }, render3("popOver-auto-fill-form", form, {
            onAction: this.handleAction,
            onSubmit: this.handleSubmit
          }))
        );
      } else {
        return schema;
      }
    };
    FormItemWrap2.prototype.handleSubmit = function(values2) {
      var _a3 = this.props;
      _a3.onBulkChange;
      var autoFill = _a3.autoFill;
      if (!autoFill || autoFill && !(autoFill === null || autoFill === void 0 ? void 0 : autoFill.hasOwnProperty("api"))) {
        return;
      }
      this.updateAutoFillData(values2.selectedItems);
      this.handleClose();
    };
    FormItemWrap2.prototype.handleAction = function(e, action, data) {
      if (action.actionType === "cancel") {
        this.handleClose();
      }
    };
    FormItemWrap2.prototype.handleClose = function() {
      this.setState({
        isOpened: false
      });
    };
    FormItemWrap2.prototype.handleOpenDialog = function(schema, data) {
      return __awaiter(this, void 0, void 0, function() {
        var model;
        return __generator(this, function(_a3) {
          model = this.props.formItem;
          if (!model) {
            return [
              2
              /*return*/
            ];
          }
          return [2, new Promise(function(resolve) {
            return model.openDialog(schema, data, function(result) {
              return resolve(result);
            });
          })];
        });
      });
    };
    FormItemWrap2.prototype.handleDialogConfirm = function(_a3) {
      var _b3 = __read(_a3, 1), values2 = _b3[0];
      var model = this.props.formItem;
      if (!model) {
        return;
      }
      model.closeDialog(values2);
    };
    FormItemWrap2.prototype.handleDialogClose = function(confirmed) {
      if (confirmed === void 0) {
        confirmed = false;
      }
      var model = this.props.formItem;
      if (!model) {
        return;
      }
      model.closeDialog(confirmed);
    };
    FormItemWrap2.prototype.renderControl = function() {
      var _a3;
      var _b3 = this.props;
      _b3.inputClassName;
      var model = _b3.formItem, cx5 = _b3.classnames;
      _b3.children;
      var type = _b3.type, renderControl = _b3.renderControl;
      _b3.formItemConfig;
      var sizeMutable = _b3.sizeMutable, size = _b3.size, defaultSize = _b3.defaultSize, mobileUI = _b3.mobileUI, rest = __rest(_b3, ["inputClassName", "formItem", "classnames", "children", "type", "renderControl", "formItemConfig", "sizeMutable", "size", "defaultSize", "mobileUI"]);
      if (renderControl) {
        var controlSize = size || defaultSize;
        return renderControl(__assign(__assign({}, rest), { onOpenDialog: this.handleOpenDialog, type, classnames: cx5, formItem: model, className: cx5("Form-control", (_a3 = {
          "is-inline": !!rest.inline && !mobileUI,
          "is-error": model && !model.valid,
          "is-full": size === "full"
        }, _a3["Form-control--withSize Form-control--size".concat(ucFirst(controlSize))] = sizeMutable !== false && typeof controlSize === "string" && !!controlSize && controlSize !== "full", _a3), model === null || model === void 0 ? void 0 : model.errClassNames, setThemeClassName("wrapperCustomStyle", rest.id, rest.wrapperCustomStyle, "item"), getItemInputClassName(this.props)) }));
      }
      return null;
    };
    FormItemWrap2.prototype.render = function() {
      var _a3 = this.props, formMode = _a3.formMode, inputOnly = _a3.inputOnly, wrap = _a3.wrap, render3 = _a3.render, model = _a3.formItem, css2 = _a3.css, themeCss = _a3.themeCss, id = _a3.id, wrapperCustomStyle = _a3.wrapperCustomStyle, env = _a3.env;
      var mode = this.props.mode || formMode;
      if (wrap === false || inputOnly) {
        return this.renderControl();
      }
      var renderLayout = FormItemWrap2.layoutRenderers[mode] || FormItemWrap2.layoutRenderers["normal"];
      return import_react27.default.createElement(
        import_react27.default.Fragment,
        null,
        renderLayout(this.props, this.renderControl.bind(this)),
        model ? render3("modal", __assign({ type: "dialog" }, model.dialogSchema), {
          show: model.dialogOpen,
          onClose: this.handleDialogClose,
          onConfirm: this.handleDialogConfirm,
          data: model.dialogData,
          formStore: void 0
        }) : null,
        import_react27.default.createElement(CustomStyle, { config: {
          themeCss: themeCss || css2,
          classNames: [
            {
              key: "labelClassName"
            },
            {
              key: "descriptionClassName"
            }
          ],
          wrapperCustomStyle,
          id: id && id + "-item"
        }, env })
      );
    };
    FormItemWrap2.layoutRenderers = {
      horizontal: function(props, renderControl) {
        var _a3, _b3, _c;
        var className = props.className, style = props.style, cx5 = props.classnames, description = props.description, descriptionClassName = props.descriptionClassName, captionClassName = props.captionClassName, desc = props.desc, label = props.label, render3 = props.render, required = props.required, caption = props.caption, remark = props.remark, labelRemark = props.labelRemark, env = props.env, model = props.formItem, renderLabel = props.renderLabel, renderDescription = props.renderDescription, hint = props.hint;
        props.data;
        var showErrorMsg = props.showErrorMsg, mobileUI = props.mobileUI;
        props.translate;
        var isStatic = props.static, staticClassName = props.staticClassName, id = props.id, wrapperCustomStyle = props.wrapperCustomStyle, themeCss = props.themeCss;
        if (renderLabel === false) {
          label = label === false ? false : "";
        }
        description = description || desc;
        var horizontal = props.horizontal || props.formHorizontal || {};
        var left = getWidthRate(horizontal.left);
        var right = getWidthRate(horizontal.right);
        var labelAlign = props.labelAlign || props.formLabelAlign;
        var labelWidth = props.labelWidth || props.formLabelWidth;
        return import_react27.default.createElement(
          "div",
          { "data-role": "form-item", className: cx5("Form-item Form-item--horizontal", isStatic && staticClassName ? staticClassName : className, (_a3 = {
            "Form-item--horizontal-justify": horizontal.justify
          }, _a3["is-error"] = model && !model.valid, _a3["is-required"] = required, _a3), model === null || model === void 0 ? void 0 : model.errClassNames, setThemeClassName("wrapperCustomStyle", id, wrapperCustomStyle, "item")), style },
          label !== false ? import_react27.default.createElement(
            "label",
            { className: cx5("Form-label", (_b3 = {}, _b3["Form-itemColumn--".concat(typeof horizontal.leftFixed === "string" ? horizontal.leftFixed : "normal")] = horizontal.leftFixed, _b3["Form-itemColumn--".concat(left)] = !horizontal.leftFixed, _b3["Form-label--left"] = labelAlign === "left", _b3["Form-label-noLabel"] = label === "", _b3), getItemLabelClassName(props)), style: labelWidth != null ? { width: labelWidth } : void 0 },
            import_react27.default.createElement(
              "span",
              null,
              label ? render3("label", label) : null,
              required && (label || labelRemark) ? import_react27.default.createElement("span", { className: cx5("Form-star") }, "*") : null,
              labelRemark ? render3("label-remark", {
                type: "remark",
                icon: labelRemark.icon || "warning-mark",
                tooltip: labelRemark,
                mobileUI,
                className: cx5("Form-labelRemark"),
                container: props.popOverContainer || env.getModalContainer
              }) : null
            )
          ) : null,
          import_react27.default.createElement(
            "div",
            { className: cx5("Form-value", (_c = {}, // [`Form-itemColumn--offset${getWidthRate(horizontal.offset)}`]: !label && label !== false,
            _c["Form-itemColumn--".concat(right)] = !horizontal.leftFixed && !!right && right !== 12 - left, _c)) },
            renderControl(),
            caption ? render3("caption", caption, {
              className: cx5("Form-caption", captionClassName)
            }) : null,
            remark ? render3("remark", {
              type: "remark",
              icon: remark.icon || "warning-mark",
              tooltip: remark,
              className: cx5("Form-remark"),
              mobileUI,
              container: props.popOverContainer || env.getModalContainer
            }) : null,
            hint && model && model.isFocused ? render3("hint", hint, {
              className: cx5("Form-hint")
            }) : null,
            model && !model.valid && showErrorMsg !== false && Array.isArray(model.errors) ? import_react27.default.createElement("ul", { className: cx5("Form-feedback") }, model.errors.map(function(msg, key) {
              return import_react27.default.createElement("li", { key }, msg);
            })) : null,
            renderDescription !== false && description ? render3("description", description, {
              className: cx5("Form-description", descriptionClassName, setThemeClassName("descriptionClassName", id, themeCss, "item"))
            }) : null
          )
        );
      },
      normal: function(props, renderControl) {
        var _a3;
        var className = props.className, style = props.style, cx5 = props.classnames, desc = props.desc, description = props.description, label = props.label, render3 = props.render, required = props.required, caption = props.caption, remark = props.remark, labelRemark = props.labelRemark, env = props.env, descriptionClassName = props.descriptionClassName, captionClassName = props.captionClassName, model = props.formItem, renderLabel = props.renderLabel, renderDescription = props.renderDescription, hint = props.hint;
        props.data;
        var showErrorMsg = props.showErrorMsg, mobileUI = props.mobileUI;
        props.translate;
        var isStatic = props.static, staticClassName = props.staticClassName, themeCss = props.themeCss, wrapperCustomStyle = props.wrapperCustomStyle, id = props.id;
        description = description || desc;
        return import_react27.default.createElement(
          "div",
          { "data-role": "form-item", className: cx5("Form-item Form-item--normal", isStatic && staticClassName ? staticClassName : className, (_a3 = {
            "is-error": model && !model.valid
          }, _a3["is-required"] = required, _a3), model === null || model === void 0 ? void 0 : model.errClassNames, setThemeClassName("wrapperCustomStyle", id, wrapperCustomStyle, "item")), style },
          label && renderLabel !== false ? import_react27.default.createElement(
            "label",
            { className: cx5("Form-label", getItemLabelClassName(props)) },
            import_react27.default.createElement(
              "span",
              null,
              label ? render3("label", label) : null,
              required && (label || labelRemark) ? import_react27.default.createElement("span", { className: cx5("Form-star") }, "*") : null,
              labelRemark ? render3("label-remark", {
                type: "remark",
                icon: labelRemark.icon || "warning-mark",
                tooltip: labelRemark,
                className: cx5("Form-lableRemark"),
                mobileUI,
                container: props.popOverContainer || env.getModalContainer
              }) : null
            )
          ) : null,
          mobileUI ? import_react27.default.createElement(
            "div",
            { className: cx5("Form-item-controlBox") },
            renderControl(),
            caption ? render3("caption", caption, {
              className: cx5("Form-caption", captionClassName)
            }) : null,
            remark ? render3("remark", {
              type: "remark",
              icon: remark.icon || "warning-mark",
              className: cx5("Form-remark"),
              tooltip: remark,
              mobileUI,
              container: props.popOverContainer || env.getModalContainer
            }) : null,
            hint && model && model.isFocused ? render3("hint", hint, {
              className: cx5("Form-hint")
            }) : null,
            model && !model.valid && showErrorMsg !== false && Array.isArray(model.errors) ? import_react27.default.createElement("ul", { className: cx5("Form-feedback") }, model.errors.map(function(msg, key) {
              return import_react27.default.createElement("li", { key }, msg);
            })) : null,
            renderDescription !== false && description ? render3("description", description, {
              className: cx5("Form-description", descriptionClassName, setThemeClassName("descriptionClassName", id, themeCss, "item"))
            }) : null
          ) : import_react27.default.createElement(
            import_react27.default.Fragment,
            null,
            renderControl(),
            caption ? render3("caption", caption, {
              className: cx5("Form-caption", captionClassName)
            }) : null,
            remark ? render3("remark", {
              type: "remark",
              icon: remark.icon || "warning-mark",
              className: cx5("Form-remark"),
              tooltip: remark,
              mobileUI,
              container: props.popOverContainer || env.getModalContainer
            }) : null,
            hint && model && model.isFocused ? render3("hint", hint, {
              className: cx5("Form-hint")
            }) : null,
            model && !model.valid && showErrorMsg !== false && Array.isArray(model.errors) ? import_react27.default.createElement("ul", { className: cx5("Form-feedback") }, model.errors.map(function(msg, key) {
              return import_react27.default.createElement("li", { key }, msg);
            })) : null,
            renderDescription !== false && description ? render3("description", description, {
              className: cx5("Form-description", descriptionClassName, setThemeClassName("descriptionClassName", id, themeCss, "item"))
            }) : null
          )
        );
      },
      inline: function(props, renderControl) {
        var _a3;
        var className = props.className, style = props.style, cx5 = props.classnames, desc = props.desc, description = props.description, label = props.label, render3 = props.render, required = props.required, caption = props.caption, descriptionClassName = props.descriptionClassName, captionClassName = props.captionClassName, model = props.formItem, remark = props.remark, labelRemark = props.labelRemark, env = props.env, hint = props.hint, renderLabel = props.renderLabel, renderDescription = props.renderDescription;
        props.data;
        var showErrorMsg = props.showErrorMsg, mobileUI = props.mobileUI;
        props.translate;
        var isStatic = props.static, staticClassName = props.staticClassName, themeCss = props.themeCss, wrapperCustomStyle = props.wrapperCustomStyle, id = props.id;
        var labelWidth = props.labelWidth || props.formLabelWidth;
        description = description || desc;
        return import_react27.default.createElement(
          "div",
          { "data-role": "form-item", className: cx5("Form-item Form-item--inline", isStatic && staticClassName ? staticClassName : className, (_a3 = {
            "is-error": model && !model.valid
          }, _a3["is-required"] = required, _a3), model === null || model === void 0 ? void 0 : model.errClassNames, setThemeClassName("wrapperCustomStyle", id, wrapperCustomStyle, "item")), style },
          label && renderLabel !== false ? import_react27.default.createElement(
            "label",
            { className: cx5("Form-label", getItemLabelClassName(props)), style: labelWidth != null ? { width: labelWidth } : void 0 },
            import_react27.default.createElement(
              "span",
              null,
              label ? render3("label", label) : label,
              required && (label || labelRemark) ? import_react27.default.createElement("span", { className: cx5("Form-star") }, "*") : null,
              labelRemark ? render3("label-remark", {
                type: "remark",
                icon: labelRemark.icon || "warning-mark",
                tooltip: labelRemark,
                className: cx5("Form-lableRemark"),
                mobileUI,
                container: props.popOverContainer || env.getModalContainer
              }) : null
            )
          ) : null,
          import_react27.default.createElement(
            "div",
            { className: cx5("Form-value") },
            renderControl(),
            caption ? render3("caption", caption, {
              className: cx5("Form-caption", captionClassName)
            }) : null,
            remark ? render3("remark", {
              type: "remark",
              icon: remark.icon || "warning-mark",
              className: cx5("Form-remark"),
              tooltip: remark,
              mobileUI,
              container: props.popOverContainer || env.getModalContainer
            }) : null,
            hint && model && model.isFocused ? render3("hint", hint, {
              className: cx5("Form-hint")
            }) : null,
            model && !model.valid && showErrorMsg !== false && Array.isArray(model.errors) ? import_react27.default.createElement("ul", { className: cx5("Form-feedback") }, model.errors.map(function(msg, key) {
              return import_react27.default.createElement("li", { key }, msg);
            })) : null,
            renderDescription !== false && description ? render3("description", description, {
              className: cx5("Form-description", descriptionClassName, setThemeClassName("descriptionClassName", id, themeCss, "item"))
            }) : null
          )
        );
      },
      row: function(props, renderControl) {
        var _a3;
        var className = props.className, style = props.style, cx5 = props.classnames, desc = props.desc, description = props.description, label = props.label, render3 = props.render, required = props.required, caption = props.caption, remark = props.remark, labelRemark = props.labelRemark, env = props.env, descriptionClassName = props.descriptionClassName, captionClassName = props.captionClassName, model = props.formItem, renderLabel = props.renderLabel, renderDescription = props.renderDescription, hint = props.hint;
        props.data;
        var showErrorMsg = props.showErrorMsg, mobileUI = props.mobileUI;
        props.translate;
        var isStatic = props.static, staticClassName = props.staticClassName, wrapperCustomStyle = props.wrapperCustomStyle, themeCss = props.themeCss, id = props.id;
        var labelWidth = props.labelWidth || props.formLabelWidth;
        description = description || desc;
        return import_react27.default.createElement(
          "div",
          { "data-role": "form-item", className: cx5("Form-item Form-item--row", isStatic && staticClassName ? staticClassName : className, (_a3 = {
            "is-error": model && !model.valid
          }, _a3["is-required"] = required, _a3), model === null || model === void 0 ? void 0 : model.errClassNames, setThemeClassName("wrapperCustomStyle", id, wrapperCustomStyle, "item")), style },
          import_react27.default.createElement(
            "div",
            { className: cx5("Form-rowInner") },
            label && renderLabel !== false ? import_react27.default.createElement(
              "label",
              { className: cx5("Form-label", getItemLabelClassName(props)), style: labelWidth != null ? { width: labelWidth } : void 0 },
              import_react27.default.createElement(
                "span",
                null,
                render3("label", label),
                required && (label || labelRemark) ? import_react27.default.createElement("span", { className: cx5("Form-star") }, "*") : null,
                labelRemark ? render3("label-remark", {
                  type: "remark",
                  icon: labelRemark.icon || "warning-mark",
                  tooltip: labelRemark,
                  className: cx5("Form-lableRemark"),
                  mobileUI,
                  container: props.popOverContainer || env.getModalContainer
                }) : null
              )
            ) : null,
            renderControl(),
            caption ? render3("caption", caption, {
              className: cx5("Form-caption", captionClassName)
            }) : null,
            remark ? render3("remark", {
              type: "remark",
              icon: remark.icon || "warning-mark",
              className: cx5("Form-remark"),
              tooltip: remark,
              container: props.popOverContainer || env.getModalContainer
            }) : null
          ),
          hint && model && model.isFocused ? render3("hint", hint, {
            className: cx5("Form-hint")
          }) : null,
          model && !model.valid && showErrorMsg !== false && Array.isArray(model.errors) ? import_react27.default.createElement("ul", { className: cx5("Form-feedback") }, model.errors.map(function(msg, key) {
            return import_react27.default.createElement("li", { key }, msg);
          })) : null,
          description && renderDescription !== false ? render3("description", description, {
            className: cx5("Form-description", descriptionClassName, setThemeClassName("descriptionClassName", id, themeCss, "item"))
          }) : null
        );
      }
    };
    __decorate([
      autobind,
      __metadata("design:type", Function),
      __metadata("design:paramtypes", [Object]),
      __metadata("design:returntype", void 0)
    ], FormItemWrap2.prototype, "handleFocus", null);
    __decorate([
      autobind,
      __metadata("design:type", Function),
      __metadata("design:paramtypes", [Object]),
      __metadata("design:returntype", void 0)
    ], FormItemWrap2.prototype, "handleBlur", null);
    __decorate([
      autobind,
      __metadata("design:type", Function),
      __metadata("design:paramtypes", [Object]),
      __metadata("design:returntype", void 0)
    ], FormItemWrap2.prototype, "handleSubmit", null);
    __decorate([
      autobind,
      __metadata("design:type", Function),
      __metadata("design:paramtypes", [Object, Object, Object]),
      __metadata("design:returntype", void 0)
    ], FormItemWrap2.prototype, "handleAction", null);
    __decorate([
      autobind,
      __metadata("design:type", Function),
      __metadata("design:paramtypes", []),
      __metadata("design:returntype", void 0)
    ], FormItemWrap2.prototype, "handleClose", null);
    __decorate([
      autobind,
      __metadata("design:type", Function),
      __metadata("design:paramtypes", [Object, Object]),
      __metadata("design:returntype", Promise)
    ], FormItemWrap2.prototype, "handleOpenDialog", null);
    __decorate([
      autobind,
      __metadata("design:type", Function),
      __metadata("design:paramtypes", [Array]),
      __metadata("design:returntype", void 0)
    ], FormItemWrap2.prototype, "handleDialogConfirm", null);
    __decorate([
      autobind,
      __metadata("design:type", Function),
      __metadata("design:paramtypes", [Object]),
      __metadata("design:returntype", void 0)
    ], FormItemWrap2.prototype, "handleDialogClose", null);
    return FormItemWrap2;
  }(import_react27.default.Component)
);
var detectProps = [
  "formPristine",
  "formInited",
  "addable",
  "addButtonClassName",
  "addButtonText",
  "addOn",
  "btnClassName",
  "btnLabel",
  "style",
  "btnDisabled",
  "className",
  "clearable",
  "columns",
  "columnsCount",
  "controls",
  "desc",
  "description",
  "disabled",
  "static",
  "staticClassName",
  "staticLabelClassName",
  "staticInputClassName",
  "draggable",
  "editable",
  "editButtonClassName",
  "formHorizontal",
  "formMode",
  "hideRoot",
  "horizontal",
  "icon",
  "inline",
  "inputClassName",
  "label",
  "labelClassName",
  "labelField",
  "language",
  "level",
  "max",
  "maxRows",
  "min",
  "minRows",
  "multiLine",
  "multiple",
  "option",
  "placeholder",
  "removable",
  "required",
  "remark",
  "hint",
  "rows",
  "searchable",
  "showCompressOptions",
  "size",
  "step",
  "showInput",
  "unit",
  "value",
  "diffValue",
  "borderMode",
  "items",
  "showCounter",
  "minLength",
  "maxLength",
  "embed",
  "displayMode",
  "revealPassword",
  "loading",
  "themeCss"
];
function asFormItem(config) {
  return function(Control) {
    var _a3;
    var isSFC = !(Control.prototype instanceof import_react27.default.Component);
    if (config.validate && !Control.prototype.validate) {
      var fn_1 = config.validate;
      Control.prototype.validate = function() {
        var host = {
          input: this
        };
        return fn_1.apply(host, arguments);
      };
    } else if (config.validate) {
      console.error("FormItem配置中的 validate 将不起作用，因为类的成员函数中已经定义了 validate 方法，将优先使用类里面的实现。");
    }
    if (config.storeType) {
      Control = HocStoreFactory({
        storeType: config.storeType,
        extendsData: config.extendsData
      })(observer(Control));
      delete config.storeType;
    }
    return wrapControl((0, import_hoist_non_react_statics13.default)((_a3 = /** @class */
    function(_super) {
      __extends(class_1, _super);
      function class_1(props) {
        var _this = _super.call(this, props) || this;
        _this.refFn = _this.refFn.bind(_this);
        var validations2 = props.validations, model = props.formItem;
        if (model && !validations2 && config.validations) {
          model.config({
            rules: config.validations
          });
        }
        return _this;
      }
      class_1.prototype.shouldComponentUpdate = function(nextProps) {
        var _a4;
        if (((_a4 = config.shouldComponentUpdate) === null || _a4 === void 0 ? void 0 : _a4.call(config, this.props, nextProps)) || nextProps.strictMode === false || config.strictMode === false) {
          return true;
        }
        if (anyChanged(detectProps.concat(config.detectProps || []), this.props, nextProps)) {
          return true;
        }
        return false;
      };
      class_1.prototype.getWrappedInstance = function() {
        return this.ref;
      };
      class_1.prototype.refFn = function(ref) {
        this.ref = ref;
      };
      class_1.prototype.renderControl = function() {
        var _a4;
        var _b3 = this.props;
        _b3.inputClassName;
        var model = _b3.formItem, cx5 = _b3.classnames;
        _b3.children;
        var type = _b3.type, size = _b3.size, defaultSize = _b3.defaultSize, mobileUI = _b3.mobileUI, rest = __rest(_b3, ["inputClassName", "formItem", "classnames", "children", "type", "size", "defaultSize", "mobileUI"]);
        var controlSize = size || defaultSize;
        var isOpened = this.state.isOpened;
        return import_react27.default.createElement(
          import_react27.default.Fragment,
          null,
          import_react27.default.createElement(Control, __assign({}, rest, { mobileUI, onOpenDialog: this.handleOpenDialog, size: config.sizeMutable !== false ? void 0 : size, onFocus: this.handleFocus, onBlur: this.handleBlur, type, classnames: cx5, ref: isSFC ? void 0 : this.refFn, forwardedRef: isSFC ? this.refFn : void 0, formItem: model, className: cx5("Form-control", (_a4 = {
            "is-inline": !!rest.inline && !mobileUI,
            "is-error": model && !model.valid,
            "is-full": size === "full"
          }, _a4["Form-control--withSize Form-control--size".concat(ucFirst(controlSize))] = config.sizeMutable !== false && typeof controlSize === "string" && !!controlSize && controlSize !== "full", _a4), model === null || model === void 0 ? void 0 : model.errClassNames, getItemInputClassName(this.props)) })),
          isOpened ? this.buildSchema() : null
        );
      };
      return class_1;
    }(FormItemWrap), _a3.defaultProps = __assign({ className: "", renderLabel: config.renderLabel, renderDescription: config.renderDescription, sizeMutable: config.sizeMutable, wrap: config.wrap, showErrorMsg: config.showErrorMsg }, Control.defaultProps), _a3.propsList = __spreadArray([
      "value",
      "defaultValue",
      "onChange",
      "setPrinstineValue",
      "readOnly",
      "strictMode"
    ], __read(Control.propsList || []), false), _a3.displayName = "FormItem".concat(config.type ? "(".concat(config.type, ")") : ""), _a3.ComposedComponent = Control, _a3), Control));
  };
}
function registerFormItem(config) {
  var Control = asFormItem(config)(config.component);
  return registerRenderer(__assign(__assign({}, config), { weight: typeof config.weight !== "undefined" ? config.weight : -100, component: Control, isFormItem: true }));
}
function FormItem(config) {
  return function(component) {
    var renderer = registerFormItem(__assign(__assign({}, config), { component }));
    return renderer.component;
  };
}
function getFormItemByName(name) {
  return renderersMap[name];
}

// node_modules/amis-core/esm/renderers/Options.js
var import_react28 = __toESM(require_react());
init_moment();
var import_findIndex3 = __toESM(require_findIndex());
var import_isPlainObject28 = __toESM(require_isPlainObject());
var import_chunk11 = __toESM(require_chunk());
var import_react_dom16 = __toESM(require_react_dom());
var import_isObject13 = __toESM(require_isObject());
var import_isString12 = __toESM(require_isString());
var import_isBoolean11 = __toESM(require_isBoolean());
var import_cloneDeep13 = __toESM(require_cloneDeep());
var import_mapValues11 = __toESM(require_mapValues());
var import_camelCase11 = __toESM(require_camelCase());
var import_map11 = __toESM(require_map());
var import_isEmpty12 = __toESM(require_isEmpty());
var import_kebabCase11 = __toESM(require_kebabCase());
var import_hoist_non_react_statics14 = __toESM(require_hoist_non_react_statics_cjs());
var detectProps2 = detectProps.concat([
  "value",
  "options",
  "size",
  "buttons",
  "columnsCount",
  "multiple",
  "hideRoot",
  "checkAll",
  "defaultCheckAll",
  "showIcon",
  "showRadio",
  "btnDisabled",
  "joinValues",
  "extractValue",
  "borderMode",
  "hideSelected"
]);
function registerOptionsControl(config) {
  var Control = config.component;
  var FormOptionsItem = (
    /** @class */
    function(_super) {
      __extends(FormOptionsItem2, _super);
      function FormOptionsItem2(props) {
        var _this = this;
        var _a3;
        _this = _super.call(this, props) || this;
        _this.toDispose = [];
        _this.mounted = false;
        var initFetch = props.initFetch, formItem = props.formItem, source = props.source, data = props.data, setPrinstineValue = props.setPrinstineValue, defaultValue = props.defaultValue, multiple = props.multiple, joinValues = props.joinValues, extractValue = props.extractValue, addHook = props.addHook, formInited = props.formInited, valueField = props.valueField, options = props.options, value = props.value, defaultCheckAll = props.defaultCheckAll;
        if (formItem) {
          formItem.setOptions(normalizeOptions(options, void 0, valueField), _this.changeOptionValue, data);
          _this.toDispose.push(reaction(function() {
            return JSON.stringify([formItem.loading, formItem.filteredOptions]);
          }, function() {
            return _this.mounted && _this.forceUpdate();
          }));
          _this.toDispose.push(reaction(function() {
            return JSON.stringify(formItem.getSelectedOptions(formItem.tmpValue));
          }, function() {
            return _this.mounted && _this.syncAutoFill(formItem.getSelectedOptions(formItem.tmpValue));
          }));
          if (options && formItem.tmpValue && formItem.getSelectedOptions(formItem.tmpValue).length) {
            _this.syncAutoFill(formItem.getSelectedOptions(formItem.tmpValue));
          }
          if (multiple && defaultCheckAll && ((_a3 = formItem.filteredOptions) === null || _a3 === void 0 ? void 0 : _a3.length) && !source) {
            _this.defaultCheckAll();
          }
        }
        var loadOptions = initFetch !== false;
        if (formItem && joinValues === false && defaultValue) {
          var selectedOptions = extractValue ? formItem.getSelectedOptions(value).map(function(selectedOption) {
            return selectedOption[valueField || "value"];
          }) : formItem.getSelectedOptions(value);
          setPrinstineValue(multiple ? selectedOptions.concat() : selectedOptions[0]);
        }
        loadOptions && config.autoLoadOptionsFromSource !== false && (formInited || !addHook ? _this.reload() : addHook && addHook(_this.initOptions, "init"));
        return _this;
      }
      FormOptionsItem2.prototype.componentDidMount = function() {
        this.mounted = true;
        this.normalizeValue();
      };
      FormOptionsItem2.prototype.shouldComponentUpdate = function(nextProps) {
        var _a3;
        if (config.strictMode === false || nextProps.strictMode === false) {
          return true;
        } else if (nextProps.source || nextProps.autoComplete) {
          return true;
        } else if ((_a3 = nextProps.formItem) === null || _a3 === void 0 ? void 0 : _a3.expressionsInOptions) {
          return true;
        } else if (anyChanged(detectProps2, this.props, nextProps)) {
          return true;
        }
        return false;
      };
      FormOptionsItem2.prototype.componentDidUpdate = function(prevProps) {
        var _this = this;
        var props = this.props;
        var formItem = props.formItem;
        if (prevProps.options !== props.options && formItem) {
          formItem.setOptions(normalizeOptions(props.options || [], void 0, props.valueField), this.changeOptionValue, props.data);
          this.normalizeValue();
        } else if (config.autoLoadOptionsFromSource !== false && (props.formInited || typeof props.formInited === "undefined") && props.source && formItem && (prevProps.source !== props.source || prevProps.data !== props.data)) {
          if (isPureVariable(props.source)) {
            var prevOptions = resolveVariableAndFilter(prevProps.source, prevProps.data, "| raw");
            var options = resolveVariableAndFilter(props.source, props.data, "| raw");
            if (prevOptions !== options) {
              formItem.loadOptionsFromDataScope(props.source, props.data, this.changeOptionValue);
              this.normalizeValue();
            }
          } else if (isEffectiveApi(props.source, props.data) && isApiOutdated(prevProps.source, props.source, prevProps.data, props.data)) {
            formItem.loadOptions(props.source, props.data, void 0, true, this.changeOptionValue).then(function() {
              return _this.normalizeValue();
            });
          }
        }
        if (prevProps.value !== props.value || (formItem === null || formItem === void 0 ? void 0 : formItem.expressionsInOptions)) {
          formItem === null || formItem === void 0 ? void 0 : formItem.syncOptions(void 0, props.data);
        }
      };
      FormOptionsItem2.prototype.componentWillUnmount = function() {
        var _a3, _b3;
        (_b3 = (_a3 = this.props).removeHook) === null || _b3 === void 0 ? void 0 : _b3.call(_a3, this.reload, "init");
        this.toDispose.forEach(function(fn) {
          return fn();
        });
        this.toDispose = [];
      };
      FormOptionsItem2.prototype.dispatchOptionEvent = function(eventName, eventData) {
        if (eventData === void 0) {
          eventData = "";
        }
        return __awaiter(this, void 0, void 0, function() {
          var _a3, dispatchEvent2, options, rendererEvent;
          return __generator(this, function(_b3) {
            switch (_b3.label) {
              case 0:
                _a3 = this.props, dispatchEvent2 = _a3.dispatchEvent, options = _a3.options;
                return [4, dispatchEvent2(eventName, resolveEventData(
                  this.props,
                  { value: eventData, options, items: options }
                  // 为了保持名字统一
                ))];
              case 1:
                rendererEvent = _b3.sent();
                return [2, !!(rendererEvent === null || rendererEvent === void 0 ? void 0 : rendererEvent.prevented)];
            }
          });
        });
      };
      FormOptionsItem2.prototype.doAction = function(action, data, throwErrors) {
        var _a3 = this.props, resetValue = _a3.resetValue, onChange = _a3.onChange;
        var actionType = action === null || action === void 0 ? void 0 : action.actionType;
        if (actionType === "clear") {
          onChange === null || onChange === void 0 ? void 0 : onChange("");
        } else if (actionType === "reset") {
          onChange === null || onChange === void 0 ? void 0 : onChange(resetValue !== null && resetValue !== void 0 ? resetValue : "");
        }
      };
      FormOptionsItem2.prototype.syncAutoFill = function(selectedOptions) {
        var _a3 = this.props, autoFill = _a3.autoFill, multiple = _a3.multiple, onBulkChange = _a3.onBulkChange, data = _a3.data;
        var formItem = this.props.formItem;
        if (autoFill === null || autoFill === void 0 ? void 0 : autoFill.hasOwnProperty("api")) {
          return;
        }
        if (onBulkChange && autoFill && !isEmpty2(autoFill) && formItem.filteredOptions.length) {
          var toSync_1 = dataMapping(autoFill, multiple ? {
            items: selectedOptions.map(function(item) {
              return createObject2(__assign(__assign({}, data), { ancestors: getTreeAncestors(formItem.filteredOptions, item, true) }), item);
            })
          } : createObject2(__assign(__assign({}, data), { ancestors: getTreeAncestors(formItem.filteredOptions, selectedOptions[0], true) }), selectedOptions[0]));
          var tmpData_1 = __assign({}, data);
          var result_1 = __assign({}, toSync_1);
          Object.keys(autoFill).forEach(function(key) {
            var keys = keyToPath(key);
            if (keys.length > 1 && (0, import_isPlainObject28.default)(tmpData_1[keys[0]])) {
              var value = getVariable(toSync_1, key);
              setVariable(tmpData_1, key, value);
              result_1[keys[0]] = tmpData_1[keys[0]];
            }
          });
          onBulkChange(result_1);
        }
      };
      FormOptionsItem2.prototype.normalizeValue = function() {
        var _a3 = this.props, joinValues = _a3.joinValues, extractValue = _a3.extractValue, value = _a3.value, multiple = _a3.multiple, formItem = _a3.formItem, valueField = _a3.valueField;
        _a3.enableNodePath;
        _a3.pathSeparator;
        var onChange = _a3.onChange;
        if (!formItem || joinValues !== false || !formItem.options.length) {
          return;
        }
        if (extractValue === false && (typeof value === "string" || typeof value === "number")) {
          var selectedOptions = formItem.getSelectedOptions(value);
          onChange === null || onChange === void 0 ? void 0 : onChange(multiple ? selectedOptions.concat() : selectedOptions[0]);
        } else if (extractValue === true && value && !(Array.isArray(value) && value.every(function(val) {
          return typeof val === "string" || typeof val === "number";
        }) || typeof value === "string" || typeof value === "number")) {
          var selectedOptions = formItem.getSelectedOptions(value).map(function(selectedOption) {
            return selectedOption[valueField || "value"];
          });
          onChange === null || onChange === void 0 ? void 0 : onChange(multiple ? selectedOptions.concat() : selectedOptions[0]);
        }
      };
      FormOptionsItem2.prototype.getWrappedInstance = function() {
        return this.input;
      };
      FormOptionsItem2.prototype.inputRef = function(ref) {
        this.input = ref;
      };
      FormOptionsItem2.prototype.handleToggle = function(option, submitOnChange, changeImmediately) {
        return __awaiter(this, void 0, void 0, function() {
          var _a3, onChange, formItem, value, newValue, isPrevented;
          return __generator(this, function(_b3) {
            switch (_b3.label) {
              case 0:
                _a3 = this.props, onChange = _a3.onChange, formItem = _a3.formItem, value = _a3.value;
                if (!formItem) {
                  return [
                    2
                    /*return*/
                  ];
                }
                newValue = this.toggleValue(option, value);
                return [4, this.dispatchOptionEvent("change", newValue)];
              case 1:
                isPrevented = _b3.sent();
                isPrevented || onChange && onChange(newValue, submitOnChange, changeImmediately);
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      FormOptionsItem2.prototype.defaultCheckAll = function() {
        var _a3 = this.props, value = _a3.value, formItem = _a3.formItem, setPrinstineValue = _a3.setPrinstineValue;
        if (!formItem || formItem.getSelectedOptions(value).length) {
          return;
        }
        var valueArray = formItem.filteredOptions.concat();
        var newValue = this.formatValueArray(valueArray);
        setPrinstineValue === null || setPrinstineValue === void 0 ? void 0 : setPrinstineValue(newValue);
      };
      FormOptionsItem2.prototype.formatValueArray = function(valueArray) {
        var _a3 = this.props, joinValues = _a3.joinValues, extractValue = _a3.extractValue, valueField = _a3.valueField, delimiter = _a3.delimiter, resetValue = _a3.resetValue, multiple = _a3.multiple;
        var newValue = "";
        if (multiple) {
          newValue = getTreeDepth(valueArray) > 1 ? flattenTree(valueArray) : valueArray;
          if (joinValues) {
            newValue = newValue.map(function(item) {
              return item[valueField || "value"];
            }).filter(function(item) {
              return item != null;
            }).join(delimiter);
          } else if (extractValue) {
            newValue = newValue.map(function(item) {
              return item[valueField || "value"];
            }).filter(function(item) {
              return item != null;
            });
          }
        } else {
          newValue = valueArray[0] || resetValue;
          if (joinValues && newValue) {
            newValue = newValue[valueField || "value"];
          }
        }
        return newValue;
      };
      FormOptionsItem2.prototype.handleToggleAll = function() {
        return __awaiter(this, void 0, void 0, function() {
          var _a3, value, onChange, formItem, valueField, selectedOptions, filteredOptions, valueArray, newValue, isPrevented;
          return __generator(this, function(_b3) {
            switch (_b3.label) {
              case 0:
                _a3 = this.props, value = _a3.value, onChange = _a3.onChange, formItem = _a3.formItem, valueField = _a3.valueField;
                if (!formItem) {
                  return [
                    2
                    /*return*/
                  ];
                }
                selectedOptions = formItem.getSelectedOptions(value);
                filteredOptions = flattenTree(formItem.filteredOptions.concat()).filter(function(item) {
                  return item != null && item[valueField || "value"] != null;
                });
                valueArray = selectedOptions.length === filteredOptions.length ? [] : formItem.filteredOptions.concat();
                newValue = this.formatValueArray(valueArray);
                return [4, this.dispatchOptionEvent("change", newValue)];
              case 1:
                isPrevented = _b3.sent();
                isPrevented || onChange && onChange(newValue);
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      FormOptionsItem2.prototype.toggleValue = function(option, originValue) {
        var _a3 = this.props, joinValues = _a3.joinValues, extractValue = _a3.extractValue, valueField = _a3.valueField, delimiter = _a3.delimiter, clearable = _a3.clearable, resetValue = _a3.resetValue, multiple = _a3.multiple, formItem = _a3.formItem;
        var valueArray = originValue !== void 0 ? formItem.getSelectedOptions(originValue).concat() : [];
        var idx = (0, import_findIndex3.default)(valueArray, optionValueCompare(option[valueField || "value"], valueField || "value"));
        var newValue = "";
        if (multiple) {
          if (~idx) {
            valueArray.splice(idx, 1);
          } else {
            valueArray.push(option);
          }
          newValue = valueArray;
          if (joinValues) {
            newValue = newValue.map(function(item) {
              return item[valueField || "value"];
            }).join(delimiter);
          } else if (extractValue) {
            newValue = newValue.map(function(item) {
              return item[valueField || "value"];
            });
          }
        } else {
          if (~idx && clearable) {
            valueArray.splice(idx, 1);
          } else {
            valueArray = [option];
          }
          newValue = valueArray[0] || resetValue;
          if ((joinValues || extractValue) && newValue) {
            newValue = newValue[valueField || "value"];
          }
        }
        return newValue;
      };
      FormOptionsItem2.prototype.reload = function() {
        return this.reloadOptions();
      };
      FormOptionsItem2.prototype.reloadOptions = function(setError, isInit, data) {
        if (isInit === void 0) {
          isInit = false;
        }
        if (data === void 0) {
          data = this.props.data;
        }
        var _a3 = this.props, source = _a3.source, formItem = _a3.formItem, onChange = _a3.onChange, setPrinstineValue = _a3.setPrinstineValue;
        _a3.valueField;
        if (formItem && isPureVariable(source)) {
          isAlive(formItem) && formItem.loadOptionsFromDataScope(source, data, this.changeOptionValue);
          return;
        } else if (!formItem || !isEffectiveApi(source, data)) {
          return;
        }
        return isAlive(formItem) ? formItem.loadOptions(source, data, void 0, false, isInit ? setPrinstineValue : onChange, setError) : void 0;
      };
      FormOptionsItem2.prototype.deferLoad = function(option) {
        return __awaiter(this, void 0, void 0, function() {
          var _a3, deferApi, source, env, formItem, data, api, json;
          return __generator(this, function(_b3) {
            switch (_b3.label) {
              case 0:
                _a3 = this.props, deferApi = _a3.deferApi, source = _a3.source, env = _a3.env, formItem = _a3.formItem, data = _a3.data;
                api = option.deferApi || deferApi || source;
                if (!api) {
                  env.notify("error", "请在选项中设置 `deferApi` 或者表单项中设置 `deferApi`，用来加载子选项。");
                  return [
                    2
                    /*return*/
                  ];
                }
                return [4, formItem === null || formItem === void 0 ? void 0 : formItem.deferLoadOptions(option, api, createObject2(data, option))];
              case 1:
                json = _b3.sent();
                this.dispatchOptionEvent("loadFinished", json);
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      FormOptionsItem2.prototype.leftDeferLoad = function(option, leftOptions) {
        var _a3 = this.props, deferApi = _a3.deferApi, source = _a3.source, env = _a3.env, formItem = _a3.formItem, data = _a3.data;
        var api = option.deferApi || deferApi || source;
        if (!api) {
          env.notify("error", "请在选项中设置 `deferApi` 或者表单项中设置 `deferApi`，用来加载子选项。");
          return;
        }
        formItem === null || formItem === void 0 ? void 0 : formItem.deferLoadLeftOptions(option, leftOptions, api, createObject2(data, option));
      };
      FormOptionsItem2.prototype.expandTreeOptions = function(nodePathArr) {
        var _a3 = this.props, deferApi = _a3.deferApi, source = _a3.source, env = _a3.env, formItem = _a3.formItem, data = _a3.data;
        var api = deferApi || source;
        if (!api) {
          env.notify("error", "请在选项中设置 `deferApi` 或者表单项中设置 `deferApi`，用来加载子选项。");
          return;
        }
        formItem === null || formItem === void 0 ? void 0 : formItem.expandTreeOptions(nodePathArr, api, createObject2(data));
      };
      FormOptionsItem2.prototype.initOptions = function(data) {
        var _a3;
        return __awaiter(this, void 0, void 0, function() {
          var _b3, formItem, name, multiple, defaultCheckAll;
          return __generator(this, function(_c) {
            switch (_c.label) {
              case 0:
                return [4, this.reloadOptions(false, true)];
              case 1:
                _c.sent();
                _b3 = this.props, formItem = _b3.formItem, name = _b3.name, multiple = _b3.multiple, defaultCheckAll = _b3.defaultCheckAll;
                if (!formItem) {
                  return [
                    2
                    /*return*/
                  ];
                }
                if (isAlive(formItem) && formItem.value) {
                  setVariable(data, name, formItem.value);
                }
                if (multiple && defaultCheckAll && ((_a3 = formItem.filteredOptions) === null || _a3 === void 0 ? void 0 : _a3.length)) {
                  this.defaultCheckAll();
                }
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      FormOptionsItem2.prototype.focus = function() {
        this.input && this.input.focus && this.input.focus();
      };
      FormOptionsItem2.prototype.changeOptionValue = function(value) {
        var _a3 = this.props, onChange = _a3.onChange, formInited = _a3.formInited, setPrinstineValue = _a3.setPrinstineValue, originValue = _a3.value;
        if (formInited === false) {
          originValue === void 0 && (setPrinstineValue === null || setPrinstineValue === void 0 ? void 0 : setPrinstineValue(value));
        } else {
          onChange === null || onChange === void 0 ? void 0 : onChange(value);
        }
      };
      FormOptionsItem2.prototype.setOptions = function(options, skipNormalize) {
        if (skipNormalize === void 0) {
          skipNormalize = false;
        }
        var formItem = this.props.formItem;
        formItem && formItem.setOptions(skipNormalize ? options : normalizeOptions(options || [], void 0, this.props.valueField), this.changeOptionValue, this.props.data);
      };
      FormOptionsItem2.prototype.syncOptions = function() {
        var formItem = this.props.formItem;
        formItem && formItem.syncOptions(void 0, this.props.data);
      };
      FormOptionsItem2.prototype.setLoading = function(value) {
        var formItem = this.props.formItem;
        formItem && formItem.setLoading(value);
      };
      FormOptionsItem2.prototype.handleOptionAdd = function(idx, value, skipForm) {
        var _a3, _b3;
        if (idx === void 0) {
          idx = -1;
        }
        if (skipForm === void 0) {
          skipForm = false;
        }
        return __awaiter(this, void 0, void 0, function() {
          var _c, addControls, addDialog, disabled, labelField, onOpenDialog, optionLabel, addApi, source, data, valueField, deferField, model, createBtnLabel, env, __, parent, ctx, result, _d, payload, e_1, isPrevented, options;
          var _e;
          return __generator(this, function(_f) {
            switch (_f.label) {
              case 0:
                _c = this.props, addControls = _c.addControls, addDialog = _c.addDialog, disabled = _c.disabled, labelField = _c.labelField, onOpenDialog = _c.onOpenDialog, optionLabel = _c.optionLabel, addApi = _c.addApi, source = _c.source, data = _c.data, valueField = _c.valueField, deferField = _c.deferField, model = _c.formItem, createBtnLabel = _c.createBtnLabel, env = _c.env, __ = _c.translate;
                if (disabled || !model) {
                  return [
                    2
                    /*return*/
                  ];
                }
                if (!skipForm && (!Array.isArray(addControls) || !addControls.length)) {
                  addControls = [
                    {
                      type: "text",
                      name: labelField || "label",
                      label: false,
                      required: true,
                      placeholder: __("Options.addPlaceholder")
                    }
                  ];
                }
                parent = Array.isArray(idx) ? getTree(model.options, idx.slice(0, -1)) : void 0;
                ctx = createObject2(data, Array.isArray(idx) ? __assign({ parent }, value) : value);
                if (!skipForm)
                  return [3, 1];
                _d = ctx;
                return [3, 3];
              case 1:
                return [4, onOpenDialog(__assign(__assign({ type: "dialog", title: createBtnLabel || "新增".concat(optionLabel || "选项") }, addDialog), { body: {
                  type: "form",
                  api: addApi,
                  controls: __spreadArray([
                    {
                      type: "hidden",
                      name: "idx",
                      value: idx
                    },
                    {
                      type: "hidden",
                      name: "parent",
                      value: parent
                    }
                  ], __read(addControls || []), false)
                } }), ctx)];
              case 2:
                _d = _f.sent();
                _f.label = 3;
              case 3:
                result = _d;
                if (!(skipForm && addApi))
                  return [3, 7];
                _f.label = 4;
              case 4:
                _f.trys.push([4, 6, , 7]);
                return [4, env.fetcher(addApi, result, {
                  method: "post"
                })];
              case 5:
                payload = _f.sent();
                if (!payload.ok) {
                  !addApi.silent && env.notify("error", (_b3 = (_a3 = addApi === null || addApi === void 0 ? void 0 : addApi.messages) === null || _a3 === void 0 ? void 0 : _a3.failed) !== null && _b3 !== void 0 ? _b3 : payload.msg || __("Options.createFailed"));
                  result = null;
                } else {
                  result = payload.data || result;
                }
                return [3, 7];
              case 6:
                e_1 = _f.sent();
                result = null;
                console.error(e_1);
                !addApi.silent && env.notify("error", e_1.message);
                return [3, 7];
              case 7:
                if (!result) {
                  return [
                    2
                    /*return*/
                  ];
                }
                if (!result.hasOwnProperty(valueField || "value")) {
                  result = __assign(__assign({}, result), (_e = {}, _e[valueField || "value"] = result[labelField || "label"], _e));
                }
                return [4, this.dispatchOptionEvent("add", __assign(__assign({}, result), { idx }))];
              case 8:
                isPrevented = _f.sent();
                if (isPrevented) {
                  return [
                    2
                    /*return*/
                  ];
                }
                if (!((parent === null || parent === void 0 ? void 0 : parent.hasOwnProperty(deferField)) && parent[deferField] || (parent === null || parent === void 0 ? void 0 : parent.defer)))
                  return [3, 10];
                return [4, this.deferLoad(parent)];
              case 9:
                _f.sent();
                return [3, 11];
              case 10:
                if (source && addApi) {
                  this.reload();
                } else {
                  options = model.options.concat();
                  if (Array.isArray(idx)) {
                    options = spliceTree(options, idx, 0, __assign({}, result));
                  } else {
                    ~idx ? options.splice(idx, 0, __assign({}, result)) : options.push(__assign({}, result));
                  }
                  model.setOptions(options, this.changeOptionValue, data);
                }
                _f.label = 11;
              case 11:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      FormOptionsItem2.prototype.handleOptionEdit = function(value, origin, skipForm) {
        var _a3, _b3;
        if (origin === void 0) {
          origin = value;
        }
        if (skipForm === void 0) {
          skipForm = false;
        }
        return __awaiter(this, void 0, void 0, function() {
          var _c, editControls, editDialog, disabled, labelField, onOpenDialog, editApi, editInitApi, env, source, data, model, optionLabel, __, result, _d, payload, e_2, isPrevented, indexes;
          return __generator(this, function(_e) {
            switch (_e.label) {
              case 0:
                _c = this.props, editControls = _c.editControls, editDialog = _c.editDialog, disabled = _c.disabled, labelField = _c.labelField, onOpenDialog = _c.onOpenDialog, editApi = _c.editApi, editInitApi = _c.editInitApi, env = _c.env, source = _c.source, data = _c.data, model = _c.formItem, optionLabel = _c.optionLabel, __ = _c.translate;
                if (disabled || !model) {
                  return [
                    2
                    /*return*/
                  ];
                }
                if (!skipForm && (!Array.isArray(editControls) || !editControls.length)) {
                  editControls = [
                    {
                      type: "text",
                      name: labelField || "label",
                      label: false,
                      placeholder: __("Options.addPlaceholder")
                    }
                  ];
                }
                if (!skipForm)
                  return [3, 1];
                _d = value;
                return [3, 3];
              case 1:
                return [4, onOpenDialog(__assign(__assign({ type: "dialog", title: __("Options.editLabel", {
                  label: optionLabel || __("Options.label")
                }) }, editDialog), { body: {
                  type: "form",
                  initApi: editInitApi,
                  api: editApi,
                  controls: editControls
                } }), createObject2(data, value))];
              case 2:
                _d = _e.sent();
                _e.label = 3;
              case 3:
                result = _d;
                if (!(skipForm && editApi))
                  return [3, 7];
                _e.label = 4;
              case 4:
                _e.trys.push([4, 6, , 7]);
                return [4, env.fetcher(editApi, createObject2(data, result), {
                  method: "post"
                })];
              case 5:
                payload = _e.sent();
                if (!payload.ok) {
                  !editApi.silent && env.notify("error", (_b3 = (_a3 = editApi === null || editApi === void 0 ? void 0 : editApi.messages) === null || _a3 === void 0 ? void 0 : _a3.failed) !== null && _b3 !== void 0 ? _b3 : payload.msg || __("saveFailed"));
                  result = null;
                } else {
                  result = payload.data || result;
                }
                return [3, 7];
              case 6:
                e_2 = _e.sent();
                result = null;
                console.error(e_2);
                !editApi.silent && env.notify("error", e_2.message);
                return [3, 7];
              case 7:
                if (!result) {
                  return [
                    2
                    /*return*/
                  ];
                }
                return [4, this.dispatchOptionEvent("edit", result)];
              case 8:
                isPrevented = _e.sent();
                if (isPrevented) {
                  return [
                    2
                    /*return*/
                  ];
                }
                if (source && editApi) {
                  this.reload();
                } else {
                  indexes = findTreeIndex(model.options, function(item) {
                    return item === origin;
                  });
                  if (indexes) {
                    model.setOptions(spliceTree(model.options, indexes, 1, __assign(__assign({}, origin), result)), this.changeOptionValue, data);
                  }
                }
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      FormOptionsItem2.prototype.handleOptionDelete = function(value) {
        var _a3, _b3;
        return __awaiter(this, void 0, void 0, function() {
          var _c, deleteConfirmText, disabled, data, deleteApi, onDelete, env, model, source, valueField, __, ctx, confirmed, _d, isPrevented, result, options, indexes, e_3;
          return __generator(this, function(_e) {
            switch (_e.label) {
              case 0:
                _c = this.props, deleteConfirmText = _c.deleteConfirmText, disabled = _c.disabled, data = _c.data, deleteApi = _c.deleteApi, onDelete = _c.onDelete, env = _c.env, model = _c.formItem, source = _c.source, valueField = _c.valueField, __ = _c.translate;
                if (disabled || !model) {
                  return [
                    2
                    /*return*/
                  ];
                }
                ctx = createObject2(data, value);
                if (!deleteConfirmText)
                  return [3, 2];
                return [4, env.confirm(filter(__(deleteConfirmText), ctx))];
              case 1:
                _d = _e.sent();
                return [3, 3];
              case 2:
                _d = true;
                _e.label = 3;
              case 3:
                confirmed = _d;
                if (!confirmed) {
                  return [
                    2
                    /*return*/
                  ];
                }
                return [4, this.dispatchOptionEvent("delete", ctx)];
              case 4:
                isPrevented = _e.sent();
                if (isPrevented) {
                  return [
                    2
                    /*return*/
                  ];
                }
                _e.label = 5;
              case 5:
                _e.trys.push([5, 8, , 9]);
                if (!deleteApi)
                  return [3, 7];
                return [4, env.fetcher(deleteApi, ctx, {
                  method: "delete"
                })];
              case 6:
                result = _e.sent();
                if (!result.ok) {
                  !deleteApi.silent && env.notify("error", (_b3 = (_a3 = deleteApi === null || deleteApi === void 0 ? void 0 : deleteApi.messages) === null || _a3 === void 0 ? void 0 : _a3.failed) !== null && _b3 !== void 0 ? _b3 : result.msg || __("deleteFailed"));
                  return [
                    2
                    /*return*/
                  ];
                }
                _e.label = 7;
              case 7:
                if (onDelete) {
                  onDelete(ctx);
                }
                if (source) {
                  this.reload();
                } else {
                  options = model.options.concat();
                  indexes = findTreeIndex(options, function(item) {
                    return item[valueField || "value"] == value[valueField || "value"];
                  });
                  if (indexes) {
                    model.setOptions(spliceTree(options, indexes, 1), this.changeOptionValue, data);
                  }
                }
                return [3, 9];
              case 8:
                e_3 = _e.sent();
                console.error(e_3);
                !deleteApi.silent && env.notify("error", e_3.message);
                return [3, 9];
              case 9:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      FormOptionsItem2.prototype.render = function() {
        var _a3 = this.props, value = _a3.value, formItem = _a3.formItem, addApi = _a3.addApi, editApi = _a3.editApi, deleteApi = _a3.deleteApi, creatable = _a3.creatable, editable = _a3.editable, removable = _a3.removable, enableNodePath = _a3.enableNodePath, pathSeparator = _a3.pathSeparator, _b3 = _a3.delimiter, delimiter = _b3 === void 0 ? "," : _b3, _c = _a3.labelField, labelField = _c === void 0 ? "label" : _c, _d = _a3.valueField, valueField = _d === void 0 ? "value" : _d, __ = _a3.translate;
        var _e = normalizeNodePath(value, enableNodePath, labelField, valueField, pathSeparator, delimiter), nodePathArray = _e.nodePathArray, nodeValueArray = _e.nodeValueArray;
        return import_react28.default.createElement(Control, __assign({}, this.props, { placeholder: __(this.props.placeholder), ref: this.inputRef, options: formItem ? formItem.filteredOptions : [], onToggle: this.handleToggle, onToggleAll: this.handleToggleAll, selectedOptions: formItem ? formItem.getSelectedOptions(value, enableNodePath ? nodeValueArray : void 0) : [], nodePath: nodePathArray, loading: formItem ? formItem.loading : false, setLoading: this.setLoading, setOptions: this.setOptions, syncOptions: this.syncOptions, reloadOptions: this.reload, deferLoad: this.deferLoad, leftDeferLoad: this.leftDeferLoad, expandTreeOptions: this.expandTreeOptions, creatable: creatable !== false && isEffectiveApi(addApi) ? true : creatable, editable: editable || editable !== false && isEffectiveApi(editApi), removable: removable || removable !== false && isEffectiveApi(deleteApi), onAdd: this.handleOptionAdd, onEdit: this.handleOptionEdit, onDelete: this.handleOptionDelete }));
      };
      FormOptionsItem2.displayName = "OptionsControl(".concat(config.type, ")");
      FormOptionsItem2.defaultProps = __assign({ delimiter: ",", labelField: "label", valueField: "value", joinValues: true, extractValue: false, multiple: false, placeholder: "Select.placeholder", resetValue: "", deleteConfirmText: "deleteConfirm" }, Control.defaultProps);
      FormOptionsItem2.propsList = Control.propsList ? __spreadArray([], __read(Control.propsList), false) : [];
      FormOptionsItem2.ComposedComponent = Control;
      __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
      ], FormOptionsItem2.prototype, "inputRef", null);
      __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Boolean, Boolean]),
        __metadata("design:returntype", Promise)
      ], FormOptionsItem2.prototype, "handleToggle", null);
      __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
      ], FormOptionsItem2.prototype, "handleToggleAll", null);
      __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
      ], FormOptionsItem2.prototype, "reload", null);
      __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Boolean, Object, Object]),
        __metadata("design:returntype", void 0)
      ], FormOptionsItem2.prototype, "reloadOptions", null);
      __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
      ], FormOptionsItem2.prototype, "deferLoad", null);
      __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", void 0)
      ], FormOptionsItem2.prototype, "leftDeferLoad", null);
      __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Array]),
        __metadata("design:returntype", void 0)
      ], FormOptionsItem2.prototype, "expandTreeOptions", null);
      __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
      ], FormOptionsItem2.prototype, "initOptions", null);
      __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
      ], FormOptionsItem2.prototype, "changeOptionValue", null);
      __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Array, Object]),
        __metadata("design:returntype", void 0)
      ], FormOptionsItem2.prototype, "setOptions", null);
      __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
      ], FormOptionsItem2.prototype, "syncOptions", null);
      __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Boolean]),
        __metadata("design:returntype", void 0)
      ], FormOptionsItem2.prototype, "setLoading", null);
      __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object, Boolean]),
        __metadata("design:returntype", Promise)
      ], FormOptionsItem2.prototype, "handleOptionAdd", null);
      __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object, Boolean]),
        __metadata("design:returntype", Promise)
      ], FormOptionsItem2.prototype, "handleOptionEdit", null);
      __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
      ], FormOptionsItem2.prototype, "handleOptionDelete", null);
      return FormOptionsItem2;
    }(import_react28.default.Component)
  );
  return registerFormItem(__assign(__assign({}, config), { strictMode: false, component: FormOptionsItem }));
}
function OptionsControl(config) {
  return function(component) {
    var renderer = registerOptionsControl(__assign(__assign({}, config), { component }));
    return renderer.component;
  };
}

// node_modules/amis-core/esm/utils/attachmentAdpator.js
function attachmentAdpator(response, __, api) {
  if (response && response.headers && response.headers["content-disposition"]) {
    var disposition = response.headers["content-disposition"];
    var filename = "";
    if (disposition && disposition.indexOf("attachment") !== -1) {
      if (api === null || api === void 0 ? void 0 : api.downloadFileName) {
        filename = api.downloadFileName;
      } else {
        var filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/i;
        var matches = disposition.match(filenameRegex);
        if (matches && matches.length) {
          filename = matches[1].replace("UTF-8''", "").replace(/['"]/g, "");
        }
        if (filename && filename.replace(/[^%]/g, "").length > 2) {
          filename = decodeURIComponent(filename);
          filename = filename.replace(/\+/g, " ");
        }
      }
      var type = response.headers["content-type"];
      var blob = response.data.toString() === "[object Blob]" ? response.data : new Blob([response.data], { type });
      if (typeof window.navigator.msSaveBlob !== "undefined") {
        window.navigator.msSaveBlob(blob, filename);
      } else {
        var URL_1 = window.URL || window.webkitURL;
        var downloadUrl_1 = URL_1.createObjectURL(blob);
        if (filename) {
          var a = document.createElement("a");
          if (typeof a.download === "undefined") {
            window.location = downloadUrl_1;
          } else {
            a.href = downloadUrl_1;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
          }
        } else {
          window.location = downloadUrl_1;
        }
        setTimeout(function() {
          URL_1.revokeObjectURL(downloadUrl_1);
        }, 100);
      }
      return __assign(__assign({}, response), { data: {
        status: 0,
        msg: __("Embed.downloading")
      } });
    }
  } else if (response.data && response.data.toString() === "[object Blob]") {
    return new Promise(function(resolve, reject) {
      var reader = new FileReader();
      reader.addEventListener("loadend", function(e) {
        var text = reader.result;
        try {
          resolve(__assign(__assign({}, response), { data: __assign({}, JSON.parse(text)) }));
        } catch (e2) {
          reject(e2);
        }
      });
      reader.readAsText(response.data);
    });
  }
  return response;
}

// node_modules/amis-core/esm/utils/columnsSplit.js
var import_react29 = __toESM(require_react());
var import_chunk12 = __toESM(require_chunk());
function columnsSplit(body, cx5, columnsCount) {
  if (Array.isArray(columnsCount) && columnsCount.length) {
    var bodyIndex_1 = 0;
    var bodyList_1 = [];
    var maxSize = Math.max(Math.round(12 / Math.max.apply(Math, __spreadArray([], __read(columnsCount), false))), 1);
    var cellClassName_1 = "Grid-col--sm".concat(maxSize);
    columnsCount.forEach(function(columnSize, groupIndex) {
      if (columnSize) {
        bodyList_1.push(import_react29.default.createElement("div", { className: cx5("Grid"), key: groupIndex }, Array.from({ length: columnSize }).map(function(_, index) {
          if (bodyIndex_1 + index < body.length) {
            return import_react29.default.createElement("div", { key: index, className: cx5(cellClassName_1) }, body[bodyIndex_1 + index]);
          } else {
            return null;
          }
        })));
        bodyIndex_1 = bodyIndex_1 + columnSize;
      }
    });
    body = bodyList_1;
  } else if (typeof columnsCount === "number" && columnsCount > 1) {
    var weight = 12 / columnsCount;
    var cellClassName_2 = "Grid-col--sm".concat(weight === Math.round(weight) ? weight : "");
    body = (0, import_chunk12.default)(body, columnsCount).map(function(group, groupIndex) {
      return import_react29.default.createElement("div", { className: cx5("Grid"), key: groupIndex }, Array.from({ length: columnsCount }).map(function(_, index) {
        return import_react29.default.createElement("div", { key: index, className: cx5(cellClassName_2) }, group[index]);
      }));
    });
  }
  return body;
}

// node_modules/amis-core/esm/utils/handleAction.js
function handleAction(e, action, props, data) {
  e.persist();
  var onAction = props.onAction;
  var onClick = action.onClick;
  if (typeof onClick === "string") {
    onClick = str2function(onClick, "event", "props", "data");
  }
  var result = onClick && onClick(e, props, data || props.data);
  if (e.isDefaultPrevented() || result === false || !onAction) {
    return;
  }
  e.preventDefault();
  if (action.actionType === "download") {
    action.actionType = "ajax";
    var api = normalizeApi(action.api);
    api.responseType = "blob";
    api.downloadFileName = action.downloadFileName;
    action.api = api;
  }
  onAction(e, action, data || props.data);
}

// node_modules/amis-core/esm/utils/highlight.js
var import_react30 = __toESM(require_react());
function highlight(text, input, hlClassName) {
  if (hlClassName === void 0) {
    hlClassName = "is-matched";
  }
  if (!input) {
    return text;
  }
  text = String(text);
  var reg = new RegExp(input.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&"), "ig");
  if (!reg.test(text)) {
    return text;
  }
  var dom = [];
  var start = 0;
  var match = null;
  reg.lastIndex = 0;
  while (match = reg.exec(text)) {
    var prev = text.substring(start, match.index);
    prev && dom.push(import_react30.default.createElement("span", { key: dom.length }, prev));
    match[0] && dom.push(import_react30.default.createElement("span", { className: hlClassName, key: dom.length }, match[0]));
    start = match.index + match[0].length;
  }
  var rest = text.substring(start);
  rest && dom.push(import_react30.default.createElement("span", { key: dom.length }, rest));
  return dom;
}

// node_modules/amis-core/esm/utils/icon.js
var import_react31 = __toESM(require_react());
var import_isObject14 = __toESM(require_isObject());
var generateIcon = function(cx5, icon, className, classNameProp) {
  if ((0, import_isObject14.default)(icon) && icon.type === "icon" && icon.icon) {
    icon = icon.icon;
  }
  if (import_react31.default.isValidElement(icon)) {
    return icon;
  }
  if (typeof icon !== "string") {
    if ((0, import_isObject14.default)(icon) && typeof icon.id === "string" && icon.id.startsWith("svg-")) {
      return import_react31.default.createElement(
        "svg",
        { className: cx5("icon", "icon-object", className, classNameProp) },
        import_react31.default.createElement("use", { xlinkHref: "#".concat(icon.id.replace(/^svg-/, "")) })
      );
    }
    return;
  }
  var isURLIcon = (icon === null || icon === void 0 ? void 0 : icon.indexOf(".")) !== -1;
  return icon ? isURLIcon ? import_react31.default.createElement("img", { className: cx5(className, classNameProp), src: icon, key: icon }) : import_react31.default.createElement("i", { className: cx5(className, icon, classNameProp), key: icon }) : null;
};

// node_modules/amis-core/esm/utils/json-schema-2-amis-schema.js
function property2control(property, key, schema) {
  var requiredList = schema.required || [];
  var rest = {};
  var validations2 = {};
  var type = "text";
  if (property.type === "integer") {
    type = "number";
    typeof property.minimum === "number" && (rest.min = property.minimum);
  } else if (property.type === "array") {
    type = "combo";
    var items = property.items;
    if (items.type === "object") {
      rest.controls = makeControls(items.properties, items);
      rest.multiLine = true;
    } else {
      type = "array";
      rest.inline = true;
      rest.items = property2control(items, "item", property);
    }
  } else if (property.type === "string" && Array.isArray(property.enum)) {
    type = "select";
    rest.options = property.enum;
  }
  if (typeof property.minimum === "number") {
    validations2.minimum = property.minimum;
  }
  return __assign({ name: key, type, required: !!~requiredList.indexOf(key), label: property.title || property.description, desc: property.title && property.description, value: property.default, validations: validations2 }, rest);
}
function makeControls(properties, schema) {
  var keys = Object.keys(properties);
  return keys.map(function(key) {
    return property2control(properties[key], key, schema);
  });
}
function JSONSchme2AMisSchema(schema) {
  if (schema.type !== "object") {
    throw new Error("JSONSchme2AMisSchema 只支持 object 转换");
  }
  return {
    title: schema.title,
    type: "form",
    mode: "horizontal",
    controls: makeControls(schema.properties, schema)
  };
}

// node_modules/amis-core/esm/utils/scrollPosition.js
function getScrollParent2(element, includeHidden) {
  if (!element) {
    return document.body;
  }
  var style = getComputedStyle(element);
  var excludeStaticParent = style.position === "absolute";
  var overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/;
  if (style.position === "fixed")
    return document.body;
  for (var parent_1 = element; parent_1 = parent_1.parentElement; ) {
    style = getComputedStyle(parent_1);
    if (excludeStaticParent && style.position === "static") {
      continue;
    }
    if (overflowRegex.test(style.overflow + style.overflowY + style.overflowX))
      return parent_1;
  }
  return document.body;
}
function scrollPosition(dom) {
  return position(dom, getScrollParent2(dom));
}

// node_modules/amis-core/esm/utils/style.js
init_moment();
var import_isPlainObject29 = __toESM(require_isPlainObject());
var import_mapValues12 = __toESM(require_mapValues());
var import_camelCase12 = __toESM(require_camelCase());
function autoAddImageURL(image) {
  if (typeof image === "string" && image.indexOf(",") === -1 && image.indexOf("(") === -1) {
    return 'url("'.concat(image, '")');
  }
  return image;
}
function buildStyle(style, data) {
  if (!style) {
    return style;
  }
  var styleVar = typeof style === "string" ? resolveVariableAndFilter(style, data, "| raw") || {} : (0, import_mapValues12.default)(style, function(s) {
    return resolveVariableAndFilter(s, data, "| raw") || s;
  });
  Object.keys(styleVar).forEach(function(key) {
    if (key === "radius") {
      styleVar["borderRadius"] = styleVar.radius["top-left-border-radius"] + " " + styleVar.radius["top-right-border-radius"] + " " + styleVar.radius["bottom-right-border-radius"] + " " + styleVar.radius["bottom-left-border-radius"];
      delete styleVar["radius"];
    }
    if (key.indexOf("-") > 0) {
      styleVar[(0, import_camelCase12.default)(valueMap[key] || key)] = styleVar[key];
      delete styleVar[key];
    }
  });
  if (styleVar.backgroundImage) {
    styleVar.backgroundImage = autoAddImageURL(styleVar.backgroundImage);
  }
  if (styleVar.borderImage) {
    styleVar.borderImage = autoAddImageURL(styleVar.borderImage);
  }
  if (styleVar.listStyleImage) {
    styleVar.listStyleImage = autoAddImageURL(styleVar.listStyleImage);
  }
  return styleVar;
}

// node_modules/amis-core/esm/utils/uncontrollable.js
var import_hoist_non_react_statics15 = __toESM(require_hoist_non_react_statics_cjs());
function uncontrollable2(arg, config, mapping) {
  var result = uncontrollable(arg, config, mapping);
  return (0, import_hoist_non_react_statics15.default)(result, arg);
}

// node_modules/amis-core/esm/utils/toNumber.js
function toNumber(value, defaultValue) {
  if (defaultValue === void 0) {
    defaultValue = 0;
  }
  var num = parseInt(value, 10);
  return isNaN(num) ? defaultValue : num;
}

// node_modules/amis-core/esm/utils/decodeEntity.js
var decodeEntity = function(text) {
  var textArea = document.createElement("textarea");
  textArea.innerHTML = text;
  return textArea.value;
};

// node_modules/amis-core/esm/utils/arraySlice.js
function arraySlice(array, slice) {
  var e_1, _a3;
  if (typeof slice !== "string") {
    return array;
  }
  if (isObservableArray(array)) {
    array = toJS(array);
  }
  slice = slice.trim();
  if (!slice || !Array.isArray(array)) {
    return array;
  }
  var parts = slice.split(",");
  var ret = [];
  var arrayLength = array.length;
  if (!arrayLength) {
    return array;
  }
  try {
    for (var parts_1 = __values(parts), parts_1_1 = parts_1.next(); !parts_1_1.done; parts_1_1 = parts_1.next()) {
      var part = parts_1_1.value;
      if (part.indexOf(":") === -1) {
        var index = parseInt(part, 10);
        if (!isNaN(index) && index < arrayLength) {
          ret.push(array[index]);
        }
      } else {
        var _b3 = __read(part.split(":"), 2), start = _b3[0], end = _b3[1];
        var startIndex = parseInt(start || "0", 10);
        if (isNaN(startIndex) || startIndex < 0) {
          startIndex = 0;
        }
        if (startIndex >= arrayLength) {
          continue;
        }
        var endIndex = parseInt(end, 10);
        if (isNaN(endIndex)) {
          endIndex = arrayLength;
        }
        if (endIndex < 0) {
          endIndex = arrayLength + endIndex;
        }
        if (endIndex < startIndex) {
          continue;
        }
        if (endIndex > arrayLength) {
          endIndex = arrayLength;
        }
        ret.push.apply(ret, __spreadArray([], __read(array.slice(startIndex, endIndex)), false));
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (parts_1_1 && !parts_1_1.done && (_a3 = parts_1.return))
        _a3.call(parts_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return ret;
}

// node_modules/amis-core/esm/utils/math.js
function safeAdd(arg1, arg2) {
  var digits1, digits2, maxDigits;
  try {
    digits1 = arg1.toString().split(".")[1].length;
  } catch (e) {
    digits1 = 0;
  }
  try {
    digits2 = arg2.toString().split(".")[1].length;
  } catch (e) {
    digits2 = 0;
  }
  maxDigits = Math.pow(10, Math.max(digits1, digits2));
  return (arg1 * maxDigits + arg2 * maxDigits) / maxDigits;
}
function safeSub(arg1, arg2) {
  var digits1, digits2, maxDigits;
  try {
    digits1 = arg1.toString().split(".")[1].length;
  } catch (e) {
    digits1 = 0;
  }
  try {
    digits2 = arg2.toString().split(".")[1].length;
  } catch (e) {
    digits2 = 0;
  }
  maxDigits = Math.pow(10, Math.max(digits1, digits2));
  return (arg1 * maxDigits - arg2 * maxDigits) / maxDigits;
}
function numberFormatter(num, precision) {
  var _a3;
  var ZERO = 0;
  var number = +num;
  var finalP = typeof precision === "number" ? precision : ((_a3 = number.toString().split(".")[1]) === null || _a3 === void 0 ? void 0 : _a3.length) || 0;
  if (typeof number === "number" && !isNaN(number)) {
    var regexp = finalP ? /(\d)(?=(\d{3})+\.)/g : /(\d)(?=(\d{3})+$)/g;
    return number.toFixed(finalP).replace(regexp, "$1,");
  }
  return ZERO.toFixed(finalP);
}
function isIntegerInRange(num, options) {
  var _a3 = options || {}, start = _a3.start, end = _a3.end, _b3 = _a3.left, left = _b3 === void 0 ? "inclusive" : _b3, _c = _a3.right, right = _c === void 0 ? "inclusive" : _c;
  if (num == null || typeof num !== "number" || !Number.isSafeInteger(num)) {
    return false;
  }
  if (left === "exclusive" && right === "exclusive") {
    return num > start && num < end;
  } else if (left === "inclusive" && right === "exclusive") {
    return num >= start && num < end;
  } else if (left === "exclusive" && right === "inclusive") {
    return num > start && num <= end;
  } else {
    return num >= start && num <= end;
  }
}

// node_modules/amis-core/esm/locale.js
var import_react32 = __toESM(require_react());
var import_hoist_non_react_statics16 = __toESM(require_hoist_non_react_statics_cjs());
init_moment();
var import_isPlainObject30 = __toESM(require_isPlainObject());
var defaultLocale = "zh-CN";
var momentLocaleMap = {
  "zh-CN": "zh-cn",
  "en-US": "en",
  "de-DE": "de"
};
var locales = {};
function register3(name, config) {
  extendLocale(name, config);
}
function extendLocale(name, config, cover) {
  if (cover === void 0) {
    cover = true;
  }
  if (cover) {
    locales[name] = __assign(__assign({}, locales[name] || {}), config);
  } else {
    locales[name] = __assign(__assign({}, config), locales[name] || {});
  }
}
function removeLocaleData(name, key) {
  var _a3;
  if (Array.isArray(key)) {
    key.forEach(function(item) {
      removeLocaleData(name, item);
    });
    return;
  }
  if ((_a3 = locales === null || locales === void 0 ? void 0 : locales[name]) === null || _a3 === void 0 ? void 0 : _a3[key]) {
    delete locales[name][key];
  }
}
var fns2 = {};
function format(str, data) {
  return str.replace(/(\\)?\{\{([\s\S]+?)\}\}/g, function(_, escape3, key) {
    if (escape3) {
      return _.substring(1);
    }
    return resolveVariable(key, data || {});
  });
}
function makeTranslator(locale) {
  if (locale && fns2[locale]) {
    return fns2[locale];
  }
  var fn = function(str) {
    var _a3, _b3, _c;
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    if (!str || typeof str !== "string") {
      return str;
    }
    var value = ((_a3 = locales[locale]) === null || _a3 === void 0 ? void 0 : _a3[str]) || ((_b3 = locales[defaultLocale]) === null || _b3 === void 0 ? void 0 : _b3[str]) || ((_c = locales["zh-CN"]) === null || _c === void 0 ? void 0 : _c[str]) || str;
    return format.apply(void 0, __spreadArray([value], __read(args), false));
  };
  locale && (fns2[locale] = fn);
  return fn;
}
function getDefaultLocale() {
  return defaultLocale;
}
function setDefaultLocale(locale) {
  defaultLocale = locale;
}
var LocaleContext = import_react32.default.createContext("");
function localeable(ComposedComponent) {
  var _a3;
  var result = (0, import_hoist_non_react_statics16.default)((_a3 = /** @class */
  function(_super) {
    __extends(class_1, _super);
    function class_1(props) {
      var _this = _super.call(this, props) || this;
      _this.childRef = _this.childRef.bind(_this);
      _this.getWrappedInstance = _this.getWrappedInstance.bind(_this);
      return _this;
    }
    class_1.prototype.childRef = function(ref) {
      while (ref && ref.getWrappedInstance) {
        ref = ref.getWrappedInstance();
      }
      this.ref = ref;
    };
    class_1.prototype.getWrappedInstance = function() {
      return this.ref;
    };
    class_1.prototype.render = function() {
      var _a4, _b3;
      var locale = this.props.locale || this.context || defaultLocale;
      var translate = this.props.translate || makeTranslator(locale);
      var injectedProps = {
        locale,
        translate
      };
      moment_default.locale((_a4 = momentLocaleMap === null || momentLocaleMap === void 0 ? void 0 : momentLocaleMap[locale]) !== null && _a4 !== void 0 ? _a4 : locale);
      var refConfig = ((_b3 = ComposedComponent.prototype) === null || _b3 === void 0 ? void 0 : _b3.isReactComponent) ? { ref: this.childRef } : { forwardedRef: this.childRef };
      var body = import_react32.default.createElement(ComposedComponent, __assign({}, this.props, injectedProps, refConfig));
      return this.context ? body : import_react32.default.createElement(LocaleContext.Provider, { value: locale }, body);
    };
    return class_1;
  }(import_react32.default.Component), _a3.displayName = "I18N(".concat(ComposedComponent.displayName || ComposedComponent.name, ")"), _a3.contextType = LocaleContext, _a3.ComposedComponent = ComposedComponent, _a3), ComposedComponent);
  return result;
}

// node_modules/amis-core/esm/SchemaRenderer.js
var import_difference = __toESM(require_difference());
var import_omit3 = __toESM(require_omit());
var import_react33 = __toESM(require_react());
init_moment();
var import_isPlainObject31 = __toESM(require_isPlainObject());
var RENDERER_TRANSMISSION_OMIT_PROPS = [
  "type",
  "name",
  "$ref",
  "className",
  "style",
  "data",
  "children",
  "ref",
  "visible",
  "visibleOn",
  "hidden",
  "hiddenOn",
  "disabled",
  "disabledOn",
  "static",
  "staticOn",
  "component",
  "detectField",
  "defaultValue",
  "defaultData",
  "required",
  "requiredOn",
  "syncSuperStore",
  "mode",
  "body",
  "id",
  "inputOnly",
  "label",
  "renderLabel",
  "trackExpression",
  "editorSetting",
  "updatePristineAfterStoreDataReInit"
];
var componentCache = new SimpleMap();
var SchemaRenderer = (
  /** @class */
  function(_super) {
    __extends(SchemaRenderer2, _super);
    function SchemaRenderer2(props) {
      var _this = _super.call(this, props) || this;
      _this.rendererKey = "";
      _this.unbindEvent = void 0;
      _this.isStatic = void 0;
      _this.refFn = _this.refFn.bind(_this);
      _this.renderChild = _this.renderChild.bind(_this);
      _this.reRender = _this.reRender.bind(_this);
      _this.resolveRenderer(_this.props);
      _this.dispatchEvent = _this.dispatchEvent.bind(_this);
      _this.reaction = reaction(function() {
        var _a3, _b3, _c;
        var id = filter(props.schema.id, props.data);
        var name = filter(props.schema.name, props.data);
        return "".concat((_a3 = props.statusStore.visibleState[id]) !== null && _a3 !== void 0 ? _a3 : props.statusStore.visibleState[name]).concat((_b3 = props.statusStore.disableState[id]) !== null && _b3 !== void 0 ? _b3 : props.statusStore.disableState[name]).concat((_c = props.statusStore.staticState[id]) !== null && _c !== void 0 ? _c : props.statusStore.staticState[name]);
      }, function() {
        return _this.forceUpdate();
      });
      return _this;
    }
    SchemaRenderer2.prototype.componentDidMount = function() {
      this.unbindEvent = bindEvent(this.cRef);
    };
    SchemaRenderer2.prototype.componentWillUnmount = function() {
      var _a3, _b3;
      (_a3 = this.reaction) === null || _a3 === void 0 ? void 0 : _a3.call(this);
      (_b3 = this.unbindEvent) === null || _b3 === void 0 ? void 0 : _b3.call(this);
    };
    SchemaRenderer2.prototype.shouldComponentUpdate = function(nextProps) {
      var props = this.props;
      var list = (0, import_difference.default)(Object.keys(nextProps), [
        "schema",
        "scope"
      ]);
      if ((0, import_difference.default)(Object.keys(props), ["schema", "scope"]).length !== list.length || anyChanged(list, this.props, nextProps)) {
        return true;
      } else {
        var list_1 = Object.keys(nextProps.schema);
        if (Object.keys(props.schema).length !== list_1.length || anyChanged(list_1, props.schema, nextProps.schema)) {
          return true;
        }
      }
      return false;
    };
    SchemaRenderer2.prototype.resolveRenderer = function(props, force) {
      if (force === void 0) {
        force = false;
      }
      var schema = props.schema;
      var path = props.$path;
      if (schema && schema.$ref) {
        schema = __assign(__assign({}, props.resolveDefinitions(schema.$ref)), schema);
        path = path.replace(/(?!.*\/).*/, schema.type);
      }
      if ((schema === null || schema === void 0 ? void 0 : schema.type) && (force || !this.renderer || this.rendererKey !== "".concat(schema.type, "-").concat(schema.$$id))) {
        var rendererResolver = props.env.rendererResolver || resolveRenderer;
        this.renderer = rendererResolver(path, schema, props);
        this.rendererKey = "".concat(schema.type, "-").concat(schema.$$id);
      } else {
        if (schema.children && !schema.component && schema.asFormItem) {
          schema.component = PlaceholderComponent;
          schema.renderChildren = schema.children;
          delete schema.children;
        }
        if (schema.component && !schema.component.wrapedAsFormItem && schema.asFormItem) {
          var cache3 = componentCache.get(schema.component);
          if (cache3) {
            schema.component = cache3;
          } else {
            var cache_1 = asFormItem(__assign({ strictMode: false }, schema.asFormItem))(schema.component);
            componentCache.set(schema.component, cache_1);
            cache_1.wrapedAsFormItem = true;
            schema.component = cache_1;
          }
        }
      }
      return { path, schema };
    };
    SchemaRenderer2.prototype.getWrappedInstance = function() {
      return this.cRef;
    };
    SchemaRenderer2.prototype.refFn = function(ref) {
      this.ref = ref;
    };
    SchemaRenderer2.prototype.childRef = function(ref) {
      while (ref && ref.getWrappedInstance) {
        ref = ref.getWrappedInstance();
      }
      this.cRef = ref;
    };
    SchemaRenderer2.prototype.dispatchEvent = function(e, data, renderer) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, dispatchEvent(e, this.cRef || renderer, this.context, data)];
            case 1:
              return [2, _a3.sent()];
          }
        });
      });
    };
    SchemaRenderer2.prototype.renderChild = function(region, node, subProps) {
      var _a3, _b3, _c, _d;
      if (subProps === void 0) {
        subProps = {};
      }
      var _e = this.props, _ = _e.schema;
      _e.$path;
      var env = _e.env, render3 = _e.render, rest = __rest(_e, ["schema", "$path", "env", "render"]);
      var $path = this.resolveRenderer(this.props).path;
      var omitList = RENDERER_TRANSMISSION_OMIT_PROPS.concat();
      if (this.renderer) {
        var Component3 = this.renderer.component;
        Component3.propsList && omitList.push.apply(omitList, Component3.propsList);
      }
      return render3("".concat($path).concat(region ? "/".concat(region) : ""), node || "", __assign(__assign(__assign(__assign({}, (0, import_omit3.default)(rest, omitList)), { defaultStatic: (_c = (_b3 = ((_a3 = this.renderer) === null || _a3 === void 0 ? void 0 : _a3.type) && ["drawer", "dialog"].includes(this.renderer.type) ? false : void 0) !== null && _b3 !== void 0 ? _b3 : this.isStatic) !== null && _c !== void 0 ? _c : _.staticOn ? evalExpression(_.staticOn, rest.data) : (_d = _.static) !== null && _d !== void 0 ? _d : rest.defaultStatic }), subProps), { data: subProps.data || rest.data, env }));
    };
    SchemaRenderer2.prototype.reRender = function() {
      this.resolveRenderer(this.props, true);
      this.forceUpdate();
    };
    SchemaRenderer2.prototype.render = function() {
      var e_1, _a3;
      var _this = this;
      var _b3, _c, _d, _e, _f, _g;
      var _h = this.props;
      _h.$path;
      var __ = _h.schema, rootStore = _h.rootStore, statusStore = _h.statusStore, render3 = _h.render, rest = __rest(_h, ["$path", "schema", "rootStore", "statusStore", "render"]);
      if (__ == null) {
        return null;
      }
      var _j = this.resolveRenderer(this.props), $path = _j.path, schema = _j.schema;
      var theme2 = this.props.env.theme;
      if (Array.isArray(schema)) {
        return render3($path, schema, rest);
      }
      var detectData = schema && (schema.detectField === "&" ? rest : rest[schema.detectField || "data"]);
      var exprProps = detectData ? getExprProperties(schema, detectData, void 0, rest) : {};
      var id = filter(schema.id, rest.data);
      var name = filter(schema.name, rest.data);
      var visible = isAlive(statusStore) ? (_b3 = statusStore.visibleState[id]) !== null && _b3 !== void 0 ? _b3 : statusStore.visibleState[name] : void 0;
      var disable = isAlive(statusStore) ? (_c = statusStore.disableState[id]) !== null && _c !== void 0 ? _c : statusStore.disableState[name] : void 0;
      var isStatic = isAlive(statusStore) ? (_d = statusStore.staticState[id]) !== null && _d !== void 0 ? _d : statusStore.staticState[name] : void 0;
      this.isStatic = isStatic;
      if (visible === false || visible !== true && exprProps && (exprProps.hidden || exprProps.visible === false || schema.hidden || schema.visible === false || rest.hidden || rest.visible === false)) {
        rest.invisible = true;
      }
      if (schema.children) {
        return rest.invisible ? null : import_react33.default.isValidElement(schema.children) ? schema.children : schema.children(__assign(__assign(__assign({}, rest), exprProps), { $path, $schema: schema, render: this.renderChild, forwardedRef: this.refFn, rootStore, statusStore, dispatchEvent: this.dispatchEvent }));
      } else if (typeof schema.component === "function") {
        var isSFC = !(schema.component.prototype instanceof import_react33.default.Component);
        var defaultData_1 = schema.data, defaultValue_1 = schema.value, defaultActiveKey_1 = schema.activeKey, propKey_1 = schema.key, restSchema_1 = __rest(schema, ["data", "value", "activeKey", "key"]);
        return rest.invisible ? null : import_react33.default.createElement(schema.component, __assign(__assign(__assign(__assign({}, rest), restSchema_1), exprProps), {
          // value: defaultValue, // 备注: 此处并没有将value传递给渲染器
          defaultData: defaultData_1,
          defaultValue: defaultValue_1,
          defaultActiveKey: defaultActiveKey_1,
          propKey: propKey_1,
          $path,
          $schema: schema,
          ref: isSFC ? void 0 : this.refFn,
          forwardedRef: isSFC ? this.refFn : void 0,
          render: this.renderChild,
          rootStore,
          statusStore,
          dispatchEvent: this.dispatchEvent
        }));
      } else if (Object.keys(schema).length === 0) {
        return null;
      } else if (!this.renderer) {
        return rest.invisible ? null : import_react33.default.createElement(LazyComponent, __assign({}, rest, exprProps, { getComponent: function() {
          return __awaiter(_this, void 0, void 0, function() {
            var result;
            return __generator(this, function(_a4) {
              switch (_a4.label) {
                case 0:
                  return [4, rest.env.loadRenderer(schema, $path, this.reRender)];
                case 1:
                  result = _a4.sent();
                  if (result && typeof result === "function") {
                    return [2, result];
                  } else if (result && import_react33.default.isValidElement(result)) {
                    return [2, function() {
                      return result;
                    }];
                  }
                  this.reRender();
                  return [2, function() {
                    return loadRenderer(schema, $path);
                  }];
              }
            });
          });
        }, "$path": $path, "$schema": schema, retry: this.reRender, rootStore, statusStore, dispatchEvent: this.dispatchEvent }));
      }
      var renderer = this.renderer;
      schema = filterSchema(schema, renderer, rest);
      var defaultData = schema.data, defaultValue = schema.value, propKey = schema.key, defaultActiveKey = schema.activeKey, restSchema = __rest(schema, ["data", "value", "key", "activeKey"]);
      var Component3 = renderer.component;
      if (rest.invisible && (exprProps.hidden || exprProps.visible === false || !renderer.isFormItem || schema.visible !== false && !schema.hidden)) {
        return null;
      }
      if (renderer.storeType) {
        exprProps = {};
      }
      var isClassComponent = (_e = Component3.prototype) === null || _e === void 0 ? void 0 : _e.isReactComponent;
      var props = __assign(__assign(__assign(__assign(__assign({}, theme2.getRendererConfig(renderer.name)), restSchema), chainEvents(rest, restSchema)), exprProps), {
        // value: defaultValue, // 备注: 此处并没有将value传递给渲染器
        defaultData: (_f = restSchema.defaultData) !== null && _f !== void 0 ? _f : defaultData,
        defaultValue: (_g = restSchema.defaultValue) !== null && _g !== void 0 ? _g : defaultValue,
        defaultActiveKey,
        propKey,
        $path,
        $schema: schema,
        ref: this.refFn,
        render: this.renderChild,
        rootStore,
        statusStore,
        dispatchEvent: this.dispatchEvent,
        mobileUI: schema.useMobileUI === false ? false : rest.mobileUI
      });
      if (schema.style) {
        props.style = buildStyle(schema.style, detectData);
      }
      if (disable !== void 0) {
        props.disabled = disable;
      }
      if (isStatic !== void 0) {
        props.static = isStatic;
      }
      if (renderer.autoVar) {
        try {
          for (var _k = __values(Object.keys(schema)), _l = _k.next(); !_l.done; _l = _k.next()) {
            var key = _l.value;
            if (typeof props[key] === "string") {
              props[key] = resolveVariableAndFilter(props[key], props.data, "| raw");
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_l && !_l.done && (_a3 = _k.return))
              _a3.call(_k);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      }
      var component = isClassComponent ? import_react33.default.createElement(Component3, __assign({}, props, { ref: this.childRef })) : import_react33.default.createElement(Component3, __assign({}, props));
      return this.props.env.enableAMISDebug ? import_react33.default.createElement(DebugWrapper, { renderer }, component) : component;
    };
    SchemaRenderer2.displayName = "Renderer";
    SchemaRenderer2.contextType = ScopedContext;
    __decorate([
      autobind,
      __metadata("design:type", Function),
      __metadata("design:paramtypes", [Object]),
      __metadata("design:returntype", void 0)
    ], SchemaRenderer2.prototype, "childRef", null);
    return SchemaRenderer2;
  }(import_react33.default.Component)
);
var PlaceholderComponent = (
  /** @class */
  function(_super) {
    __extends(PlaceholderComponent2, _super);
    function PlaceholderComponent2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.childRef = import_react33.default.createRef();
      return _this;
    }
    PlaceholderComponent2.prototype.getWrappedInstance = function() {
      return this.childRef.current;
    };
    PlaceholderComponent2.prototype.render = function() {
      var _a3 = this.props, renderChildren2 = _a3.renderChildren, rest = __rest(_a3, ["renderChildren"]);
      if (typeof renderChildren2 === "function") {
        return renderChildren2(__assign(__assign({}, rest), { ref: this.childRef }));
      }
      return null;
    };
    return PlaceholderComponent2;
  }(import_react33.default.Component)
);

// node_modules/amis-core/esm/StatusScoped.js
var import_react34 = __toESM(require_react());
var import_hoist_non_react_statics17 = __toESM(require_hoist_non_react_statics_cjs());

// node_modules/amis-core/esm/store/status.js
var StatusStore = types.model("StatusStore", {
  visibleState: types.optional(types.frozen(), {}),
  disableState: types.optional(types.frozen(), {}),
  staticState: types.optional(types.frozen(), {})
}).actions(function(self2) {
  return {
    setVisible: function(key, value) {
      var _a3;
      var state = __assign(__assign({}, self2.visibleState), (_a3 = {}, _a3[key] = value, _a3));
      self2.visibleState = state;
    },
    setDisable: function(key, value) {
      var _a3;
      var state = __assign(__assign({}, self2.disableState), (_a3 = {}, _a3[key] = value, _a3));
      self2.disableState = state;
    },
    setStatic: function(key, value) {
      var _a3;
      var state = __assign(__assign({}, self2.staticState), (_a3 = {}, _a3[key] = value, _a3));
      self2.staticState = state;
    },
    resetAll: function() {
      self2.visibleState = {};
      self2.disableState = {};
      self2.staticState = {};
    }
  };
});

// node_modules/amis-core/esm/StatusScoped.js
function StatusScoped(ComposedComponent) {
  var _a3;
  var result = (0, import_hoist_non_react_statics17.default)((_a3 = /** @class */
  function(_super) {
    __extends(class_1, _super);
    function class_1(props) {
      var _this = _super.call(this, props) || this;
      _this.childRef = _this.childRef.bind(_this);
      _this.getWrappedInstance = _this.getWrappedInstance.bind(_this);
      _this.store = StatusStore.create({});
      return _this;
    }
    class_1.prototype.childRef = function(ref) {
      while (ref && ref.getWrappedInstance) {
        ref = ref.getWrappedInstance();
      }
      this.ref = ref;
    };
    class_1.prototype.getWrappedInstance = function() {
      return this.ref;
    };
    class_1.prototype.componentWillUnmount = function() {
      this.store && destroy(this.store);
      delete this.store;
    };
    class_1.prototype.render = function() {
      var _a4;
      var injectedProps = {
        statusStore: this.store
      };
      var refConfig = ((_a4 = ComposedComponent.prototype) === null || _a4 === void 0 ? void 0 : _a4.isReactComponent) ? { ref: this.childRef } : { forwardedRef: this.childRef };
      return import_react34.default.createElement(ComposedComponent, __assign({}, this.props, injectedProps, refConfig));
    };
    return class_1;
  }(import_react34.default.Component), _a3.displayName = "StatusScoped(".concat(ComposedComponent.displayName || ComposedComponent.name, ")"), _a3.ComposedComponent = ComposedComponent, _a3), ComposedComponent);
  return result;
}

// node_modules/amis-core/esm/Root.js
var import_react36 = __toESM(require_react());
var import_isPlainObject32 = __toESM(require_isPlainObject());

// node_modules/amis-core/esm/RootRenderer.js
var import_react35 = __toESM(require_react());
var import_qs3 = __toESM(require_lib());
var import_pick5 = __toESM(require_pick());
var import_mapValues13 = __toESM(require_mapValues());
var import_file_saver2 = __toESM(require_FileSaver_min());
var import_react_dom17 = __toESM(require_react_dom());
var RootRenderer = (
  /** @class */
  function(_super) {
    __extends(RootRenderer2, _super);
    function RootRenderer2(props) {
      var _this = this;
      var _a3;
      _this = _super.call(this, props) || this;
      _this.store = props.rootStore.addStore({
        id: guid(),
        path: _this.props.$path,
        storeType: RootStore.name,
        parentId: ""
      });
      _this.store.updateContext(props.context);
      _this.store.initData(props.data);
      _this.store.updateLocation(props.location, (_a3 = _this.props.env) === null || _a3 === void 0 ? void 0 : _a3.parseLocation);
      bulkBindFunctions(_this, [
        "handleAction",
        "handleDialogConfirm",
        "handleDialogClose",
        "handleDrawerConfirm",
        "handleDrawerClose",
        "handlePageVisibilityChange"
      ]);
      return _this;
    }
    RootRenderer2.prototype.componentDidMount = function() {
      document.addEventListener("visibilitychange", this.handlePageVisibilityChange);
      if (typeof this.props.env.affixOffsetTop !== "undefined" || typeof this.props.env.affixOffsetBottom !== "undefined") {
        var dom = (0, import_react_dom17.findDOMNode)(this);
        if (dom === null || dom === void 0 ? void 0 : dom.parentElement) {
          dom.parentElement.style.cssText += "--affix-offset-top: ".concat(this.props.env.affixOffsetTop || 0, "px; --affix-offset-bottom: ").concat(this.props.env.affixOffsetBottom || 0, "px;");
        }
      }
    };
    RootRenderer2.prototype.componentDidUpdate = function(prevProps) {
      var props = this.props;
      if (props.data !== prevProps.data) {
        this.store.initData(props.data);
      }
      if (props.location !== prevProps.location) {
        this.store.updateLocation(props.location);
      }
      if (props.context !== prevProps.context) {
        this.store.updateContext(props.context);
      }
    };
    RootRenderer2.prototype.componentDidCatch = function(error, errorInfo) {
      var _a3, _b3;
      (_b3 = (_a3 = this.props.env) === null || _a3 === void 0 ? void 0 : _a3.errorCatcher) === null || _b3 === void 0 ? void 0 : _b3.call(_a3, error, errorInfo);
      this.store.setRuntimeError(error, errorInfo);
    };
    RootRenderer2.prototype.componentWillUnmount = function() {
      this.props.rootStore.removeStore(this.store);
      document.removeEventListener("visibilitychange", this.handlePageVisibilityChange);
    };
    RootRenderer2.prototype.handlePageVisibilityChange = function() {
      var env = this.props.env;
      if (document.visibilityState === "hidden") {
        env === null || env === void 0 ? void 0 : env.tracker({
          eventType: "pageHidden"
        });
      } else if (document.visibilityState === "visible") {
        env === null || env === void 0 ? void 0 : env.tracker({
          eventType: "pageVisible"
        });
      }
    };
    RootRenderer2.prototype.handleAction = function(e, action, ctx, throwErrors, delegate) {
      var _this = this;
      var _a3, _b3;
      if (throwErrors === void 0) {
        throwErrors = false;
      }
      var _c = this.props, env = _c.env, messages = _c.messages, onAction = _c.onAction, mobileUI = _c.mobileUI, render3 = _c.render;
      var store2 = this.store;
      if ((onAction === null || onAction === void 0 ? void 0 : onAction(e, action, ctx, throwErrors, delegate || this.context)) === false) {
        return;
      }
      var scoped = delegate || this.context;
      if (action.actionType === "reload") {
        action.target && scoped.reload(action.target, ctx);
      } else if (action.target) {
        action.target.split(",").forEach(function(name) {
          var target = scoped.getComponentByName(name);
          target && target.doAction && target.doAction(__assign(__assign({}, action), { target: void 0 }), ctx);
        });
      } else if (action.actionType === "url" || action.actionType === "link" || action.actionType === "jump") {
        if (!env || !env.jumpTo) {
          throw new Error("env.jumpTo is required!");
        }
        env.jumpTo(filter(action.to || action.url || action.link, ctx, "| raw"), action, ctx);
      } else if (action.actionType === "email") {
        var mailTo = filter(action.to, ctx);
        var mailInfo = (0, import_mapValues13.default)((0, import_pick5.default)(action, "to", "cc", "bcc", "subject", "body"), function(val) {
          return filter(val, ctx);
        });
        var mailStr = import_qs3.default.stringify(mailInfo);
        var mailto = "mailto:".concat(mailTo, "?").concat(mailStr);
        window.open(mailto);
      } else if (action.actionType === "dialog") {
        store2.setCurrentAction(action);
        store2.openDialog(ctx, void 0, action.callback, delegate || this.context);
      } else if (action.actionType === "drawer") {
        store2.setCurrentAction(action);
        store2.openDrawer(ctx, void 0, void 0, delegate);
      } else if (action.actionType === "toast") {
        (_b3 = (_a3 = action.toast) === null || _a3 === void 0 ? void 0 : _a3.items) === null || _b3 === void 0 ? void 0 : _b3.forEach(function(item) {
          env.notify(item.level || "info", item.body ? render3("body", item.body, __assign(__assign({}, _this.props), { data: ctx, context: store2.context })) : "", __assign(__assign(__assign({}, action.toast), item), { title: item.title ? render3("title", item.title, __assign(__assign({}, _this.props), { data: ctx, context: store2.context })) : null, mobileUI }));
        });
      } else if (action.actionType === "ajax") {
        store2.setCurrentAction(action);
        store2.saveRemote(action.api, ctx, {
          successMessage: action.messages && action.messages.success || messages && messages.saveSuccess,
          errorMessage: action.messages && action.messages.failed || messages && messages.saveSuccess
        }).then(function() {
          return __awaiter(_this, void 0, void 0, function() {
            var redirect;
            return __generator(this, function(_a4) {
              switch (_a4.label) {
                case 0:
                  if (!(action.feedback && isVisible(action.feedback, store2.data)))
                    return [3, 2];
                  return [4, this.openFeedback(action.feedback, store2.data)];
                case 1:
                  _a4.sent();
                  _a4.label = 2;
                case 2:
                  redirect = action.redirect && filter(action.redirect, store2.data);
                  redirect && env.jumpTo(redirect, action, store2.data);
                  action.reload && this.reloadTarget(delegate || this.context, filterTarget(action.reload, ctx), store2.data);
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        }).catch(function(e2) {
          if (throwErrors || action.countDown) {
            throw e2;
          }
        });
      } else if (action.actionType === "copy" && (action.content || action.copy)) {
        env.copy && env.copy(filter(action.content || action.copy, ctx, "| raw"), {
          format: action.copyFormat
        });
      } else if (action.actionType === "saveAs") {
        var api = normalizeApi(action.api);
        if (typeof api.url === "string") {
          var fileName = action.fileName || "data.txt";
          if (!action.fileName && api.url.indexOf(".") !== -1) {
            fileName = api.url.split("/").pop();
          }
          (0, import_file_saver2.saveAs)(api.url, fileName);
        }
      }
    };
    RootRenderer2.prototype.handleDialogConfirm = function(values2, action) {
      var _a3;
      var args = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
      }
      var store2 = this.store;
      if (action.mergeData && values2.length === 1 && values2[0]) {
        store2.updateData(values2[0]);
      }
      var dialog = store2.action.dialog;
      if (dialog && dialog.onConfirm && dialog.onConfirm.apply(dialog, __spreadArray([values2, action], __read(args), false)) === false) {
        return;
      }
      var dialogAction = store2.action;
      var reload = (_a3 = action.reload) !== null && _a3 !== void 0 ? _a3 : dialogAction.reload;
      var scoped = store2.getDialogScoped() || this.context;
      store2.closeDialog(true);
      if (reload) {
        scoped.reload(reload, store2.data);
      }
    };
    RootRenderer2.prototype.handleDialogClose = function(confirmed) {
      if (confirmed === void 0) {
        confirmed = false;
      }
      var store2 = this.store;
      store2.closeDialog(confirmed);
    };
    RootRenderer2.prototype.handleDrawerConfirm = function(values2, action) {
      var _a3;
      var args = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
      }
      var store2 = this.store;
      if (action.mergeData && values2.length === 1 && values2[0]) {
        store2.updateData(values2[0]);
      }
      var drawer = store2.action.drawer;
      if (drawer && drawer.onConfirm && drawer.onConfirm.apply(drawer, __spreadArray([values2, action], __read(args), false)) === false) {
        return;
      }
      var drawerAction = store2.action;
      var reload = (_a3 = action.reload) !== null && _a3 !== void 0 ? _a3 : drawerAction.reload;
      var scoped = store2.getDrawerScoped() || this.context;
      store2.closeDrawer();
      setTimeout(function() {
        if (reload) {
          scoped.reload(reload, store2.data);
        }
      }, 300);
    };
    RootRenderer2.prototype.handleDrawerClose = function() {
      var store2 = this.store;
      store2.closeDrawer();
    };
    RootRenderer2.prototype.openFeedback = function(dialog, ctx) {
      var _this = this;
      return new Promise(function(resolve) {
        var store2 = _this.store;
        store2.setCurrentAction({
          type: "button",
          actionType: "dialog",
          dialog
        });
        store2.openDialog(ctx, void 0, function(confirmed) {
          resolve(confirmed);
        }, _this.context);
      });
    };
    RootRenderer2.prototype.reloadTarget = function(scoped, target, data) {
      scoped.reload(target, data);
    };
    RootRenderer2.prototype.renderRuntimeError = function() {
      var _a3;
      var _b3 = this.props, render3 = _b3.render, rest = __rest(_b3, ["render"]);
      var store2 = this.store;
      return render3("error", {
        type: "alert",
        level: "danger"
      }, __assign(__assign({}, rest), { topStore: store2, body: import_react35.default.createElement(
        import_react35.default.Fragment,
        null,
        import_react35.default.createElement("h3", null, (_a3 = store2.runtimeError) === null || _a3 === void 0 ? void 0 : _a3.toString()),
        import_react35.default.createElement(
          "pre",
          null,
          import_react35.default.createElement("code", null, store2.runtimeErrorStack.componentStack)
        )
      ) }));
    };
    RootRenderer2.prototype.renderSpinner = function() {
      var _a3 = this.props, render3 = _a3.render, rest = __rest(_a3, ["render"]);
      var store2 = this.store;
      return render3("spinner", {
        type: "spinner"
      }, __assign(__assign({}, rest), { topStore: store2, show: store2.loading }));
    };
    RootRenderer2.prototype.renderError = function() {
      var _a3 = this.props, render3 = _a3.render, rest = __rest(_a3, ["render"]);
      var store2 = this.store;
      return store2.error ? render3("error", {
        type: "alert"
      }, __assign(__assign({}, rest), { topStore: this.store, body: store2.msg, showCloseButton: true, onClose: store2.clearMessage })) : null;
    };
    RootRenderer2.prototype.renderDialog = function() {
      var _a3 = this.props, render3 = _a3.render, rest = __rest(_a3, ["render"]);
      var store2 = this.store;
      return render3("dialog", __assign(__assign({}, store2.action && store2.action.dialog), { type: "dialog" }), __assign(__assign({}, rest), { key: "dialog", topStore: this.store, data: store2.dialogData, context: store2.context, onConfirm: this.handleDialogConfirm, onClose: this.handleDialogClose, show: store2.dialogOpen, onAction: this.handleAction }));
    };
    RootRenderer2.prototype.renderDrawer = function() {
      var _a3 = this.props, render3 = _a3.render, rest = __rest(_a3, ["render"]);
      var store2 = this.store;
      return render3("drawer", __assign(__assign({}, store2.action && store2.action.drawer), { type: "drawer" }), __assign(__assign({}, rest), { key: "drawer", topStore: this.store, data: store2.drawerData, context: store2.context, onConfirm: this.handleDrawerConfirm, onClose: this.handleDrawerClose, show: store2.drawerOpen, onAction: this.handleAction }));
    };
    RootRenderer2.prototype.render = function() {
      var _a3 = this.props, pathPrefix = _a3.pathPrefix, schema = _a3.schema, render3 = _a3.render, rest = __rest(_a3, ["pathPrefix", "schema", "render"]);
      var store2 = this.store;
      if (store2.runtimeError) {
        return this.renderRuntimeError();
      }
      return import_react35.default.createElement(
        import_react35.default.Fragment,
        null,
        render3(pathPrefix, schema, __assign(__assign({}, rest), { topStore: this.store, data: this.store.downStream, context: store2.context, onAction: this.handleAction })),
        this.renderSpinner(),
        this.renderError(),
        this.renderDialog(),
        this.renderDrawer()
      );
    };
    RootRenderer2.contextType = ScopedContext;
    RootRenderer2 = __decorate([
      observer,
      __metadata("design:paramtypes", [Object])
    ], RootRenderer2);
    return RootRenderer2;
  }(import_react35.default.Component)
);

// node_modules/amis-core/esm/Root.js
var rootWrappers = [];
function addRootWrapper(fn) {
  rootWrappers.push(fn);
}
var Root = (
  /** @class */
  function(_super) {
    __extends(Root2, _super);
    function Root2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    Root2.prototype.resolveDefinitions = function(name) {
      var definitions = this.props.schema.definitions;
      if (!name || isEmpty2(definitions)) {
        return {};
      }
      return definitions && definitions[name];
    };
    Root2.prototype.render = function() {
      var _a3 = this.props, schema = _a3.schema, rootStore = _a3.rootStore, env = _a3.env, pathPrefix = _a3.pathPrefix, location2 = _a3.location, data = _a3.data, context = _a3.context, locale = _a3.locale, translate = _a3.translate, rest = __rest(_a3, ["schema", "rootStore", "env", "pathPrefix", "location", "data", "context", "locale", "translate"]);
      var theme2 = env.theme;
      var themeName = this.props.theme || "cxd";
      if (themeName === "default") {
        themeName = "cxd";
      }
      return import_react36.default.createElement(
        RootStoreContext.Provider,
        { value: rootStore },
        import_react36.default.createElement(
          ThemeContext.Provider,
          { value: themeName },
          import_react36.default.createElement(LocaleContext.Provider, { value: this.props.locale }, rootWrappers.reduce(function(props, wrapper) {
            return __assign(__assign({}, props), { children: wrapper(props) });
          }, __assign(__assign({ pathPrefix: pathPrefix || "", schema: (0, import_isPlainObject32.default)(schema) ? __assign({ type: "page" }, schema) : schema }, rest), { render: renderChild, rootStore, resolveDefinitions: this.resolveDefinitions, location: location2, data, env, classnames: theme2.classnames, classPrefix: theme2.classPrefix, locale, translate, children: import_react36.default.createElement(RootRenderer, __assign({ pathPrefix: pathPrefix || "", schema: (0, import_isPlainObject32.default)(schema) ? __assign({ type: "page" }, schema) : schema }, rest, { render: renderChild, rootStore, resolveDefinitions: this.resolveDefinitions, location: location2, data, context, env, classnames: theme2.classnames, classPrefix: theme2.classPrefix, locale, translate })) })).children)
        )
      );
    };
    __decorate([
      autobind,
      __metadata("design:type", Function),
      __metadata("design:paramtypes", [String]),
      __metadata("design:returntype", void 0)
    ], Root2.prototype, "resolveDefinitions", null);
    return Root2;
  }(import_react36.default.Component)
);
var StatusScopedSchemaRenderer = StatusScoped(SchemaRenderer);
function renderChildren(prefix, node, props) {
  if (Array.isArray(node)) {
    var elemKey = props.key || props.propKey || props.id || "";
    return node.map(function(node2, index) {
      return renderChild("".concat(prefix, "/").concat(index), node2, __assign(__assign({}, props), { key: "".concat(elemKey ? "".concat(elemKey, "-") : "").concat(index) }));
    });
  }
  return renderChild(prefix, node, props);
}
function renderChild(prefix, node, props) {
  if (Array.isArray(node)) {
    return renderChildren(prefix, node, props);
  }
  var typeofnode = typeof node;
  if (typeofnode === "undefined" || node === null) {
    return null;
  } else if (import_react36.default.isValidElement(node)) {
    return node;
  }
  var schema = typeofnode === "string" || typeofnode === "number" ? { type: "tpl", tpl: String(node) } : node;
  var transform2 = props.propsTransform;
  if (transform2) {
    props = __assign({}, props);
    delete props.propsTransform;
    props = transform2(props);
  }
  if (["dialog", "drawer"].includes(schema === null || schema === void 0 ? void 0 : schema.type) && !(schema === null || schema === void 0 ? void 0 : schema.component) && !(schema === null || schema === void 0 ? void 0 : schema.children)) {
    return import_react36.default.createElement(StatusScopedSchemaRenderer, __assign({ render: renderChild }, props, { schema, propKey: schema.key, "$path": "".concat(prefix ? "".concat(prefix, "/") : "").concat(schema && schema.type || "") }));
  }
  return import_react36.default.createElement(SchemaRenderer, __assign({ render: renderChild }, props, { schema, propKey: schema.key, "$path": "".concat(prefix ? "".concat(prefix, "/") : "").concat(schema && schema.type || "") }));
}
var ScopedRootRenderer = StatusScoped(HocScoped(Root));

// node_modules/amis-core/esm/env.js
var import_react37 = __toESM(require_react());
var import_hoist_non_react_statics18 = __toESM(require_hoist_non_react_statics_cjs());
var EnvContext = import_react37.default.createContext(void 0);

// node_modules/amis-core/esm/components/ErrorBoundary.js
var import_react38 = __toESM(require_react());
var ErrorBoundary = (
  /** @class */
  function(_super) {
    __extends(ErrorBoundary2, _super);
    function ErrorBoundary2(props) {
      var _this = _super.call(this, props) || this;
      _this.state = { hasError: false };
      return _this;
    }
    ErrorBoundary2.prototype.componentDidCatch = function(error, errorInfo) {
      var customErrorMsg = this.props.customErrorMsg;
      if (customErrorMsg) {
        console.warn(customErrorMsg);
      }
      console.warn("错误对象：", error);
      console.warn("错误信息：", errorInfo);
      this.setState({
        hasError: true
      });
    };
    ErrorBoundary2.prototype.render = function() {
      var fallback = this.props.fallback;
      if (this.state.hasError) {
        if (fallback) {
          return fallback();
        }
        return import_react38.default.createElement("div", { className: "renderer-error-boundary" }, "渲染发生错误，详细错误信息请查看控制台输出。");
      }
      return this.props.children;
    };
    return ErrorBoundary2;
  }(import_react38.default.Component)
);

// node_modules/amis-core/esm/polyfills.js
if (!("DragEvent" in window)) {
  Object.defineProperty(window, "DragEvent", {
    value: (
      /** @class */
      function() {
        function DragEvent() {
        }
        return DragEvent;
      }()
    )
  });
}

// node_modules/amis-core/esm/renderers/builtin.js
registerRenderer({
  type: "spinner",
  component: Placeholder
});
registerRenderer({
  type: "alert",
  component: Placeholder
});
registerRenderer({
  type: "dialog",
  component: Placeholder
});
registerRenderer({
  type: "drawer",
  component: Placeholder
});

// node_modules/amis-core/esm/renderers/register.js
function autoPreRegisterAmisCustomRenderers() {
  if (window.AmisCustomRenderers) {
    Object.keys(window.AmisCustomRenderers).forEach(function(rendererType) {
      if (renderersMap[rendererType]) {
        console.warn("[amis-core]：预注册渲染器失败，当前已存在重名渲染器（".concat(rendererType, "）。"));
      } else {
        var curAmisRenderer = window.AmisCustomRenderers[rendererType];
        if (curAmisRenderer) {
          registerAmisRendererByUsage(rendererType, curAmisRenderer);
        }
      }
    });
  }
}
autoPreRegisterAmisCustomRenderers();
window.addEventListener("message", function(event) {
  var _a3, _b3, _c;
  if (!event.data) {
    return;
  }
  if (((_a3 = event.data) === null || _a3 === void 0 ? void 0 : _a3.type) === "amis-renderer-register-event" && ((_b3 = event.data) === null || _b3 === void 0 ? void 0 : _b3.amisRenderer) && event.data.amisRenderer.type) {
    var curAmisRenderer = (_c = event.data) === null || _c === void 0 ? void 0 : _c.amisRenderer;
    var curUsage = (curAmisRenderer === null || curAmisRenderer === void 0 ? void 0 : curAmisRenderer.usage) || "renderer";
    if (renderersMap[curAmisRenderer.type]) {
      console.warn("[amis-core]：动态注册渲染器失败，当前已存在重名渲染器（".concat(curAmisRenderer.type, "）。"));
    } else {
      console.info("[amis-core]响应动态注册渲染器事件：", curAmisRenderer.type);
      registerAmisRendererByUsage(curUsage, curAmisRenderer);
    }
  }
}, false);
function registerAmisRendererByUsage(curUsage, curAmisRenderer) {
  var registerMap = {
    renderer: Renderer,
    formitem: FormItem,
    options: OptionsControl
  };
  var curAmisRendererComponent = curAmisRenderer.component;
  if (!curAmisRendererComponent && window.AmisCustomRenderers && window.AmisCustomRenderers[curAmisRenderer.type] && window.AmisCustomRenderers[curAmisRenderer.type].component) {
    curAmisRendererComponent = window.AmisCustomRenderers[curAmisRenderer.type].component;
  }
  if (curAmisRendererComponent && ["renderer", "formitem", "options"].includes(curUsage) && registerMap[curUsage]) {
    registerMap[curUsage](__assign(__assign({}, curAmisRenderer.config || {}), { type: curAmisRenderer.type, weight: curAmisRenderer.weight || 0, autoVar: curAmisRenderer.autoVar || false }))(curAmisRendererComponent);
  }
}

// node_modules/amis-core/esm/envOverwrite.js
var import_isPlainObject33 = __toESM(require_isPlainObject());
var _a2;
var _b2;
var isMobile2 = ((_b2 = (_a2 = window).matchMedia) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, "(max-width: 768px)").matches) ? true : false;
var envOverwrite = function(schema, locale) {
  return JSONValueMap(schema, function(value) {
    if (!(0, import_isPlainObject33.default)(value)) {
      return value;
    }
    if (locale && value[locale]) {
      var newValue = Object.assign({}, value, value[locale]);
      delete newValue[locale];
      return newValue;
    } else if (isMobile2 && value.mobile) {
      var newValue = Object.assign({}, value, value.mobile);
      delete newValue.mobile;
      return newValue;
    }
  }, true);
};

// node_modules/amis-core/esm/index.js
var import_react39 = __toESM(require_react());
var classPrefix = getClassPrefix();
var version = "3.6.3";
function render2(schema, props, options, pathPrefix) {
  if (props === void 0) {
    props = {};
  }
  if (options === void 0) {
    options = {};
  }
  if (pathPrefix === void 0) {
    pathPrefix = "";
  }
  return import_react39.default.createElement(AMISRenderer, __assign({}, props, { schema, pathPrefix, options }));
}
function AMISRenderer(_a3) {
  var schema = _a3.schema, options = _a3.options, pathPrefix = _a3.pathPrefix, props = __rest(_a3, ["schema", "options", "pathPrefix"]);
  var locale = props.locale || getDefaultLocale();
  locale = locale === "en" ? "en-US" : locale === "zh" || locale === "cn" ? "zh-CN" : locale.replace("_", "-");
  var translate = import_react39.default.useCallback(function() {
    var fn = props.translate || makeTranslator(locale);
    return fn.apply(null, arguments);
  }, [locale, props.translate]);
  var store2 = import_react39.default.useMemo(function() {
    var store3 = stores2[options.session || "global"];
    if (!store3) {
      options = __assign(__assign(__assign({}, defaultOptions), options), { fetcher: options.fetcher ? wrapFetcher(options.fetcher, options.tracker) : defaultOptions.fetcher, confirm: promisify(options.confirm || defaultOptions.confirm || window.confirm), locale, translate });
      store3 = RendererStore.create({}, options);
      stores2[options.session || "global"] = store3;
    } else {
      var env_1 = getEnv(store3);
      Object.assign(env_1, __assign(__assign({}, options), { fetcher: options.fetcher ? wrapFetcher(options.fetcher, options.tracker) : env_1.fetcher, confirm: options.confirm ? promisify(options.confirm) : env_1.confirm, locale, translate }));
    }
    window.amisStore = store3;
    return store3;
  }, Object.keys(options).concat(Object.values(options)).concat(locale));
  var env = getEnv(store2);
  var theme2 = props.theme || options.theme || "cxd";
  if (theme2 === "default") {
    theme2 = "cxd";
  }
  env.theme = getTheme(theme2);
  import_react39.default.useEffect(function() {
    env.enableAMISDebug ? enableDebug() : disableDebug();
    return function() {
      return env.enableAMISDebug || disableDebug();
    };
  }, [env.enableAMISDebug]);
  if (props.locale !== void 0) {
    env.translate = translate;
    env.locale = locale;
  }
  if (options.useMobileUI !== false) {
    props.mobileUI = env.isMobile();
  }
  schema = envOverwrite(schema, locale);
  schema = replaceText(schema, options.replaceText, env.replaceTextIgnoreKeys);
  return import_react39.default.createElement(
    EnvContext.Provider,
    { value: env },
    import_react39.default.createElement(ScopedRootRenderer, __assign({}, props, { schema, pathPrefix, rootStore: store2, env, theme: theme2, locale, translate }))
  );
}

export {
  require_isObject,
  require_isFunction,
  require_SetCache,
  require_baseFindIndex,
  require_baseIndexOf,
  require_arrayIncludes,
  require_arrayIncludesWith,
  require_cacheHas,
  require_baseUniq,
  require_uniq,
  require_last,
  require_copyArray,
  require_baseCreate,
  require_isPrototype,
  require_isObjectLike,
  require_isArray,
  require_isArrayLike,
  require_isArrayLikeObject,
  require_isPlainObject,
  require_baseUnary,
  require_assignValue,
  require_copyObject,
  require_baseTimes,
  require_keysIn,
  require_baseMerge,
  require_identity,
  require_baseRest,
  require_isIterateeCall,
  require_createAssigner,
  require_merge,
  require_arrayFilter,
  require_keys,
  require_isEqual,
  require_isNumber,
  require_isString,
  require_arrayMap,
  require_upperFirst,
  require_toNumber,
  require_toFinite,
  require_toInteger,
  require_memoize,
  require_baseIteratee,
  require_uniqBy,
  Evaluator,
  AsyncEvaluator,
  filters,
  registerFilter,
  extendsFilters,
  getFilters,
  lexer,
  parse,
  registerFunction,
  functionDocs,
  evaluate,
  evaluateForAsync,
  tokenize,
  setFormulaEvalErrorHandler,
  resolveVariableAndFilterForAsync,
  keyToPath,
  getVariable,
  resolveVariable,
  makeSorter,
  require_arrayEach,
  require_baseForOwn,
  require_baseEach,
  require_groupBy,
  createObject2 as createObject,
  extractObjectChain,
  createObjectFromChain,
  injectObjectChain,
  cloneObject,
  extendObject,
  isObject,
  setVariable,
  deleteVariable,
  pickValues,
  string2regExp,
  escapeHtml2 as escapeHtml,
  formatDuration,
  prettyBytes,
  stripNumber2 as stripNumber,
  relativeValueRe,
  filterDate,
  parseDuration,
  normalizeDate,
  register,
  require_isEmpty,
  resolveCondition,
  registerConditionComputer,
  getConditionComputers,
  setConditionComputeErrorHandler,
  registerTplEnginer,
  filter,
  asyncFilter,
  setCustomEvalExpression,
  evalExpression,
  evalExpressionWithConditionBuilder,
  setCustomEvalJs,
  evalJS,
  bind,
  autobindMethod,
  isPureVariable,
  resolveVariableAndFilter,
  collectVariables,
  FormulaExec,
  formulaExec,
  registerFormulaExec,
  isExpression,
  isNeedFormula,
  replaceExpression,
  preventDefault,
  isMobile,
  range,
  injectPropsToObject,
  isSuperDataModified,
  syncDataFromSuper,
  guid,
  findIndex,
  hasOwnPropertyInPath,
  noop,
  anyChanged,
  changedEffect,
  rmUndefined,
  isObjectShallowModified,
  isArrayChildrenModified,
  immutableExtends,
  makeColumnClassBuild,
  hasVisibleExpression,
  isVisible,
  isUnfolded,
  visibilityFilter,
  isDisabled,
  hasAbility,
  makeHorizontalDeeper,
  promisify,
  getScrollParent,
  difference,
  padArr,
  __uri,
  isBreakpoint,
  until,
  omitControls,
  isEmpty2 as isEmpty,
  uuid,
  uuidv42 as uuidv4,
  mapTree,
  eachTree,
  findTree,
  findTreeAll,
  findTreeIndex,
  getTree,
  filterTree,
  everyTree,
  someTree,
  flattenTree,
  flattenTreeWithLeafNodes,
  spliceTree,
  getTreeDepth,
  getTreeAncestors,
  getTreeParent,
  countTree,
  ucFirst,
  lcFirst,
  camel,
  getWidthRate,
  getLevelFromClassName,
  pickEventsProps,
  autobind,
  bulkBindFunctions,
  sortArray,
  hasFile,
  qsstringify,
  qsparse,
  object2formData,
  chainFunctions,
  chainEvents,
  mapObject,
  loadScript,
  loadStyle,
  SkipOperation,
  ValidateError,
  findObjectsWithKey,
  getScrollbarWidth,
  getPropValue,
  detectPropValueChanged,
  removeHTMLTag,
  normalizeNodePath,
  isClickOnInput,
  hashCode,
  JSONTraverse,
  JSONValueMap,
  convertArrayValueToMoment,
  getRange,
  repeatCount,
  isNumeric,
  parsePrimitiveQueryString,
  parseQuery,
  differenceFromAll,
  buildTrackExpression,
  evalTrackExpression,
  importLazyComponent,
  replaceUrlParams,
  helper_exports,
  resolveMapping,
  resolveMappingObject,
  dataMapping,
  require_findIndex,
  require_find,
  SimpleMap,
  StoreNode,
  require_getAllKeysIn,
  require_baseFlatten,
  require_flatten,
  require_omit,
  offset,
  offsetParent,
  position,
  JsonView,
  enableDebug,
  disableDebug,
  DebugWrapper,
  debug,
  warning,
  traceProps,
  normalizeApi,
  buildApi,
  str2function,
  str2AsyncFunction,
  callStrFunction,
  responseAdaptor,
  wrapFetcher,
  wrapAdaptor,
  jsFetcher,
  jsonpFetcher,
  isApiOutdatedWithData,
  isApiOutdated,
  isValidApi,
  isEffectiveApi,
  isSameApi,
  getApiCache,
  setApiCache,
  clearApiCache,
  normalizeApiResponseData,
  ColorScale,
  DATASCHEMA_TYPE_MAP,
  DataScope,
  DataSchema,
  ServerError,
  toDataURL,
  getImageDimensions,
  LoopStatus,
  registerAction,
  getActionByType,
  runActions,
  runAction,
  require_debounce,
  require_cloneDeep,
  getComputedStyle2 as getComputedStyle,
  resizeSensor,
  require_mapValues,
  require_map,
  require_kebabCase,
  validations,
  addRule,
  validateMessages,
  validate,
  validateObject,
  str2rules,
  Animation,
  iRendererStore,
  replaceText,
  ServiceStore,
  ComboStore,
  require_basePickBy,
  require_pick,
  FormStore,
  require_FileSaver_min,
  matchSorter,
  CRUDStore,
  TableStore,
  TableStore2,
  ListStore,
  ModalStore,
  normalizeOptions,
  getOptionValue,
  getOptionValueBindField,
  matchOptionValue,
  optionValueCompare,
  FormItemStore,
  PaginationStore,
  AppStore,
  RendererStore,
  RegisterStore,
  normalizeLink,
  require_values,
  createRendererEvent,
  bindEvent,
  dispatchEvent,
  getRendererEventListeners,
  resolveEventData,
  filterTarget,
  ScopedContext,
  HocScoped,
  filterClassNameObject,
  getExprProperties,
  hasExprPropertiesChanged,
  addSchemaFilter,
  filterSchema,
  Renderer,
  registerRenderer,
  unRegisterRenderer,
  clearStoresCache,
  updateEnv,
  extendDefaultEnv,
  resolveRenderer,
  getRenderers,
  getRendererByName,
  useInView,
  LazyComponent,
  FormRenderer,
  valueMap,
  inheritValueMap,
  findOrCreateStyle,
  insertStyle,
  addStyle,
  formatStyle,
  insertCustomStyle,
  getValueByPath,
  insertEditCustomStyle,
  removeCustomStyle,
  formatInputThemeCss,
  setThemeClassName,
  Portal_default,
  getContainer,
  ownerDocument2 as ownerDocument,
  calculatePosition,
  getStyleNumber,
  renderTextByKeyword,
  RootClose,
  Overlay,
  theme,
  makeClassnames,
  setDefaultTheme,
  classnames,
  getClassPrefix,
  getTheme,
  themeable,
  PopOver$1,
  CustomStyle,
  FormItemWrap,
  registerFormItem,
  FormItem,
  getFormItemByName,
  registerOptionsControl,
  OptionsControl,
  attachmentAdpator,
  columnsSplit,
  handleAction,
  highlight,
  generateIcon,
  JSONSchme2AMisSchema,
  scrollPosition,
  buildStyle,
  uncontrollable2 as uncontrollable,
  toNumber,
  decodeEntity,
  arraySlice,
  safeAdd,
  safeSub,
  numberFormatter,
  isIntegerInRange,
  register3 as register2,
  extendLocale,
  removeLocaleData,
  makeTranslator,
  getDefaultLocale,
  setDefaultLocale,
  localeable,
  require_baseDifference,
  require_difference,
  RENDERER_TRANSMISSION_OMIT_PROPS,
  StatusScoped,
  addRootWrapper,
  EnvContext,
  ErrorBoundary,
  classPrefix,
  version,
  render2 as render
};
/*! Bundled license information:

amis-core/esm/index.js:
  (** @license amis v@version
   *
   * Copyright Baidu
   *
   * This source code is licensed under the Apache license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=chunk-E64EENQX.js.map
