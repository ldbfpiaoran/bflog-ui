/**
 * amis-ui v3.6.3
 * Copyright 2018-2023 fex
 */

import { __extends, __read, __awaiter, __generator, __spreadArray, __assign, __rest, __decorate, __metadata } from 'tslib';
import React__default from 'react';
import { eachTree, mapTree, parse, autobind, uncontrollable, themeable, localeable } from 'amis-core';
import { functionDocs } from 'amis-formula';
import { FormulaPlugin, editorFactory } from './plugin.js';
import FuncList from './FuncList.js';
import VariableList from './VariableList.js';
import { CodeMirrorEditor } from '../CodeMirror.js';
import { toast } from '../Toast.js';
import Switch from '../Switch.js';

var FormulaEditor = /** @class */ (function (_super) {
    __extends(FormulaEditor, _super);
    function FormulaEditor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            focused: false,
            isCodeMode: false,
            expandTree: false,
            normalizeVariables: [],
            functions: []
        };
        _this.unmounted = false;
        return _this;
    }
    FormulaEditor.buildDefaultFunctions = function (doc) {
        var funcs = [];
        doc.forEach(function (item) {
            var namespace = item.namespace || 'Others';
            var exists = funcs.find(function (item) { return item.groupName === namespace; });
            if (!exists) {
                exists = {
                    groupName: namespace,
                    items: []
                };
                funcs.push(exists);
            }
            exists.items.push(item);
        });
        return funcs;
    };
    FormulaEditor.buildCustomFunctions = function (map) {
        if (map === void 0) { map = {}; }
        return Object.entries(map).map(function (_a) {
            var _b = __read(_a, 2), k = _b[0], items = _b[1];
            return ({
                groupName: k,
                items: items
            });
        });
    };
    FormulaEditor.replaceStrByIndex = function (str, idx, key, replaceKey) {
        var from = str.slice(0, idx);
        var left = str.slice(idx);
        return from + left.replace(key, replaceKey);
    };
    FormulaEditor.getRegExpByMode = function (evalMode, key) {
        var reg = evalMode
            ? "\\b".concat(key, "\\b")
            : "\\$\\{[^\\{\\}]*\\b".concat(key, "\\b[^\\{\\}]*\\}");
        return new RegExp(reg);
    };
    FormulaEditor.highlightValue = function (value, variables, evalMode) {
        if (evalMode === void 0) { evalMode = true; }
        if (!Array.isArray(variables) || !variables.length || !value) {
            return;
        }
        var varMap = {};
        eachTree(variables, function (item) {
            var _a;
            if (item.value) {
                var key = item.value;
                varMap[key] = (_a = item.path) !== null && _a !== void 0 ? _a : item.label;
            }
        });
        var vars = Object.keys(varMap)
            .filter(function (item) { return item; })
            .sort(function (a, b) { return b.length - a.length; });
        var content = value || '';
        var html = '';
        // 标记方法调用
        html = content.replace(/([A-Z]+)\s*\(/g, function (_, func, pos) {
            return _ === null || _ === void 0 ? void 0 : _.replace(func, "<span class=\"c-func\">".concat(func, "</span>"));
        });
        var REPLACE_KEY = 'AMIS_FORMULA_REPLACE_KEY';
        vars.forEach(function (v) {
            var from = 0;
            var idx = -1;
            while (~(idx = content.indexOf(v, from))) {
                var encodeHtml = FormulaEditor.replaceStrByIndex(html, idx, v, REPLACE_KEY);
                var reg = FormulaEditor.getRegExpByMode(evalMode, REPLACE_KEY);
                // 如果匹配到则高亮，没有匹配到替换成原值
                if (reg.test(encodeHtml)) {
                    html = encodeHtml.replace(REPLACE_KEY, "<span class=\"c-field\">".concat(v, "</span>"));
                }
                else {
                    html = encodeHtml.replace(REPLACE_KEY, v);
                }
                from = idx + v.length;
            }
        });
        return { html: html };
    };
    FormulaEditor.prototype.componentDidMount = function () {
        var variables = this.props.variables;
        this.normalizeVariables(variables);
        this.buildFunctions();
    };
    FormulaEditor.prototype.componentDidUpdate = function (prevProps, prevState, snapshot) {
        if (prevProps.variables !== this.props.variables) {
            this.normalizeVariables(this.props.variables);
        }
        if (prevProps.functions !== this.props.functions) {
            this.buildFunctions();
        }
    };
    FormulaEditor.prototype.componentWillUnmount = function () {
        var _a;
        (_a = this.editorPlugin) === null || _a === void 0 ? void 0 : _a.dispose();
        this.unmounted = true;
    };
    FormulaEditor.prototype.buildFunctions = function () {
        return __awaiter(this, void 0, void 0, function () {
            var doc, customFunctions, functionList;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, import('amis-formula/lib/doc')];
                    case 1:
                        doc = (_a.sent()).doc;
                        if (this.unmounted) {
                            return [2 /*return*/];
                        }
                        customFunctions = Array.isArray(this.props.functions)
                            ? this.props.functions
                            : [];
                        functionList = __spreadArray(__spreadArray(__spreadArray([], __read(FormulaEditor.buildDefaultFunctions(doc)), false), __read(FormulaEditor.buildCustomFunctions(functionDocs)), false), __read(customFunctions), false);
                        this.setState({
                            functions: functionList
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    FormulaEditor.prototype.normalizeVariables = function (variables) {
        if (!variables) {
            return;
        }
        // 追加path，用于分级高亮
        var list = mapTree(variables, function (item, key, level, paths) {
            var _a;
            var path = paths === null || paths === void 0 ? void 0 : paths.reduce(function (prev, next) {
                var _a;
                return !next.value
                    ? prev
                    : "".concat(prev).concat(prev ? '.' : '').concat((_a = next.label) !== null && _a !== void 0 ? _a : next.value);
            }, '');
            return __assign(__assign(__assign({}, item), { path: "".concat(path).concat(path ? '.' : '').concat(item.label) }), (item.isMember || paths.some(function (item) { return item.isMember; })
                ? {
                    memberDepth: (_a = paths === null || paths === void 0 ? void 0 : paths.filter(function (item) { return item.type === 'array'; })) === null || _a === void 0 ? void 0 : _a.length
                }
                : {}));
        });
        this.setState({ normalizeVariables: list });
    };
    FormulaEditor.prototype.handleFocus = function () {
        this.setState({
            focused: true
        });
    };
    FormulaEditor.prototype.handleBlur = function () {
        this.setState({
            focused: false
        });
    };
    FormulaEditor.prototype.insertValue = function (value, type) {
        var _a;
        (_a = this.editorPlugin) === null || _a === void 0 ? void 0 : _a.insertContent(value, type);
    };
    FormulaEditor.prototype.handleEditorMounted = function (cm, editor) {
        var _this = this;
        this.editorPlugin = new FormulaPlugin(editor, cm, function () { return (__assign(__assign({}, _this.props), { variables: _this.state.normalizeVariables })); });
    };
    FormulaEditor.prototype.validate = function () {
        var value = this.props.value;
        try {
            value
                ? parse(value, {
                    evalMode: this.props.evalMode
                })
                : null;
        }
        catch (e) {
            return e.message;
        }
        return;
    };
    FormulaEditor.prototype.handleFunctionSelect = function (item) {
        var _a;
        (_a = this.editorPlugin) === null || _a === void 0 ? void 0 : _a.insertContent("".concat(item.name), 'func');
    };
    FormulaEditor.prototype.handleVariableSelect = function (item) {
        var _a;
        var _b = this.props; _b.evalMode; var selfVariableName = _b.selfVariableName;
        if (item &&
            item.value &&
            selfVariableName &&
            selfVariableName === item.value) {
            toast.warning('不能使用当前变量[self]，避免循环引用。');
            return;
        }
        if (!item.value) {
            return;
        }
        (_a = this.editorPlugin) === null || _a === void 0 ? void 0 : _a.insertContent(item.isMember
            ? item.value
            : {
                key: item.value,
                name: item.label,
                path: item.path
                // chunks: item.chunks
            }, item.isMember ? undefined : 'variable', 'cm-field', !this.state.isCodeMode);
    };
    FormulaEditor.prototype.handleOnChange = function (value) {
        var onChange = this.props.onChange;
        onChange === null || onChange === void 0 ? void 0 : onChange(value);
    };
    FormulaEditor.prototype.editorFactory = function (dom, cm) {
        var _a = this.props; _a.editorOptions; var rest = __rest(_a, ["editorOptions"]);
        return editorFactory(dom, cm, rest, {
            lineWrapping: true // 自动换行
        });
    };
    FormulaEditor.prototype.handleIsCodeModeChange = function (showCode) {
        var _a, _b, _c;
        // 重置一下value
        (_a = this.editorPlugin) === null || _a === void 0 ? void 0 : _a.setValue((_b = this.editorPlugin) === null || _b === void 0 ? void 0 : _b.getValue());
        // 非源码模式，则mark一下
        !showCode && ((_c = this.editorPlugin) === null || _c === void 0 ? void 0 : _c.autoMarkText());
        this.setState({ isCodeMode: showCode });
    };
    FormulaEditor.prototype.handleExpandTreeChange = function (expand) {
        this.setState({ expandTree: expand });
    };
    FormulaEditor.prototype.render = function () {
        var _a = this.props, header = _a.header, value = _a.value; _a.functions; var variableMode = _a.variableMode, __ = _a.translate, cx = _a.classnames, variableClassName = _a.variableClassName, functionClassName = _a.functionClassName, classPrefix = _a.classPrefix, selfVariableName = _a.selfVariableName;
        var _b = this.state, focused = _b.focused, isCodeMode = _b.isCodeMode, expandTree = _b.expandTree, normalizeVariables = _b.normalizeVariables, functionList = _b.functions;
        return (React__default.createElement("div", { className: cx("FormulaEditor", {
                'is-focused': focused
            }) },
            React__default.createElement("section", { className: cx('FormulaEditor-settings') },
                React__default.createElement(FuncList, { className: functionClassName, title: __('FormulaEditor.function'), data: functionList, onSelect: this.handleFunctionSelect }),
                React__default.createElement("div", { className: cx("FormulaEditor-content") },
                    React__default.createElement("header", { className: cx("FormulaEditor-header") },
                        __(header || 'FormulaEditor.title'),
                        React__default.createElement("div", { className: cx("FormulaEditor-header-toolbar") },
                            React__default.createElement("span", null, "\u6E90\u7801\u6A21\u5F0F"),
                            React__default.createElement(Switch, { value: isCodeMode, onChange: this.handleIsCodeModeChange }))),
                    React__default.createElement(CodeMirrorEditor, { className: cx('FormulaEditor-editor'), value: value, onChange: this.handleOnChange, editorFactory: this.editorFactory, editorDidMount: this.handleEditorMounted, onFocus: this.handleFocus, onBlur: this.handleBlur })),
                React__default.createElement("div", { className: cx('FormulaEditor-panel', 'right') },
                    variableMode !== 'tabs' ? (React__default.createElement("div", { className: cx('FormulaEditor-panel-header') },
                        __('FormulaEditor.variable'),
                        variableMode === 'tree' ? (React__default.createElement("div", { className: cx("FormulaEditor-header-toolbar") },
                            React__default.createElement("span", null, "\u5C55\u5F00\u5168\u90E8"),
                            React__default.createElement(Switch, { value: expandTree, onChange: this.handleExpandTreeChange }))) : null)) : null,
                    React__default.createElement("div", { className: cx('FormulaEditor-panel-body', variableMode && "FormulaEditor-panel-body--".concat(variableMode)) },
                        React__default.createElement(VariableList, { classPrefix: classPrefix, className: cx('FormulaEditor-VariableList', 'FormulaEditor-VariableList-root', variableClassName), expandTree: expandTree, selectMode: variableMode, data: normalizeVariables, onSelect: this.handleVariableSelect, selfVariableName: selfVariableName }))))));
    };
    FormulaEditor.defaultProps = {
        variables: [],
        evalMode: true
    };
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], FormulaEditor.prototype, "handleFocus", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], FormulaEditor.prototype, "handleBlur", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, String]),
        __metadata("design:returntype", void 0)
    ], FormulaEditor.prototype, "insertValue", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", void 0)
    ], FormulaEditor.prototype, "handleEditorMounted", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], FormulaEditor.prototype, "validate", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], FormulaEditor.prototype, "handleFunctionSelect", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], FormulaEditor.prototype, "handleVariableSelect", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], FormulaEditor.prototype, "handleOnChange", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [HTMLElement, Object]),
        __metadata("design:returntype", void 0)
    ], FormulaEditor.prototype, "editorFactory", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Boolean]),
        __metadata("design:returntype", void 0)
    ], FormulaEditor.prototype, "handleIsCodeModeChange", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Boolean]),
        __metadata("design:returntype", void 0)
    ], FormulaEditor.prototype, "handleExpandTreeChange", null);
    return FormulaEditor;
}(React__default.Component));
var Editor = uncontrollable(themeable(localeable(FormulaEditor)), {
    value: 'onChange'
}, ['validate']);

export { FormulaEditor, Editor as default };
