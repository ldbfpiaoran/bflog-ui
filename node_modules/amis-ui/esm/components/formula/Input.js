/**
 * amis-ui v3.6.3
 * Copyright 2018-2023 fex
 */

import { __assign } from 'tslib';
import React__default, { useCallback } from 'react';
import moment from 'moment';
import pick from 'lodash/pick';
import { themeable, localeable, uncontrollable, findTree, isExpression, noop } from 'amis-core';
import { FormulaEditor } from './Editor.js';
import ResultBox from '../ResultBox.js';
import EnhancedSelect from '../Select.js';
import NumberInput from '../NumberInput.js';
import DatePicker from '../DatePicker.js';
import Tag from '../Tag.js';

var FormulaInput = function (props) {
    var _a, _b, _c, _d, _e;
    var __ = props.translate, className = props.className, cx = props.classnames, allowInput = props.allowInput, placeholder = props.placeholder, borderMode = props.borderMode, evalMode = props.evalMode, mixedMode = props.mixedMode, value = props.value, variables = props.variables, _f = props.inputSettings, inputSettings = _f === void 0 ? { type: 'text' } : _f, popOverContainer = props.popOverContainer, onChange = props.onChange, itemRender = props.itemRender;
    var schemaType = inputSettings.type;
    /** 自上层共享的属性 */
    var sharedProps = pick(props, ['disabled', 'clearable']);
    var pipInValue = useCallback(function (value) {
        return value;
    }, ['value']);
    var pipOutValue = useCallback(function (origin) {
        var result = origin;
        if (origin === undefined) {
            onChange === null || onChange === void 0 ? void 0 : onChange(result);
            return;
        }
        if (schemaType === 'boolean') {
            result = origin.value;
        }
        else if (schemaType === 'select') {
            result = Array.isArray(origin)
                ? origin.map(function (item) { return item.value; })
                : origin.value;
        }
        onChange === null || onChange === void 0 ? void 0 : onChange(result);
    }, ['onChange']);
    var cmptValue = pipInValue(value !== null && value !== void 0 ? value : inputSettings.defaultValue);
    /** 数据来源可能是从 query中下发的（CRUD查询表头），导致数字或者布尔值被转为 string 格式，这里预处理一下 */
    if (schemaType === 'number') {
        cmptValue = isNaN(+cmptValue) ? cmptValue : +cmptValue;
    }
    else if (schemaType === 'boolean') {
        cmptValue =
            cmptValue === 'true' ? true : cmptValue === 'false' ? false : cmptValue;
    }
    var targetVariable = variables && cmptValue != null && typeof cmptValue === 'string'
        ? findTree(variables, function (item) {
            return mixedMode
                ? cmptValue.replace(/^\$\{/, '').replace(/\}$/, '') === (item === null || item === void 0 ? void 0 : item.value)
                : cmptValue === (item === null || item === void 0 ? void 0 : item.value);
        })
        : null;
    if (isExpression(cmptValue) ||
        targetVariable ||
        (schemaType === 'number' &&
            cmptValue != null &&
            typeof cmptValue !== 'number') ||
        (['date', 'time', 'datetime'].includes(schemaType) &&
            !moment(cmptValue).isValid()) ||
        (schemaType === 'select' &&
            cmptValue != null &&
            !((_a = inputSettings === null || inputSettings === void 0 ? void 0 : inputSettings.options) !== null && _a !== void 0 ? _a : []).some(function (item) { return (item === null || item === void 0 ? void 0 : item.value) === cmptValue; })) ||
        (schemaType === 'boolean' &&
            cmptValue != null &&
            typeof cmptValue !== 'boolean')) {
        var varName = cmptValue && mixedMode
            ? cmptValue.replace(/^\$\{/, '').replace(/\}$/, '')
            : cmptValue;
        var resultValue = (_b = targetVariable === null || targetVariable === void 0 ? void 0 : targetVariable.value) !== null && _b !== void 0 ? _b : varName;
        return (React__default.createElement(ResultBox, { className: cx("FormulaPicker-input-variable"), allowInput: false, value: resultValue, result: resultValue == null
                ? void 0
                : FormulaEditor.highlightValue(resultValue, variables, evalMode), itemRender: function (item) {
                return (React__default.createElement("div", { className: cx('FormulaPicker-ResultBox'), dangerouslySetInnerHTML: { __html: item.html } }));
            }, onResultChange: noop, onChange: pipOutValue, onClear: function () { return pipOutValue(undefined); }, clearable: true }));
    }
    if (schemaType === 'number') {
        return (React__default.createElement(NumberInput, __assign({}, sharedProps, { className: cx(className, 'FormulaPicker-input-number'), borderMode: "none", placeholder: __(placeholder !== null && placeholder !== void 0 ? placeholder : 'NumberInput.placeholder'), step: inputSettings.step, min: inputSettings.minimum, max: inputSettings.maximum, precision: inputSettings.precision, value: cmptValue, onChange: pipOutValue })));
    }
    else if (schemaType === 'date') {
        var cmptValue_1 = pipInValue(value !== null && value !== void 0 ? value : inputSettings.defaultValue);
        return (React__default.createElement(DatePicker, __assign({}, sharedProps, { className: cx(className, 'FormulaPicker-input-date'), borderMode: "none", closeOnSelect: true, placeholder: __(placeholder !== null && placeholder !== void 0 ? placeholder : 'Date.placeholder'), format: inputSettings.format || 'YYYY-MM-DD', inputFormat: inputSettings.inputFormat || 'YYYY-MM-DD', timeFormat: "", popOverContainer: popOverContainer, value: cmptValue_1, onChange: pipOutValue })));
    }
    else if (schemaType === 'time') {
        return (React__default.createElement(DatePicker, __assign({}, sharedProps, { className: cx(className, 'FormulaPicker-input-time'), viewMode: "time", borderMode: "none", closeOnSelect: true, placeholder: __(placeholder !== null && placeholder !== void 0 ? placeholder : 'Time.placeholder'), format: inputSettings.format || 'HH:mm', inputFormat: inputSettings.inputFormat || 'HH:mm', dateFormat: "", timeFormat: inputSettings.format || 'HH:mm', popOverContainer: popOverContainer, value: pipInValue(value !== null && value !== void 0 ? value : inputSettings.defaultValue), onChange: pipOutValue })));
    }
    else if (schemaType === 'datetime') {
        return (React__default.createElement(DatePicker, __assign({}, sharedProps, { className: cx(className, 'FormulaPicker-input-datetime'), borderMode: "none", closeOnSelect: true, placeholder: __(placeholder !== null && placeholder !== void 0 ? placeholder : 'Time.placeholder'), format: inputSettings.format || '', inputFormat: inputSettings.inputFormat || 'YYYY-MM-DD HH:mm', timeFormat: inputSettings.timeFormat || 'HH:mm', popOverContainer: popOverContainer, value: pipInValue(value !== null && value !== void 0 ? value : inputSettings.defaultValue), onChange: pipOutValue })));
    }
    else if (schemaType === 'select' || schemaType === 'boolean') {
        return (React__default.createElement(EnhancedSelect, __assign({}, sharedProps, { className: cx(className, "FormulaPicker-input-".concat(schemaType)), borderMode: "none", multiple: schemaType === 'boolean' ? false : inputSettings.multiple, options: schemaType === 'boolean'
                ? [
                    {
                        label: __((_c = inputSettings === null || inputSettings === void 0 ? void 0 : inputSettings.trueLabel) !== null && _c !== void 0 ? _c : 'FormulaInput.True'),
                        value: true
                    },
                    {
                        label: __((_d = inputSettings === null || inputSettings === void 0 ? void 0 : inputSettings.falseLabel) !== null && _d !== void 0 ? _d : 'FormulaInput.False'),
                        value: false
                    }
                ]
                : (_e = inputSettings.options) !== null && _e !== void 0 ? _e : [], value: pipInValue(value), renderValueLabel: function (option) {
                var _a, _b;
                var label = (_b = (_a = option.label) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : '';
                return schemaType === 'boolean' || !inputSettings.multiple ? (React__default.createElement(Tag, { label: label, className: cx('rounded') })) : (React__default.createElement(React__default.Fragment, null, label));
            }, onChange: pipOutValue })));
    }
    else {
        return (React__default.createElement(ResultBox, __assign({}, sharedProps, { className: cx(className), allowInput: allowInput, borderMode: borderMode, placeholder: placeholder, value: pipInValue(value), result: allowInput || !value
                ? void 0
                : FormulaEditor.highlightValue(value, variables, evalMode), itemRender: itemRender, onResultChange: noop, onChange: pipOutValue })));
    }
};
var FormulaInput$1 = themeable(localeable(uncontrollable(FormulaInput, {
    value: 'onChange'
})));

export { FormulaInput$1 as default };
