/**
 * amis-ui v3.6.3
 * Copyright 2018-2023 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var React = require('react');
var amisCore = require('amis-core');
var isEqual = require('lodash/isEqual');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var isEqual__default = /*#__PURE__*/_interopDefaultLegacy(isEqual);

var __react_jsx__ = require('react');
var _J$X_ = (__react_jsx__["default"] || __react_jsx__).createElement;
(__react_jsx__["default"] || __react_jsx__).Fragment;
var CollapseGroup = /** @class */ (function (_super) {
    tslib.__extends(CollapseGroup, _super);
    function CollapseGroup(props) {
        var _this = _super.call(this, props) || this;
        _this.getItems = function (children) {
            if (!Array.isArray(children)) {
                return children;
            }
            return children.map(function (child, index) {
                var props = child.props;
                var collapseId = props.propKey || String(index);
                // 判断是否折叠
                var collapsed = _this.state.activeKeys.indexOf(collapseId) === -1;
                return React__default["default"].cloneElement(child, tslib.__assign(tslib.__assign({}, props), { key: collapseId, collapseId: collapseId, collapsed: collapsed, expandIcon: _this.props.expandIcon, propsUpdate: true, onCollapse: function () { return _this.collapseChange(collapseId, collapsed); } }));
            });
        };
        // 传入的activeKey会被自动转换为defaultActiveKey
        _this.updateActiveKey(props.defaultActiveKey, true);
        return _this;
    }
    CollapseGroup.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {
        var props = this.props;
        if (!isEqual__default["default"](props.defaultActiveKey, nextProps.defaultActiveKey)) {
            this.updateActiveKey(nextProps.defaultActiveKey);
        }
    };
    CollapseGroup.prototype.updateActiveKey = function (propsActiveKey, isInit) {
        var props = this.props;
        var curActiveKey = propsActiveKey;
        if (!Array.isArray(curActiveKey)) {
            curActiveKey = curActiveKey ? [curActiveKey] : [];
        }
        if (props.accordion) {
            // 手风琴模式下只展开第一个元素
            curActiveKey = curActiveKey.length ? [curActiveKey[0]] : [];
        }
        if (isInit) {
            this.state = {
                activeKeys: curActiveKey.map(function (key) { return String(key); })
            };
        }
        else {
            this.setState({
                activeKeys: curActiveKey.map(function (key) { return String(key); })
            });
        }
    };
    CollapseGroup.prototype.collapseChange = function (collapseId, collapsed) {
        var _a, _b;
        var activeKeys = this.state.activeKeys.concat();
        if (!collapsed) {
            // 开启状态
            if (this.props.accordion) {
                activeKeys = [];
            }
            else {
                for (var i = 0; i < activeKeys.length; i++) {
                    if (activeKeys[i] === collapseId) {
                        activeKeys.splice(i, 1); // 剔除开启状态
                        break;
                    }
                }
            }
        }
        else {
            if (this.props.accordion) {
                activeKeys = [collapseId];
            }
            else {
                activeKeys.push(collapseId);
            }
        }
        (_b = (_a = this.props).onCollapseChange) === null || _b === void 0 ? void 0 : _b.call(_a, activeKeys, collapseId, activeKeys.indexOf(collapseId) === -1);
        this.setState({
            activeKeys: activeKeys
        });
    };
    CollapseGroup.prototype.render = function () {
        var _a = this.props, cx = _a.classnames, className = _a.className, style = _a.style, expandIconPosition = _a.expandIconPosition, children = _a.children, mobileUI = _a.mobileUI;
        return (_J$X_("div", { className: cx("CollapseGroup", {
                'icon-position-right': expandIconPosition === 'right'
            }, {
                'is-mobile': mobileUI
            }, className), style: style }, this.getItems(children)));
    };
    CollapseGroup.defaultProps = {
        className: '',
        accordion: false,
        expandIconPosition: 'left'
    };
    tslib.__decorate([
        amisCore.autobind,
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [Object, Boolean]),
        tslib.__metadata("design:returntype", void 0)
    ], CollapseGroup.prototype, "updateActiveKey", null);
    return CollapseGroup;
}(React__default["default"].Component));
var CollapseGroup$1 = amisCore.themeable(CollapseGroup);

exports["default"] = CollapseGroup$1;
