/**
 * amis-ui v3.6.3
 * Copyright 2018-2023 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var React = require('react');
var amisCore = require('amis-core');
var Button = require('../Button.js');
var Checkbox = require('../Checkbox.js');
var Form = require('../Form.js');
var FormField = require('../FormField.js');
var icons = require('../icons.js');
var InputBox = require('../InputBox.js');
var PickerContainer = require('../PickerContainer.js');
var Select = require('../Select.js');
var Textarea = require('../Textarea.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var __react_jsx__ = require('react');
var _J$X_ = (__react_jsx__["default"] || __react_jsx__).createElement;
(__react_jsx__["default"] || __react_jsx__).Fragment;
var schemaEditorItemPlaceholder = {
    key: 'JSONSchema.key',
    title: 'JSONSchema.title',
    description: 'JSONSchema.description',
    default: 'JSONSchema.default',
    empty: 'placeholder.empty'
};
var SchemaEditorItemCommon = /** @class */ (function (_super) {
    tslib.__extends(SchemaEditorItemCommon, _super);
    function SchemaEditorItemCommon() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SchemaEditorItemCommon.prototype.handleTypeChange = function (type) {
        var _a;
        var _b = this.props, value = _b.value, onChange = _b.onChange, onTypeChange = _b.onTypeChange;
        var newValue = {
            type: type,
            title: value === null || value === void 0 ? void 0 : value.title
        };
        newValue = (_a = onTypeChange === null || onTypeChange === void 0 ? void 0 : onTypeChange(type, newValue, value)) !== null && _a !== void 0 ? _a : newValue;
        onChange === null || onChange === void 0 ? void 0 : onChange(newValue);
    };
    SchemaEditorItemCommon.prototype.handlePropsChange = function (newValue) {
        var _a = this.props, onChange = _a.onChange, value = _a.value;
        onChange === null || onChange === void 0 ? void 0 : onChange(tslib.__assign(tslib.__assign({}, value), newValue));
    };
    SchemaEditorItemCommon.prototype.handleBeforeSubmit = function (form) {
        return form.submit();
    };
    SchemaEditorItemCommon.prototype.renderCommon = function () {
        var _a = this.props, value = _a.value, __ = _a.translate, typeMutable = _a.typeMutable, disabled = _a.disabled, cx = _a.classnames, required = _a.required, onRequiredChange = _a.onRequiredChange, renderExtraProps = _a.renderExtraProps, renderModalProps = _a.renderModalProps, enableAdvancedSetting = _a.enableAdvancedSetting, popOverContainer = _a.popOverContainer, prefix = _a.prefix, affix = _a.affix, types = _a.types, placeholder = _a.placeholder, mobileUI = _a.mobileUI;
        return (_J$X_(React__default["default"].Fragment, null,
            prefix,
            types.length > 1 ? (_J$X_(Select["default"], { options: types, className: cx('SchemaEditor-type'), value: (value === null || value === void 0 ? void 0 : value.$ref) || (value === null || value === void 0 ? void 0 : value.type) || 'string', onChange: this.handleTypeChange, clearable: false, disabled: disabled || typeMutable === false, simpleValue: true, mobileUI: mobileUI, popOverContainer: popOverContainer })) : null,
            onRequiredChange ? (_J$X_(Checkbox["default"], { className: cx('SchemaEditor-required'), label: __('Required'), value: required, onChange: onRequiredChange, disabled: disabled || typeMutable === false })) : null, renderExtraProps === null || renderExtraProps === void 0 ? void 0 :
            renderExtraProps(value, this.handlePropsChange),
            enableAdvancedSetting ? (_J$X_(PickerContainer["default"], { mobileUI: mobileUI, value: value, bodyRender: function (_a) {
                    var isOpened = _a.isOpened, value = _a.value, onChange = _a.onChange, ref = _a.ref;
                    return isOpened ? (_J$X_(Form["default"], { defaultValue: value, onSubmit: onChange, ref: ref }, function (_a) {
                        var control = _a.control, getValues = _a.getValues, setValue = _a.setValue;
                        return (_J$X_(React__default["default"].Fragment, null,
                            _J$X_(FormField.Controller, { label: __('JSONSchema.title'), name: "title", control: control, rules: { maxLength: 20 }, isRequired: true, render: function (_a) {
                                    var _b;
                                    var field = _a.field;
                                    return (_J$X_(InputBox["default"], tslib.__assign({}, field, { disabled: disabled, placeholder: __((_b = placeholder === null || placeholder === void 0 ? void 0 : placeholder.title) !== null && _b !== void 0 ? _b : ''), mobileUI: mobileUI })));
                                } }),
                            _J$X_(FormField.Controller, { label: __('JSONSchema.description'), name: "description", control: control, render: function (_a) {
                                    var _b;
                                    var field = _a.field;
                                    return (_J$X_(Textarea["default"], tslib.__assign({}, field, { disabled: disabled, mobileUI: mobileUI, placeholder: __((_b = placeholder === null || placeholder === void 0 ? void 0 : placeholder.description) !== null && _b !== void 0 ? _b : '') })));
                                } }),
                            _J$X_(FormField.Controller, { label: __('JSONSchema.default'), name: "default", control: control, render: function (_a) {
                                    var _b;
                                    var field = _a.field;
                                    return (_J$X_(InputBox["default"], tslib.__assign({}, field, { disabled: disabled, placeholder: __((_b = placeholder === null || placeholder === void 0 ? void 0 : placeholder.default) !== null && _b !== void 0 ? _b : ''), mobileUI: mobileUI })));
                                } }), renderModalProps === null || renderModalProps === void 0 ? void 0 :
                            renderModalProps(getValues(), function (values) {
                                Object.keys(values).forEach(function (key) {
                                    return setValue(key, values[key]);
                                });
                            })));
                    })) : null;
                }, beforeConfirm: this.handleBeforeSubmit, onConfirm: this.handlePropsChange, title: __('SubForm.editDetail'), popOverContainer: popOverContainer }, function (_a) {
                var onClick = _a.onClick;
                return (_J$X_(Button["default"], { disabled: disabled || !!(value === null || value === void 0 ? void 0 : value.$ref), className: cx('SchemaEditor-btn'), onClick: onClick },
                    _J$X_(icons.Icon, { icon: "setting", className: "icon" })));
            })) : null,
            affix));
    };
    SchemaEditorItemCommon.prototype.render = function () {
        var cx = this.props.classnames;
        return _J$X_("div", { className: cx('SchemaEditorItem') }, this.renderCommon());
    };
    tslib.__decorate([
        amisCore.autobind,
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [Object]),
        tslib.__metadata("design:returntype", void 0)
    ], SchemaEditorItemCommon.prototype, "handleTypeChange", null);
    tslib.__decorate([
        amisCore.autobind,
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [Object]),
        tslib.__metadata("design:returntype", void 0)
    ], SchemaEditorItemCommon.prototype, "handlePropsChange", null);
    tslib.__decorate([
        amisCore.autobind,
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [Object]),
        tslib.__metadata("design:returntype", void 0)
    ], SchemaEditorItemCommon.prototype, "handleBeforeSubmit", null);
    return SchemaEditorItemCommon;
}(React__default["default"].Component));

exports.SchemaEditorItemCommon = SchemaEditorItemCommon;
exports.schemaEditorItemPlaceholder = schemaEditorItemPlaceholder;
