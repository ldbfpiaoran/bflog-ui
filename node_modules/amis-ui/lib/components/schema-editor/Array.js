/**
 * amis-ui v3.6.3
 * Copyright 2018-2023 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var React = require('react');
var amisCore = require('amis-core');
var icons = require('../icons.js');
var Common = require('./Common.js');
var Item = require('./Item.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var __react_jsx__ = require('react');
var _J$X_ = (__react_jsx__["default"] || __react_jsx__).createElement;
(__react_jsx__["default"] || __react_jsx__).Fragment;
var SchemaEditorItemArray = /** @class */ (function (_super) {
    tslib.__extends(SchemaEditorItemArray, _super);
    function SchemaEditorItemArray() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            collapsed: false
        };
        return _this;
    }
    SchemaEditorItemArray.prototype.toggleCollapsed = function () {
        this.setState({
            collapsed: !this.state.collapsed
        });
    };
    SchemaEditorItemArray.prototype.handleItemsChange = function (items) {
        var _a, _b;
        var value = tslib.__assign(tslib.__assign({}, this.props.value), { type: 'array', items: items });
        (_b = (_a = this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, value);
    };
    SchemaEditorItemArray.prototype.renderItems = function () {
        var _a = this.props, cx = _a.classnames, value = _a.value, renderExtraProps = _a.renderExtraProps, renderModalProps = _a.renderModalProps, locale = _a.locale, __ = _a.translate, classPrefix = _a.classPrefix, disabled = _a.disabled, showInfo = _a.showInfo, types = _a.types, onTypeChange = _a.onTypeChange, enableAdvancedSetting = _a.enableAdvancedSetting, popOverContainer = _a.popOverContainer, placeholder = _a.placeholder, mobileUI = _a.mobileUI;
        var items = (value === null || value === void 0 ? void 0 : value.items) || {
            type: 'string'
        };
        return (_J$X_("div", { className: cx('SchemaEditorProps SchemaEditorArrayProps', {
                'SchemaEditorProps--depth': showInfo !== false
            }) },
            _J$X_(Item.SchemaEditorItem, { types: types, onTypeChange: onTypeChange, prefix: _J$X_("div", { className: cx('SchemaEditor-itemsLabel') }, __('JSONSchema.array_items')), value: items, onChange: this.handleItemsChange, renderExtraProps: renderExtraProps, renderModalProps: renderModalProps, locale: locale, translate: __, classnames: cx, classPrefix: classPrefix, disabled: disabled || !!(items === null || items === void 0 ? void 0 : items.$ref), enableAdvancedSetting: enableAdvancedSetting, popOverContainer: popOverContainer, placeholder: placeholder, mobileUI: mobileUI })));
    };
    SchemaEditorItemArray.prototype.render = function () {
        var _a = this.props, cx = _a.classnames, showInfo = _a.showInfo; _a.disabled;
        return (_J$X_("div", { className: cx('SchemaEditorItem SchemaEditorArray') },
            showInfo !== false ? (_J$X_(React__default["default"].Fragment, null,
                _J$X_("a", { className: cx('SchemaEditor-caret', {
                        'is-collapsed': this.state.collapsed
                    }), onClick: this.toggleCollapsed },
                    _J$X_(icons.Icon, { icon: "caret", className: "icon" })),
                this.renderCommon())) : null,
            this.state.collapsed ? null : this.renderItems()));
    };
    tslib.__decorate([
        amisCore.autobind,
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", []),
        tslib.__metadata("design:returntype", void 0)
    ], SchemaEditorItemArray.prototype, "toggleCollapsed", null);
    tslib.__decorate([
        amisCore.autobind,
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [Object]),
        tslib.__metadata("design:returntype", void 0)
    ], SchemaEditorItemArray.prototype, "handleItemsChange", null);
    return SchemaEditorItemArray;
}(Common.SchemaEditorItemCommon));

exports.SchemaEditorItemArray = SchemaEditorItemArray;
