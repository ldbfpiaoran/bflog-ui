/**
 * amis-ui v3.6.3
 * Copyright 2018-2023 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var React = require('react');
var amisCore = require('amis-core');
var GroupedSelection = require('../GroupedSelection.js');
var Tabs = require('../Tabs.js');
var TreeSelection = require('../TreeSelection.js');
var SearchBox = require('../SearchBox.js');
var Badge = require('../Badge.js');
var PopOverContainer = require('../PopOverContainer.js');
var matchSorter = require('match-sorter');
var TooltipWrapper = require('../TooltipWrapper.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var __react_jsx__ = require('react');
var _J$X_ = (__react_jsx__["default"] || __react_jsx__).createElement;
(__react_jsx__["default"] || __react_jsx__).Fragment;
// 数组成员读取
var memberOpers = [
    {
        label: '取该成员的记录',
        value: 'ARRAYMAP(${arr}, item => item.${member})',
        description: '即该列所有记录'
    },
    {
        label: '取符合条件的该成员的记录',
        value: 'ARRAYFILTER(ARRAYMAP(${arr}, item => item.${member}), item => item === 条件)',
        description: '即该列所有记录中符合条件的记录，需补充条件，例如：item === 1'
    },
    {
        label: '取列表中符合该成员条件的记录',
        value: 'ARRAYFILTER(${arr}, item => item.${member} === 条件)',
        description: '即当前列表中所有符合该成员条件的记录，需补充成员条件，例如：item.xxx === 1'
    },
    {
        label: '取列表中符合该成员条件的记录总数',
        value: 'COUNT(ARRAYFILTER(${arr}, item => item.${member} === 条件))',
        description: '即当前列表中所有符合该成员条件的记录总数，需补充成员条件，例如：item.xxx === 1'
    },
    {
        label: '取该成员去重之后的总数',
        value: 'COUNT(UNIQ(${arr}, item.${member}))',
        description: '即对该成员记录进行去重，并统计总数'
    },
    {
        label: '取该成员的总和',
        value: 'SUM(ARRAYMAP(${arr}, item => item.${member}))',
        description: '即计算该成员记录的总和，需确认该成员记录均为数字类型'
    },
    {
        label: '取该成员的平均值',
        value: 'AVG(ARRAYMAP(${arr}, item => item.${member}))',
        description: '即计算该成员记录的平均值，需确认该成员记录均为数字类型'
    },
    {
        label: '取该成员的最大值',
        value: 'MAX(ARRAYMAP(${arr}, item => item.${member}))',
        description: '即计算该成员记录中最大值，需确认该成员记录均为数字类型'
    },
    {
        label: '取该成员的最小值',
        value: 'MIN(ARRAYMAP(${arr}, item => item.${member}))',
        description: '即计算该成员记录中最小值，需确认该成员记录均为数字类型'
    }
];
function VariableList(props) {
    var variableListRef = React__default["default"].useRef(null);
    var list = props.data, className = props.className, cx = props.classnames, _a = props.tabsMode, tabsMode = _a === void 0 ? 'line' : _a, themePrefix = props.classPrefix, itemClassName = props.itemClassName, selectMode = props.selectMode, onSelect = props.onSelect, placeholderRender = props.placeholderRender, selfVariableName = props.selfVariableName, expandTree = props.expandTree;
    var _b = tslib.__read(React__default["default"].useState(list), 2), filterVars = _b[0], setFilterVars = _b[1];
    var classPrefix = "".concat(themePrefix, "FormulaEditor-VariableList");
    React.useEffect(function () {
        var data = props.data;
        if (data) {
            setFilterVars(data);
        }
    }, [props.data]);
    var itemRender = props.itemRender && typeof props.itemRender === 'function'
        ? props.itemRender
        : function (option, states) {
            var _a;
            return (_J$X_("div", null,
                _J$X_("div", { className: cx("".concat(classPrefix, "-item"), itemClassName) },
                    option.label &&
                        selfVariableName &&
                        option.value === selfVariableName && (_J$X_(Badge.Badge, { classnames: cx, badge: {
                            mode: 'text',
                            text: 'self',
                            offset: [15, 2]
                        } },
                        _J$X_("label", null, option.label))),
                    option.memberDepth === undefined &&
                        option.label &&
                        (!selfVariableName || option.value !== selfVariableName) && (_J$X_(TooltipWrapper["default"], { tooltip: (_a = option.description) !== null && _a !== void 0 ? _a : option.label, tooltipTheme: "dark" },
                        _J$X_("label", null, option.label))),
                    option.memberDepth !== undefined &&
                        option.label &&
                        (!selfVariableName || option.value !== selfVariableName) ? (option.memberDepth < 2 ? (_J$X_(PopOverContainer.PopOverContainer, { popOverContainer: function () {
                            return document.querySelector(".".concat(cx('FormulaPicker-Modal')));
                        }, popOverRender: function (_a) {
                            var onClose = _a.onClose;
                            return (_J$X_("ul", { className: cx("".concat(classPrefix, "-item-oper")) }, memberOpers.map(function (item, i) {
                                return (_J$X_(TooltipWrapper["default"], { tooltip: item.description, tooltipTheme: "dark" },
                                    _J$X_("li", { key: i, onClick: function () {
                                            return handleMemberClick(tslib.__assign(tslib.__assign({}, item), { isMember: true }), option, onClose);
                                        } },
                                        _J$X_("span", null, item.label))));
                            })));
                        } }, function (_a) {
                        var _b;
                        var onClick = _a.onClick; _a.ref; _a.isOpened;
                        return (_J$X_(TooltipWrapper["default"], { tooltip: (_b = option.description) !== null && _b !== void 0 ? _b : option.label, tooltipTheme: "dark" },
                            _J$X_("label", { onClick: onClick }, option.label)));
                    })) : (_J$X_("label", null, option.label))) : null,
                    (option === null || option === void 0 ? void 0 : option.tag) ? (_J$X_("span", { className: cx("".concat(classPrefix, "-item-tag")) }, option.tag)) : null)));
        };
    function handleMemberClick(item, option, onClose) {
        // todo：暂时只提供一层的快捷操作
        var lastPointIdx = option.value.lastIndexOf('.');
        // const firstPointIdx = option.value.indexOf('.');
        var arr = option.value.substring(0, lastPointIdx);
        var member = option.value.substring(lastPointIdx + 1);
        var value = item.value
            .replace('${arr}', arr)
            .replace('${member}', member);
        onClose === null || onClose === void 0 ? void 0 : onClose();
        onSelect === null || onSelect === void 0 ? void 0 : onSelect(tslib.__assign(tslib.__assign({}, item), { label: value, value: value }));
    }
    function onSearch(term) {
        var tree = amisCore.filterTree(list, function (i, key, level, paths) {
            return !!((Array.isArray(i.children) && i.children.length) ||
                !!matchSorter.matchSorter([i].concat(paths), term, {
                    keys: ['label', 'value'],
                    threshold: matchSorter.matchSorter.rankings.CONTAINS
                }).length);
        }, 1, true);
        setFilterVars(!term ? list : tree);
    }
    function renderSearchBox() {
        return (_J$X_("div", { className: cx('FormulaEditor-VariableList-searchBox') },
            _J$X_(SearchBox["default"], { mini: false, onSearch: onSearch, mobileUI: props.mobileUI })));
    }
    function handleChange(item) {
        if (item.isMember || item.memberDepth !== undefined) {
            return;
        }
        onSelect === null || onSelect === void 0 ? void 0 : onSelect(item);
    }
    return (_J$X_("div", { className: cx(className, 'FormulaEditor-VariableList', selectMode && "FormulaEditor-VariableList-".concat(selectMode)), ref: variableListRef }, selectMode === 'tabs' ? (_J$X_(Tabs["default"], { tabsMode: tabsMode, className: cx("".concat(classPrefix, "-base ").concat(classPrefix, "-tabs")) }, filterVars.map(function (item, index) { return (_J$X_(Tabs.Tab, { className: cx("".concat(classPrefix, "-tab")), eventKey: index, key: index, title: item.label },
        _J$X_(VariableList, { classnames: cx, classPrefix: "".concat(classPrefix, "-sub-"), className: cx("".concat(classPrefix, "-sub")), itemRender: itemRender, placeholderRender: placeholderRender, selectMode: item.selectMode, data: item.children, onSelect: handleChange, selfVariableName: selfVariableName }))); }))) : selectMode === 'tree' ? (_J$X_("div", { className: cx('FormulaEditor-VariableList-body') },
        renderSearchBox(),
        _J$X_(TreeSelection["default"], { itemRender: itemRender, placeholderRender: placeholderRender, className: cx("".concat(classPrefix, "-base"), 'is-scrollable'), multiple: false, expand: expandTree ? 'all' : 'none', options: filterVars, onChange: function (item) { return handleChange(item); } }))) : (_J$X_("div", { className: cx('FormulaEditor-VariableList-body') },
        renderSearchBox(),
        _J$X_(GroupedSelection["default"], { itemRender: itemRender, placeholderRender: placeholderRender, className: cx("".concat(classPrefix, "-base"), 'is-scrollable'), multiple: false, options: filterVars, onChange: function (item) { return handleChange(item); } })))));
}
var VariableList$1 = amisCore.themeable(VariableList);

exports["default"] = VariableList$1;
